{"version":3,"sources":["webpack://src/sections/Suppliers/GeneratePayment/Order/_rules.module.scss","webpack://../bancor-components/Style/Layout/Flex.scss","webpack://../@pkg/react-storybook/Bundle/Theme/_index.scss"],"names":[],"mappings":"AAYA,0CC6CI,YAAA,CCoFQ,qBAhBO,CAgBP,sBAhBO,CAgBP,yBAhBO,CAgBP,4BAhBO,CF9Gf,UAAA,CAEA,2EE4HQ,yBAhBO,CAgBP,4BAhBO,CDpEf,YAAA,CCoFQ,kBAzCD,CAyCC,kBAhBO,CFzGX,YAAA,CAAA,OAAA,CACA,eAAA,CAIR,yCCgCI,YAAA,CCoFQ,6BAhBO,CAgBP,sBAhBO,CAgBP,4BAhBO,CAgBP,yBAhBO,CAgBP,2BAhBO,CAgBP,4BAhBO,CFhGf,UAAA,CACA,aAAA,CAAA,QAAA,CAEA,yEE6GQ,wBAhBO,CFxFnB,8BEwGY,yBAhBO,CFtFf,wDEsGQ,YAhBO,CAgBP,4BAhBO,CFlFX,2FEkGI,4BAhBO,CAgBP,sCAhBO,CAgBP,wBAhBO,CF7Ef,oDCSA,YAAA,CCoFQ,qBAhBO,CAgBP,4BAhBO,CAgBP,2BAhBO,CF1EX,UAAA,CACA,0FEyFI,4BAhBO,CAgBP,2BAhBO,CAgBP,0BAhBO,CFpEf,gEAAA,YAAA,CEoFQ,qBAhBO,CAgBP,oBAhBO,CAgBP,yBAhBO,CAgBP,4BAhBO,CAgBP,oCAhBO,CAgBP,oCAhBO,CAgBP,sBAhBO,CF9DX,UAAA,CAEA,mNE4EI,2BAhBO","file":"41.b0e6613f.chunk.css","sourcesContent":["@use \"@app/bancor-components/Element/Button\";\n@use \"@app/bancor-components/Element/Text\";\n@use \"@app/bancor-components/Style/Layout/Margin\";\n@use \"@app/bancor-components/Style/Color\";\n@use \"@app/bancor-components/Style/Layout/Flex\";\n@use \"@app/bancor-components/Element/AmountFormatter\";\n@use \"@app/bancor-components/Style/Layout/Display\";\n@use \"@app/bancor-components/Style/Font\";\n@use \"@app/bancor-components/Style/Border\";\n@use \"@app/bancor-components/Style/Layout\";\n@use \"@app/bancor-components/Style/Layout/Padding\";\n\n.transferDataOrderContainer {\n    @include Flex.set($dir: column, $align: start);\n    @include Margin.set($top: beta, $bottom: beta);\n    width: 100%;\n\n    .addTransferButton {\n        @include Margin.set($top: alpha, $bottom: delta);\n        @include Flex.set($dir: row, $align: center);\n        gap: 8px;\n        max-width: 300px;\n    }\n}\n\n.orderPaymentDataContainer {\n    @include Flex.set($justify: between, $align: start);\n    @include Margin.set($bottom: gamma, $top: gamma);\n    @include Padding.set($left: alpha, $right: alpha);\n    width: 100%;\n    gap: 16px;\n\n    .orderDataContent {\n        @include Color.set($fg: \"black\");\n    }\n}\n\n.orderContainer {\n    @include Margin.set($top: gamma);\n    .orderTitle {\n        @include Display.set($display: flex);\n        @include Margin.set($bottom: beta);\n\n        &#{Text.$selector} {\n            @include Font.set($size: delta, $family: heading);\n            @include Color.set($fg: \"black\");\n        }\n    }\n    .footer {\n        @include Flex.set($dir: column);\n        @include Padding.set($right: alpha, $left: alpha);\n        width: Layout.get-max-width(alpha);\n        #{Button.$selector} {\n            @include Margin.set($bottom: alpha, $right: beta, $left: beta);\n        }\n    }\n    \n    .transferDataAmount {\n        @include Flex.set($dir: column, $align: end);\n        @include Margin.set($top: beta, $bottom: beta);\n        @include Color.set($bg: \"info-0\");\n        @include Border.set($radius: delta);\n        @include Padding.set($preset: alpha);\n        width: 100%;\n\n        #{Text.$selector},\n        #{AmountFormatter.$selector} {\n            @include Margin.set($right: beta);\n        }\n    }\n}\n","@use \"sass:map\";\n@use \"sass:meta\";\n@use \"@pkg/react-storybook/Bundle/Theme\";\n\n$props: (\n    justify: (justify-content, (\n        start: flex-start,\n        end: flex-end,\n        center: center,\n        between: space-between,\n        around: space-around,\n        evenly: space-evenly,\n    )),\n    align: (align-items, (\n        default: stretch,\n        start: flex-start,\n        end: flex-end,\n        center: center,\n        base: baseline,\n    )),\n    wrap: (flex-wrap, (\n        default: nowrap,\n        wrap: wrap,\n        reverse: wrap-reverse,\n    )),\n    grow: (flex-grow, (\n        default: auto,\n        none: 0,\n        alpha: 1,\n        beta: 2,\n        gamma: 3\n    )),\n    shrink: (flex-shrink, (\n        default: initial,\n        none: 0,\n        alpha: 1,\n        beta: 2,\n        gamma: 3\n    )),\n    dir: (flex-direction, (\n        default: row,\n        column: column,\n        row-reverse: row-reverse,\n        column-reverse: column-reverse,\n    )),\n);\n\n$presets: (\n    default: (\n        justify: default,\n        align: default,\n        wrap: default,\n    )\n);\n\n@mixin set($preset: null, $args...) {\n    $data: Theme.data-parse(meta.keywords($args), $preset, $props, $presets);\n    display: flex;\n    @include Theme.render(map.get($data, schema));\n}\n","@use \"sass:map\";\n@use \"sass:list\";\n@use \"sass:meta\";\n@use \"@pkg/styles/util\";\n\n@use \"../../Component\";\n@use \"./util/props\";\n@use \"./util/args\";\n@use \"./util/presets\";\n@use \"./util/extras\";\n\n$name: ThemePlatform;\n$type: Component.$type-bundle;\n$selector: Component.selector($name, $type);\n\n$name-consumer: #{$name + \"Consumer\"};\n$type-consumer: Component.$type-element;\n$selector-consumer: Component.selector($name-consumer, $type-consumer);\n\n$name-provider: #{$name + \"Provider\"};\n$type-provider: Component.$type-provider;\n$selector-provider: Component.selector($name-provider, $type-provider);\n\n// ------------------------------------------------------------------------------------------- FUNCS\n\n// Helper function that shortcuts the process of obtaining vars from the theme.\n@function vars-get($vars, $name) {\n    @if not util.is-map($vars) {\n        @error util.throwable($name: \"vars\", $type: \"map\", $value: $vars);\n    }\n    $vars: map.get($vars, $name);\n    @if not $vars {\n        @error util.throwable($name: \"var\", $type: $vars, $value: $name);\n    }\n    @return $vars;\n}\n\n// Returns a schema ready to be used by the Theme.render mixin\n// - $args:\n//   The arguments sent by the user so we can know that will be rendered.\n//   A map of prop-aliases and their respective value, which can override a preset.\n//   ie: (prop-alias<string>: prop-value-alias<string>, ...)\n// - $preset\n//   A string describing the theme that has to be applied.\n// - $props:\n//   A map containing all the info about specidied prop like:\n//   (prop-alias<string>: prop-tuple)\n//   where prop-tuple is:\n//   ie: (prop-name<string>, prop-possible-values<( prop-value-alias<string>: prop-value<string> )>)\n// - $extras\n//   A list of prop-alias that should not be rendered right away, but returned to be parsed later.\n//   ie: (<string>, <string>, ...)\n// - $presets\n// - A map of presets to be used as shortcuts for writing props.\n//   ie: (preset-name<string>: (prop-alias<string>: prop-value-alias<string>, ...), ...)\n@function data-parse($args:(), $preset: null, $props: (), $presets: (), $extras: null) {\n    // simple validation for extras\n    $is-extras-string: meta.type-of($extras) == \"string\";\n    $is-extras-list: list.length($extras) > 0 and meta.type-of($extras) == \"list\";\n    @if $extras and not $is-extras-string and not $is-extras-list {\n        @error util.throwable($name: \"extras\", $type: \"list\", $value:$extras);\n    }\n    $props: props.parse($props);\n    $args: args.parse($args, $extras);\n    $presets: presets.parse($presets, $extras);\n    @if $extras {\n        $extras: extras.parse(\n            $preset,\n            map.get($args, extras),\n            map.get($presets, extras)\n        );\n    }\n    @return (\n        schema: (\n            preset: $preset,\n            props: $props,\n            args: map.get($args, schema),\n            presets: map.get($presets, schema),\n        ),\n        extras: $extras,\n    );\n}\n\n\n// -------------------------------------------------------------------------------------------- MODS\n\n@function mod-negative($value) {\n    @return calc(#{$value} * -1);\n}\n\n// ------------------------------------------------------------------------------------------ MIXINS\n\n// Given a schema, render rules.\n@mixin render($schema, $mods: null) {\n    $schema-ref: (preset, props, args, presets);\n    $schema-key: map.keys($schema);\n    // do a simple checkup for schema\n    @if $schema-key != $schema-ref {\n        @error util.throwable($name: \"schema\", $type: $schema-ref, $value: $schema-key);\n    }\n    $args: map.get($schema, args);\n    // if a valid preset is provided, then use the preset as base and let args extend it.\n    // if the preset is empty or invalid, fail silently because it might be an \"extras\" preset.\n    $preset: map.get($schema, preset);\n    @if $preset {\n        $presets: map.get($schema, presets);\n        $current: map.get($presets, $preset);\n        @if $current {\n            $args: map.merge($current, $args);\n        }\n    }\n    // iterate argumens and resolve aliases to their corresponding prop:value\n    $props: map.get($schema, props);\n    $props-aliases: map.get($props, aliases);\n    $props-values: map.get($props, values);\n    @each $arg-key, $arg-val in $args {\n        $prop-key: map.get($props-aliases, $arg-key);\n        $values: map.get($props-values, $arg-key);\n        @if not $values {\n            @error \"Argument \\\"\" + $arg-key+ \"\\\", is an invalid prop.\";\n        }\n        // as a hidden feature, instead of complaining when an alias is not found,\n        // use the raw value instead, that way arbitrary css-values can be used.\n        // NOTE: this won't be publicly disclosed to disencourage devs to use raw-values\n        //       and use aliases instead.\n        $prop-val: map.get($values, $arg-val);\n        @if not $prop-val and $arg-val {\n            $prop-val: $arg-val;\n        }\n        @if $prop-val and $prop-key {\n            // if a mod (modifier) is sent, execute it upone current value.\n            @if $mods {\n                @each $mod-suffix in $mods {\n                    $mod-name: \"mod-#{$mod-suffix}\";\n                    @if not meta.function-exists($mod-name) {\n                        @error \"Invalid mod \\\"#{$mod-suffix}\\\".\";\n                    }\n                    $mod: meta.get-function($mod-name);\n                    $prop-val: meta.call($mod, $prop-val);\n                }\n            }\n            #{$prop-key}: $prop-val;\n        }\n    }\n}\n\n:export {\n    NAME_THEMEPLATFORM: $name;\n    TYPE_THEMEPLATFORM: $type;\n    NAME_CONSUMER_THEMEPLATFORM: $name-consumer;\n    TYPE_CONSUMER_THEMEPLATFORM: $type-consumer;\n    NAME_PROVIDER_THEMEPLATFORM: $name-provider;\n    TYPE_PROVIDER_THEMEPLATFORM: $type-provider;\n}\n"]}