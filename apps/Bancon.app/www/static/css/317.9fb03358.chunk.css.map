{"version":3,"sources":["webpack://src/pages/tools/ATMs/_rules.module.scss","webpack://../@pkg/react-storybook/Bundle/Theme/_index.scss"],"names":[],"mappings":"AAkBI,2EC2HQ,aAhBO,CAgBP,cAhBO,CDvGf,kEACI,oBAAA,CAGJ,0ECmHQ,eAhBO,CD/Ff,sFC+GQ,iBAhBO,CD7FX,kCAlBU,CAqBd,0EACI,mBAAA,CAMJ,kICmGQ,iBAhBO,CAgBP,YAhBO,CAgBP,SAhBO,CAgBP,OAhBO,CAgBP,2BAhBO,CD5Ef,gIC4FQ,0BAhBO,CAgBP,2BAhBO,CDrEf,oEACI,yBA1CU,CC8HN,iBAhBO,CDhEf,wDACI,kBAAA,CAIR,oBC2EY,iBAhBO,CAgBP,QAhBO,CAgBP,sBAhBO,CDxDf,UAAA,CAGJ,uBCqEY,YAhBO,CDnDf,UAAA,CAEA,uDCiEQ,gBAhBO,CAgBP,iBAhBO,CD7Cf,4CC6DQ,yCAhBO,CAgBP,iBAhBO,CDvCnB,0CCuDY,UAhBO","file":"317.9fb03358.chunk.css","sourcesContent":["@use \"@app/bancor-components/Container/BaseExternal\";\n@use \"@app/bancor-components/Container/BaseInternal\";\n@use \"@app/bancor-components/Element/Map\";\n@use \"@app/bancor-components/Style/Layout\";\n@use \"@app/bancor-components/Style/Layout/Display\";\n@use \"@app/bancor-components/Style/Layout/Margin\";\n@use \"@app/bancor-components/Style/Layout/Padding\";\n@use \"@app/bancor-components/Style/Layout/Position\";\n@use \"@app/bancor-components/Style/Layout/Flex\";\n@use \"@app/bancor-components/Style/Color\";\n@use \"@app/bancor-components/Element/Button\";\n@use \"@app/bancor-components/Style/Border\";\n@use \"@app/bancor-components/Element/Markers/UserMarker\";\n\n$external-height: calc(Layout.get-height(beta) - Layout.get-size(kappa));\n$internal-height: calc(Layout.get-height(beta) - BaseInternal.$size-header);\n\n#{BaseExternal.$selector} {\n    &.container {\n        @include Margin.set($left: none, $right: none);\n    }\n\n    article>header {\n        height: Layout.get-size(kappa);\n    }\n\n    article section>figure {\n        @include Margin.set($bottom: none);\n    }\n\n    #{Map.$selector} {\n        @include Position.set($position: relative);\n        height: $external-height;\n    }\n\n    .buttons {\n        top: Layout.get-space(lambda);\n    }\n}\n\n#{BaseExternal.$selector},\n.internalContainer {\n    .buttons {\n        @include Position.set($position: absolute);\n        @include Display.set($display: flex);\n        @include Position.set($z-index: iota, $right: none);\n        @include Margin.set($right: alpha);\n    }\n\n    .button {\n        @include Margin.set($left: alpha, $right: alpha);\n    }\n}\n\n.internalContainer {\n\n    #{Map.$selector} {\n        height: $internal-height;\n        @include Position.set($position: relative);\n    }\n\n    .buttons {\n        top: Layout.get-space(kappa);\n    }\n}\n\n.info {\n    @include Position.set($position: absolute, $bottom: none);\n    @include Padding.set(beta);\n    width: Layout.get-max-width(alpha);\n}\n\n.actions {\n    @include Display.set($display: flex);\n    width: Layout.get-max-width(alpha);\n\n    .searchInThisArea {\n        @include Margin.set($left: auto, $right: auto);\n    }\n\n    .focus {\n        @include Color.set($bg: \"transparent\");\n        @include Border.set($style: default);\n    }\n}\n\n#{UserMarker.$selector} {\n    @include Position.set($right: auto);\n}\n","@use \"sass:map\";\n@use \"sass:list\";\n@use \"sass:meta\";\n@use \"@pkg/styles/util\";\n\n@use \"../../Component\";\n@use \"./util/props\";\n@use \"./util/args\";\n@use \"./util/presets\";\n@use \"./util/extras\";\n\n$name: ThemePlatform;\n$type: Component.$type-bundle;\n$selector: Component.selector($name, $type);\n\n$name-consumer: #{$name + \"Consumer\"};\n$type-consumer: Component.$type-element;\n$selector-consumer: Component.selector($name-consumer, $type-consumer);\n\n$name-provider: #{$name + \"Provider\"};\n$type-provider: Component.$type-provider;\n$selector-provider: Component.selector($name-provider, $type-provider);\n\n// ------------------------------------------------------------------------------------------- FUNCS\n\n// Helper function that shortcuts the process of obtaining vars from the theme.\n@function vars-get($vars, $name) {\n    @if not util.is-map($vars) {\n        @error util.throwable($name: \"vars\", $type: \"map\", $value: $vars);\n    }\n    $vars: map.get($vars, $name);\n    @if not $vars {\n        @error util.throwable($name: \"var\", $type: $vars, $value: $name);\n    }\n    @return $vars;\n}\n\n// Returns a schema ready to be used by the Theme.render mixin\n// - $args:\n//   The arguments sent by the user so we can know that will be rendered.\n//   A map of prop-aliases and their respective value, which can override a preset.\n//   ie: (prop-alias<string>: prop-value-alias<string>, ...)\n// - $preset\n//   A string describing the theme that has to be applied.\n// - $props:\n//   A map containing all the info about specidied prop like:\n//   (prop-alias<string>: prop-tuple)\n//   where prop-tuple is:\n//   ie: (prop-name<string>, prop-possible-values<( prop-value-alias<string>: prop-value<string> )>)\n// - $extras\n//   A list of prop-alias that should not be rendered right away, but returned to be parsed later.\n//   ie: (<string>, <string>, ...)\n// - $presets\n// - A map of presets to be used as shortcuts for writing props.\n//   ie: (preset-name<string>: (prop-alias<string>: prop-value-alias<string>, ...), ...)\n@function data-parse($args:(), $preset: null, $props: (), $presets: (), $extras: null) {\n    // simple validation for extras\n    $is-extras-string: meta.type-of($extras) == \"string\";\n    $is-extras-list: list.length($extras) > 0 and meta.type-of($extras) == \"list\";\n    @if $extras and not $is-extras-string and not $is-extras-list {\n        @error util.throwable($name: \"extras\", $type: \"list\", $value:$extras);\n    }\n    $props: props.parse($props);\n    $args: args.parse($args, $extras);\n    $presets: presets.parse($presets, $extras);\n    @if $extras {\n        $extras: extras.parse(\n            $preset,\n            map.get($args, extras),\n            map.get($presets, extras)\n        );\n    }\n    @return (\n        schema: (\n            preset: $preset,\n            props: $props,\n            args: map.get($args, schema),\n            presets: map.get($presets, schema),\n        ),\n        extras: $extras,\n    );\n}\n\n\n// -------------------------------------------------------------------------------------------- MODS\n\n@function mod-negative($value) {\n    @return calc(#{$value} * -1);\n}\n\n// ------------------------------------------------------------------------------------------ MIXINS\n\n// Given a schema, render rules.\n@mixin render($schema, $mods: null) {\n    $schema-ref: (preset, props, args, presets);\n    $schema-key: map.keys($schema);\n    // do a simple checkup for schema\n    @if $schema-key != $schema-ref {\n        @error util.throwable($name: \"schema\", $type: $schema-ref, $value: $schema-key);\n    }\n    $args: map.get($schema, args);\n    // if a valid preset is provided, then use the preset as base and let args extend it.\n    // if the preset is empty or invalid, fail silently because it might be an \"extras\" preset.\n    $preset: map.get($schema, preset);\n    @if $preset {\n        $presets: map.get($schema, presets);\n        $current: map.get($presets, $preset);\n        @if $current {\n            $args: map.merge($current, $args);\n        }\n    }\n    // iterate argumens and resolve aliases to their corresponding prop:value\n    $props: map.get($schema, props);\n    $props-aliases: map.get($props, aliases);\n    $props-values: map.get($props, values);\n    @each $arg-key, $arg-val in $args {\n        $prop-key: map.get($props-aliases, $arg-key);\n        $values: map.get($props-values, $arg-key);\n        @if not $values {\n            @error \"Argument \\\"\" + $arg-key+ \"\\\", is an invalid prop.\";\n        }\n        // as a hidden feature, instead of complaining when an alias is not found,\n        // use the raw value instead, that way arbitrary css-values can be used.\n        // NOTE: this won't be publicly disclosed to disencourage devs to use raw-values\n        //       and use aliases instead.\n        $prop-val: map.get($values, $arg-val);\n        @if not $prop-val and $arg-val {\n            $prop-val: $arg-val;\n        }\n        @if $prop-val and $prop-key {\n            // if a mod (modifier) is sent, execute it upone current value.\n            @if $mods {\n                @each $mod-suffix in $mods {\n                    $mod-name: \"mod-#{$mod-suffix}\";\n                    @if not meta.function-exists($mod-name) {\n                        @error \"Invalid mod \\\"#{$mod-suffix}\\\".\";\n                    }\n                    $mod: meta.get-function($mod-name);\n                    $prop-val: meta.call($mod, $prop-val);\n                }\n            }\n            #{$prop-key}: $prop-val;\n        }\n    }\n}\n\n:export {\n    NAME_THEMEPLATFORM: $name;\n    TYPE_THEMEPLATFORM: $type;\n    NAME_CONSUMER_THEMEPLATFORM: $name-consumer;\n    TYPE_CONSUMER_THEMEPLATFORM: $type-consumer;\n    NAME_PROVIDER_THEMEPLATFORM: $name-provider;\n    TYPE_PROVIDER_THEMEPLATFORM: $type-provider;\n}\n"]}