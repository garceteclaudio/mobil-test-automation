{"version":3,"sources":["webpack://../bancor-components/Sections/Ticket/_rules.module.scss","webpack://../@pkg/react-storybook/Bundle/Theme/_index.scss","webpack://../bancor-components/Element/Image/_index.scss","webpack://../bancor-components/Style/Layout/Flex.scss","webpack://../bancor-components/Element/Button/_index.scss","webpack://src/pages/Modo/LinkCards/_rules.module.scss"],"names":[],"mappings":"AAgBQ,kEC6HI,YAhBO,CD1GX,iFC0HI,4BAhBO,CAgBP,wCAhBO,CAgBP,4BAhBO,CDvGP,qBAAA,CAEJ,kFCqHI,0BAhBO,CAgBP,2BAhBO,CCpGf,aAAA,CACA,sFACI,WAfW,CAgBX,UAfU,CFiBV,qEG2BJ,YAAA,CFoFQ,wBAhBO,CD3FX,0EGuBJ,YAAA,CFoFQ,sBAhBO,CAgBP,yBAhBO,CAgBP,4BAhBO,CDtFX,yFACI,mBAAA,CAGJ,8GCkGI,4BAhBO,CAgBP,wCAhBO,CAgBP,iBAzCD,CDrDH,oHC8FI,4BAhBO,CAgBP,iBAzCD,CAyCC,4BAhBO,CDxEf,yGCwFQ,YAhBO,CAgBP,yCAhBO,CAgBP,iBAhBO,CG/Gf,cAAA,CH+HQ,aAhBO,CG7Gf,6IH6HQ,0BAhBO,CAgBP,4BAhBO,CAgBP,qCAhBO,CAgBP,mCAhBO,CAgBP,iBAhBO,CAgBP,yBAhBO,CDjEX,mFCiFI,yBAhBO,CAgBP,4BAhBO,CI7GP,wFJ6HA,4BAhBO,CAgBP,4BAhBO,CAgBP,wCAhBO,CIrGX,qEJqHI,4BAhBO,CAgBP,4BAhBO,CIhGX,4FJgHI,4BAhBO,CI5FX,+FJ4GI,4BAhBO,CAgBP,qCAhBO,CIvFX,iIJuGI,4BAhBO,CIlFX,yGJkGI,yCAhBO,CAgBP,SAhBO,CAgBP,iBAhBO,CEpEf,YAAA,CFoFQ,6BAhBO,CAgBP,kBAhBO,CI7EP,UAAA,CACA,cAAA,CAKJ,sEJuFI,4BAhBO,CIlEf,sLJkFQ,yCAhBO,CAgBP,iBAhBO,CEpEf,YAAA,CFoFQ,6BAhBO,CAgBP,kBAhBO,CI7DX,cAAA,CAGJ,uDFVA,YAAA,CFoFQ,6BAhBO,CAgBP,kBAhBO,CIrDnB,iCFfI,YAAA,CFoFQ,qBAhBO,CAgBP,WAhBO,CIhDP,+CJgEA,YAhBO,CAgBP,yBAhBO,CAgBP,4BAhBO,CI7CH,6BAAA,CACA,mFJ4DJ,4BAhBO,CAgBP,kBAhBO,CIzCC,sBAAA,CACA,eAAA,CAGJ,qLJqDJ,gBAhBO,CAgBP,qCAhBO,CAgBP,4BAhBO","file":"169.f5f88c60.chunk.css","sourcesContent":["@use \".\" as this;\n@use \"@pkg/react-storybook/Component\";\n@use \"@app/bancor-components/Element/Button\";\n@use \"@app/bancor-components/Element/Image\";\n@use \"@app/bancor-components/Element/Text\";\n@use \"@app/bancor-components/Style/Shadow\";\n@use \"@app/bancor-components/Style/Border\";\n@use \"@app/bancor-components/Style/Font\";\n@use \"@app/bancor-components/Style/Layout\";\n@use \"@app/bancor-components/Style/Layout/Flex\";\n@use \"@app/bancor-components/Style/Layout/Margin\";\n@use \"@app/bancor-components/Style/Layout/Display\";\n@use \"@app/bancor-components/Style/Layout/Padding\";\n\n#{this.$selector} {\n    header {\n        .title {\n            @include Display.set($display: flex);\n        }\n        & #{Text.$selector} {\n            @include Font.set($size: iota, $weight: bold);\n            @include Margin.set($bottom: alpha);\n            word-break: break-word;\n        }\n        & #{Image.$selector} {\n            @include Image.asModoLogo;\n        }\n    }\n\n    section {\n        .actions {\n            @include Flex.set($justify: end);\n        }\n\n        .responseIcon {\n            @include Flex.set($justify: center);\n            @include Margin.set($top: beta, $bottom: alpha);\n        }\n\n        .responseIcon:last-child > svg {\n            width: Layout.get-size(lambda);\n        }\n\n        .responseTitle#{Text.$selector} {\n            @include Font.set($size: delta, $weight: bold, $align: center);\n        }\n\n        .responseDescription#{Text.$selector} {\n            @include Font.set($size: delta, $align: center);\n            @include Margin.set($bottom: gamma);\n        }\n    }\n\n    #{Button.$selector}.navigateButton {\n        @include Display.set($display: flex);\n        @include Button.asUnderlineLink;\n        @include Margin.set($bottom: none, $top: none, $left: auto, $right: auto);\n    }\n\n    footer {\n        #{Button.$selector} {\n            @include Margin.set($top: beta, $bottom: alpha);\n        }\n    }\n}\n","@use \"sass:map\";\n@use \"sass:list\";\n@use \"sass:meta\";\n@use \"@pkg/styles/util\";\n\n@use \"../../Component\";\n@use \"./util/props\";\n@use \"./util/args\";\n@use \"./util/presets\";\n@use \"./util/extras\";\n\n$name: ThemePlatform;\n$type: Component.$type-bundle;\n$selector: Component.selector($name, $type);\n\n$name-consumer: #{$name + \"Consumer\"};\n$type-consumer: Component.$type-element;\n$selector-consumer: Component.selector($name-consumer, $type-consumer);\n\n$name-provider: #{$name + \"Provider\"};\n$type-provider: Component.$type-provider;\n$selector-provider: Component.selector($name-provider, $type-provider);\n\n// ------------------------------------------------------------------------------------------- FUNCS\n\n// Helper function that shortcuts the process of obtaining vars from the theme.\n@function vars-get($vars, $name) {\n    @if not util.is-map($vars) {\n        @error util.throwable($name: \"vars\", $type: \"map\", $value: $vars);\n    }\n    $vars: map.get($vars, $name);\n    @if not $vars {\n        @error util.throwable($name: \"var\", $type: $vars, $value: $name);\n    }\n    @return $vars;\n}\n\n// Returns a schema ready to be used by the Theme.render mixin\n// - $args:\n//   The arguments sent by the user so we can know that will be rendered.\n//   A map of prop-aliases and their respective value, which can override a preset.\n//   ie: (prop-alias<string>: prop-value-alias<string>, ...)\n// - $preset\n//   A string describing the theme that has to be applied.\n// - $props:\n//   A map containing all the info about specidied prop like:\n//   (prop-alias<string>: prop-tuple)\n//   where prop-tuple is:\n//   ie: (prop-name<string>, prop-possible-values<( prop-value-alias<string>: prop-value<string> )>)\n// - $extras\n//   A list of prop-alias that should not be rendered right away, but returned to be parsed later.\n//   ie: (<string>, <string>, ...)\n// - $presets\n// - A map of presets to be used as shortcuts for writing props.\n//   ie: (preset-name<string>: (prop-alias<string>: prop-value-alias<string>, ...), ...)\n@function data-parse($args:(), $preset: null, $props: (), $presets: (), $extras: null) {\n    // simple validation for extras\n    $is-extras-string: meta.type-of($extras) == \"string\";\n    $is-extras-list: list.length($extras) > 0 and meta.type-of($extras) == \"list\";\n    @if $extras and not $is-extras-string and not $is-extras-list {\n        @error util.throwable($name: \"extras\", $type: \"list\", $value:$extras);\n    }\n    $props: props.parse($props);\n    $args: args.parse($args, $extras);\n    $presets: presets.parse($presets, $extras);\n    @if $extras {\n        $extras: extras.parse(\n            $preset,\n            map.get($args, extras),\n            map.get($presets, extras)\n        );\n    }\n    @return (\n        schema: (\n            preset: $preset,\n            props: $props,\n            args: map.get($args, schema),\n            presets: map.get($presets, schema),\n        ),\n        extras: $extras,\n    );\n}\n\n\n// -------------------------------------------------------------------------------------------- MODS\n\n@function mod-negative($value) {\n    @return calc(#{$value} * -1);\n}\n\n// ------------------------------------------------------------------------------------------ MIXINS\n\n// Given a schema, render rules.\n@mixin render($schema, $mods: null) {\n    $schema-ref: (preset, props, args, presets);\n    $schema-key: map.keys($schema);\n    // do a simple checkup for schema\n    @if $schema-key != $schema-ref {\n        @error util.throwable($name: \"schema\", $type: $schema-ref, $value: $schema-key);\n    }\n    $args: map.get($schema, args);\n    // if a valid preset is provided, then use the preset as base and let args extend it.\n    // if the preset is empty or invalid, fail silently because it might be an \"extras\" preset.\n    $preset: map.get($schema, preset);\n    @if $preset {\n        $presets: map.get($schema, presets);\n        $current: map.get($presets, $preset);\n        @if $current {\n            $args: map.merge($current, $args);\n        }\n    }\n    // iterate argumens and resolve aliases to their corresponding prop:value\n    $props: map.get($schema, props);\n    $props-aliases: map.get($props, aliases);\n    $props-values: map.get($props, values);\n    @each $arg-key, $arg-val in $args {\n        $prop-key: map.get($props-aliases, $arg-key);\n        $values: map.get($props-values, $arg-key);\n        @if not $values {\n            @error \"Argument \\\"\" + $arg-key+ \"\\\", is an invalid prop.\";\n        }\n        // as a hidden feature, instead of complaining when an alias is not found,\n        // use the raw value instead, that way arbitrary css-values can be used.\n        // NOTE: this won't be publicly disclosed to disencourage devs to use raw-values\n        //       and use aliases instead.\n        $prop-val: map.get($values, $arg-val);\n        @if not $prop-val and $arg-val {\n            $prop-val: $arg-val;\n        }\n        @if $prop-val and $prop-key {\n            // if a mod (modifier) is sent, execute it upone current value.\n            @if $mods {\n                @each $mod-suffix in $mods {\n                    $mod-name: \"mod-#{$mod-suffix}\";\n                    @if not meta.function-exists($mod-name) {\n                        @error \"Invalid mod \\\"#{$mod-suffix}\\\".\";\n                    }\n                    $mod: meta.get-function($mod-name);\n                    $prop-val: meta.call($mod, $prop-val);\n                }\n            }\n            #{$prop-key}: $prop-val;\n        }\n    }\n}\n\n:export {\n    NAME_THEMEPLATFORM: $name;\n    TYPE_THEMEPLATFORM: $type;\n    NAME_CONSUMER_THEMEPLATFORM: $name-consumer;\n    TYPE_CONSUMER_THEMEPLATFORM: $type-consumer;\n    NAME_PROVIDER_THEMEPLATFORM: $name-provider;\n    TYPE_PROVIDER_THEMEPLATFORM: $type-provider;\n}\n","@use \"@pkg/react-storybook/Component\";\n@use \"@app/bancor-components/Style/Layout\";\n@use \"@app/bancor-components/Style/Layout/Flex\";\n@use \"@app/bancor-components/Style/Layout/Margin\";\n@use \"@app/bancor-components/Style/Layout/Position\";\n@use \"@app/bancor-components/Style/Color\";\n@use \"@app/bancor-components/Style/Border\";\n\n$name: Image;\n$type: Component.$type-element;\n$selector: Component.selector($name, $type);\n\n$height-logo-modo: 18px;\n$width-logo-modo: 80px;\n\n@mixin asModoBadge {\n    @include Position.set($position: absolute, $z-index: alpha);\n    @include Flex.set($align: \"center\", $justify: \"center\");\n    @include Border.set($style: gamma, $width: beta, $color: \"white\", $radius: kappa );\n    @include Color.set($bg: \"white\");\n    box-sizing: border-box;\n}\n\n@mixin asModoLogo {\n    @include Margin.set($left: alpha, $right: alpha);\n    flex: 0 0 $width-logo-modo;\n    svg {\n        height: $height-logo-modo;\n        width: $width-logo-modo;\n    }\n}\n\n:export {\n    NAME_IMAGE: $name;\n    TYPE_IMAGE: $type;\n}\n","@use \"sass:map\";\n@use \"sass:meta\";\n@use \"@pkg/react-storybook/Bundle/Theme\";\n\n$props: (\n    justify: (justify-content, (\n        start: flex-start,\n        end: flex-end,\n        center: center,\n        between: space-between,\n        around: space-around,\n        evenly: space-evenly,\n    )),\n    align: (align-items, (\n        default: stretch,\n        start: flex-start,\n        end: flex-end,\n        center: center,\n        base: baseline,\n    )),\n    wrap: (flex-wrap, (\n        default: nowrap,\n        wrap: wrap,\n        reverse: wrap-reverse,\n    )),\n    grow: (flex-grow, (\n        default: auto,\n        none: 0,\n        alpha: 1,\n        beta: 2,\n        gamma: 3\n    )),\n    shrink: (flex-shrink, (\n        default: initial,\n        none: 0,\n        alpha: 1,\n        beta: 2,\n        gamma: 3\n    )),\n    dir: (flex-direction, (\n        default: row,\n        column: column,\n        row-reverse: row-reverse,\n        column-reverse: column-reverse,\n    )),\n);\n\n$presets: (\n    default: (\n        justify: default,\n        align: default,\n        wrap: default,\n    )\n);\n\n@mixin set($preset: null, $args...) {\n    $data: Theme.data-parse(meta.keywords($args), $preset, $props, $presets);\n    display: flex;\n    @include Theme.render(map.get($data, schema));\n}\n","@use \"@pkg/react-storybook/Component\";\n@use \"@app/bancor-components/Style/Font\";\n@use \"@app/bancor-components/Style/Color\";\n@use \"@app/bancor-components/Style/Border\";\n@use \"@app/bancor-components/Element/Text\";\n\n$name: Button;\n$type: Component.$type-element;\n$selector: Component.selector($name, $type);\n\n\n@mixin asUnderlineLink {\n    @include Color.set($bg: \"transparent\");\n    @include Border.set($style: default);\n    cursor: pointer;\n\n    #{Text.$selector} {\n        @include Color.set($fg: \"primary\");\n        @include Font.set(\n            $size: gamma,\n            $weight: medium,\n            $family: \"default\",\n            $align: default,\n            $deco: under\n        );\n    }\n}\n\n:export {\n    NAME_BUTTON: $name;\n    TYPE_BUTTON: $type;\n}\n","@use \"@app/bancor-components/Element/Button\";\n@use \"@app/bancor-components/Element/Text\";\n@use \"@app/bancor-components/Element/DateTime\";\n@use \"@app/bancor-components/Style/Color\";\n@use \"@app/bancor-components/Style/Shadow\";\n@use \"@app/bancor-components/Style/Border\";\n@use \"@app/bancor-components/Style/Font\";\n@use \"@app/bancor-components/Style/Layout\";\n@use \"@app/bancor-components/Style/Layout/Flex\";\n@use \"@app/bancor-components/Style/Layout/Display\";\n@use \"@app/bancor-components/Style/Layout/Margin\";\n@use \"@app/bancor-components/Style/Layout/Padding\";\n\n.linkCards {\n    > header {\n        .title {\n            &#{Text.$selector} {\n                @include Margin.set($bottom: beta);\n                @include Font.set($size: iota, $weight: bold);\n            }\n        }\n    }\n\n    > section {\n        #{Text.$selector} {\n            @include Color.set($fg: \"gray-dark\");\n            @include Font.set($size: delta);\n        }\n\n        .subtitle#{Text.$selector} {\n            @include Margin.set($bottom: delta);\n        }\n\n        .description#{Text.$selector} {\n            @include Margin.set($bottom: beta);\n            @include Font.set($weight: medium);\n        }\n\n        .availableCardsToLink,\n        .linkedCards {\n            @include Margin.set($bottom: epsilon);\n        }\n\n        #{Button.$selector}.availableCardToLink {\n            @include Color.set($bg: \"transparent\");\n            @include Padding.set($preset: none);\n            @include Border.set($style: default);\n            @include Flex.set($justify: between, $align: center);\n            width: Layout.get-max-width(alpha);\n            cursor: pointer;\n        }\n    }\n\n    > footer {\n        #{Button.$selector} {\n            @include Margin.set($bottom: beta);\n        }\n    }\n\n    #{Button.$selector}.dropdownButton,\n    #{Button.$selector}.dropdownItem {\n        @include Color.set($bg: \"transparent\");\n        @include Border.set($style: default);\n        @include Flex.set($justify: between, $align: center);\n        cursor: pointer;\n    }\n\n    .associatedCard {\n        @include Flex.set($justify: between, $align: center);\n    }\n}\n\n.linkAccountDetail {\n    @include Flex.set($dir: column, $grow: alpha);\n\n    section {\n        ul {\n            li {\n                @include Display.set($display: grid);\n                @include Margin.set($top: beta, $bottom: beta);\n                grid-template-columns: 1fr 1fr;\n                #{Text.$selector} {\n                    @include Font.set($size: gamma);\n                    @include Font.set($space: nowrap);\n                    text-overflow: ellipsis;\n                    overflow: hidden;\n                }\n\n                #{Text.$selector}:last-child,\n                #{DateTime.$selector} {\n                    @include Font.set($align: right, $weight: medium);\n                    @include Font.set($weight: medium);\n                    @include Color.set($fg: \"gray-dark\");\n                }\n            }\n        }\n    }\n}\n"]}