(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[170,291],{392:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return k}));var a=n(0),c=n(5),r=n(11),o=n(45),i=n(80),s=n(156),l=n(117),u=n(8),b=n(6),d=n(38),p=n(270),f=n(532),j=n(521),m=n(497),O=n(51),E=n(50),x=n(153),h=n(33),T=n(136),_=n(449),v=n.n(_),g=n(10);function k(){var e=Object(i.g)(),t=Object(u.b)(),n=Object(O.sb)(O.n),_=Object(O.sb)(O.D),k=Object(d.c)().textGet,y=Object(u.c)(s.c.encryptedCvv),w=Object(u.c)(l.c.deepLinkCallback),P=Object(u.c)(l.c.deepLinkCallbackSuccess),A=P&&w,M=A?"spa.modo.qr.back.to.store":"spa.form.accept",N=Object(u.c)(s.c.idTransaction),I=Object(u.c)(s.c.isPaymentWithCard),D=Object(u.c)(s.c.paymentCard),R=Object(u.c)(s.c.defaultPaymentCard),C=Object(u.c)(s.c.paymentAccount),L=Object(u.c)(s.c.defaultPaymentAccount),F=Object(u.c)(x.c.transaction),S=Object(u.c)(h.e.token),B=Object(u.c)(x.c.transactionsFetching),U=(null===C||void 0===C?void 0:C.labelString)||(null===L||void 0===L?void 0:L.label),q=null===F||void 0===F?void 0:F.idTransactionStatus,H=[b.ob,b.ib].includes(String(q)),Y=q===b.I,z=null===F||void 0===F?void 0:F.data,V=q===b.I?P:w,K=N.substring(b.Sb,b.Bb).toUpperCase(),W=r.b.useCallback((function(){t(x.a.clean())}),[t]);r.b.useEffect((function(){if(S&&N)return t(x.b.readTransaction({accessToken:S,idTransaction:N})),function(){return W()}}),[t,S,N,W]);var G=r.b.useCallback(function(){var e=Object(c.a)(Object(a.a)().mark((function e(t){return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(y&&Y){e.next=2;break}return e.abrupt("return");case 2:return e.next=4,Object(o.c)({key:"".concat(t,"-cvv"),val:y});case 4:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),[y,Y]);if(r.b.useEffect((function(){var e;if(I){var t=null!==(e=null===D||void 0===D?void 0:D.lastFourDigits)&&void 0!==e?e:null===R||void 0===R?void 0:R.lastFourDigits;G(t)}}),[R,I,D,G]),r.b.useEffect((function(){if(A){var a=setTimeout((function(){t(l.a.cleanDeepLinkData()),window.cordova.InAppBrowser.open(V,j.b.system,"location=yes"),e(n)}),b.x);return function(){return clearTimeout(a)}}}),[t,A,e,n,V]),!z||B)return Object(g.jsx)(p.a,{});var J=z.commerce,X=z.paymentDate,Z=z.amount,Q=z.card,$=z.planInstallments,ee=k({uuid:"spa.modo.payment.qr.ticket.label.".concat(q),replace:J}),te=k({uuid:"spa.modo.pay.qr.title"}),ne=k({uuid:"".concat(b.h).concat(Z.currency)}),ae=Object(g.jsxs)(E.Box,{flex:!0,align:"baseline",children:[Object(g.jsx)(d.b,{"aria-label":te,tag:"h1",uuid:"spa.modo.pay.qr.title.short"}),Object(g.jsx)(T.a,{"aria-hidden":!0,alt:"modo",uuid:"logoModo"})]});return Object(g.jsx)(m.a,{className:v.a.qrPaymentDetail,hasNotifications:!1,"header-onBack":ce,children:Object(g.jsxs)(f.a,{hasModoLogo:!0,isDownloadable:!0,isShareable:!0,buttonText:M,handleButton:ce,idTransaction:N,navigateButton:H?{label:{uuid:"spa.modo.pay.qr.label.button.payments"},handleClick:function(){return e(_)}}:void 0,responseDescription:H?"spa.modo.pay.qr.description":void 0,responseTitle:ee,titleText:ae,transactionStatus:q,children:[Object(g.jsxs)("ul",{children:[Object(g.jsxs)("li",{children:[Object(g.jsx)(d.b,{tag:"span",uuid:"spa.modo.pay.qr.ticket.code"}),Object(g.jsx)(d.b,{tag:"span",children:K})]}),Object(g.jsxs)("li",{children:[Object(g.jsx)(d.b,{tag:"span",uuid:"spa.modo.pay.qr.ticket.date"}),Object(g.jsx)(d.b,{tag:"span",children:X})]}),Object(g.jsxs)("li",{children:[Object(g.jsx)(d.b,{tag:"span",uuid:"spa.modo.pay.qr.ticket.status"}),Object(g.jsx)(d.b,{tag:"span",uuid:"spa.modo.ticket.status.".concat(q)})]}),Object(g.jsx)("li",{className:v.a.paymentInfo,children:Object(g.jsx)(d.b,{tag:"span",uuid:"spa.modo.pay.qr.ticket.payment.info"})}),Object(g.jsxs)("li",{children:[Object(g.jsx)(d.b,{tag:"span",uuid:"spa.modo.pay.qr.ticket.commerce"}),Object(g.jsx)(d.b,{tag:"span",children:J})]}),Object(g.jsxs)("li",{children:[Object(g.jsx)(d.b,{tag:"span",uuid:"spa.modo.pay.qr.ticket.payment.method"}),Object(g.jsx)(d.b,{tag:"span",children:I?Q:U})]}),$&&Object(g.jsxs)("li",{children:[Object(g.jsx)(d.b,{tag:"span",uuid:"spa.modo.payments.qr.label.instalments"}),Object(g.jsx)(d.b,{tag:"span",children:$})]}),Object(g.jsxs)("li",{children:[Object(g.jsx)(d.b,{tag:"span",uuid:"spa.modo.pay.qr.ticket.amount"}),Object(g.jsx)(d.b,{tag:"span",children:Object(g.jsx)(E.FormattedAmount,{amount:Z.quantity,currency:ne})})]})]}),I&&Y&&Object(g.jsx)(d.b,{className:v.a.refund,uuid:"spa.modo.pay.qr.ticket.payment.refund"}),A&&Object(g.jsx)(d.b,{className:v.a.redirectMessage,uuid:"spa.modo.qr.back.to.store.countdown"})]})});function ce(){t(s.a.clean()),t(l.a.cleanDeepLinkData()),A?window.open(Y?P:w):e(n)}}},449:function(e,t,n){e.exports={NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_IMAGE:"Image",TYPE_IMAGE:"Element",transactionInformation:"_rules_transactionInformation__WcJov",textInfo:"_rules_textInfo__Uw1F2",backButton:"_rules_backButton__Im3mH",qrPaymentDetail:"_rules_qrPaymentDetail__JxZB-",paymentInfo:"_rules_paymentInfo__3HqZs",refund:"_rules_refund__1mWKX",redirectMessage:"_rules_redirectMessage__2VKty"}},499:function(e,t,n){"use strict";n.d(t,"a",(function(){return p}));var a=n(0),c=n(5);function r(e){var t=e.filename,n=e.path,a=e.flags;return new Promise((function(e,c){var r;function o(e){c(e)}(r=window.cordova.file[n],new Promise((function(e,t){window.resolveLocalFileSystemURL(r,(function(t){e(t)}),(function(e){t(e)}))}))).then((function(n){var c=n;c.getFile(t,a,(function(t){var n=new FileReader;t.createWriter((function(a){e({fileEntry:t,dirEntry:c,fileReader:n,fileWriter:a,fileWrite:function(e){return new Promise((function(t,n){a.onwriteend=function(){return t(a)},a.onerror=function(e){return n(e)},a.write(e)}))},fileRemove:function(){return new Promise((function(e,n){t.remove((function(){return e(!0)}),(function(e){return n(e)}))}))}})}),o)}),o)}))}))}var o=n(36),i=n(26),s=n(28);function l(){return u.apply(this,arguments)}function u(){return(u=Object(c.a)(Object(a.a)().mark((function e(){var t;return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(i.c)();case 2:if(e.sent&&cordova.plugins){e.next=5;break}throw i.a.CORDOVA_UNAVAILABLE;case 5:if(t=cordova.plugins.fileOpener2){e.next=8;break}throw i.a.PLUGIN_UNAVAILABLE;case 8:return e.abrupt("return",t);case 9:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function b(e){return d.apply(this,arguments)}function d(){return d=Object(c.a)(Object(a.a)().mark((function e(t){var n,c,r,o,u;return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.contentType,c=t.fileName,r=t.withDialog,e.next=3,Object(i.c)();case 3:if(e.sent){e.next=6;break}throw i.a.CORDOVA_UNAVAILABLE;case 6:return e.next=8,l();case 8:return o=e.sent,u=r?o.open:o.showOpenWithDialog,e.abrupt("return",new Promise((function(e,t){try{u(c,n,{success:function(){e({code:s.a.SUCCESS,value:!0})},error:function(e){function t(t){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}((function(e){t("boolean"===typeof e?new s.b(s.a.ERROR,o.open.name,s.c):new s.b(s.a.ERROR,o.open.name,e.message))}))})}catch(a){t(new s.b(s.a.ERROR_UNKNOWN,o.open.name,s.c))}})));case 11:case"end":return e.stop()}}),e)}))),d.apply(this,arguments)}function p(){var e=Object(o.i)(),t=e.isDesktop,n=e.isUnknown,i=e.platform;function s(e){var t=e.split(".").pop();return"png"===t||"jpg"===t||"gif"===t||"bmp"===t?"image/".concat(t):"pdf"===t?"application/".concat(t):"doc"===t||"docx"===t?"application/msword":"ppt"===t||"pptx"===t?"application/vnd.ms-powerpoint":"xls"===t||"xlsx"===t?"application/vnd.ms-excel":"xlsm"===t?"application/vnd.ms-excel.sheet.macroEnabled.12":"txt"===t?"text/plain":"zip"===t?"application/zip":void 0}return function(){var e=Object(c.a)(Object(a.a)().mark((function e(c,l){var u,d,p,f,j,m,O;return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(u=i===o.b.CORDOVA_ANDROID,!(d=s(c))){e.next=19;break}if(!t&&!n){e.next=9;break}return(p=document.createElement("a")).href=window.URL.createObjectURL(l),p.download=c,p.click(),e.abrupt("return");case 9:return e.next=11,r({filename:c,path:u?"externalApplicationStorageDirectory":"dataDirectory",flags:{create:!0,exclusive:!1}});case 11:return f=e.sent,j=f.fileWrite,m=f.fileEntry,e.next=16,j(l);case 16:return O={contentType:d,fileName:m.nativeURL,withDialog:!0},e.next=19,b(O);case 19:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}()}},501:function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var a=512,c=0;function r(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:a,r=window.atob(e),o=[],i=c;i<r.length;i+=n){for(var s=r.slice(i,i+n),l=new Array(s.length),u=c;u<s.length;u++)l[u]=s.charCodeAt(u);o.push(new Uint8Array(l))}return new Blob(o,{type:t})}},508:function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var a=n(6);function c(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"pdf";if("string"===typeof e&&e.trim()){var n=e.trim().toLowerCase().replace(/[^a-zA-Z0-9]/g,a.Nb);return"".concat(n,".").concat(t)}var c=new Date,r=c.getMonth()+a.fb,o=(r<a.Fb?a.Ub:a.D)+r,i=c.getDate(),s=(i<a.Fb?a.Ub:a.D)+i;return"".concat(c.getFullYear(),"_").concat(o,"_").concat(s,".").concat(t)}},532:function(e,t,n){"use strict";n.d(t,"a",(function(){return w}));var a=n(16),c=n(11),r=n(41),o=n(36),i=n(50),s=n(6),l=n(8),u=n(33),b=n(271),d=n(501),p=n(154),f=n(499),j=n(38),m=n(82),O=n(533),E=n.n(O),x=n(534),h=n.n(x),T=n(508),_=n(270),v=n(10),g=h.a.NAME_TICKET,k=h.a.TYPE_TICKET,y={hasModoLogo:!1,isDownloadable:!1,isShareable:!1,navigateButton:{},responseDescription:s.D};function w(e){var t=e,n=t.idTransaction,s=t.buttonText,O=t.children,x=t.className,h=t.transactionStatus,y=t.responseTitle,w=t.responseDescription,P=t.navigateButton,A=t.hasModoLogo,M=t.titleText,N=t.handleButton,I=t.isDownloadable,D=t.isShareable,R=Object(l.b)(),C=Object(f.a)(),L=Object(o.i)().isDesktop,F=c.b.useState(!1),S=Object(a.a)(F,2),B=S[0],U=S[1],q=c.b.useState(!1),H=Object(a.a)(q,2),Y=H[0],z=H[1],V=Object(l.c)(u.e.token),K=Object(l.c)(p.c.fetching),W=Object(l.c)(p.c.fetchedFile),G=Object(l.c)(p.c.filename),J=Object(l.c)(p.c.content),X=I||D,Z=Object(T.a)(G),Q="string"===typeof M;c.b.useEffect((function(){R(p.a.clean())}),[R]),c.b.useEffect((function(){(Y||B)&&V&&(W||G||J?(G&&J&&(B&&(C(Z,Object(d.a)(J)),U(!1)),Y&&(Object(b.a)({options:{message:G,subject:G},files:[{fileName:Z,base64File:J}]}),z(!1))),R(p.a.setFetchedFile(!1))):R(p.b.generatePdf({token:V,idTransaction:n})))}),[J,R,B,W,G,Z,C,n,Y,V]);var $={FINISHED:Object(v.jsx)(i.Icon,{name:"success",size:"large",stroke:"success"}),PROCESSING:Object(v.jsx)(i.Icon,{name:"clock",size:"large",stroke:"info"}),PENDING:Object(v.jsx)(i.Icon,{name:"clock",size:"large",stroke:"info"}),FAILED:Object(v.jsx)(i.Icon,{name:"error",size:"large",stroke:"error"}),ANNULED:Object(v.jsx)(i.Icon,{name:"warning",size:"large",stroke:"warning"}),RETURNED:Object(v.jsx)(i.Icon,{name:"warning",size:"large",stroke:"warning"})};return K?Object(v.jsx)(_.a,{}):Object(v.jsxs)(r.a,{className:x,name:g,tag:"section",type:k,children:[Object(v.jsx)("header",{children:Q?Object(v.jsx)(j.b,{className:E.a.title,fallback:M,tag:"h1",uuid:M}):M}),Object(v.jsxs)("section",{children:[X&&Object(v.jsxs)("div",{className:E.a.actions,children:[D&&!L&&Object(v.jsx)(m.a,{icon:"share",kind:"icon",label:{uuid:"spa.a11y.buttons.share"},size:"small",variant:"text",onClick:function(){z(!0)}}),I&&Object(v.jsx)(m.a,{icon:"download",kind:"icon",label:{uuid:"spa.a11y.buttons.download"},size:"small",variant:"text",onClick:function(){U(!0)}})]}),Object(v.jsx)("div",{className:E.a.responseIcon,children:$[h]}),Object(v.jsx)(j.b,{className:E.a.responseTitle,fallback:y,tag:"h2",uuid:y}),w&&Object(v.jsx)(j.b,{className:E.a.responseDescription,tag:"h3",uuid:w}),(null===P||void 0===P?void 0:P.label)&&(null===P||void 0===P?void 0:P.handleClick)&&Object(v.jsx)(m.a,{className:E.a.navigateButton,kind:"plain",label:P.label,type:"button",onClick:P.handleClick}),O,A&&Object(v.jsx)("div",{className:E.a.responseIcon,children:Object(v.jsx)(i.Icon,{name:"modo"})})]}),Object(v.jsx)("footer",{children:Object(v.jsx)(m.a,{label:{uuid:s},onClick:N})})]})}w.defaultProps=y},533:function(e,t,n){e.exports={NAME_TICKET:"Ticket",TYPE_TICKET:"Section",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_IMAGE:"Image",TYPE_IMAGE:"Element",title:"_rules_title__1SNPA",actions:"_rules_actions__30efJ",responseIcon:"_rules_responseIcon__1McyH",responseTitle:"_rules_responseTitle__3H3Id",responseDescription:"_rules_responseDescription__1NvkT",navigateButton:"_rules_navigateButton__Dlve9"}},534:function(e,t,n){e.exports={NAME_TICKET:"Ticket",TYPE_TICKET:"Section"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=170.748be6cb.chunk.js.map