(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[104,219],{226:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return P}));var c=n(0),a=n(5),r=n(11),s=n(524),i=n(819),o=n(8),u=n(33),d=n(51),b=n(79),l=n(6),p=n(69),j=n(120),f=n(108),O=n(117),v=n(3),h=n(38),m=n(89),x=n(379),g=n(344),w=n(346),k=n(348),E=n(345),S=n(347),y=n(10);function P(){var e=Object(o.b)(),t=Object(d.qb)(),n=Object(h.c)().textGet,P=Object(o.c)(p.c),B=Object(o.c)(O.c.deepLinkPath),C=Object(o.c)(u.e.isStep1),N=Object(o.c)(u.e.isStep2),L=Object(o.c)(u.e.error),I=Object(o.c)(u.e.warning),R=Object(o.c)(u.e.isStepExpiredPassword),U=Object(o.c)(u.e.isStepUserBlockedByPassword),q=Object(o.c)(u.e.isStep3),T=Object(o.c)(p.c.isIoS),D=Object(o.c)(f.f.isBiometrySessionRequested),F=Object(o.c)(u.e.token),G=Object(o.c)(u.e.isChangedExpiredPassword),M=Object(o.c)(O.c.deepLinkData),A=Object(f.i)(),_=Object(d.sb)(d.n),z=Object(d.sb)(d.O),J=Object(d.sb)(d.gb),V=void 0!==F&&D&&!A,Y=Object(j.e)(l.G.PREFERENCES_BIOMETRY_FINGERPRINT),K=n({uuid:"spa.backend.service.error"});r.b.useEffect((function(){F||(e(u.a.clean()),e(m.a.clean()))}),[e,F]);var X=r.b.useCallback(function(){var e=Object(a.a)(Object(c.a)().mark((function e(t){return Object(c.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(i.a)({value:t});case 2:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),[]);return r.b.useEffect((function(){return T&&X(!1),function(){X(!0)}}),[X,T]),r.b.useEffect((function(){if(F)return B?(t(B),void(M&&e(O.a.setDeepLinkData({params:M.params,path:void 0})))):void(D||t(_));t(z)}),[M,B,e,D,t,F,_,z]),r.b.useEffect((function(){return window.onpopstate=function(){window.location.href.includes(J)||e(u.a.clean())},window.onunload=function(){e(u.a.clean())},function(){window.onpopstate=function(){},window.onunload=function(){}}}),[e,J]),r.b.useEffect((function(){P||e(p.b.initialSetup())}),[e,P]),r.b.useEffect((function(){void 0===Y&&e(j.b.getClientFeatures({idActivityList:l.Qb}))}),[e,Y]),r.b.useEffect((function(){var t=null===L||void 0===L?void 0:L.code,n=t===v.c||t===v.b;L&&n&&e(b.a.set([{text:"".concat(K," (").concat(L.code,")"),kind:"ERROR",duration:l.kb}]))}),[K,e,L]),r.b.useEffect((function(){var t=null===I||void 0===I?void 0:I.code,n=null===I||void 0===I?void 0:I.data.NO_FIELD,c=t===v.a;I&&c&&n&&e(b.a.set([{text:"".concat(n," (").concat(I.code,")"),kind:"WARNING",duration:l.kb}]))}),[e,I]),Object(y.jsx)(s.b,{handleChangeStep:function(){e(C&&G?b.a.set([{text:{uuid:"spa.login.stepExpiredPassword.toast.success"},kind:"SUCCESS",duration:l.kb}]):b.a.clean())},steps:{step1:{condition:C,component:x.default},step2:{condition:N,component:g.default},step3:{condition:R,component:w.default},step4:{condition:U,component:k.default},step5:{condition:q,component:E.default},step6:{condition:V,component:S.default}}})}},345:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return k}));var c=n(0),a=n(5),r=n(11),s=n(39),i=n(187),o=n(8),u=n(33),d=n(6),b=n(82),l=n(38),p=n(488),j=n(583),f=n(270),O=n(108),v=n(489),h=n(69),m=n(45),x=n(432),g=n.n(x),w=n(10);function k(){var e=Object(o.b)(),t=Object(l.c)().textGet,n=Object(o.c)(h.c.isMobile),x=Object(O.h)().state.device,E=Object(o.c)(h.c.uniqueDeviceID),S=Object(o.c)(u.e.exchangeToken),y=Object(o.c)(u.e.environmentsForSelect),P=Object(o.c)(u.e.fetching),B=Object(o.c)(u.e.isSubmitted),C=t({uuid:"spa.login.step3.environment.input.label"}),N=t({uuid:"spa.generic.field.error.required"}),L=t({uuid:"spa.searchfield.label"}),I=y.length>d.fb,R=r.b.useCallback((function(e){return T.apply(this,arguments)}),[null===x||void 0===x?void 0:x.model,e,S,n,E]);r.b.useEffect((function(){I||B||R({environments:y[0].value})}),[y,P,B,I,R]);var U=r.b.useCallback((function(){P&&B||!I||e(u.a.clean())}),[e,P,B,I]);r.b.useEffect((function(){return document.addEventListener("backbutton",U),function(){return document.removeEventListener("backbutton",U)}}),[U]);var q=s.e.object({environments:Object(i.d)(s.e.string.required(),N)});return P&&B||!I?Object(w.jsx)(f.a,{}):Object(w.jsx)(v.a,{className:g.a.containerStep3,"header-onBack":U,children:Object(w.jsx)("section",{children:Object(w.jsxs)(p.a,{isRequiredToast:!1,schema:q,onSubmit:R,children:[Object(w.jsx)("div",{className:g.a.selectOperation,children:Object(w.jsx)(l.b,{className:g.a.textTitle,tag:"h5",uuid:"spa.login.step3.selectOperation.title"})}),Object(w.jsx)("div",{className:g.a.environments,children:y.length&&Object(w.jsx)(j.a,{environments:y,label:C,name:"environments",searchFieldLabel:L})}),Object(w.jsx)(b.a,{flowId:k.displayName,label:{uuid:"spa.form.continue"},loading:P,type:"submit"})]})})});function T(){return(T=Object(a.a)(Object(c.a)().mark((function t(a){var r,s;return Object(c.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(e(u.a.isSubmitted()),r=void 0,!n){t.next=7;break}return t.next=5,Object(m.b)(d.U);case 5:s=t.sent,r=s.value||void 0;case 7:return t.next=9,e(u.b.thirdStep({environments:parseInt(a.environments,d.Fb),exchangeToken:S,deviceModel:null===x||void 0===x?void 0:x.model,uniqueDeviceId:E,seedUser:r}));case 9:case"end":return t.stop()}}),t)})))).apply(this,arguments)}}k.displayName="LoginStep3"},346:function(e,t,n){"use strict";n.r(t),n.d(t,"KEY_PREFIX",(function(){return x})),n.d(t,"default",(function(){return g}));var c=n(0),a=n(5),r=(n(11),n(33)),s=n(8),i=n(489),o=n(530),u=n(99),d=n(82),b=n(488),l=n(50),p=n(517),j=n(38),f=n(6),O=n(39),v=n(432),h=n.n(v),m=n(10),x="spa.login";function g(){var e=Object(s.b)(),t=Object(j.c)().textGet,n=Object(u.a)().getValueConfig,v=Object(s.c)(r.e.exchangeToken)||f.D,g=Object(s.c)(r.e.fetching),w=Object(o.a)(t,n),k=O.e.object({password:w}),E=Object(s.c)(r.e.warning),S=t({uuid:"".concat(x,".stepExpiredPassword.password.label")});return Object(m.jsx)(i.a,{"header-onBack":function(){e(r.a.clean())},"header-title":"".concat(x,".stepExpiredPassword.title"),children:Object(m.jsx)("section",{children:Object(m.jsxs)(b.a,{schema:k,warnings:E,onSubmit:function(e){return y.apply(this,arguments)},children:[Object(m.jsx)("div",{className:h.a.expiredPassword,children:Object(m.jsx)(j.b,{color:"gray-dark",uuid:"".concat(x,".stepExpiredPassword.subtitle")})}),Object(m.jsx)("div",{className:h.a.alignInputs,children:Object(m.jsx)(p.a,{id:"password",label:S,name:"password",start:Object(m.jsx)(l.Icon,{name:"lockPadlock",size:"small"})})}),Object(m.jsx)(d.a,{label:{uuid:"".concat(x,".stepExpiredPassword.continue.button")},loading:g,type:"submit"})]})})});function y(){return(y=Object(a.a)(Object(c.a)().mark((function t(n){var a;return Object(c.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return a=n.password,t.next=3,e(r.b.changePasswordAfterExpiration({exchangeToken:v,password:a}));case 3:case"end":return t.stop()}}),t)})))).apply(this,arguments)}}},347:function(e,t,n){"use strict";n.r(t),n.d(t,"KEY_PREFIX",(function(){return b})),n.d(t,"default",(function(){return l}));n(11);var c=n(8),a=n(38),r=n(108),s=n(51),i=n(117),o=n(99),u=n(74),d=n(10),b="spa.login";function l(){var e=Object(c.b)(),t=Object(a.c)().textGet,n=Object(s.qb)(),b=Object(s.sb)(s.n),l=Object(c.c)(i.c.deepLinkPath),p=Object(c.c)(r.f.isBiometrySessionConfigured),j=Object(o.a)().getValueConfig,f=Object(u.a)(j("vu.fraud.check.fingerprint.enable")),O=Object(u.a)(j("backend.vu.fraud.api.fingerprint.url")),v=Object(u.a)(j("backend.vu.fraud.api.fingerprint.timeout"));return Object(r.g)({onSkip:h,onRegister:h,onUnavailable:h,onLogin:h,textCancel:t({uuid:"spa.biometryshow.cancel"}),textError:"Error",textHeader:t({uuid:"spa.biometryshow.header"}),textTitle:t({uuid:"spa.biometryshow.title"}),textGet:t,isVUFingerprintEnabled:f,url:O,timeout:v}),Object(d.jsx)("section",{});function h(){return p||(e(r.a.setBiometrySessionRequested(!1)),e(r.a.setBiometryPreferencesRequested(!1))),n(l||b)}}},348:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return j}));n(11);var c=n(33),a=n(8),r=n(489),s=n(82),i=n(38),o=n(50),u=n(80),d=n(51),b=n(432),l=n.n(b),p=n(10);function j(){var e=Object(a.b)(),t=Object(d.sb)(d.O),n=Object(d.sb)(d.P),b=Object(u.g)();return Object(p.jsx)(r.a,{"header-onBack":function(){e(c.a.clean())},children:Object(p.jsxs)("div",{className:l.a.stepBlockedUserByPassword,children:[Object(p.jsxs)("header",{className:l.a.stepBlockedUserByPassword,children:[Object(p.jsx)(o.Icon,{name:"warning",size:"xlarge",stroke:"warning"}),Object(p.jsx)(i.b,{color:"gray-dark",uuid:"spa.stepUserBlocked.title"})]}),Object(p.jsx)("section",{className:l.a.stepBlockedUserByPassword,children:Object(p.jsx)(i.b,{color:"gray-dark",uuid:"spa.stepUserBlocked.subtitle"})}),Object(p.jsxs)("footer",{className:l.a.stepBlockedUserByPassword,children:[Object(p.jsx)(s.a,{label:{uuid:"spa.stepUserBlocked.recoverPassword"},size:"large",onClick:function(){e(c.a.clean()),b(n)}}),Object(p.jsx)(s.a,{label:{uuid:"spa.stepUserBlocked.goToStart"},size:"large",variant:"outlined",onClick:function(){e(c.a.clean()),b(t)}})]})]})})}},530:function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var c=n(30),a=n(6),r=n(187),s=n(522),i=n(39),o=n(74);function u(e,t,n,u){var d=Object(o.a)(t("core.password.minLength")),b=Object(o.a)(t("core.password.maxLength")),l=e({uuid:"spa.generic.accessData.error.documentNumberInPassword"}),p=e({uuid:"spa.generic.accessData.error.userInPassword"}),j=e({uuid:"spa.password.error.tooSmall",replace:"".concat(d)}),f=e({uuid:"spa.password.error.tooBig",replace:"".concat(b)}),O=e({uuid:"spa.generic.field.error.required"}),v=Object(r.d)(i.e.string.required(),O),h=[Object(r.d)(i.e.string.ofLength(d),j),Object(r.d)(i.e.string.ofLength(a.fb,b),f),Object(i.b)("document number in password",(function(e){if(!n)return!0;var t=e;var c=n.number,r=n.type===s.a?(i=c,i.slice(a.Jb,a.ab)):c;var i;return!t.includes(r)||l})),Object(i.b)("username in password",(function(e){return!u||(!e.includes(u)||p)})),Object(i.b)("required chars",(function(n){if(n&&m("repeatedCharacters")){var c,r,s=n,i=Object(o.a)(t("spa.password.repeatedCharacters.maximum")),u=null===(c=s.match(/(\w)\1+/g))||void 0===c?void 0:c.find((function(e){return e.length>=i})),d=null===(r=s.match(/([0-9]{3,})/g))||void 0===r?void 0:r.some((function(e){return function(e,t){if(e.length===a.fb)return!1;for(var n=e.charCodeAt(a.Sb),c=a.Sb,r=a.Sb,s=a.fb;s<e.length;s++){var i=e.charCodeAt(s);c>=a.Sb&&(n===a.cb&&i===a.Tb||n+a.fb===i)?c++:c<=a.Sb&&(n===a.Tb&&i===a.cb||n-a.fb===i)?c--:(r=Math.max(Math.abs(c)+a.fb,r),c=a.Sb),n=i}return Math.max(Math.abs(c)+a.fb,r)>=t}(e,i)}));return u?e({uuid:"spa.password.error.repeatedCharacters",replace:"".concat(i)}):!d||e({uuid:"spa.password.error.consecutiveNumbers",replace:"".concat(i)})}return v}))].concat(Object(c.a)(["atLeastOneDigit","atLeastOneLowercaseChar","atLeastOneUppercaseChar"].filter(m).map((function(n){var c=Object(o.a)(t("spa.password.".concat(n,".regex"))),a=e({uuid:"spa.password.error.".concat(n)});return Object(r.d)(i.e.string.match(new RegExp(c)),a)}))));return Object(i.c)((function(e){var t=h.find((function(t){return!Object(i.d)(e,t)}));return e&&t?t:v}));function m(e){return Object(o.a)(t("spa.password.".concat(e,".enabled")))}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=104.29d58040.chunk.js.map