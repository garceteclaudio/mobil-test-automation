(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[29,213],{197:function(e,t,a){"use strict";a.r(t),a.d(t,"default",(function(){return X}));var c=a(2),s=a(19),i=a(0),n=a(5),r=a(16),o=a(8),l=a(17),p=a(6),b=a(164),d=a(69),u=a(120),g=a(89),j=a(87),O=a(33),f=a(79),m=a(153),h=a(518),x=a(50),E=a(672),y=a(270),v=a(673),T=a(674),w=a(11),M=a(41),P=(a(738),a(38)),k=a(513),N=a(504),S=a(739),_=a.n(S),I=a(10),D=_.a.NAME_WIDGET_PENDING,A=_.a.TYPE_WIDGET_PENDING;function L(e){var t=e,a=t.title,c=t.legacyPath,s=t.isMassivePendingEnabled,i=t.widgetPendingMaxView,n=Object(o.c)(m.c.transactionsPendingCorporate),r=Object(o.c)(m.c.transactionsPendingCorporateMaxView),l=Object(o.c)(m.c.transactionsFetching),b=n.length>p.Sb,d=r?n.length+p.fb:n.length;return l?Object(I.jsx)(y.a,{}):Object(I.jsx)(M.a,{name:D,tag:"section",type:A,children:Object(I.jsxs)(x.ListLayout,{as:"article",children:[Object(I.jsxs)(x.ListLayout.Start,{as:"header",children:[Object(I.jsx)(P.b,{tag:"h3",uuid:a}),b&&Object(I.jsx)(x.Badge,{content:String(d),max:i,size:"small"})]}),b&&Object(I.jsx)(x.ListLayout.Main,{as:"nav",children:Object(I.jsx)("ul",{children:n.map((function(e){var t=e.idTransaction,a=e.creationDateTime,s=e.activityName;return Object(I.jsxs)("li",{children:[Object(I.jsxs)(k.a,{to:Object(h.a)(c,"".concat("legacy.spa.legacyinfo.widgets.pending.detail?transactionId=").concat(t)),children:[Object(I.jsxs)("div",{children:[Object(I.jsx)(P.b,{tag:"h6",children:s}),Object(I.jsx)(N.a,{date:a})]}),Object(I.jsx)(x.Icon,{name:"right",size:"small",stroke:"gray-600"})]}),Object(I.jsx)(x.Separator,{})]},t)}))})}),Object(I.jsxs)(x.ListLayout.End,{as:"footer",children:[b&&!s&&Object(I.jsxs)(k.a,{to:Object(h.a)(c,"legacy.spa.legacyinfo.widgets.pending.lists"),children:[Object(I.jsx)(P.b,{uuid:"spa.widget.pending.goto2"}),Object(I.jsx)(x.Icon,{name:"right",size:"small",stroke:"primary"})]}),b&&s&&Object(I.jsxs)(k.a,{to:Object(h.a)(c,"legacy.spa.legacyinfo.widgets.pending.massive"),children:[Object(I.jsx)(P.b,{uuid:"spa.widget.pending.goto.massive"}),Object(I.jsx)(x.Icon,{name:"right",size:"small",stroke:"primary"})]}),!b&&Object(I.jsx)(P.b,{uuid:"spa.widget.pending.list.empty.message"})]})]})})}L.defaultProps={},L.displayName=D;var F=a(675),C=a(99),R=a(36),G=a(51),W=a(74),U=a(314),Y=a(315),q=a(316),V=a(317),H=a(445),B=a.n(H),z=a(324),K=["id"];function X(){var e=Object(o.b)(),t=Object(G.qb)(),a=Object(C.a)().getValueConfig,M=w.b.useState(!1),P=Object(r.a)(M,2),k=P[0],N=P[1],S=w.b.useState(!1),_=Object(r.a)(S,2),D=_[0],A=_[1],H=w.b.useState(!1),X=Object(r.a)(H,2),J=X[0],Q=X[1],Z=w.b.useState(!1),$=Object(r.a)(Z,2),ee=$[0],te=$[1],ae=w.b.useState(!1),ce=Object(r.a)(ae,2),se=ce[0],ie=ce[1],ne=Object(W.a)(a("massivePending.enable")),re=Object(o.c)(O.e.token),oe=Object(W.a)(a("spa.widget.actions.active")),le=Object(W.a)(a("spa.widget.campaigns.active")),pe=Object(W.a)(a("spa.widget.pending.active")),be=Object(W.a)(a("spa.widget.recirculation.active")),de=Object(W.a)(a("widget.pending.max.view")),ue=Object(W.a)(a("vu.fraud.check.fingerprint.enable")),ge=Object(W.a)(a("secondfactor.vu.fraud.check.fingerprint.enable")),je=Object(W.a)(a("spa.customerSupport.whatsapp.link")),Oe=Object(W.a)(a("spa.widget.chatEO.active")),fe=Object(W.a)(a("backend.spa.deposits.bantotal.flag")),me=Object(u.e)(p.G.OFFERT_TO_UPDATE_SECURITY_DATA_TOKEN),he=Object(o.c)(O.e.isEnvironmentUserSigning),xe=Object(o.c)(O.e.environmentExpired),Ee=Object(o.c)(b.c.fetching),ye=Object(o.c)(b.c.fetched),ve=Object(o.c)(b.c.campaigns),Te=Object(o.c)(b.c.businessError),we=Object(o.c)(b.c.systemError),Me=Object(o.c)(g.e.legacyFeatures),Pe=Object(o.c)(j.c.isDeviceCompatibleToken),ke=ve.map((function(e){var t=e.id,a=Object(s.a)(e,K);return Object(c.a)({campaignId:t},a)})),Ne=Object(o.c)(j.c.deviceModel),Se=Object(o.c)(d.c.uniqueDeviceID),_e=Object(o.c)(j.c.fetching),Ie=Object(o.c)(j.c.fetchingOtpConfigurationPre),De=Object(o.c)(m.c.transactionsFetching),Ae=Object(o.c)(O.e.activeEnvironmentTokenType),Le=Object(o.c)(O.e.oncePerSessionModal),Fe=Object(o.c)(b.c.isRetryEnabled),Ce=Object(o.c)(j.c.isTheDeviceSecure),Re=Object(o.c)(j.c.otpType),Ge=Object(o.c)(j.c.isScreenLock),We=Object(o.c)(j.c.isSecureOtpLinking),Ue=Object(G.sb)(G.r),Ye=Object(G.sb)(G.ib),qe=Object(R.i)(),Ve=qe.isDesktop,He=qe.isMobile,Be=qe.isUnknown,ze=Ae===p.Lb,Ke=Ae===p.Mb,Xe=Re||ze,Je=!Ge||!We,Qe=Pe&&Ce,Ze=Pe&&!Ce,$e=!Pe&&!Ke,et=z.itemsCorporate.flatMap((function(e){var t=e.href,a=e.text;if(!(t in Me))return[];var c=Me[t],s=c.url,i=c.availableFeature,n=c.hasPermission;return i&&n?[{id:t,href:Object(h.a)(t,s),text:a}]:[]})),tt=Object(W.a)(a("backend.vu.fraud.api.fingerprint.url")),at=Object(W.a)(a("backend.vu.fraud.api.fingerprint.timeout")),ct=w.b.useCallback(Object(n.a)(Object(i.a)().mark((function a(){var c;return Object(i.a)().wrap((function(a){for(;;)switch(a.prev=a.next){case 0:if(re){a.next=2;break}return a.abrupt("return");case 2:return c=l.j.OTPMOBILE,Qe&&(c=l.j.OTPMOBILE),$e&&(c=l.j.OTPSMS),a.next=7,e(j.b.linkOTP({accessToken:re,deviceModel:Ne,validationType:c,uniqueDeviceId:Se,isSafeDeviceEnabled:!1,isVUEnabled:ue&&ge,url:tt,timeout:at}));case 7:t(Ye);case 8:case"end":return a.stop()}}),a)}))),[re,Qe,$e,e,Ne,Se,ue,ge,t,Ye,tt,at]);return w.b.useEffect((function(){xe&&e(f.a.set({kind:"WARNING",text:{uuid:"spa.environment.expired.administrator",replace:xe},duration:p.kb}))}),[e,xe]),w.b.useEffect((function(){re&&e(m.b.getPendingTransactionsCorporate({accessToken:re}))}),[re,e]),w.b.useEffect((function(){re&&le&&(ye||Ee||we||Te||e(b.b.listCampaignsForWidget({token:re})),Fe&&!k&&ye&&(e(b.b.listCampaignsForWidget({token:re})),N(!0)))}),[Te,k,e,ye,Ee,Fe,le,we,re]),w.b.useEffect((function(){if(He&&!Le&&me){if(Xe||"boolean"!==typeof Ce)return;if(e(O.a.setOncePerSessionModal(!0)),Je)return void ie(!0);Qe&&A(!0),Ze&&Q(!0),$e&&te(!0)}}),[$e,Ze,Qe,Je,e,Xe,me,He,Ce,Le]),_e||Ee||Ie||De||Be?Object(I.jsx)(y.a,{}):Object(I.jsxs)(w.b.Fragment,{children:[Object(I.jsxs)("section",{className:B.a.firstWidgetsColumnCorporate,children:[oe&&Object(I.jsxs)(w.b.Fragment,{children:[Object(I.jsx)(v.a,{isBantotalEnabled:fe,items:st(Ve?z.itemsActionsDesktop:z.itemsActions),legacyPath:Ue}),Object(I.jsx)(x.Separator,{})]}),le&&ke.length>p.Sb&&Object(I.jsxs)(w.b.Fragment,{children:[Object(I.jsx)(T.a,{isFetchingCampaigns:Ee,items:ke}),Object(I.jsx)(x.Separator,{})]})]}),pe&&he&&Object(I.jsx)(L,{isMassivePendingEnabled:ne,legacyPath:Ue,title:"spa.widget.pending.title",widgetPendingMaxView:de}),be&&et.length>p.Sb&&Object(I.jsx)(F.a,{items:et,legacyPath:Ue,title:"spa.widget.recirculation.corporate.title"}),Oe&&Object(I.jsx)(E.a,{button:{uuid:"spa.customer.support.chat.eo.button.title"},text:{uuid:"spa.customer.support.chat.eo.text"},urlExternalChat:je}),Object(I.jsx)(q.ModalTokenSecureDevice,{assignOTP:ct,setShowModal:A,showModal:D}),Object(I.jsx)(Y.ModalTokenNotSecureDevice,{setShowModal:Q,showModal:J}),Object(I.jsx)(U.ModalTokenNotAbleDevice,{assignOTP:ct,setShowModal:te,showModal:ee}),Object(I.jsx)(V.ModalUnlockedDevice,{setShowModal:ie,showModal:se})]});function st(e){return e.map((function(e){return Me&&Me[e.href]&&"legacy.spa.feature.payments.sections.taxes.index.list"===e.href?Object(c.a)(Object(c.a)({},e),{},{href:Me[e.href].hasPermission?e.href:"legacy.spa.feature.payments.sections.taxes.not.ap.list"}):e}))}}},324:function(e,t,a){"use strict";a.r(t),a.d(t,"itemsActionsDesktop",(function(){return c})),a.d(t,"itemsActions",(function(){return s})),a.d(t,"itemsAssurance",(function(){return i})),a.d(t,"itemsCorporate",(function(){return n}));var c=[{icon:"transfer",text:"spa.widget.actions.transfer",color:"yellow",href:"transfers"},{icon:"investment",text:"spa.widget.actions.investments",color:"blue",href:"investments"},{icon:"emitEcheq",text:"spa.widget.actions.emit.echeq",color:"violet",href:"legacy.echeck.form.emit.list"},{icon:"ticket",text:"spa.widget.actions.payForServices",color:"dark-green",href:"legacy.spa.feature.payments.sections.services.taxes.list"},{icon:"afip",text:"spa.widget.actions.payment.afip",color:"purple",href:"legacy.spa.feature.payments.sections.taxes.index.list"},{icon:"paytosupp",text:"spa.widget.actions.payment.supplier",color:"light-green",href:"legacy.payments.supplier",replaceUrlLegacy:"/suppliers/agreement",forceReplacement:!0},{icon:"fce",text:"spa.widget.actions.fce",color:"green",href:"legacy.menu.transactions.ebilling.search.tenancy.list"}],s=[{icon:"saving",text:"spa.widget.actions.time.deposits",color:"yellow",href:"legacy.spa.feature.investments.sections.time.deposits.list",replaceUrlLegacy:"/deposits/holdings"},{icon:"emitEcheq",text:"spa.widget.actions.emit.echeq",color:"blue",href:"legacy.echeck.form.emit.list"},{icon:"ticket",text:"spa.widget.actions.payForServices",color:"violet",href:"legacy.spa.feature.payments.sections.services.taxes.list"},{icon:"afip",text:"spa.feature-sections.taxes",color:"dark-green",href:"legacy.spa.feature.payments.sections.taxes.index.list"},{icon:"paytosupp",text:"spa.widget.actions.payment.supplier",color:"purple",href:"legacy.payments.supplier",replaceUrlLegacy:"/suppliers/agreement",forceReplacement:!0},{icon:"fce",text:"spa.widget.actions.fce",color:"light-green",href:"legacy.menu.transactions.ebilling.search.tenancy.list"}],i=[{href:"#spa.widget.assurance.homeInsurance",text:"spa.widget.assurance.homeInsurance"},{href:"#spa.widget.assurance.lifeInsurance",text:"spa.widget.assurance.lifeInsurance"},{href:"#spa.widget.assurance.carInsurance",text:"spa.widget.assurance.carInsurance"}],n=[{href:"legacy.spa.feature.investments.sections.common.investment.fund",text:"spa.widget.corporate.champaqui"},{href:"legacy.spa.legacyinfo.widgets.corporate.favoriteAccounts",text:"spa.widget.corporate.favoriteAccounts"}]},738:function(e,t,a){e.exports={NAME_WIDGET_PENDING:"WidgetPending",TYPE_WIDGET_PENDING:"Element",NAME_XS:"xs",NAME_SM:"sm",NAME_MD:"md",NAME_LG:"lg",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_LINK:"Link",TYPE_LINK:"Element"}},739:function(e,t,a){e.exports={NAME_WIDGET_PENDING:"WidgetPending",TYPE_WIDGET_PENDING:"Element"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=29.02c399da.chunk.js.map