(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[128,97,199,220,315],{307:function(e,t,n){"use strict";n.r(t),n.d(t,"KEY_PREFIX",(function(){return a})),n.d(t,"REQUIRED_FIELD",(function(){return r})),n.d(t,"BY_CODE",(function(){return o})),n.d(t,"BY_PIN",(function(){return c})),n.d(t,"RESEND_CHANNEL_MAIL",(function(){return s})),n.d(t,"RESEND_CHANNEL_SMS",(function(){return i}));var a="spa.recoverPassword",r="spa.generic.field.error.required",o="byCode",c="byPin",s="mail",i="sms"},371:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return A}));var a=n(0),r=n(5),o=n(16),c=n(11),s=n(39),i=n(8),u=n(138),d=n(82),l=n(38),b=n(517),E=n(488),_=n(489),O=n(490),f=n(33),j=n(80),m=n(51),T=n(99),h=n(530),p=n(433),N=n.n(p),M=n(307),P=n(10);function A(){var e=Object(i.b)(),t=Object(l.c)().textGet,n=Object(T.a)().getValueConfig,p=Object(j.g)(),A=Object(m.sb)(m.O),R=c.b.useState(!1),g=Object(o.a)(R,2),x=g[0],C=g[1],L=Object(i.c)(u.c.exchangeToken),I=Object(i.c)(u.c.verificationCode),v=Object(i.c)(u.c.warning),S=Object(i.c)(u.c.fetching),w=t({uuid:"".concat(M.KEY_PREFIX,".newPassword.label")}),F=t({uuid:"".concat(M.KEY_PREFIX,".password.hint")}),y=Object(h.a)(t,n),Y=s.e.object({password:y});return Object(P.jsxs)(_.a,{"header-onBack":D,"header-title":"".concat(M.KEY_PREFIX,".title"),children:[Object(P.jsx)("section",{children:Object(P.jsxs)(E.a,{schema:Y,warnings:v,onSubmit:function(e){return B.apply(this,arguments)},children:[Object(P.jsx)("div",{className:N.a.textSubtitle,children:Object(P.jsx)(l.b,{uuid:"".concat(M.KEY_PREFIX,".step3.text")})}),Object(P.jsx)("div",{className:N.a.alignInputs,children:Object(P.jsx)(b.a,{helper:F,id:"password",label:w,name:"password"})}),Object(P.jsx)(d.a,{label:{uuid:"".concat(M.KEY_PREFIX,".save.button")},loading:S,type:"submit"})]})}),Object(P.jsxs)(O.a,{open:x,onClose:D,children:[Object(P.jsx)(O.a.Body,{children:Object(P.jsx)(l.b,{uuid:"".concat(M.KEY_PREFIX,".cancelRecover")})}),Object(P.jsx)(O.a.Footer,{children:Object(P.jsx)(d.a,{label:{uuid:"spa.form.accept"},type:"button",onClick:function(){e(u.a.clean()),e(f.a.clean()),p(A)}})})]})]});function B(){return(B=Object(r.a)(Object(a.a)().mark((function t(n){var r;return Object(a.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=n.password,t.next=3,e(u.b.finish({exchangeToken:L,password:r,verificationCode:I}));case 3:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function D(){C(!x)}}},433:function(e,t,n){e.exports={NAME_EXTERNAL_CONTAINER:"ContainerExternal",TYPE_EXTERNAL_CONTAINER:"Container",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_INPUT_FIELD:"InputField",TYPE_INPUT_FIELD:"Element",NAME_INPUT_SELECT:"InputSelect",TYPE_INPUT_SELECT:"Element",NAME_INPUT_NUMBER:"InputNumber",TYPE_INPUT_NUMBER:"Element",NAME_INPUT_PASSWORD:"InputPassword",TYPE_INPUT_PASSWORD:"Element",NAME_XS:"xs",NAME_SM:"sm",NAME_MD:"md",NAME_LG:"lg",textSubtitle:"_rules_textSubtitle__1arob",byCodeInvitationCode:"_rules_byCodeInvitationCode__3ZLV8",textHeading:"_rules_textHeading__102RY",alignInputs:"_rules_alignInputs__H3-u1",alignInvitationCode:"_rules_alignInvitationCode__1O7BC",resendCode:"_rules_resendCode__2nnRn",textBody:"_rules_textBody__2yqjP",alignFooter:"_rules_alignFooter__3p45G"}},488:function(e,t,n){"use strict";n.d(t,"a",(function(){return T}));var a=n(2),r=n(16),o=n(19),c=n(11),s=n(502),i=n(505),u=n(41),d=n(6),l=n(79),b=n(8),E=n(493),_=n.n(E),O=n(10),f=["ariaLabel","ariaLabelledby","schema","onSubmit","children","warnings","isRequiredToast","isResetForm"],j=_.a.NAME_FORM,m=_.a.TYPE_FORM;function T(e){var t=e,n=t.ariaLabel,E=t.ariaLabelledby,_=t.schema,T=t.onSubmit,h=t.children,p=t.warnings,N=t.isRequiredToast,M=t.isResetForm,P=Object(o.a)(t,f),A=Object(b.b)(),R=Object(s.e)({resolver:Object(i.a)(_)}),g=R.handleSubmit,x=R.setError,C=R.formState.errors,L=R.reset,I=Object.keys(C),v=c.b.useState(!1),S=Object(r.a)(v,2),w=S[0],F=S[1],y=c.b.useCallback((function(){N&&w&&A(l.a.set({kind:"ERROR",text:{uuid:"spa.form.field.generic.error"},duration:d.w})),F(!1)}),[A,N,w]),Y=c.b.useCallback((function(){L()}),[L]);return c.b.useEffect((function(){p&&Object.keys(p.data).map((function(e){var t=e.startsWith(d.Nb)?e.slice(d.fb):e;return x(t,{message:p.data[e]},{shouldFocus:!1}),null})),I.length>d.Sb&&y(),M&&Y()}),[I.length,M,Y,x,y,p]),Object(O.jsx)(s.b,Object(a.a)(Object(a.a)(Object(a.a)({},R),P),{},{children:Object(O.jsx)(u.a,{noValidate:!0,"aria-label":n,"aria-labelledby":E,name:j,tag:"form",type:m,onSubmit:g(T,(function(){return F(!w)})),children:h})}))}T.useContext=s.f,T.defaultProps={isRequiredToast:!0,isResetForm:!1,warnings:null}},489:function(e,t,n){"use strict";n.d(t,"a",(function(){return j}));var a=n(2),r=n(19),o=(n(11),n(41)),c=n(136),s=n(82),i=n(38),u=n(101),d=n(491),l=n.n(d),b={name:l.a.NAME_EXTERNAL_CONTAINER,type:l.a.TYPE_EXTERNAL_CONTAINER,showLogo:!1},E=n(492),_=n.n(E),O=n(10),f=["header-onBack","header-title","children","name","type","headerClassName","showLogo"];function j(e){var t=e,n=t["header-onBack"],d=t["header-title"],l=t.children,b=t.name,E=t.type,j=t.headerClassName,m=t.showLogo,T=Object(r.a)(t,f),h=Boolean(n||d),p=Object(o.c)(!d&&_.a.onlyRow,j),N=Object(o.c)(m&&_.a.step1Logo),M=Object(o.c)(m&&_.a.hasLogo);return Object(O.jsxs)(u.a,{children:[m&&Object(O.jsx)("div",{className:N,children:Object(O.jsx)(c.a,{alt:"logo",uuid:"logo150Login"})}),Object(O.jsx)(o.a,Object(a.a)(Object(a.a)({name:b,tag:"article",type:E},T),{},{children:Object(O.jsxs)("article",{className:M,children:[h&&Object(O.jsxs)("header",{className:p,children:[n&&Object(O.jsx)(s.a,{icon:"left",kind:"icon",label:{uuid:"spa.a11y.buttons.back"},size:"medium",variant:"text",onClick:n}),d&&Object(O.jsx)(i.b,{tag:"h5",uuid:d})]}),l]})}))]})}j.defaultProps=b},490:function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var a=n(2),r=n(19),o=n(11),c=n(41),s=n(50),i=n(495),u=n.n(i),d=(n(496),n(38)),l=n(82),b=n(10),E=["ariaLabelledBy","id","children","title","onClose","hasCloseIcon"],_=u.a.TYPE_MODAL,O=u.a.NAME_MODAL;function f(e){var t=e,n=t.ariaLabelledBy,i=t.id,u=t.children,f=t.title,j=t.onClose,m=t.hasCloseIcon,T=Object(r.a)(t,E),h="modal-header-".concat(i||""),p="string"===typeof f?h:n,N="string"===typeof f?Object(b.jsx)(d.b,{id:h,tag:"h4",uuid:f}):f;return Object(b.jsx)(c.a,{name:O,tag:"div",type:_,children:Object(b.jsxs)(s.Modal,Object(a.a)(Object(a.a)({ariaLabelledBy:p,onClose:j},T),{},{children:[Object(b.jsx)(s.Modal.Header,{children:f&&Object(b.jsxs)(o.b.Fragment,{children:[N,m&&Object(b.jsx)(l.a,{icon:"close",kind:"icon",label:{uuid:"spa.a11y.buttons.close.modal"},onClick:j})]})}),u]}))})}f.defaultProps={ariaLabelledBy:"",closeOnBgTap:!0,hasCloseIcon:!0,initialFocusElementId:"",title:""},f.Body=function(e){var t=e.children;return Object(b.jsx)(s.Modal.Body,{children:t})},f.Footer=function(e){var t=e.children,n=e.className;return Object(b.jsx)(s.Modal.Footer,{className:n,children:t})}},491:function(e,t,n){e.exports={NAME_EXTERNAL_CONTAINER:"ContainerExternal",TYPE_EXTERNAL_CONTAINER:"Container"}},492:function(e,t,n){e.exports={NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_LINK:"Link",TYPE_LINK:"Element",NAME_IMAGE:"Image",TYPE_IMAGE:"Element",NAME_XS:"xs",NAME_SM:"sm",NAME_MD:"md",NAME_LG:"lg",NAME_EXTERNAL_CONTAINER:"ContainerExternal",TYPE_EXTERNAL_CONTAINER:"Container",hasLogo:"_rules_hasLogo__AxHGK",onlyRow:"_rules_onlyRow__1im8h",step1Logo:"_rules_step1Logo__3LNq5"}},493:function(e,t,n){e.exports={NAME_FORM:"Form",TYPE_FORM:"Element"}},495:function(e,t,n){e.exports={NAME_MODAL:"Modal",TYPE_MODAL:"Element"}},496:function(e,t,n){e.exports={NAME_MODAL:"Modal",TYPE_MODAL:"Element"}},517:function(e,t,n){"use strict";n.d(t,"a",(function(){return j}));var a=n(2),r=n(19),o=n(11),c=n(50),s=n(41),i=n(488),u=n(529),d=n.n(u),l=n(10),b=["id","name","autoFocus","methods","withSuggestions","onChange"],E=d.a.NAME_INPUT_PASSWORD,_=d.a.TYPE_INPUT_PASSWORD,O={id:E},f=o.b.memo((function(e){var t,n=e.id,o=e.name,i=e.autoFocus,u=e.methods,d=e.withSuggestions,O=void 0===d||d,f=e.onChange,j=Object(r.a)(e,b),m=u.register,T=u.formState,h=u.clearErrors,p=T.errors,N="".concat(o),M=p[o];return Object(l.jsx)(s.a,{name:E,type:_,children:Object(l.jsx)(c.PasswordField,Object(a.a)(Object(a.a)(Object(a.a)({autoComplete:O?"on":"off",autoFocus:i,id:n||o},M&&{error:null===(t=M.message)||void 0===t?void 0:t.toString()}),m(N,{required:!0,onChange:function(e){f&&f(e);h([N])}})),j))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function j(e){var t=i.a.useContext();return Object(l.jsx)(f,Object(a.a)({methods:t},e))}j.displayName=E,j.defaultProps=O},522:function(e,t,n){"use strict";n.d(t,"a",(function(){return a})),n.d(t,"c",(function(){return r})),n.d(t,"e",(function(){return o})),n.d(t,"d",(function(){return c})),n.d(t,"f",(function(){return s})),n.d(t,"b",(function(){return i}));var a="AR1B",r=15,o=function(e){return e===a},c=function(e){return"AR1C"===e},s=function(e){return"0005"===e},i={"0005":r,AR1C:11,AR1B:11}},529:function(e,t,n){e.exports={NAME_INPUT_PASSWORD:"InputPassword",TYPE_INPUT_PASSWORD:"Element"}},530:function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var a=n(30),r=n(6),o=n(187),c=n(522),s=n(39),i=n(74);function u(e,t,n,u){var d=Object(i.a)(t("core.password.minLength")),l=Object(i.a)(t("core.password.maxLength")),b=e({uuid:"spa.generic.accessData.error.documentNumberInPassword"}),E=e({uuid:"spa.generic.accessData.error.userInPassword"}),_=e({uuid:"spa.password.error.tooSmall",replace:"".concat(d)}),O=e({uuid:"spa.password.error.tooBig",replace:"".concat(l)}),f=e({uuid:"spa.generic.field.error.required"}),j=Object(o.d)(s.e.string.required(),f),m=[Object(o.d)(s.e.string.ofLength(d),_),Object(o.d)(s.e.string.ofLength(r.fb,l),O),Object(s.b)("document number in password",(function(e){if(!n)return!0;var t=e;var a=n.number,o=n.type===c.a?(s=a,s.slice(r.Jb,r.ab)):a;var s;return!t.includes(o)||b})),Object(s.b)("username in password",(function(e){return!u||(!e.includes(u)||E)})),Object(s.b)("required chars",(function(n){if(n&&T("repeatedCharacters")){var a,o,c=n,s=Object(i.a)(t("spa.password.repeatedCharacters.maximum")),u=null===(a=c.match(/(\w)\1+/g))||void 0===a?void 0:a.find((function(e){return e.length>=s})),d=null===(o=c.match(/([0-9]{3,})/g))||void 0===o?void 0:o.some((function(e){return function(e,t){if(e.length===r.fb)return!1;for(var n=e.charCodeAt(r.Sb),a=r.Sb,o=r.Sb,c=r.fb;c<e.length;c++){var s=e.charCodeAt(c);a>=r.Sb&&(n===r.cb&&s===r.Tb||n+r.fb===s)?a++:a<=r.Sb&&(n===r.Tb&&s===r.cb||n-r.fb===s)?a--:(o=Math.max(Math.abs(a)+r.fb,o),a=r.Sb),n=s}return Math.max(Math.abs(a)+r.fb,o)>=t}(e,s)}));return u?e({uuid:"spa.password.error.repeatedCharacters",replace:"".concat(s)}):!d||e({uuid:"spa.password.error.consecutiveNumbers",replace:"".concat(s)})}return j}))].concat(Object(a.a)(["atLeastOneDigit","atLeastOneLowercaseChar","atLeastOneUppercaseChar"].filter(T).map((function(n){var a=Object(i.a)(t("spa.password.".concat(n,".regex"))),r=e({uuid:"spa.password.error.".concat(n)});return Object(o.d)(s.e.string.match(new RegExp(a)),r)}))));return Object(s.c)((function(e){var t=m.find((function(t){return!Object(s.d)(e,t)}));return e&&t?t:j}));function T(e){return Object(i.a)(t("spa.password.".concat(e,".enabled")))}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=128.5fe68a7f.chunk.js.map