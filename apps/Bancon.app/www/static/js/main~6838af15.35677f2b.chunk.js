(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[233],{132:function(e,t,r){"use strict";r.d(t,"b",(function(){return i})),r.d(t,"c",(function(){return b})),r.d(t,"a",(function(){return O}));var n=r(0),a=r(2),c=r(5),s=r(4),u=r(3),o=r(21),i=Object(a.a)({},u.i);function b(e){if(!e||!Object(o.a)(e))return!0;var t=e;return Object(u.u)(i,t.code)}var p="landmarks.list";function O(e){return d.apply(this,arguments)}function d(){return(d=Object(c.a)(Object(n.a)().mark((function e(t){var r,c,o;return Object(n.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="".concat(s.d.BANCOR_NO_AUTH_API,"/").concat(p),e.next=3,Object(s.a)({method:s.c.POST,url:r,body:Object(a.a)({},t)});case 3:if(c=e.sent){e.next=6;break}return e.abrupt("return",null);case 6:if(o=c.json,!Object(u.w)(o,b)){e.next=9;break}return e.abrupt("return",Object(u.y)(null===o||void 0===o?void 0:o.code));case 9:return e.abrupt("return",o);case 10:case"end":return e.stop()}}),e)})))).apply(this,arguments)}},4:function(e,t,r){"use strict";r.d(t,"d",(function(){return w})),r.d(t,"a",(function(){return U})),r.d(t,"b",(function(){return F}));var n=r(0),a=r(9),c=r(19),s=r(2),u=r(5),o=r(1),i=r(39),b=r(161),p=r(26),O=r(84),d=r(86),f=r(65),j=r(8),l=r(144),E=r(33),h=r(94),A=r(79),R=r(273),T=r(42),k=r(3);r.d(t,"c",(function(){return T.h}));var v=["method","body"],_=Object({NODE_ENV:"production",PUBLIC_URL:".",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0,REACT_APP_GTM_ID:"GTM-5C33NV9",REACT_APP_BANCOR_API:"https://pdq4.bancor.com.ar/apiqa4",REACT_APP_BANCOR_FRONTEND:"https://pdq4.bancor.com.ar/frontendqa4",REACT_APP_VERSION:"2.3.6",REACT_APP_NAME:"@app/bancon",REACT_APP_TITLE:"BANC\xd3N",REACT_APP_ROUTER_BASE:"/",REACT_APP_BASIC_HEADER_TOKEN:"Basic YmFua2luZzpUM2NobjFzeXMq"}),m=(_.REACT_APP_BASIC_HEADER_TOKEN,_.REACT_APP_BANCOR_API),x=_.REACT_APP_BANCOR_FRONTEND,N=Object(o.i)(o.h.SESSION),P=m,C=x,w={BANCOR_AUTH_API:"".concat(P,"/execute"),BANCOR_NO_AUTH_API:"".concat(P,"/clientSPASession"),BANCOR_FRONTEND:"".concat(C)},S=function(e){return e.status===T.f.NOT_FOUND},g=function(e){return!e.ok&&e.status!==T.f.UNAUTHORIZED},y=function(e,t){return e.ok&&Object(k.v)(t)&&t.code===k.p},I=function(e,t){return e.ok&&Object(k.v)(t)&&t.code===k.q};function U(e){return B.apply(this,arguments)}function B(){return(B=Object(u.a)(Object(n.a)().mark((function e(t){var r,a,c,u,o,i,b,p,O,f,l,E,R,v,_,m,x,N;return Object(n.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=t.url,a=t.token,c=t.excludeFromServiceError,u=void 0!==c&&c,o=t.dispatchCommonError,i=void 0!==o&&o,b=G(r),p=M({preHeaders:t.headers,token:a,fetchingFrontend:b}),O=L(b,null===t||void 0===t?void 0:t.body),f=J(Object(s.a)(Object(s.a)({},t),{},{headers:p,body:O})),e.prev=5,e.next=8,W(r,f);case 8:if(l=e.sent,!S(l)){e.next=12;break}return j.a.dispatch(h.a.add({id:"Exception - http error",message:"".concat(l.status),name:"".concat(l.status)})),e.abrupt("return",null);case 12:return e.next=14,l.json();case 14:if(E=e.sent,!g(l)){e.next=17;break}throw new Error("".concat(l.status," ").concat(l.statusText));case 17:if(!Object(k.s)(E)){e.next=22;break}return e.next=20,z(r,p);case 20:return j.a.dispatch(A.a.set({kind:"ERROR",text:{uuid:"spa.expiredAccessToken.message"}})),e.abrupt("return",null);case 22:if(!y(l,E)){e.next=40;break}return e.next=25,Y();case 25:if(e.t1=R=e.sent,e.t0=null!==e.t1,!e.t0){e.next=29;break}e.t0=void 0!==R;case 29:if(!e.t0){e.next=33;break}e.t2=R,e.next=34;break;case 33:e.t2=T.c;case 34:return v=e.t2,_=E.data,m=_.url,x=void 0===m?v:m,e.next=39,$(x);case 39:return e.abrupt("return",null);case 40:if(!I(l,E)){e.next=44;break}return N=E.data,j.a.dispatch(d.a.add({id:"SERVICE SATURATED ERROR",message:"".concat(l.status),timer:Number(N.timer)})),e.abrupt("return",null);case 44:if(!Object(k.t)(E)||u){e.next=48;break}return e.next=47,z(r,p);case 47:throw new Error("".concat(E.code," ").concat(E.message));case 48:return e.abrupt("return",Object(s.a)(Object(s.a)({},l),{},{json:E}));case 51:e.prev=51,e.t3=e.catch(5),D(e.t3,u,i);case 54:case"end":return e.stop()}}),e,null,[[5,51]])})))).apply(this,arguments)}function F(e){return H.apply(this,arguments)}function H(){return(H=Object(u.a)(Object(n.a)().mark((function e(t){var r,a,c,u,o,i,b,p;return Object(n.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=t.url,a=t.token,c=G(r),u=V({preHeaders:t.headers,token:a,fetchingFrontend:c}),o=L(c,null===t||void 0===t?void 0:t.body),i=J(Object(s.a)(Object(s.a)({},t),{},{headers:u,body:o})),j.a.dispatch(l.a.set(!0)),e.prev=6,e.next=9,W(r,i);case 9:return b=e.sent,e.next=12,b.blob();case 12:if(p=e.sent,b.ok||b.status===T.f.UNAUTHORIZED){e.next=15;break}throw new Error(b.statusText);case 15:return e.abrupt("return",p);case 18:e.prev=18,e.t0=e.catch(6),D(e.t0,!1,!1);case 21:return e.prev=21,j.a.dispatch(l.a.set(!1)),e.finish(21);case 24:case"end":return e.stop()}}),e,null,[[6,18,21,24]])})))).apply(this,arguments)}function D(e,t,r){if(!t||r){var n=e.name,a=e.stack,c=e.message;if(c.includes("503"))j.a.dispatch(f.a.add({id:"SERVICE UNAVAILABLE ERROR",message:"".concat(c),name:n,stack:a}));else if(c.includes(k.q))j.a.dispatch(d.a.add({id:"SERVICE SATURATED ERROR",message:"".concat(c),name:n,stack:a}));else{if(!r){if("AbortError"===e.name)return void j.a.dispatch(f.a.add({id:"EXCEPTION TIMEOUT ABORT ERROR",message:"".concat(k.r," ").concat(e.message),name:e.name,stack:e.stack}));if(e instanceof TypeError)return e.message,void j.a.dispatch(f.a.add({id:"EXCEPTION HTTP SERVER ERROR",message:"".concat(k.j," ").concat(e.message),name:e.name,stack:e.stack}))}j.a.dispatch(f.a.add({id:"EXCEPTION",message:e.message,name:e.name,stack:e.stack}))}}}function L(e,t){var r=void 0,n={channel:p.b?"phonegap":"frontend",lang:"es",isFromSPA:"true"};if(t?Object(i.d)(t,i.e.object())?(t=Object(s.a)(Object(s.a)({},t),n),r=JSON.stringify(t)):r=t:r=JSON.stringify(Object(s.a)({},n)),e){var a=JSON.parse(r);a.ajax_uuid=Object(b.a)(),r=Object(T.k)(a)}return r}function J(e){var t=e.method,r=e.body,n=Object(c.a)(e,v),a=Object(s.a)({method:t,credentials:"include"},n);return t!==T.h.GET&&r&&(a=Object(s.a)(Object(s.a)({},a),{},{body:r})),a}function M(e){var t,r=e.fetchingFrontend,n=e.preHeaders,c=e.token,u=Object(s.a)((t={},Object(a.a)(t,T.e.TYPE,T.b.JSON),Object(a.a)(t,T.e.ACCEPT,T.a.ALL),t),n);return c&&(u=Object(s.a)(Object(s.a)({},u),{},Object(a.a)({},T.e.AUTH,"token ".concat(c)))),r&&(u=Object(s.a)(Object(s.a)({},u),{},Object(a.a)({},T.e.TYPE,T.b.FORM))),u}function V(e){var t,r=e.fetchingFrontend,n=e.preHeaders,c=e.token,u=Object(s.a)((t={},Object(a.a)(t,T.e.TYPE,"blob"),Object(a.a)(t,T.e.ACCEPT,T.a.ALL),t),n);return c&&(u=Object(s.a)(Object(s.a)({},u),{},Object(a.a)({},T.e.AUTH,"token ".concat(c)))),r&&(u=Object(s.a)(Object(s.a)({},u),{},Object(a.a)({},T.e.TYPE,T.b.FORM))),u}function q(){return K.apply(this,arguments)}function K(){return(K=Object(u.a)(Object(n.a)().mark((function e(){var t,r;return Object(n.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,N.get("Persistor");case 2:if(t=e.sent){e.next=5;break}return e.abrupt("return",null);case 5:if(e.prev=5,r=JSON.parse(t)){e.next=9;break}return e.abrupt("return",null);case 9:return e.abrupt("return",Object(R.a)(r.configuration["frontend.ajax.timeout"]));case 12:throw e.prev=12,e.t0=e.catch(5),new Error("Error get timeout");case 15:case"end":return e.stop()}}),e,null,[[5,12]])})))).apply(this,arguments)}function Y(){return X.apply(this,arguments)}function X(){return(X=Object(u.a)(Object(n.a)().mark((function e(){var t,r;return Object(n.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,N.get("Persistor");case 2:if(t=e.sent){e.next=5;break}return e.abrupt("return",null);case 5:if(e.prev=5,r=JSON.parse(t)){e.next=9;break}return e.abrupt("return",null);case 9:return e.abrupt("return",r.configuration["maintenance.redirect.url"]);case 12:throw e.prev=12,e.t0=e.catch(5),new Error("Error get redirect URL");case 15:case"end":return e.stop()}}),e,null,[[5,12]])})))).apply(this,arguments)}function G(e){return e.includes(w.BANCOR_FRONTEND)}function W(e,t){return Z.apply(this,arguments)}function Z(){return(Z=Object(u.a)(Object(n.a)().mark((function e(t,r){var a,c,u,o,i;return Object(n.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,q();case 2:if(e.t1=a=e.sent,e.t0=null!==e.t1,!e.t0){e.next=6;break}e.t0=void 0!==a;case 6:if(!e.t0){e.next=10;break}e.t2=a,e.next=11;break;case 10:e.t2=T.d;case 11:return c=e.t2,u=new AbortController,o=setTimeout((function(){return u.abort()}),c),e.next=16,fetch(t,Object(s.a)(Object(s.a)({},r),{},{signal:u.signal}));case 16:return i=e.sent,clearTimeout(o),e.abrupt("return",i);case 19:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function z(e,t){return Q.apply(this,arguments)}function Q(){return(Q=Object(u.a)(Object(n.a)().mark((function e(t,r){return Object(n.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!Object(T.j)(t)||!Object(T.i)(r)){e.next=3;break}return e.next=3,j.a.dispatch(E.b.logout());case 3:Object(T.j)(t)&&!Object(T.i)(r)&&Object(O.a)();case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function $(e){return ee.apply(this,arguments)}function ee(){return(ee=Object(u.a)(Object(n.a)().mark((function e(t){var r;return Object(n.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(p.c)();case 2:e.sent?(r=window.cordova.InAppBrowser,r.open(t,"_blank","location=no,toolbar=no,footer=no,hideurlbar=yes").show()):window.open(t,"_self");case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=main~6838af15.35677f2b.chunk.js.map