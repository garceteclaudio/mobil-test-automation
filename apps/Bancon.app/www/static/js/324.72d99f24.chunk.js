(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[324],{104:function(t,e,n){"use strict";(function(t,r){n.d(e,"a",(function(){return M})),n.d(e,"b",(function(){return C})),n.d(e,"c",(function(){return J})),n.d(e,"d",(function(){return U})),n.d(e,"e",(function(){return x}));var o=n(56),i=n(175),u=n(70),a=n(252),c=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!==typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),f=function(t,e){var n,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"===typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!(o=(o=u.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=e.call(t,u)}catch(a){i=[6,a],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},l=function(t,e){for(var n=0,r=e.length,o=t.length;n<r;n++,o++)t[o]=e[n];return t},s=Object.defineProperty,d=Object.defineProperties,p=Object.getOwnPropertyDescriptors,v=Object.getOwnPropertySymbols,y=Object.prototype.hasOwnProperty,h=Object.prototype.propertyIsEnumerable,b=function(t,e,n){return e in t?s(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n},g=function(t,e){for(var n in e||(e={}))y.call(e,n)&&b(t,n,e[n]);if(v)for(var r=0,o=v(e);r<o.length;r++){n=o[r];h.call(e,n)&&b(t,n,e[n])}return t},m=function(t,e){return d(t,p(e))},w=function(t,e,n){return new Promise((function(r,o){var i=function(t){try{a(n.next(t))}catch(e){o(e)}},u=function(t){try{a(n.throw(t))}catch(e){o(e)}},a=function(t){return t.done?r(t.value):Promise.resolve(t.value).then(i,u)};a((n=n.apply(t,e)).next())}))},O=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=i.a.apply(void 0,t);return function(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];return n.apply(void 0,l([Object(o.d)(t)?Object(o.a)(t):t],e))}},j="undefined"!==typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"===typeof arguments[0]?u.c:u.c.apply(null,arguments)};"undefined"!==typeof window&&window.__REDUX_DEVTOOLS_EXTENSION__&&window.__REDUX_DEVTOOLS_EXTENSION__;function E(t){if("object"!==typeof t||null===t)return!1;var e=Object.getPrototypeOf(t);if(null===e)return!0;for(var n=e;null!==Object.getPrototypeOf(n);)n=Object.getPrototypeOf(n);return e===n}var A=function(t){function e(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];var o=t.apply(this,n)||this;return Object.setPrototypeOf(o,e.prototype),o}return c(e,t),Object.defineProperty(e,Symbol.species,{get:function(){return e},enumerable:!1,configurable:!0}),e.prototype.concat=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return t.prototype.concat.apply(this,e)},e.prototype.prepend=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return 1===t.length&&Array.isArray(t[0])?new(e.bind.apply(e,l([void 0],t[0].concat(this)))):new(e.bind.apply(e,l([void 0],t.concat(this))))},e}(Array),_=function(t){function e(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];var o=t.apply(this,n)||this;return Object.setPrototypeOf(o,e.prototype),o}return c(e,t),Object.defineProperty(e,Symbol.species,{get:function(){return e},enumerable:!1,configurable:!0}),e.prototype.concat=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return t.prototype.concat.apply(this,e)},e.prototype.prepend=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return 1===t.length&&Array.isArray(t[0])?new(e.bind.apply(e,l([void 0],t[0].concat(this)))):new(e.bind.apply(e,l([void 0],t.concat(this))))},e}(Array);function S(t){return Object(o.e)(t)?Object(o.b)(t,(function(){})):t}function P(){return function(t){return function(t){void 0===t&&(t={});var e=t.thunk,n=void 0===e||e,r=(t.immutableCheck,t.serializableCheck,new A);n&&("boolean"===typeof n?r.push(a.a):r.push(a.a.withExtraArgument(n.extraArgument)));0;return r}(t)}}var I=!0;function M(t){var e,n=P(),r=t||{},o=r.reducer,i=void 0===o?void 0:o,a=r.middleware,c=void 0===a?n():a,f=r.devTools,s=void 0===f||f,d=r.preloadedState,p=void 0===d?void 0:d,v=r.enhancers,y=void 0===v?void 0:v;if("function"===typeof i)e=i;else{if(!E(i))throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');e=Object(u.b)(i)}var h=c;if("function"===typeof h&&(h=h(n),!I&&!Array.isArray(h)))throw new Error("when using a middleware builder function, an array of middleware must be returned");if(!I&&h.some((function(t){return"function"!==typeof t})))throw new Error("each middleware provided to configureStore must be a function");var b=u.a.apply(void 0,h),m=u.c;s&&(m=j(g({trace:!I},"object"===typeof s&&s)));var w=new _(b),O=w;Array.isArray(y)?O=l([b],y):"function"===typeof y&&(O=y(w));var A=m.apply(void 0,O);return Object(u.d)(e,p,A)}function C(t,e){function n(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];if(e){var o=e.apply(void 0,n);if(!o)throw new Error("prepareAction did not return an object");return g(g({type:t,payload:o.payload},"meta"in o&&{meta:o.meta}),"error"in o&&{error:o.error})}return{type:t,payload:n[0]}}return n.toString=function(){return""+t},n.type=t,n.match=function(e){return e.type===t},n}function T(t){return E(t)&&"type"in t}function k(t){return["type","payload","error","meta"].indexOf(t)>-1}function q(t){var e,n={},r=[],o={addCase:function(t,e){var r="string"===typeof t?t:t.type;if(r in n)throw new Error("addCase cannot be called with two reducers for the same action type");return n[r]=e,o},addMatcher:function(t,e){return r.push({matcher:t,reducer:e}),o},addDefaultCase:function(t){return e=t,o}};return t(o),[n,r,e]}function x(t,e,n,r){void 0===n&&(n=[]);var i,u="function"===typeof e?q(e):[e,n,r],a=u[0],c=u[1],f=u[2];if("function"===typeof t)i=function(){return S(t())};else{var s=S(t);i=function(){return s}}function d(t,e){void 0===t&&(t=i());var n=l([a[e.type]],c.filter((function(t){return(0,t.matcher)(e)})).map((function(t){return t.reducer})));return 0===n.filter((function(t){return!!t})).length&&(n=[f]),n.reduce((function(t,n){if(n){var r;if(Object(o.d)(t))return void 0===(r=n(t,e))?t:r;if(Object(o.e)(t))return Object(o.b)(t,(function(t){return n(t,e)}));if(void 0===(r=n(t,e))){if(null===t)return t;throw Error("A case reducer on a non-draftable value must not return undefined")}return r}return t}),t)}return d.getInitialState=i,d}function D(t){var e=N((function(e,n){return t(n)}));return function(t){return e(t,void 0)}}function N(t){return function(e,n){function r(t){return T(e=t)&&"string"===typeof e.type&&Object.keys(e).every(k);var e}var i=function(e){r(n)?t(n.payload,e):t(n,e)};return Object(o.d)(e)?(i(e),e):Object(o.b)(e,i)}}function V(t,e){return e(t)}function X(t){return Array.isArray(t)||(t=Object.values(t)),t}function L(t,e,n){for(var r=[],o=[],i=0,u=t=X(t);i<u.length;i++){var a=u[i],c=V(a,e);c in n.entities?o.push({id:c,changes:a}):r.push(a)}return[r,o]}function R(t){function e(e,n){var r=V(e,t);r in n.entities||(n.ids.push(r),n.entities[r]=e)}function n(t,n){for(var r=0,o=t=X(t);r<o.length;r++){e(o[r],n)}}function r(e,n){var r=V(e,t);r in n.entities||n.ids.push(r),n.entities[r]=e}function o(t,e){var n=!1;t.forEach((function(t){t in e.entities&&(delete e.entities[t],n=!0)})),n&&(e.ids=e.ids.filter((function(t){return t in e.entities})))}function i(e,n){var r={},o={};if(e.forEach((function(t){t.id in n.entities&&(o[t.id]={id:t.id,changes:g(g({},o[t.id]?o[t.id].changes:null),t.changes)})})),(e=Object.values(o)).length>0){var i=e.filter((function(e){return function(e,n,r){var o=r.entities[n.id],i=Object.assign({},o,n.changes),u=V(i,t),a=u!==n.id;return a&&(e[n.id]=u,delete r.entities[n.id]),r.entities[u]=i,a}(r,e,n)})).length>0;i&&(n.ids=Object.keys(n.entities))}}function u(e,r){var o=L(e,t,r),u=o[0];i(o[1],r),n(u,r)}return{removeAll:D((function(t){Object.assign(t,{ids:[],entities:{}})})),addOne:N(e),addMany:N(n),setOne:N(r),setMany:N((function(t,e){for(var n=0,o=t=X(t);n<o.length;n++){r(o[n],e)}})),setAll:N((function(t,e){t=X(t),e.ids=[],e.entities={},n(t,e)})),updateOne:N((function(t,e){return i([t],e)})),updateMany:N(i),upsertOne:N((function(t,e){return u([t],e)})),upsertMany:N(u),removeOne:N((function(t,e){return o([t],e)})),removeMany:N(o)}}function U(t){void 0===t&&(t={});var e=g({sortComparer:!1,selectId:function(t){return t.id}},t),n=e.selectId,r=e.sortComparer,o={getInitialState:function(t){return void 0===t&&(t={}),Object.assign({ids:[],entities:{}},t)}},i={getSelectors:function(t){var e=function(t){return t.ids},n=function(t){return t.entities},r=O(e,n,(function(t,e){return t.map((function(t){return e[t]}))})),o=function(t,e){return e},i=function(t,e){return t[e]},u=O(e,(function(t){return t.length}));if(!t)return{selectIds:e,selectEntities:n,selectAll:r,selectTotal:u,selectById:O(n,o,i)};var a=O(t,n);return{selectIds:O(t,e),selectEntities:a,selectAll:O(t,r),selectTotal:O(t,u),selectById:O(a,o,i)}}},u=r?function(t,e){var n=R(t);function r(e,n){var r=(e=X(e)).filter((function(e){return!(V(e,t)in n.entities)}));0!==r.length&&a(r,n)}function o(t,e){0!==(t=X(t)).length&&a(t,e)}function i(e,n){for(var r=!1,o=0,i=e;o<i.length;o++){var u=i[o],a=n.entities[u.id];if(a){r=!0,Object.assign(a,u.changes);var f=t(a);u.id!==f&&(delete n.entities[u.id],n.entities[f]=a)}}r&&c(n)}function u(e,n){var o=L(e,t,n),u=o[0];i(o[1],n),r(u,n)}function a(e,n){e.forEach((function(e){n.entities[t(e)]=e})),c(n)}function c(n){var r=Object.values(n.entities);r.sort(e);var o=r.map(t);(function(t,e){if(t.length!==e.length)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(t[n]!==e[n])return!1;return!0})(n.ids,o)||(n.ids=o)}return{removeOne:n.removeOne,removeMany:n.removeMany,removeAll:n.removeAll,addOne:N((function(t,e){return r([t],e)})),updateOne:N((function(t,e){return i([t],e)})),upsertOne:N((function(t,e){return u([t],e)})),setOne:N((function(t,e){return o([t],e)})),setMany:N(o),setAll:N((function(t,e){t=X(t),e.entities={},e.ids=[],r(t,e)})),addMany:N(r),updateMany:N(i),upsertMany:N(u)}}(n,r):R(n);return g(g(g({selectId:n,sortComparer:r},o),i),u)}var W=function(t){void 0===t&&(t=21);for(var e="",n=t;n--;)e+="ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW"[64*Math.random()|0];return e},G=["name","message","stack","code"],z=function(t,e){this.payload=t,this.meta=e},B=function(t,e){this.payload=t,this.meta=e},F=function(t){if("object"===typeof t&&null!==t){for(var e={},n=0,r=G;n<r.length;n++){var o=r[n];"string"===typeof t[o]&&(e[o]=t[o])}return e}return{message:String(t)}},J=function(){function t(t,e,n){var r=C(t+"/fulfilled",(function(t,e,n,r){return{payload:t,meta:m(g({},r||{}),{arg:n,requestId:e,requestStatus:"fulfilled"})}})),o=C(t+"/pending",(function(t,e,n){return{payload:void 0,meta:m(g({},n||{}),{arg:e,requestId:t,requestStatus:"pending"})}})),i=C(t+"/rejected",(function(t,e,r,o,i){return{payload:o,error:(n&&n.serializeError||F)(t||"Rejected"),meta:m(g({},i||{}),{arg:r,requestId:e,rejectedWithValue:!!o,requestStatus:"rejected",aborted:"AbortError"===(null==t?void 0:t.name),condition:"ConditionError"===(null==t?void 0:t.name)})}})),u="undefined"!==typeof AbortController?AbortController:function(){function t(){this.signal={aborted:!1,addEventListener:function(){},dispatchEvent:function(){return!1},onabort:function(){},removeEventListener:function(){},reason:void 0,throwIfAborted:function(){}}}return t.prototype.abort=function(){0},t}();return Object.assign((function(t){return function(a,c,l){var s,d=(null==n?void 0:n.idGenerator)?n.idGenerator(t):W(),p=new u;function v(t){s=t,p.abort()}var y=function(){return w(this,null,(function(){var u,y,h,b,g,m;return f(this,(function(f){switch(f.label){case 0:return f.trys.push([0,4,,5]),b=null==(u=null==n?void 0:n.condition)?void 0:u.call(n,t,{getState:c,extra:l}),null===(w=b)||"object"!==typeof w||"function"!==typeof w.then?[3,2]:[4,b];case 1:b=f.sent(),f.label=2;case 2:if(!1===b||p.signal.aborted)throw{name:"ConditionError",message:"Aborted due to condition callback returning false."};return!0,g=new Promise((function(t,e){return p.signal.addEventListener("abort",(function(){return e({name:"AbortError",message:s||"Aborted"})}))})),a(o(d,t,null==(y=null==n?void 0:n.getPendingMeta)?void 0:y.call(n,{requestId:d,arg:t},{getState:c,extra:l}))),[4,Promise.race([g,Promise.resolve(e(t,{dispatch:a,getState:c,extra:l,requestId:d,signal:p.signal,abort:v,rejectWithValue:function(t,e){return new z(t,e)},fulfillWithValue:function(t,e){return new B(t,e)}})).then((function(e){if(e instanceof z)throw e;return e instanceof B?r(e.payload,d,t,e.meta):r(e,d,t)}))])];case 3:return h=f.sent(),[3,5];case 4:return m=f.sent(),h=m instanceof z?i(null,d,t,m.payload,m.meta):i(m,d,t),[3,5];case 5:return n&&!n.dispatchConditionRejection&&i.match(h)&&h.meta.condition||a(h),[2,h]}var w}))}))}();return Object.assign(y,{abort:v,requestId:d,arg:t,unwrap:function(){return y.then(H)}})}}),{pending:o,rejected:i,fulfilled:r,typePrefix:t})}return t.withTypes=function(){return t},t}();function H(t){if(t.meta&&t.meta.rejectedWithValue)throw t.payload;if(t.error)throw t.error;return t.payload}Object.assign;var K="listenerMiddleware";C(K+"/add"),C(K+"/removeAll"),C(K+"/remove");"function"===typeof queueMicrotask&&queueMicrotask.bind("undefined"!==typeof window?window:"undefined"!==typeof r?r:globalThis);var Q,Y=function(t){return function(e){setTimeout(e,t)}};"undefined"!==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame:Y(10);Object(o.c)()}).call(this,n(410),n(411))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=324.72d99f24.chunk.js.map