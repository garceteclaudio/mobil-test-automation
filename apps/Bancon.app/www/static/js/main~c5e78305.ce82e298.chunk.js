(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[246],{159:function(e,t,n){"use strict";n.d(t,"a",(function(){return P}));var a=n(0),r=n(5),o=n(2),c=n(11),i=n(41),E=n(36),l=n(8),s=n(33),u=n(69),T=n(10),O="Tracker",d=(i.b.ELEMENT,{INVALID_ELEMENT:"".concat(O,": Children must be a ReactElement"),INVALID_PROP:"".concat(O,": Child must contain props"),INVALID_SELECT:"".concat(O,": Child is not selectable")}),m=1,M={name:"",type:"",text:"",flowId:""};function P(e){var t=e,n=t.children,a=t.isMountEnabled,r=c.b.useRef(M),i=Object(l.c)(s.e.idTracker),E=Object(l.c)(u.c.isTackerDebugEnabled),O=c.b.Children.map(n,(function(e){if(!c.b.isValidElement(e))throw new Error(d.INVALID_ELEMENT);if(!e.props)throw new Error(d.INVALID_PROP);var t=e.props,n=t["data-name"]||t.name,a=t["data-type"]||t.type,i=t["data-flow"];if(!n||!a)throw new Error(d.INVALID_PROP);var l="";if("string"===typeof t.children)l=t.children;else if("function"===typeof t.children)l=t.children.name;else{var s=JSON.stringify(t.children,(function(e,t){return Array.isArray(t)?t:t&&t.props?"string"===typeof t.props.uuid?t.props.uuid:"?":void 0}));try{var u=JSON.parse(s);l="string"===typeof u?u:Array.isArray(u)?u.filter((function(e){return"?"!==e})).join("-"):String(u)}catch(O){l=s}}var T=null;t._id?T=t.id:"Link"===n?i=t.to:i||(i=f());T=function(e){for(var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,a=3735928559^n,r=1103547991^n,o=0;o<e.length;o++)t=e.charCodeAt(o),a=Math.imul(a^t,2654435761),r=Math.imul(r^t,1597334677);return a=Math.imul(a^a>>>16,2246822507)^Math.imul(r^r>>>13,3266489909),4294967296*(2097151&(r=Math.imul(r^r>>>16,2246822507)^Math.imul(a^a>>>13,3266489909)))+(a>>>0)}([i,n,l=l||"none"].join("-")),r.current={name:n,text:l,type:a,flowId:i},E&&console.log("(".concat(T," -- ").concat(i," ").concat(n," ").concat(l,")"));return c.b.cloneElement(e,Object(o.a)(Object(o.a)({},t),{},{id:T,onClick:function(){for(var e=arguments.length,a=new Array(e),r=0;r<e;r++)a[r]=arguments[r];"function"===typeof t.onClick&&t.onClick.apply(this,a),m("".concat(n,":Click"))}}))})),m=c.b.useCallback((function(e){var t=r.current,n=t.name,a=t.type,o=t.text,c=t.flowId;!function(e){_.apply(this,arguments)}({event:e,uid:i,type:a,text:o,name:n,flowId:c})}),[i]);c.b.useEffect((function(){var e=r.current.name;return a&&m("".concat(e,":Mount")),function(){a&&m("".concat(e,":Unmount"));r.current=M}}),[m,a]);var P=O;if(E){var A=P?P[0].props.id:"",p=r.current,b=p.name,h=p.text,j=p.flowId,R=void 0===j?"none":j;return Object(T.jsxs)(c.b.Fragment,{children:[P,E&&Object(T.jsxs)("div",{children:[Object(T.jsx)("span",{style:{backgroundColor:"yellow",fontSize:"small"},children:"id: (".concat(A,")")}),Object(T.jsx)("span",{style:{backgroundColor:"gold",fontSize:"small"},children:"(flowId: ".concat(R,", name: ").concat(b,", text: ").concat(h,")")})]})]})}return P}function _(){return(_=Object(r.a)(Object(a.a)().mark((function e(t){var n,r,c,i,l,s,u,T,O,d;return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=t.name,r=t.type,c=t.text,i=void 0===c?"":c,l=t.uid,s=t.event,(u=window).dataLayer){e.next=4;break}return e.abrupt("return");case 4:return T=f(),e.next=7,Object(E.g)();case 7:O=e.sent,d={name:n,type:r,text:i,platform:O,route:T,uid:l},u.dataLayer.push(Object(o.a)({event:"Tech:".concat(s)},d));case 10:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function f(){return window.location.hash.slice(m)||"/"}P.displayName=O,P.defaultProps={isMountEnabled:!1}},253:function(e,t,n){e.exports={NAME_THEME:"Theme",TYPE_THEME:"Element",NAME_EXAMPLETHEME:"ExampleTheme",TYPE_EXAMPLETHEME:"Page"}},255:function(e,t,n){e.exports={NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element"}},257:function(e,t,n){e.exports={NAME_SPLASH:"Splash",TYPE_SPLASH:"Element"}},260:function(e,t,n){e.exports={NAME_TOAST:"Toast",TYPE_TOAST:"Element"}},262:function(e,t,n){e.exports={NAME_LOADING:"Loading",TYPE_LOADING:"Element"}},270:function(e,t,n){"use strict";n.d(t,"a",(function(){return O}));var a=n(2),r=n(19),o=(n(11),n(41)),c=n(50),i=(n(423),n(262)),E=n.n(i),l=n(10),s=["name","ariaAtomic","ariaLive","a11yMsg","size"],u=E.a.NAME_LOADING,T=E.a.TYPE_LOADING;function O(e){var t=e,n=t.name,i=t.ariaAtomic,E=t.ariaLive,O=t.a11yMsg,d=t.size,m=Object(r.a)(t,s);return Object(l.jsx)(o.a,Object(a.a)(Object(a.a)({},m),{},{name:u,type:T,children:Object(l.jsx)(c.Lottie,Object(a.a)({loop:!0,play:!0,name:n,size:d},O&&{title:O,"aria-live":E,"aria-atomic":i}))}))}O.defaultProps={ariaAtomic:"true",ariaLive:"assertive",name:"spinner",size:"xlarge"}},283:function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var a=n(2),r=n(19),o=(n(11),n(50)),c=n(253),i=n.n(c),E=n(10),l=["children"],s=(i.a.NAME_THEME,i.a.TYPE_THEME,{"card-background":{1:"#355054",2:"#005F5A",3:"#583D46",4:"#004750",5:"#EAC45D",6:"#697D2B",7:"#CAC5F0",8:"#005F5A",9:"#004750",10:"#EAC45D",11:"#1F140F",12:"#84D7CC"}});function u(e){var t=e.children,n=Object(r.a)(e,l);return Object(E.jsx)(o.ThemeProvider,Object(a.a)(Object(a.a)({theme:s},n),{},{children:t}))}},295:function(e,t,n){"use strict";n.d(t,"a",(function(){return T}));var a=n(2),r=(n(11),n(41)),o=n(50),c=n(296),i=(n(420),n(257)),E=n.n(i),l=n(10),s=E.a.NAME_SPLASH,u=E.a.TYPE_SPLASH;function T(e){var t=e.callbackLottie;return Object(l.jsx)(r.a,Object(a.a)(Object(a.a)({},e),{},{name:s,type:u,children:Object(l.jsx)(o.Lottie,{play:!0,animationData:c,eventListeners:[{eventName:"complete",callback:t}]})}))}T.defaultProps={}},298:function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var a=n(2),r=n(19),o=n(11),c=n(41),i=n(50),E=n(6),l=n(82),s=n(38),u=n(260),T=n.n(u),O=n(72),d=n.n(O),m=n(10),M=["kind","text","textPlain","handleClose","duration","position","isHomeActive","isLoggedIn"],P=T.a.TYPE_TOAST,_=T.a.NAME_TOAST,f={ERROR:d.a.error,INFO:d.a.info,WARNING:d.a.warning,SUCCESS:d.a.success},A={ERROR:"error",INFO:"info",WARNING:"warning",SUCCESS:"success"},p={TOP:d.a.top,BOTTOM:d.a.bottom},b={duration:E.y,handleClose:function(){},isHomeActive:!1,isLoggedIn:!1,position:"top"};function h(e){var t=e,n=t.kind,u=t.text,T=t.textPlain,O=t.handleClose,b=t.duration,h=t.position,j=t.isHomeActive,R=t.isLoggedIn,N=Object(r.a)(t,M),L=p[h.toUpperCase()],v=A[n],H=Object(c.c)(d.a.alert,j?d.a.alertHome:d.a.alertNotHome,!R&&d.a.alertLoggedOut),x=Object(c.c)(f[n],L,R&&(j?d.a.toastHome:d.a.toastNotHome)),C=o.b.isValidElement(u);return o.b.useEffect((function(){if(b===E.kb)return function(){};var e=setTimeout((function(){O&&O()}),b);return function(){return clearTimeout(e)}}),[O,b]),Object(m.jsx)(c.a,Object(a.a)(Object(a.a)({},N),{},{className:x,name:_,type:P,children:Object(m.jsxs)(i.Alert,{className:H,variant:v,children:[Object(m.jsx)("div",{children:Object(m.jsx)(i.Lottie,{play:!0,name:v,size:"medium"})}),Object(m.jsxs)("div",{children:[!T&&u&&Object(m.jsx)("div",{children:C?u:Object(m.jsx)(s.b,Object(a.a)({},u))}),T&&!u&&Object(m.jsx)(s.b,{children:T})]}),Object(m.jsx)("div",{children:Object(m.jsx)(l.a,{ariaLabel:{uuid:"spa.a11y.buttons.close"},kind:"plain",label:{uuid:"spa.a11y.buttons.close"},onClick:O,children:Object(m.jsx)(i.Icon,{name:"close",size:"medium",stroke:"gray-dark"})})})]})}))}h.defaultProps=b,h.displayName=_},38:function(e,t,n){"use strict";n.d(t,"c",(function(){return h})),n.d(t,"b",(function(){return j})),n.d(t,"a",(function(){return R}));var a=n(0),r=n(2),o=n(19),c=n(5),i=(n(11),n(50)),E=n(269),l=n(304),s=n(66),u=n(255),T=n.n(u),O=(n(416),n(10)),d=["tag","uuid","replace","fallback","children"],m=["children"],M=T.a.NAME_TEXT,P=T.a.TYPE_TEXT;function _(){return(_=Object(c.a)(Object(a.a)().mark((function e(){var t;return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(E.b)();case 2:return t=e.sent,e.abrupt("return",t);case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var f=Object(l.a)({getter:function(){return _.apply(this,arguments)},languages:E.a,matcher:/#{(.*?)}/}),A=f.ProviderTextPlatform,p=f.TextPlatform,b=f.useTextPlatform;function h(){try{return b()}catch(e){throw new Error(s.a.NO_PROVIDER.replace(s.d,M))}}function j(e){var t=e.tag,n=e.uuid,a=e.replace,c=e.fallback,E=e.children,l=Object(o.a)(e,d),s="p"===t||"span"===t?"body":t;return n||E?E?Object(O.jsx)(i.Text,Object(r.a)(Object(r.a)({},l),{},{as:t,"data-name":M,"data-type":P,variant:s,children:E})):Object(O.jsx)(i.Text,Object(r.a)(Object(r.a)({},l),{},{as:t,"data-name":M,"data-type":P,variant:s,children:Object(O.jsx)(p,{fallback:c,replace:a,tag:"span",uuid:n})})):null}function R(e){var t=e.children,n=Object(o.a)(e,m);return Object(O.jsx)(A,Object(r.a)(Object(r.a)({language:"es"},n),{},{children:t}))}j.defaultProps={align:"left",tag:"p"}},416:function(e,t,n){e.exports={NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element"}},419:function(e,t,n){e.exports={NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider"}},420:function(e,t,n){e.exports={NAME_SPLASH:"Splash",TYPE_SPLASH:"Element",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider"}},423:function(e,t,n){e.exports={NAME_LOADING:"Loading",TYPE_LOADING:"Element",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider"}},72:function(e,t,n){e.exports={NAME_TOAST:"Toast",TYPE_TOAST:"Element",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_XS:"xs",NAME_SM:"sm",NAME_MD:"md",NAME_LG:"lg",rebounce:"_rules_rebounce__rBSdT",toastHome:"_rules_toastHome__1B6HF",alertHome:"_rules_alertHome__3Fwhj",toastNotHome:"_rules_toastNotHome__1RCab",alertNotHome:"_rules_alertNotHome__2IDLO",top:"_rules_top__2l7LZ",bottom:"_rules_bottom__2WQZW",alert:"_rules_alert__kRICJ",alertLoggedOut:"_rules_alertLoggedOut__3cnjC"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=main~c5e78305.ce82e298.chunk.js.map