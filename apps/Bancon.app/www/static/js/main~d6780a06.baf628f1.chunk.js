(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[251],{171:function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(0),a=n(5),i=n(26),c=n(28);function s(){return o.apply(this,arguments)}function o(){return(o=Object(a.a)(Object(r.a)().mark((function e(){var t;return Object(r.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(i.c)();case 2:if(e.sent&&cordova.plugins){e.next=5;break}throw i.a.CORDOVA_UNAVAILABLE;case 5:if(t=cordova.plugins.softToken){e.next=8;break}throw i.a.PLUGIN_UNAVAILABLE;case 8:return e.abrupt("return",t);case 9:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function u(e){return l.apply(this,arguments)}function l(){return(l=Object(a.a)(Object(r.a)().mark((function e(t){var n,a;return Object(r.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.seed,e.next=3,Object(i.c)();case 3:if(e.sent){e.next=6;break}throw i.a.CORDOVA_UNAVAILABLE;case 6:return e.next=8,s();case 8:return a=e.sent,e.abrupt("return",new Promise((function(e,t){try{a.getToken(n,(function(t){e({code:c.a.SUCCESS,value:t})}),(function(e){t(new c.b(c.a.ERROR,a.getToken.name,e))}))}catch(r){t(r)}})));case 10:case"end":return e.stop()}}),e)})))).apply(this,arguments)}},182:function(e,t,n){"use strict";n.d(t,"b",(function(){return s})),n.d(t,"a",(function(){return u})),n.d(t,"c",(function(){return v}));var r=n(0),a=n(5),i=n(26),c=n(36);function s(e){return o.apply(this,arguments)}function o(){return(o=Object(a.a)(Object(r.a)().mark((function e(t){return Object(r.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(i.c)();case 2:if(e.sent&&window.VUFingerprintPlugin){e.next=5;break}throw i.a.CORDOVA_UNAVAILABLE;case 5:return e.abrupt("return",new Promise((function(e,n){try{window.VUFingerprintPlugin.getHash(t,(function(t){e(t)}),(function(e){n(e)}))}catch(r){n(r)}})));case 6:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function u(e){return l.apply(this,arguments)}function l(){return(l=Object(a.a)(Object(r.a)().mark((function e(t){var n;return Object(r.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(i.c)();case 2:if(e.sent&&window.VUFingerprintPlugin){e.next=5;break}throw i.a.CORDOVA_UNAVAILABLE;case 5:return e.next=7,Object(c.g)();case 7:return n=e.sent,e.abrupt("return",new Promise((function(e,r){try{window.VUFingerprintPlugin.getFingerprintInfo(t,(function(t){var r=t;n===c.b.CORDOVA_IOS&&(r=JSON.stringify(t)),e(r)}),(function(e){r(e)}))}catch(a){r(a)}})));case 9:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function v(){return f.apply(this,arguments)}function f(){return(f=Object(a.a)(Object(r.a)().mark((function e(){return Object(r.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(i.c)();case 2:if(e.sent&&window.VUFingerprintPlugin){e.next=5;break}throw i.a.CORDOVA_UNAVAILABLE;case 5:return e.abrupt("return",new Promise((function(e,t){try{window.VUFingerprintPlugin.getRandomSeed((function(t){e(t)}),(function(e){t(e)}))}catch(n){t(n)}})));case 6:case"end":return e.stop()}}),e)})))).apply(this,arguments)}},267:function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(0),a=n(5),i=n(26),c=n(28),s="universalLinks";function o(e){return u.apply(this,arguments)}function u(){return(u=Object(a.a)(Object(r.a)().mark((function e(t){var n,a;return Object(r.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.eventName,a=t.callback,e.next=3,Object(i.c)();case 3:if(e.sent){e.next=6;break}throw i.a.CORDOVA_UNAVAILABLE;case 6:if(window.universalLinks){e.next=8;break}throw{code:i.a.PLUGIN_UNAVAILABLE,message:"Plugin unavailable"};case 8:return e.abrupt("return",new Promise((function(e,t){try{window.universalLinks.subscribe(n,(function(t){e(a(t))}),(function(e){return t(new c.b(c.a.ERROR,s,e))}))}catch(r){t(new c.b(c.a.ERROR,s,c.c))}})));case 9:case"end":return e.stop()}}),e)})))).apply(this,arguments)}},271:function(e,t,n){"use strict";n.d(t,"b",(function(){return u})),n.d(t,"a",(function(){return v}));var r=n(2),a=n(0),i=n(5),c=n(26),s=n(36),o=n(28);function u(e){return l.apply(this,arguments)}function l(){return(l=Object(i.a)(Object(a.a)().mark((function e(t){var n;return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.options,e.next=3,Object(c.c)();case 3:if(e.sent){e.next=6;break}throw c.a.CORDOVA_UNAVAILABLE;case 6:if(window.plugins.socialsharing){e.next=8;break}throw{code:c.a.PLUGIN_UNAVAILABLE,message:"Plugin unavailable"};case 8:return e.abrupt("return",new Promise((function(e,t){try{window.plugins.socialsharing.shareWithOptions(n,(function(t){e({code:o.a.SUCCESS,value:t})}),(function(e){t(new o.b(o.a.ERROR,window.plugins.socialsharing.shareWithOptions.name,e||o.c))}))}catch(r){t(r)}})));case 9:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function v(e){return f.apply(this,arguments)}function f(){return(f=Object(i.a)(Object(a.a)().mark((function e(t){var n,i,c,o,l,v,f,p;return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.options,i=t.files,e.next=3,Object(s.g)();case 3:return c=e.sent,o=i.map((function(e){var t=e.base64File,n=e.fileName,r="data:application/pdf;base64,".concat(t);if(c===s.b.CORDOVA_IOS){var a=n.replace("/"," ");r="data:application/pdf:".concat(a,".pdf;base64,").concat(t)}return r})),l=Object(r.a)(Object(r.a)({},n),{},{message:null}),v=c===s.b.CORDOVA_IOS?l:n,f=Object(r.a)(Object(r.a)({},v),{},{files:o}),e.next=10,u({options:f});case 10:return p=e.sent,e.abrupt("return",p.value);case 12:case"end":return e.stop()}}),e)})))).apply(this,arguments)}},28:function(e,t,n){"use strict";n.d(t,"c",(function(){return u})),n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return v}));var r=n(58),a=n(57),i=n(126),c=n(67),s=n(68),o=n(103),u="Unknown error ocurred",l={SUCCESS:0,ERROR:-1,ERROR_UNKNOWN:-2},v=function(e){Object(c.a)(n,e);var t=Object(s.a)(n);function n(e,a,c,s){var o;return Object(r.a)(this,n),(o=t.call(this,"Plugin ".concat(a," failed with error: ").concat(c))).code=e,o.pluginName=a,o.message=c,o.objError=s,Object.setPrototypeOf(Object(i.a)(o),n.prototype),o}return Object(a.a)(n,[{key:"getErrorObject",value:function(){return this.objError}}]),n}(Object(o.a)(Error))},294:function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(0),a=n(5),i=n(26),c=n(28),s="uniqueDevice";function o(){return u.apply(this,arguments)}function u(){return(u=Object(a.a)(Object(r.a)().mark((function e(){return Object(r.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(i.c)();case 2:if(e.sent){e.next=5;break}throw i.a.CORDOVA_UNAVAILABLE;case 5:if(window.plugins.uniqueDeviceID){e.next=7;break}throw{code:i.a.PLUGIN_UNAVAILABLE,message:"Plugin unavailable"};case 7:return e.abrupt("return",new Promise((function(e,t){try{window.plugins.uniqueDeviceID.get((function(t){e({code:c.a.SUCCESS,value:t})}),(function(e){t(new c.b(c.a.ERROR,s,e||c.c))}))}catch(n){t(n)}})));case 8:case"end":return e.stop()}}),e)})))).apply(this,arguments)}},299:function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(0),a=n(5),i=n(26),c=n(28);function s(){return o.apply(this,arguments)}function o(){return(o=Object(a.a)(Object(r.a)().mark((function e(){var t;return Object(r.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(i.c)();case 2:if(e.sent&&cordova.plugins){e.next=5;break}throw i.a.CORDOVA_UNAVAILABLE;case 5:if(t=cordova.plugins.screenLock){e.next=8;break}throw i.a.PLUGIN_UNAVAILABLE;case 8:return e.abrupt("return",t);case 9:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function u(){return l.apply(this,arguments)}function l(){return(l=Object(a.a)(Object(r.a)().mark((function e(){var t;return Object(r.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(i.c)();case 2:if(e.sent){e.next=5;break}throw i.a.CORDOVA_UNAVAILABLE;case 5:return e.next=7,s();case 7:return t=e.sent,e.abrupt("return",new Promise((function(e,n){try{t.isScreenLockEnabled((function(t){e({code:c.a.SUCCESS,value:t})}),(function(e){n(new c.b(c.a.ERROR,t.isScreenLockEnabled.name,e))}))}catch(r){n(new c.b(c.a.ERROR_UNKNOWN,t.isScreenLockEnabled.name,c.c))}})));case 9:case"end":return e.stop()}}),e)})))).apply(this,arguments)}},305:function(e,t,n){"use strict";n.d(t,"a",(function(){return E}));var r=n(58),a=n(57),i=n(73),c=n(59),s=n(67),o=n(68),u=n(0),l=n(5),v=n(26),f=n(36),p=n(45),h=n(171),O=n(271),b=function(){function e(){Object(r.a)(this,e),this.KEY_SEED="seed",this.EMPTY_STRING="",this._debug=!1,this.self=this,this._handledEvents=new Map,this._callbacksHolder=new Map,this.listeners={REQUEST_DATA:"convivence.rediseno.data.request",RECEIVE_EVOLUTIVE_DATA:"convivence.rediseno.data.receive",FILE_MANAGER_OPEN_ATTACHMENT:"convivence.rediseno.filemanager.openattachment",GET_OTP:"convivence.rediseno.getotp",SOCIAL_SHARE:"convivence.rediseno.socialshare",OPEN_PAGE:"convivence.rediseno.openpage",GET_PLATFORM:"convivence.rediseno.getplatform"},this._dataCollectors={PLACE_HOLDER:"data.collect.place.holder"},this.evolutiveData={events:{REQUEST_DATA:"convivence.evolutive.data.request",RECEIVE_REDISENO_DATA:"convivence.evolutive.data.receive",SHOW_LOADER:"convivence.evolutive.loader.show",HIDE_LOADER:"convivence.evolutive.loader.hide",SHOW_TOAST_MESSAGE:"convivence.evolutive.ui.toast.show",SEND_OTP:"convivence.evolutive.sendotp",SET_PLATFORM:"convivence.evolutive.sendplatform"},dataCollectors:{USER_MADE_ANY_ACTION:"data.collect.session.userMadeAnyAction"}}}return Object(a.a)(e,[{key:"getEvolutiveData",value:function(){return this.evolutiveData}},{key:"triggerEvent",value:function(e,t){var n=this._handledEvents.get(e);void 0!==n?n(t):this._log("There is no event name: ".concat(e))}},{key:"_getDestinationIframe",value:function(){return document.getElementsByTagName("iframe")[0]}},{key:"_getDestinationElement",value:function(){var e;return null===(e=this._getDestinationIframe())||void 0===e?void 0:e.contentWindow}},{key:"_getDestinationOrigin",value:function(){var e=this._getDestinationIframe(),t=new URL(e.src);return null===t||void 0===t?void 0:t.origin}},{key:"triggerPostEvent",value:function(e,t){var n=this._getDestinationElement();n&&n.postMessage({eventName:e,data:t},this._getDestinationOrigin())}},{key:"_log",value:function(e){var t=e;if(this._debug){t="string"===typeof e?"[REDISENO] "+e:e,console.log(t)}}},{key:"_triggerCallback",value:function(e,t){var n=this._callbacksHolder.get(e);n?(this._callbacksHolder.delete(e),n(t)):this._log("Callback inexistent for: ".concat(e))}},{key:"_eventListenerHandler",value:function(e){if(e&&null!==e&&void 0!==e&&e.data){var t=e.data,n=t.eventName,r=t.data;this.triggerEvent(n,r)}else this._log("Unregistered event has been triggered!")}},{key:"_registerPostMessageEventHandler",value:function(){var e=this;window.addEventListener("message",(function(t){return e._eventListenerHandler(t)}),!1)}},{key:"_registerNewEventListener",value:function(e){var t=e.listenerName,n=e.listenerFunction;this._handledEvents.set(t,n)}},{key:"_registerEventListeners",value:function(){this._registerNewEventListener({listenerName:this.listeners.REQUEST_DATA,listenerFunction:this._requestDataEvent.bind(this)}),this._registerNewEventListener({listenerName:this.listeners.RECEIVE_EVOLUTIVE_DATA,listenerFunction:this._receiveEvolutiveDataEvent.bind(this)}),this._registerNewEventListener({listenerName:this.listeners.FILE_MANAGER_OPEN_ATTACHMENT,listenerFunction:this._fileManagerOpenAttachment.bind(this)}),this._registerNewEventListener({listenerName:this.listeners.GET_OTP,listenerFunction:this.getOtp.bind(this)}),this._registerNewEventListener({listenerName:this.listeners.SOCIAL_SHARE,listenerFunction:this._socialShare.bind(this)}),this._registerNewEventListener({listenerName:this.listeners.OPEN_PAGE,listenerFunction:this._openPage.bind(this)}),this._registerNewEventListener({listenerName:this.listeners.GET_PLATFORM,listenerFunction:this._getPlatform.bind(this)})}},{key:"_dataCollector",value:function(e){var t="";if(e===this._dataCollectors.PLACE_HOLDER)t="place holder";else this._log("Data collector inexistent for: ".concat(e));return t}},{key:"_generateCallbackId",value:function(){return(new Date).getTime()}},{key:"_registerCallback",value:function(e,t){var n=t;return void 0===n&&(n=this._generateCallbackId()),this._callbacksHolder.set(n,e),n}},{key:"_requestDataEvent",value:function(e){var t=e.collector,n=e.callbackId,r=this._dataCollector(t);this.sendResponseData(r,n)}},{key:"_receiveEvolutiveDataEvent",value:function(e){if(void 0===e.callbackId)return this._log("Receiving data event but not a callbackId"),void this._log(e.data);this._triggerCallback(Number(e.callbackId),e.data)}},{key:"_fileManagerOpenAttachment",value:function(e){var t=e.url,n=e.fileName,r=e.showLoader,a=new URL("https://pdq4.bancor.com.ar/frontendqa4");new FileOpenerManager(t,n,r,a.origin).openAttachment()}},{key:"getOtp",value:function(){var e=Object(l.a)(Object(u.a)().mark((function e(){var t,n,r;return Object(u.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(p.b)(this.KEY_SEED);case 2:return t=e.sent,n=t.value,(Object(p.d)(t)||null===n)&&(n=this.EMPTY_STRING),e.next=7,Object(h.a)({seed:n});case 7:r=e.sent.value,this.triggerPostEvent(this.evolutiveData.events.SEND_OTP,{data:r});case 9:case"end":return e.stop()}}),e,this)})));return function(){return e.apply(this,arguments)}}()},{key:"_socialShare",value:function(){var e=Object(l.a)(Object(u.a)().mark((function e(t){var n;return Object(u.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n={options:t},e.next=3,Object(O.b)(n);case 3:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()},{key:"_openPage",value:function(){var e=Object(l.a)(Object(u.a)().mark((function e(t){var n,r,a;return Object(u.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.url,r=t.target,a=void 0===r?"_blank":r,e.next=3,Object(v.c)();case 3:e.sent?window.cordova.InAppBrowser.open(n,a,"location=yes"):window.open(n,a);case 5:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()},{key:"_getPlatform",value:function(){var e=Object(l.a)(Object(u.a)().mark((function e(){var t,n;return Object(u.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(f.g)();case 2:t=e.sent,n=Object(f.f)(t),this.triggerPostEvent(this.evolutiveData.events.SET_PLATFORM,n);case 5:case"end":return e.stop()}}),e,this)})));return function(){return e.apply(this,arguments)}}()},{key:"initialize",value:function(){this._registerPostMessageEventHandler(),this._registerEventListeners()}}]),e}(),E=function(e){Object(s.a)(n,e);var t=Object(o.a)(n);function n(){return Object(r.a)(this,n),t.apply(this,arguments)}return Object(a.a)(n,[{key:"requestData",value:function(e,t){Object(i.a)(Object(c.a)(n.prototype),"triggerPostEvent",this).call(this,Object(i.a)(Object(c.a)(n.prototype),"getEvolutiveData",this).call(this).events.REQUEST_DATA,{collector:e,callbackId:Object(i.a)(Object(c.a)(n.prototype),"_registerCallback",this).call(this,t)})}},{key:"sendRedisenoData",value:function(e,t){this.sendResponseData(e,t)}},{key:"showLoader",value:function(){Object(i.a)(Object(c.a)(n.prototype),"triggerPostEvent",this).call(this,Object(i.a)(Object(c.a)(n.prototype),"getEvolutiveData",this).call(this).events.SHOW_LOADER)}},{key:"hideLoader",value:function(){Object(i.a)(Object(c.a)(n.prototype),"triggerPostEvent",this).call(this,Object(i.a)(Object(c.a)(n.prototype),"getEvolutiveData",this).call(this).events.HIDE_LOADER)}},{key:"showMessage",value:function(e,t){Object(i.a)(Object(c.a)(n.prototype),"triggerPostEvent",this).call(this,Object(i.a)(Object(c.a)(n.prototype),"getEvolutiveData",this).call(this).events.SHOW_TOAST_MESSAGE,{message:e,messageType:t})}},{key:"checkUserActivity",value:function(e){this.requestData(Object(i.a)(Object(c.a)(n.prototype),"getEvolutiveData",this).call(this).dataCollectors.USER_MADE_ANY_ACTION,e)}},{key:"sendResponseData",value:function(e,t){Object(i.a)(Object(c.a)(n.prototype),"triggerPostEvent",this).call(this,Object(i.a)(Object(c.a)(n.prototype),"getEvolutiveData",this).call(this).events.RECEIVE_REDISENO_DATA,{data:e,callbackId:t})}}]),n}(b)},45:function(e,t,n){"use strict";n.d(t,"b",(function(){return s})),n.d(t,"c",(function(){return o})),n.d(t,"a",(function(){return u})),n.d(t,"d",(function(){return l}));var r=n(28),a={code:r.a.SUCCESS,value:!0},i="NativeStorage",c=function(e){return e[e.NATIVE_WRITE_FAILED=1]="NATIVE_WRITE_FAILED",e[e.ITEM_NOT_FOUND=2]="ITEM_NOT_FOUND",e[e.NULL_REFERENCE=3]="NULL_REFERENCE",e[e.UNDEFINED_TYPE=4]="UNDEFINED_TYPE",e[e.JSON_ERROR=5]="JSON_ERROR",e[e.WRONG_PARAMETER=6]="WRONG_PARAMETER",e}({});function s(e){var t=v();return t?new Promise((function(n,a){try{t.getItem(e,(function(e){n(function(e){return{code:r.a.SUCCESS,value:String(e)}}(e))}),(function(e){e.code===c.ITEM_NOT_FOUND?n({code:c.ITEM_NOT_FOUND,value:null}):a(f(String(e.code)))}))}catch(i){a(f(String(i)))}})):Promise.resolve({code:r.a.SUCCESS,value:null})}function o(e){var t=v();return t?new Promise((function(n,r){try{t.setItem(e.key,e.val,n.bind(null,a),r)}catch(i){r(f(String(i)))}})):Promise.resolve({code:r.a.SUCCESS,value:null})}function u(e){var t=v();return t?new Promise((function(n,r){try{t.remove(e,n.bind(null,a),r)}catch(i){r(f(String(i)))}})):Promise.resolve({code:r.a.SUCCESS,value:null})}function l(e){return e.code!==r.a.SUCCESS}function v(){return"undefined"!==typeof NativeStorage?NativeStorage:null}function f(e){return new r.b(r.a.ERROR,i,null!==e&&void 0!==e?e:r.c)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=main~d6780a06.baf628f1.chunk.js.map