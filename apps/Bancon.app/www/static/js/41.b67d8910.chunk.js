(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[41],{382:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return Y}));var a=n(2),r=n(16),i=n(11),c=n(39),o=n(6),l=n(8),u=n(137),s=n(152),d=n(187),b=n(33),j=n(38),p=n(82),m=n(100),f=n(616),O=n(50),v=n(490),x=n(488),h=n(515),T=n(500),g=n(676),y=n.n(g),_=n(10);function E(e){var t=e,n=t.renderData,a=t.totalAmount,r=t.handleDelete,i=Object(j.c)().textGet;return Object(_.jsxs)("ul",{className:y.a.orderPaymentDataContainer,children:[Object(_.jsxs)("li",{children:[Object(_.jsx)(j.b,{uuid:"spa.supplier.referencePayment"}),Object(_.jsx)(j.b,{className:y.a.orderDataContent,children:null===n||void 0===n?void 0:n.reference})]}),Object(_.jsxs)("li",{children:[Object(_.jsx)(j.b,{uuid:"spa.supplier"}),Object(_.jsx)(j.b,{className:y.a.orderDataContent,children:null===n||void 0===n?void 0:n.supplierName})]}),Object(_.jsxs)("li",{children:[Object(_.jsx)(j.b,{uuid:"spa.supplier.CBU"}),Object(_.jsx)(j.b,{className:y.a.orderDataContent,children:null===n||void 0===n?void 0:n.supplierCBU})]}),Object(_.jsxs)("li",{children:[Object(_.jsx)(j.b,{uuid:"spa.supplier.paymentOrder.total"}),Object(_.jsx)(T.a,{amount:a})]}),Object(_.jsx)("li",{children:Object(_.jsx)(p.a,{ariaLabel:{uuid:"spa.supplier.discard"},icon:"trash",kind:"icon",label:i({uuid:"spa.supplier.discard"}),type:"button",onClick:r})})]})}var D=n(680);function P(){var e,t=i.b.useState(!1),n=Object(r.a)(t,2),c=n[0],s=n[1],d=i.b.useState([]),b=Object(r.a)(d,2),m=b[0],f=b[1],g=i.b.useState(),P=Object(r.a)(g,2),N=P[0],C=P[1],S=Object(l.b)(),A=Object(j.c)().textGet,M=x.a.useContext().reset,F=Object(l.c)(u.c.deletedTransfers),R=Object(l.c)(u.c.dataGeneratePayment),I=Object(l.c)(u.c.transfer),k=Object(l.c)(u.c.transferTable),B=Boolean(null===k||void 0===k?void 0:k.length),L=m.length>o.Sb,U=Object(l.c)(u.c.supplier),w=Object(l.c)(u.c.getSuppliersAccounts),Y=null===w||void 0===w||null===(e=w.find((function(e){return e.accountNumber===(null===U||void 0===U?void 0:U.supplerAccount)})))||void 0===e?void 0:e.email,G="order-remove-button",V=k&&(k.length>o.fb||k[o.Sb]&&k[o.Sb].transferData.length>o.fb);return i.b.useEffect((function(){F&&k&&m.length>o.Sb&&(f(k),S(u.a.setDeletedTransfers(!1)))}),[S,F,k,m]),Object(_.jsxs)("section",{className:y.a.orderContainer,children:[(null===I||void 0===I?void 0:I.setTransferTable)&&B&&Object(_.jsx)("div",{className:y.a.transferDataOrderContainer,children:Object(_.jsxs)(p.a,{className:y.a.addTransferButton,label:{uuid:"spa.supplier.paymentOrder.title"},type:"button",variant:"solid",onClick:function(){if(!k)return;f(k),function(e){if(I){var t=Object(a.a)(Object(a.a)({},I),{},{setTransferTable:e});S(u.a.transfer(t))}else{var n={setTransferTable:e};S(u.a.transfer(n))}}(!1),S(u.a.setOrder(!0)),M((function(e){return Object(a.a)(Object(a.a)({},e),{},{referencePayment:o.D,amount:o.D,account:e.account,supplier:e.supplier})})),S(u.a.cleanTransferFields(!0))},children:[Object(_.jsx)(O.Icon,{name:"plus",size:"small",stroke:"white"}),Object(_.jsx)(j.b,{tag:"span",uuid:"spa.supplier.paymentOrder.title"})]})}),L&&Object(_.jsxs)(i.b.Fragment,{children:[Object(_.jsx)(j.b,{className:y.a.orderTitle,uuid:"spa.supplier.paymentOrder.add"}),m.map((function(e){return Object(_.jsxs)("div",{children:[Object(_.jsx)(E,{handleDelete:function(){return function(e){s(!0),C(e)}(e)},renderData:e,totalAmount:q(e.transferData)}),Object(_.jsx)(D.a,{title:"spa.supplier.detail",children:H(e.transferData,e.supplierName?e.supplierName:o.D)})]},e.key)}))]}),B&&Object(_.jsxs)(i.b.Fragment,{children:[Object(_.jsxs)("div",{className:y.a.transferDataAmount,children:[Object(_.jsx)(j.b,{uuid:"spa.supplier.transfer.total"}),Object(_.jsx)(T.a,{amount:function(){var e=o.Sb;return m.forEach((function(t){t.transferData.forEach((function(t){e+=Number(t.paymentAmount)}))})),e}()})]}),V&&Object(_.jsx)(h.a,{label:A({uuid:"spa.paymentSuppliers.consolidateDebit"}),name:"consolidateDebit"})]}),c&&Object(_.jsxs)(v.a,{closeOnBgTap:!1,hasCloseIcon:!1,initialFocusElementId:G,open:c,title:"spa.supplier.order.modal.title",children:[Object(_.jsx)(v.a.Body,{children:Object(_.jsx)(j.b,{uuid:"spa.supplier.order.modal.body"})}),Object(_.jsx)(v.a.Footer,{children:Object(_.jsxs)("footer",{className:y.a.footer,children:[Object(_.jsx)(p.a,{inline:!0,label:{uuid:"spa.form.cancel"},type:"button",variant:"outlined",onClick:J}),Object(_.jsx)(p.a,{inline:!0,"data-focus-id":G,label:{uuid:"spa.supplier.remove"},type:"button",onClick:function(){if(!k)return;var e=m.filter((function(e){return e.reference!==(null===N||void 0===N?void 0:N.reference)||e.supplierName!==(null===N||void 0===N?void 0:N.supplierName)})),t=k.filter((function(e){return e.reference!==(null===N||void 0===N?void 0:N.reference)||e.supplierName!==(null===N||void 0===N?void 0:N.supplierName)})),n=null===R||void 0===R?void 0:R.filter((function(e){return e.reference!==(null===N||void 0===N?void 0:N.reference)}));f(e),S(u.a.setDeletedOrders(!0)),S(u.a.transferTable(t)),S(u.a.setOrder(t.length!==o.Sb)),S(u.a.generatePaymentPreData({dataGeneratePayment:null!==n&&void 0!==n?n:[]})),J()}})]})})]})]});function H(e,t){return e.map((function(e){return Object(_.jsxs)(O.Table.Row,{children:[Object(_.jsx)(O.Table.Cell,{children:t}),Object(_.jsx)(O.Table.Cell,{children:e.supplierEmail||Y}),Object(_.jsx)(O.Table.Cell,{children:e.paymentDate}),Object(_.jsx)(O.Table.Cell,{children:Object(_.jsx)(T.a,{amount:e.paymentAmount&&parseFloat(e.paymentAmount)})}),Object(_.jsx)(O.Table.Cell,{children:o.D})]},e.key)}))}function q(e){var t=o.Sb;return null===e||void 0===e||e.forEach((function(e){t+=Number(e.paymentAmount)})),t}function J(){s(!1)}}var N=n(850),C=n(801);function S(){return Object(_.jsxs)("section",{children:[Object(_.jsx)(f.a,{rules:!0,title:!0,name:"account"}),Object(_.jsx)(N.a,{title:"spa.suppliers.paymentOrder.title"}),Object(_.jsx)(C.a,{}),Object(_.jsx)(P,{})]})}var A=n(609),M=n(51),F=n(79),R=n(99),I=n(554),k=n(74),B=n(519),L=n(319),U=n(438),w=n.n(U);function Y(){var e=Object(j.c)().textGet,t=Object(M.qb)(),n=Object(R.a)().getValueConfig,f=i.b.useState(!1),x=Object(r.a)(f,2),h=x[0],T=x[1],g=i.b.useState(!0),y=Object(r.a)(g,2),E=y[0],D=y[1],P=Object(l.c)(b.e.token),N=Object(l.c)(u.c.getGeneratePaymentPreData),C=Object(l.c)(s.c.contractId),U=Object(l.c)(u.c.warning),Y=Object(l.c)(u.c.fetching),G=Object(l.c)(u.c.account),V=Object(l.c)(u.c.dataGeneratePayment),H=Object(l.c)(u.c.hasOrders),q=Object(l.c)(u.c.account),J=null===G||void 0===G?void 0:G.accountBalance,z=V&&V.length>o.Sb,Q=Object(l.b)(),X=e({uuid:"spa.generic.field.error.required"}),W=e({uuid:"spa.suppliers.generatePayment.error.account"}),K=e({uuid:"spa.suppliers.generatePayment.error.supplier"}),Z=e({uuid:"spa.suppliers.generatePayment.error.amount"}),$=e({uuid:"spa.suppliers.generatePayment.error.email"}),ee=Object(k.a)(n("core.email.maxLength")),te=Object(k.a)(n("spa.email.validationFormat")),ne=new RegExp(te),ae=e({uuid:"spa.generic.mail.format.invalid"}),re=e({uuid:"spa.email.error.tooBig",replace:"".concat(ee)}),ie=c.e.object({paymentType:c.e.string.equals("manual"),account:Object(c.c)((function(){return ce(!1)||z?c.e.any():Object(d.d)(c.e.string.required(),W)})),supplier:Object(c.c)((function(){return ce(!1)||z?c.e.any():Object(d.d)(c.e.string.required(),K)})),referencePayment:Object(c.c)((function(){return ce(!1)||z?c.e.string():Object(d.d)(c.e.string.required(),X)})),email:c.e.boolean.orUndefined(),emailInput:Object(c.c)((function(e,t){return t.branch[o.Sb].email?Object(I.a)({textErrorRequired:$,textErrorEmail:ae,textErrorMaxLength:re,emailMaxLength:ee,emailValidationRegex:ne}):c.e.any()})),paymentDate:Object(d.d)(c.e.union([c.e.date.orUndefined(),c.e.string()]),X),amount:Object(c.c)((function(e){return ce(!1)||z?c.e.any():String(e)?Object(d.k)(c.e.number(),o.Sb,Z):Object(d.d)(c.e.number(),Z)})),consolidateDebit:c.e.boolean.orUndefined()});return i.b.useEffect((function(){if(N&&J){var e=(null!==N&&void 0!==N?N:[]).reduce((function(e,t){return e+Number(t.amount)}),o.Sb),t=null===N||void 0===N?void 0:N.filter((function(t){return void 0!==t.date&&(n=new Date(Object(m.h)(t.date)),a=new Date,n.getFullYear()===a.getFullYear()&&n.getDate()===a.getDate()&&n.getMonth()===a.getMonth())&&J<Number(e);var n,a}));D((null===t||void 0===t?void 0:t.length)===o.Sb)}}),[J,N]),i.b.useEffect((function(){return function(){Q(u.a.cleanDataGeneratePayment())}}),[Q]),Object(_.jsxs)(A.a,{newTokenCredential:!0,callbackValidate:function(){if(!ce(!1))return Q(F.a.set([{text:{uuid:"spa.suppliers.generatePayment.error.order"},kind:"ERROR",duration:o.w}])),!1;return!0},descriptionSignAndAccept:function(){var t,n=null===V||void 0===V?void 0:V.length,a=null===V||void 0===V?void 0:V.reduce((function(e,t){return e+parseFloat(t.amount?t.amount:"")}),o.Sb),r=null!==(t=null===q||void 0===q?void 0:q.accountCurrency)&&void 0!==t?t:o.g.ARG_ISO,i=o.i[r],c=Object(B.a)(null!==a&&void 0!==a?a:o.Sb,{currencySymbol:i,minimumFractionDigits:o.Jb});return e({uuid:"spa.suppliers.generatePayment.signAndAccept.manual.text",replace:[String(n),"<b>".concat(c,"</b>")]})}(),idActivityToRead:"paymentsSuppliers.generate.send",isLoading:Y,schema:ie,warnings:U,onCredentialCancel:function(){h&&T(!1);Q(u.a.cleanWarnings())},onSubmit:function(e){if(!ce(!0))return;var t=e.account,n=e.email,a=e.paymentDate,r=e.paymentType,i=e.referencePayment,c=e.emailInput,l=e.consolidateDebit,s=e.otp,d=function(){var e=(null!==N&&void 0!==N?N:[]).reduce((function(e,t){return e+Number(t.amount)}),o.Sb);return String(e)}(),b=a||(p=new Date,Object(m.c)(p,{format:m.a.SHORT}).split("/").reverse().join("-")),j={token:P,field_debitAccountSelect:String(t),field_date:b,field_total_amount:d,consolidateDebitFile:!1,consolidateDebit:Boolean(l),contractId:C,dinamicDataTable:(null!==N&&void 0!==N?N:[]).map((function(e,t){var n=e.account,a=e.name,r=e.cbu,i=e.reference,c=e.date,o=e.email,l=e.amount;return{account:n,name:a,cbu:r,reference:i,email:o,amount:l,date:c,id:String(t)}})),action:r,creditAccountSelect:"",reference:String(i),email:n?c:o.D,otp:s};var p;Q(u.b.generatePaymentPre(j))},children:[Object(_.jsxs)(O.Card,{children:[Object(_.jsx)(L.default,{}),Object(_.jsx)(S,{}),Object(_.jsxs)("footer",{children:[Object(_.jsx)(p.a,{label:{uuid:"spa.form.cancel"},type:"button",variant:"outlined",onClick:function(){t(M.a)}}),Object(_.jsx)(p.a,Object(a.a)({label:{uuid:"spa.form.accept"},type:"submit"},!E&&{onClick:function(){ce(!0)&&T(!0)},type:"button"}))]})]}),h&&Object(_.jsxs)(v.a,{closeOnBgTap:!1,hasCloseIcon:!1,open:h,children:[Object(_.jsx)(v.a.Body,{className:w.a.validateModalBody,children:Object(_.jsx)(j.b,{uuid:"spa.paymentSuppliers.validationModal.text"})}),Object(_.jsxs)(v.a.Footer,{className:w.a.validateModalFooter,children:[Object(_.jsx)(p.a,{label:{uuid:"spa.form.cancel"},type:"button",variant:"outlined",onClick:function(){T(!1),t(M.a)}}),Object(_.jsx)(p.a,{label:{uuid:"spa.global.accept"},type:"submit"})]})]})]});function ce(e){return!!H||(e&&Q(F.a.set([{text:{uuid:"spa.suppliers.generatePayment.error.order"},kind:"ERROR",duration:o.w}])),!1)}}},566:function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var a=n(2),r=n(19),i=n(11),c=n(50),o=n(41),l=n(488),u=n(567),s=n.n(u),d=n(10),b=["id","name","methods","onChange","defaultValue"],j=s.a.NAME_INPUT_DATE_FIELD,p=s.a.TYPE_INPUT_DATE_FIELD,m=i.b.memo((function(e){var t=e.id,n=e.name,l=e.methods,u=e.onChange,s=e.defaultValue,m=Object(r.a)(e,b),f=l.register,O=l.formState,v=l.setValue,x=l.clearErrors,h=O.errors,T="".concat(n),g=h[n];return i.b.useEffect((function(){v(T,s||void 0)}),[s,T,v]),Object(d.jsx)(o.a,{name:j,type:p,children:Object(d.jsx)(c.DateField,Object(a.a)(Object(a.a)(Object(a.a)({id:t||n},g&&{error:String(g.message)}),f(T)),{},{onChange:function(e){v(T,e),x([T]),u&&u(e)}},m))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function f(e){var t=l.a.useContext();return Object(d.jsx)(m,Object(a.a)({methods:t},e))}f.displayName=j},567:function(e,t,n){e.exports={NAME_INPUT_DATE_FIELD:"InputDateField",TYPE_INPUT_DATE_FIELD:"Element"}},676:function(e,t,n){e.exports={NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_AMOUNT_FORMATTER:"AmountFormatter",TYPE_AMOUNT_FORMATTER:"Element",transferDataOrderContainer:"_rules_transferDataOrderContainer__AjztH",addTransferButton:"_rules_addTransferButton__eQnPp",orderPaymentDataContainer:"_rules_orderPaymentDataContainer__J65yR",orderDataContent:"_rules_orderDataContent__3Ye01",orderContainer:"_rules_orderContainer__-hIAs",orderTitle:"_rules_orderTitle__1NVhR",footer:"_rules_footer__1enQN",transferDataAmount:"_rules_transferDataAmount__1lC5P"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=41.b67d8910.chunk.js.map