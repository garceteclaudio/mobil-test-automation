(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[35,282],{333:function(e,t,a){"use strict";a.r(t),a.d(t,"DEF_MODAL_PROPS",(function(){return m})),a.d(t,"LoanTermsAndConditions",(function(){return j}));a(11);var n=a(50),s=a(6),c=a(69),o=a(8),i=a(82),r=a(490),l=a(38),u=a(447),b=a.n(u),d=a(10),m={};function j(e){var t=e,a=t.showModal,u=t.setShowModal,m=t.handleAccept,j=t.handleCancel,O=Object(l.c)().textGet,p=Object(o.c)(c.c.isMobile),_=Object(o.c)(c.c.isWebMobile),T=O({uuid:"spa.loan.simulate.step4.tyc.detail"});return p||_?Object(d.jsxs)(n.BottomSheet,{className:b.a.bottomSheetTermsAndConditions,isVisible:a,onClose:A,children:[Object(d.jsx)(n.Separator,{className:b.a.separator}),Object(d.jsx)(l.b,{className:b.a.title,tag:"h4",uuid:"spa.loan.simulate.step4.tyc"}),h(),Object(d.jsx)(n.Separator,{className:b.a.separator}),E()]}):Object(d.jsxs)(r.a,{className:b.a.loanTermsAndConditions,open:a,title:"spa.loan.simulate.step4.tyc",onClose:A,children:[Object(d.jsx)(r.a.Body,{children:h()}),Object(d.jsx)(r.a.Footer,{children:E()})]});function E(){var e=p||_?b.a.bottomSheetFooter:b.a.modalFooter;return Object(d.jsxs)(n.Box,{align:"end",className:e,children:[Object(d.jsx)(i.a,{inline:!0,label:{uuid:"spa.form.cancel"},type:"button",variant:"outlined",onClick:f}),Object(d.jsx)(i.a,{inline:!0,label:{uuid:"spa.form.accept"},type:"button",onClick:x})]})}function h(){var e=p||_?b.a.bottomSheetBody:b.a.modalBody;return Object(d.jsx)(n.Box,{className:e,mt:1,children:Object(d.jsx)(l.b,{color:"gray-dark",uuid:s.D,children:Object(d.jsx)("span",{dangerouslySetInnerHTML:{__html:T}})})})}function x(){u(!1),m&&m()}function f(){A(),j&&j()}function A(){u(!a)}}j.defaultProps=m},376:function(e,t,a){"use strict";a.r(t),a.d(t,"default",(function(){return N}));var n=a(0),s=a(2),c=a(5),o=a(16),i=a(11),r=a(609),l=a(39),u=a(187),b=a(38),d=a(50),m=a(500),j=a(151),O=a(8),p=a(270),_=a(6),T=a(82),E=a(630),h=a(515),x=a(519),f=a(33),A=a(333),C=a(434),M=a.n(C),S=a(10);function N(){var e=Object(O.b)(),t=Object(b.c)().textGet,a=i.b.useState(!1),C=Object(o.a)(a,2),N=C[0],v=C[1],P=i.b.useState(),g=Object(o.a)(P,2),R=g[0],y=g[1],F=t({uuid:"spa.loan.simulate.step4.tyc.error"}),L=Object(O.c)(j.c.loanSimulation),I=Object(O.c)(j.c.loanAmount),k=Object(O.c)(j.c.offer),B=Object(O.c)(j.c.fetching),H=Object(O.c)(j.c.warning),D=Object(O.c)(f.e.token),Y=Object(O.c)(j.c.selectedLoanTerm),w=Object(O.c)(j.c.selectedContract),U=l.e.object({termConditions:Object(u.d)(l.e.boolean.equals(!0),F)});if(!L||!k||!Y||!I)return Object(S.jsx)(p.a,{});var V=L.loanSimulationCBTAmount,X=L.loanSimulationNominalAnnualRate,G=L.loanSimulationEffectiveAnualRate,z=L.loanSimulationCFTAnual,J=L.loanSimulationEffectiveMonthlyRate,K=k.accountNumber,W=k.loanProductIsPaq,q=Y.loanSimulationTerm,Z=Object(x.a)(J,{minimumFractionDigits:_.Jb}),Q=Object(x.a)(I,{minimumFractionDigits:_.Jb}),$="".concat(X).concat(_.jb);return Object(S.jsxs)(i.b.Fragment,{children:[Object(S.jsx)(d.Card,{className:M.a.step4Container,children:Object(S.jsxs)(r.a,{newTokenCredential:!0,idActivityToRead:"spa.loanbt.create",isLoading:B,schema:U,warnings:H,onSubmit:function(e){return ee.apply(this,arguments)},children:[Object(S.jsx)(b.b,{className:M.a.step4Title,tag:"h1",uuid:"spa.loan.simulate.step4.title"}),Object(S.jsxs)("div",{className:M.a.step4AmountLoan,children:[Object(S.jsx)(b.b,{className:M.a.step4Subtitle,tag:"p",uuid:"spa.loan.simulate.step4.subtitle"}),Object(S.jsx)(m.a,{amount:I,currency:_.b})]}),Object(S.jsxs)("div",{className:M.a.step4FinanceAmount,children:[Object(S.jsx)(b.b,{className:M.a.step4SubtitleAmount,tag:"p",uuid:"spa.loan.simulate.step4.subtitle.amount"}),Object(S.jsx)(m.a,{amount:V,currency:_.b})]}),W&&Object(S.jsx)("div",{className:M.a.staticAlertContainer,children:Object(S.jsx)(E.a,{isOutline:!0,message:"spa.loan.simulate.step4.package",replaceMessage:[Z,Q,String(q),$]})}),Object(S.jsxs)("div",{className:M.a.step4DetailsContainer,children:[Object(S.jsxs)("div",{children:[Object(S.jsx)(b.b,{tag:"p",uuid:"spa.loan.simulate.step4.account"}),Object(S.jsx)(b.b,{children:K})]}),Object(S.jsxs)("div",{children:[Object(S.jsx)(b.b,{tag:"p",uuid:"spa.loan.simulate.step4.fee"}),Object(S.jsx)(b.b,{children:q})]}),Object(S.jsxs)("div",{children:[Object(S.jsx)(b.b,{tag:"p",uuid:"spa.loan.simulate.step4.tna"}),Object(S.jsx)(m.a,{amount:X,currency:_.D,suffix:_.jb})]}),Object(S.jsxs)("div",{children:[Object(S.jsx)(b.b,{tag:"p",uuid:"spa.loan.simulate.step4.tea"}),Object(S.jsx)(m.a,{amount:G,currency:_.D,suffix:_.jb})]}),Object(S.jsxs)("div",{children:[Object(S.jsx)(b.b,{tag:"p",uuid:"spa.loan.simulate.step4.cft"}),Object(S.jsx)(m.a,{amount:z,currency:_.D,suffix:_.jb})]}),Object(S.jsxs)("div",{children:[Object(S.jsx)(b.b,{replace:q.toString(),tag:"p",uuid:"spa.loan.simulate.step3.loan.detail.amortization.system"}),Object(S.jsx)(b.b,{tag:"p",uuid:"spa.loan.simulate.step3.loan.detail.amortization.system.value"})]})]}),Object(S.jsx)("div",{className:M.a.termsAndConditions,children:Object(S.jsx)(h.a,{isChecked:R,label:Object(S.jsxs)("div",{className:M.a.termsAndConditions,children:[Object(S.jsx)(b.b,{tag:"span",uuid:"spa.form.accept"}),Object(S.jsx)(T.a,{kind:"plain",label:{uuid:"spa.loan.simulate.step4.tyc"},type:"button",onClick:te})]}),name:"termConditions",onChange:function(){y(!R)}})}),Object(S.jsxs)("div",{className:M.a.buttonContainer,children:[Object(S.jsx)(T.a,{disabled:!R,label:{uuid:"spa.loan.simulate.step4.submit.label"},type:"submit"}),Object(S.jsx)(T.a,{label:{uuid:"spa.form.cancel"},variant:"text",onClick:function(t){t.preventDefault(),e(j.a.cleanStep4())}})]})]})}),Object(S.jsx)(A.LoanTermsAndConditions,{handleAccept:function(){y(!0)},handleCancel:function(){y(!1)},setShowModal:v,showModal:N})]});function ee(){return(ee=Object(c.a)(Object(n.a)().mark((function t(a){var c;return Object(n.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(c=a.otp,D&&w&&L&&k&&Y&&I){t.next=3;break}return t.abrupt("return");case 3:return e(j.a.setTyCOffer(a.termConditions)),t.next=6,e(j.b.createLoan(Object(s.a)(Object(s.a)(Object(s.a)(Object(s.a)({token:D,contractId:w.contractId,loanAmount:I},Y),L),k),{},{_otp:c})));case 6:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function te(){v(!N)}}},447:function(e,t,a){e.exports={NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_XS:"xs",NAME_SM:"sm",NAME_MD:"md",NAME_LG:"lg",loanTermsAndConditions:"_rules_loanTermsAndConditions__2Dtlp",modalBody:"_rules_modalBody__1oV07",modalFooter:"_rules_modalFooter__3FYVA",bottomSheetTermsAndConditions:"_rules_bottomSheetTermsAndConditions__WtfbG",title:"_rules_title__1cWi2",bottomSheetBody:"_rules_bottomSheetBody__1R7ID",bottomSheetFooter:"_rules_bottomSheetFooter__2vHMS",bottomSheetCancel:"_rules_bottomSheetCancel__3vpS3",body:"_rules_body__2REGs",separator:"_rules_separator__3M6Ey"}},515:function(e,t,a){"use strict";a.d(t,"a",(function(){return _}));var n=a(2),s=a(16),c=a(19),o=a(11),i=a(50),r=a(41),l=a(488),u=a(520),b=a.n(u),d=a(10),m=["id","name","methods","onChange","isChecked"],j=b.a.NAME_INPUT_CHECKBOX,O=b.a.TYPE_INPUT_CHECKBOX,p=o.b.memo((function(e){var t,a=e.id,l=e.name,u=e.methods,b=e.onChange,p=e.isChecked,_=Object(c.a)(e,m),T=o.b.useState(p),E=Object(s.a)(T,2),h=E[0],x=E[1],f=u.register,A=u.formState,C=u.setValue,M=u.clearErrors,S=A.errors,N="".concat(l);o.b.useEffect((function(){void 0!==p&&(x(p),C(N,p,{shouldValidate:!0}))}),[p,N,C]);var v=S[l];return Object(d.jsx)(r.a,{name:j,type:O,children:Object(d.jsx)(i.Checkbox,Object(n.a)(Object(n.a)(Object(n.a)({id:a||l},v&&{error:null===(t=v.message)||void 0===t?void 0:t.toString()}),f(N)),{},{isChecked:h,onChange:function(e){var t=!h;x(t),C(N,t),b&&b(e),M([N])}},_))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function _(e){var t=l.a.useContext();return Object(d.jsx)(p,Object(n.a)({methods:t},e))}_.displayName=j},520:function(e,t,a){e.exports={NAME_INPUT_CHECKBOX:"InputCheckbox",TYPE_INPUT_CHECKBOX:"Element"}},630:function(e,t,a){"use strict";a.d(t,"a",(function(){return _}));var n=a(2),s=a(19),c=(a(11),a(50)),o=a(41),i=a(38),r=a(631),l=a.n(r),u=a(632),b=a.n(u),d=a(10),m=["variant","title","message","isOutline","replaceMessage"],j=l.a.NAME_STATIC_ALERT,O=l.a.TYPE_STATIC_ALERT,p={ERROR:"error",INFO:"info",WARNING:"warning",SUCCESS:"success"};function _(e){var t=e.variant,a=e.title,r=e.message,l=e.isOutline,u=e.replaceMessage,_=Object(s.a)(e,m),T=t?p[t]:p.INFO;return Object(d.jsx)(o.a,Object(n.a)(Object(n.a)({},_),{},{name:j,type:O,children:Object(d.jsxs)(c.Alert,{className:b.a.alertStatic,isOutline:l,variant:T,children:[Object(d.jsx)(c.Icon,{name:T,size:"small",stroke:T}),Object(d.jsxs)("section",{children:[Object(d.jsx)(i.b,{className:b.a.title,tag:"p",uuid:a}),Object(d.jsx)(i.b,Object(n.a)({className:b.a.message,tag:"p",uuid:r},u&&{replace:u}))]})]})}))}_.defaultProps={isOutline:!1,replaceMessage:"",title:"",variant:"INFO"}},631:function(e,t,a){e.exports={NAME_STATIC_ALERT:"StaticAlert",TYPE_STATIC_ALERT:"Element"}},632:function(e,t,a){e.exports={NAME_STATIC_ALERT:"StaticAlert",TYPE_STATIC_ALERT:"Element",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",alertStatic:"_rules_alertStatic__2-ZHL",title:"_rules_title__3fuUz",message:"_rules_message__3_z0L"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=35.91ba86e9.chunk.js.map