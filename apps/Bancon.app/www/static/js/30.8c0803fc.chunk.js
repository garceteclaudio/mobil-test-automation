(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[30,305,306],{190:function(e,t,c){"use strict";c.r(t),c.d(t,"default",(function(){return y}));var a=c(0),i=c(5),s=c(16),n=c(11),r=c(99),o=c(8),u=c(635),l=c(38),d=c(166),b=c(270),j=c(69),p=c(33),O=c(87),_=c(6),f=c(82),m=c(50),E=c(108),S=c(36),T=c(79),v=c(45),w=c(120),h=c(74),g=c(452),x=c.n(g),P=c(10),M="spa.security.biometricSecurity";function y(){var e=Object(o.b)(),t=Object(S.i)().isMobile,c=Object(l.c)().textGet,g=Object(r.a)().getValueConfig,y=Object(o.c)(O.c.deviceModel),N=Object(o.c)(p.e.token),R=Object(o.c)(d.c.fetching),k=Object(o.c)(E.f.fetching),A=Object(o.c)(j.c.uniqueDeviceID),I=Object(o.c)(d.c.devices),C=Object(o.c)(E.f.userIsNotEnrolled),D=Object(o.c)(E.f.isHardwareUnavailable),F=Object(o.c)(d.c.deviceWithFingerprint),L=Object(o.c)(d.c.deviceRegistered),H=n.b.useState(!1),U=Object(s.a)(H,2),Y=U[0],V=U[1],X=Object(E.h)(!0,(function(t){var c=t.userIsNotEnrolled;C&&!c&&Y&&(e(T.a.set({kind:"INFO",text:{uuid:"spa.security.biometricSecurity.info.msg"},duration:_.z})),V(!1))})).install,q=Object(E.i)(),B=Object(h.a)(g("vu.fraud.check.fingerprint.enable")),G=Object(h.a)(g("backend.vu.fraud.api.fingerprint.url")),z=Object(h.a)(g("backend.vu.fraud.api.fingerprint.timeout")),W=Object(w.e)(_.G.PREFERENCES_BIOMETRY_FINGERPRINT),J=k||R||void 0===W||void 0===I,Z=n.b.useCallback((function(){N&&void 0===I&&W&&e(d.b.biometricSecurityPre({accessToken:N,uniqueDeviceId:A}))}),[e,N,A,I,W]);Object(E.g)({onRegisterPreference:function(){e(T.a.set({kind:"INFO",text:{uuid:"spa.security.biometricSecurity.deviceRegistered"},duration:_.z})),e(d.a.cleanDevices())},textCancel:c({uuid:"spa.biometryshow.cancel"}),textError:"Error",textHeader:c({uuid:"spa.biometryshow.header"}),textTitle:c({uuid:"spa.biometryshow.title"}),textGet:c,isVUFingerprintEnabled:B,url:G,timeout:z}),n.b.useEffect(Z,[Z]);var K=!F&&!L;return J?Object(P.jsx)(b.a,{}):Object(P.jsxs)("div",{className:x.a.biometricSection,children:[Object(P.jsx)(l.b,{className:x.a.title,tag:"h4",uuid:"spa.security.biometricSecurity.title"}),t&&W&&function(){if(D)return Object(P.jsx)("div",{children:Object(P.jsx)(l.b,{uuid:"spa.security.biometricSecurity.notSupported"})});var e=C?"activate":"configurate";return Object(P.jsxs)("div",{children:[Object(P.jsx)(m.Alert,{variant:"warning",children:Object(P.jsxs)("div",{className:x.a.warningSection,children:[Object(P.jsx)(m.Icon,{className:x.a.warningIcon,name:"warning",stroke:"warning"}),Object(P.jsx)(l.b,{uuid:"spa.userInfo.preferences.fingerprint.warningMessage"})]})}),K&&Object(P.jsxs)("div",{className:x.a.linkDeviceSection,children:[Object(P.jsx)(l.b,{className:x.a.paragraph,uuid:"".concat(M,".").concat(e,".text")}),Object(P.jsx)(l.b,{className:x.a.paragraph,uuid:"".concat(M,".").concat(e,".question")}),C?Object(P.jsx)(f.a,{label:{uuid:"spa.security.biometricSecurity.configurate.button"},onClick:$}):Object(P.jsx)(f.a,{disabled:q,label:{uuid:"spa.security.biometricSecurity.link.button"},onClick:Q})]})]})}(),Object(P.jsx)("section",{className:x.a.linkedDevices,children:W?Object(P.jsxs)(n.b.Fragment,{children:[Object(P.jsx)(l.b,{className:x.a.subtitle,tag:"h5",uuid:"spa.security.biometricSecurity.linkedDevices.title"}),Object(P.jsx)("section",{children:null!==I&&void 0!==I&&I.length?Object(P.jsx)("ul",{children:I.map(te)}):Object(P.jsx)(l.b,{className:x.a.subtitle,uuid:"spa.security.biometricSecurity.linkedDevices.noDevices"})})]}):Object(P.jsx)(l.b,{className:x.a.subtitle,uuid:"activity.unavailable"})})]});function Q(){e(E.a.setBiometryPreferencesRequested(!0))}function $(){return ee.apply(this,arguments)}function ee(){return(ee=Object(i.a)(Object(a.a)().mark((function e(){return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return V(!0),e.next=3,Object(u.a)("settings");case 3:X();case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function te(c){var s=c.idSession,n=c.deviceModel;return Object(P.jsx)("li",{children:Object(P.jsxs)("div",{className:x.a.row,children:[n&&Object(P.jsx)(l.b,{className:x.a.label,fallback:n,uuid:"spa.devices.apple.identifier.".concat(n)}),Object(P.jsx)(f.a,{className:x.a.action,label:{uuid:"spa.security.biometricSecurity.unlink.button"},size:"small",variant:"outlined",onClick:function(){return r.apply(this,arguments)}})]})},s);function r(){return(r=Object(i.a)(Object(a.a)().mark((function c(){return Object(a.a)().wrap((function(c){for(;;)switch(c.prev=c.next){case 0:if(N){c.next=2;break}return c.abrupt("return");case 2:return c.next=4,e(d.b.biometricSecurityDelete({token:N,idSession:s}));case 4:if(K){c.next=10;break}if(!t){c.next=10;break}if(y!==n){c.next=10;break}return e(E.a.setBiometrySessionConfigured(!1)),c.next=10,Object(v.a)(E.c);case 10:case"end":return c.stop()}}),c)})))).apply(this,arguments)}}}},191:function(e,t,c){"use strict";c.r(t),c.d(t,"default",(function(){return h}));var a=c(16),i=c(39),s=c(11),n=c(8),r=c(187),o=c(99),u=c(38),l=c(517),d=c(568),b=c(530),j=c(270),p=c(87),O=c(79),_=c(6),f=c(33),m=c(609),E=c(157),S=c(82),T=c(453),v=c.n(T),w=c(10);function h(){var e=Object(n.b)(),t=Object(u.c)().textGet,c=Object(o.a)().getValueConfig,T=Object(O.d)(),h=T.showSuccessToast,g=T.showInfoToast,x=s.b.useState(!1),P=Object(a.a)(x,2),M=P[0],y=P[1],N=Object(n.c)(f.e.token),R=Object(n.c)(p.c.fetching),k=Object(n.c)(p.c.warning),A=Object(n.c)(p.c.isAlertCodeOTP),I=Object(n.c)(f.e.username),C=Object(n.c)(f.e.documentNumber),D=Object(n.c)(f.e.documentType),F=Object(n.c)(p.c.securitySealList),L=Object(n.c)(p.c.hasChangedPassword),H=Object(n.c)(f.e.securitySeal),U=Object(n.c)(p.c.securitySealImage),Y=s.b.useState(H),V=Object(a.a)(Y,2),X=V[0],q=V[1],B=t({uuid:"spa.form.continue"}),G=t({uuid:"spa.generic.field.error.required"}),z=t({uuid:"spa.preferences.passwordSection.password.label"}),W=t({uuid:"spa.preferences.passwordSection.newPassword.label"}),J=t({uuid:"spa.preferences.passwordSection.newPassword.helper"}),Z=i.e.object({password:Object(i.c)((function(e,t){var c=t.branch[_.Sb].newPassword;return e||c?Object(r.d)(i.e.string(),G):i.e.any()})),newPassword:Object(i.c)((function(e,a){var s=a.branch[_.Sb].password;return e||s?Object(b.a)(t,c,{number:C,type:D},I):i.e.any()})),securitySeal:Object(r.d)(i.e.number.orUndefined(),G)}),K=s.b.useState(),Q=Object(a.a)(K,2),$=Q[0],ee=Q[1];return s.b.useEffect((function(){!1===A&&e(E.a.setIsResetCredential(!0)),e(p.a.cleanModalOTP()),e(p.a.cleanAlertCodeOTP())}),[e,A]),s.b.useEffect((function(){N&&(e(p.b.changePasswordPre({accessToken:N})),e(p.b.listSecuritySeal({accessToken:N})))}),[e,N]),s.b.useEffect((function(){L?(e(f.a.updateSecuritySeal(U)),h("spa.preferences.passwordSection.toastSuccess"),ee(void 0),e(E.a.setIsResetCredential(!0)),e(p.a.clearHasPasswordChanged()),e(p.a.cleanModalOTP()),y(!0)):y(!1)}),[e,L,U,h]),s.b.useEffect((function(){e(p.a.cleanModalOTP())}),[e]),U?Object(w.jsx)("div",{className:v.a.passwordSection,children:Object(w.jsxs)(m.a,{callbackValidate:function(e){var t=e.password,c=void 0===t?_.D:t,a=e.newPassword,i=void 0===a?_.D:a,s=e.securitySeal,n=void 0===s?_.D:s,r=!n||n===F.findIndex((function(e){return e.src===H}));if(!c&&!i&&r)return g("spa.preferences.passwordSection.hasNothingToChange"),!1;return ee(e),!0},idActivityToRead:"preferences.changepassword.send",isLoading:R,isResetForm:M,schema:Z,warnings:k,onSubmit:function(t){var c,a=t.otp;if(!N)return;e(p.b.changePassword({accessToken:N,otp:String(a),password:null===$||void 0===$?void 0:$.password,newPassword:null===$||void 0===$?void 0:$.newPassword,securitySeal:(null===$||void 0===$||null===(c=$.securitySeal)||void 0===c?void 0:c.toString())||_.D}))},children:[Object(w.jsx)(u.b,{className:v.a.title,tag:"h4",uuid:"spa.preferences.passwordSection.title"}),Object(w.jsx)("div",{className:v.a.securitySealContainer,children:Object(w.jsx)(d.a,{buttonLabel:B,modalTitle:Object(w.jsx)(u.b,{className:v.a.securitySealModalTitle,tag:"h4",uuid:"spa.preferences.passwordSection.securitySeal.modalTitle"}),name:"securitySeal",options:F,selectedAvatar:X,uuidError:"spa.preferences.passwordSection.securitySeal.error.required",uuidLabel:"spa.preferences.passwordSection.securitySeal.label",onContinue:function(e){q(e)}})}),Object(w.jsxs)("div",{className:v.a.alignInputs,children:[Object(w.jsx)(l.a,{id:"password",label:z,name:"password",onChange:te}),Object(w.jsx)(l.a,{helper:J,id:"newPassword",label:W,name:"newPassword",onChange:te}),Object(w.jsx)(S.a,{label:{uuid:"spa.preferences.passwordSection.accept.button"},type:"submit"})]})]})}):Object(w.jsx)(j.a,{});function te(){e(p.a.cleanWarnings())}}},452:function(e,t,c){e.exports={NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_XS:"xs",NAME_SM:"sm",NAME_MD:"md",NAME_LG:"lg",biometricSection:"_rules_biometricSection__4y9a_",title:"_rules_title__4Fsqc",subtitle:"_rules_subtitle__3UzsW",warningSection:"_rules_warningSection__2LozB",warningIcon:"_rules_warningIcon__2dij3",row:"_rules_row__2g4mp",label:"_rules_label__19rJz",action:"_rules_action__2He4N",linkDeviceSection:"_rules_linkDeviceSection__1FIXd",paragraph:"_rules_paragraph__2y_ya",linkedDevices:"_rules_linkedDevices__1xFSs"}},453:function(e,t,c){e.exports={NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_INPUT_PASSWORD:"InputPassword",TYPE_INPUT_PASSWORD:"Element",NAME_XS:"xs",NAME_SM:"sm",NAME_MD:"md",NAME_LG:"lg",passwordSection:"_rules_passwordSection__2UZmT",title:"_rules_title__3EYAf",securitySealContainer:"_rules_securitySealContainer__1dHLX",alignInputs:"_rules_alignInputs__1nBJl",securitySealModalTitle:"_rules_securitySealModalTitle__3MNL6"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=30.8c0803fc.chunk.js.map