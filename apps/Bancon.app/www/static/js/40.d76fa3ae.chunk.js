/*! For license information please see 40.d76fa3ae.chunk.js.LICENSE.txt */
(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[40],{790:function(e,t,n){"use strict";e.exports=n(791)},792:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FilePond=t.FileStatus=t.registerPlugin=void 0;var i,l=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o=n(7),r=(i=o)&&i.__esModule?i:{default:i},u=n(793);t.registerPlugin=u.registerPlugin,t.FileStatus=u.FileStatus;var a=(0,u.supported)(),s=["setOptions","on","off","onOnce","appendTo","insertAfter","insertBefore","isAttachedTo","replaceElement","restoreElement","destroy"];t.FilePond=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==typeof t&&"function"!==typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.allowFilesSync=!0,n}return function(e,t){if("function"!==typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"componentDidMount",value:function(){var e=this;if(this._input=this._element.querySelector('input[type="file"]'),this._inputClone=this._input.cloneNode(),a){var t=Object.assign({},this.props);if(t.onupdatefiles){var n=t.onupdatefiles;t.onupdatefiles=function(t){e.allowFilesSync=!1,n(t)}}this._pond=(0,u.create)(this._input,t),Object.keys(this._pond).filter((function(e){return!s.includes(e)})).forEach((function(t){e[t]=e._pond[t]}))}}},{key:"componentWillUnmount",value:function(){if(this._pond){var e=document.createElement("div");e.append(this._pond.element),e.id="foo",this._pond.destroy(),this._pond=void 0,this._element.append(this._inputClone)}}},{key:"shouldComponentUpdate",value:function(){return!!this.allowFilesSync||(this.allowFilesSync=!0,!1)}},{key:"componentDidUpdate",value:function(){if(this._pond){var e=Object.assign({},this.props);delete e.onupdatefiles,this._pond.setOptions(e)}}},{key:"render",value:function(){var e=this,t=this.props,n=t.id,i=t.name,l=t.className,r=t.allowMultiple,u=t.required,a=t.captureMethod,s=t.acceptedFileTypes;return(0,o.createElement)("div",{className:"filepond--wrapper",ref:function(t){return e._element=t}},(0,o.createElement)("input",{type:"file",name:i,id:n,accept:s,multiple:r,required:u,className:l,capture:a}))}}]),t}(r.default.Component)},794:function(e,t,n){e.exports=function(){"use strict";var e=function(e){var t=e.addFilter,n=e.utils,i=n.Type,l=n.replaceInString,o=n.toNaturalFileSize;return t("ALLOW_HOPPER_ITEM",(function(e,t){var n=t.query;if(!n("GET_ALLOW_FILE_SIZE_VALIDATION"))return!0;var i=n("GET_MAX_FILE_SIZE");if(null!==i&&e.size>i)return!1;var l=n("GET_MIN_FILE_SIZE");return!(null!==l&&e.size<l)})),t("LOAD_FILE",(function(e,t){var n=t.query;return new Promise((function(t,i){if(!n("GET_ALLOW_FILE_SIZE_VALIDATION"))return t(e);var r=n("GET_FILE_VALIDATE_SIZE_FILTER");if(r&&!r(e))return t(e);var u=n("GET_MAX_FILE_SIZE");if(null!==u&&e.size>u)i({status:{main:n("GET_LABEL_MAX_FILE_SIZE_EXCEEDED"),sub:l(n("GET_LABEL_MAX_FILE_SIZE"),{filesize:o(u,".",n("GET_FILE_SIZE_BASE"),n("GET_FILE_SIZE_LABELS",n))})}});else{var a=n("GET_MIN_FILE_SIZE");if(null!==a&&e.size<a)i({status:{main:n("GET_LABEL_MIN_FILE_SIZE_EXCEEDED"),sub:l(n("GET_LABEL_MIN_FILE_SIZE"),{filesize:o(a,".",n("GET_FILE_SIZE_BASE"),n("GET_FILE_SIZE_LABELS",n))})}});else{var s=n("GET_MAX_TOTAL_FILE_SIZE");if(null!==s&&n("GET_ACTIVE_ITEMS").reduce((function(e,t){return e+t.fileSize}),0)>s)return void i({status:{main:n("GET_LABEL_MAX_TOTAL_FILE_SIZE_EXCEEDED"),sub:l(n("GET_LABEL_MAX_TOTAL_FILE_SIZE"),{filesize:o(s,".",n("GET_FILE_SIZE_BASE"),n("GET_FILE_SIZE_LABELS",n))})}});t(e)}}}))})),{options:{allowFileSizeValidation:[!0,i.BOOLEAN],maxFileSize:[null,i.INT],minFileSize:[null,i.INT],maxTotalFileSize:[null,i.INT],fileValidateSizeFilter:[null,i.FUNCTION],labelMinFileSizeExceeded:["File is too small",i.STRING],labelMinFileSize:["Minimum file size is {filesize}",i.STRING],labelMaxFileSizeExceeded:["File is too large",i.STRING],labelMaxFileSize:["Maximum file size is {filesize}",i.STRING],labelMaxTotalFileSizeExceeded:["Maximum total size exceeded",i.STRING],labelMaxTotalFileSize:["Maximum total file size is {filesize}",i.STRING]}}};return"undefined"!==typeof window&&"undefined"!==typeof window.document&&document.dispatchEvent(new CustomEvent("FilePond:pluginloaded",{detail:e})),e}()},795:function(e,t,n){e.exports=function(){"use strict";var e=function(e){var t=e.addFilter,n=e.utils,i=n.Type,l=n.isString,o=n.replaceInString,r=n.guesstimateMimeType,u=n.getExtensionFromFilename,a=n.getFilenameFromURL,s=function(e,t){return(/^[^/]+/.exec(e)||[]).pop()===t.slice(0,-2)},E=function(e,t){return e.some((function(e){return/\*$/.test(e)?s(t,e):e===t}))},_=function(e){var t="";if(l(e)){var n=a(e),i=u(n);i&&(t=r(i))}else t=e.type;return t},c=function(e,t,n){if(0===t.length)return!0;var i=_(e);return n?new Promise((function(l,o){n(e,i).then((function(e){E(t,e)?l():o()})).catch(o)})):E(t,i)},p=function(e){return function(t){return null!==e[t]&&(e[t]||t)}};return t("SET_ATTRIBUTE_TO_OPTION_MAP",(function(e){return Object.assign(e,{accept:"acceptedFileTypes"})})),t("ALLOW_HOPPER_ITEM",(function(e,t){var n=t.query;return!n("GET_ALLOW_FILE_TYPE_VALIDATION")||c(e,n("GET_ACCEPTED_FILE_TYPES"))})),t("LOAD_FILE",(function(e,t){var n=t.query;return new Promise((function(t,i){if(n("GET_ALLOW_FILE_TYPE_VALIDATION")){var l=n("GET_ACCEPTED_FILE_TYPES"),r=n("GET_FILE_VALIDATE_TYPE_DETECT_TYPE"),u=c(e,l,r),a=function(){var e=l.map(p(n("GET_FILE_VALIDATE_TYPE_LABEL_EXPECTED_TYPES_MAP"))).filter((function(e){return!1!==e})),t=e.filter((function(t,n){return e.indexOf(t)===n}));i({status:{main:n("GET_LABEL_FILE_TYPE_NOT_ALLOWED"),sub:o(n("GET_FILE_VALIDATE_TYPE_LABEL_EXPECTED_TYPES"),{allTypes:t.join(", "),allButLastType:t.slice(0,-1).join(", "),lastType:t[e.length-1]})}})};if("boolean"===typeof u)return u?t(e):a();u.then((function(){t(e)})).catch(a)}else t(e)}))})),{options:{allowFileTypeValidation:[!0,i.BOOLEAN],acceptedFileTypes:[[],i.ARRAY],labelFileTypeNotAllowed:["File is of invalid type",i.STRING],fileValidateTypeLabelExpectedTypes:["Expects {allButLastType} or {lastType}",i.STRING],fileValidateTypeLabelExpectedTypesMap:[{},i.OBJECT],fileValidateTypeDetectType:[null,i.FUNCTION]}}};return"undefined"!==typeof window&&"undefined"!==typeof window.document&&document.dispatchEvent(new CustomEvent("FilePond:pluginloaded",{detail:e})),e}()},796:function(e,t,n){}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=40.d76fa3ae.chunk.js.map