(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[202,316],{373:function(e,t,r){"use strict";r.r(t),r.d(t,"default",(function(){return N}));var n=r(0),a=r(5),i=r(11),c=r(39),u=r(8),o=r(163),s=r(82),E=r(38),l=r(494),d=r(488),b=r(608),p=r(522),m=r(489),T=r(51),_=r(99),O=r(554),j=r(74),x=r(440),M=r.n(x),f=r(10);function N(){var e=Object(u.b)(),t=Object(E.c)().textGet,r=Object(_.a)().getValueConfig,x=Object(u.c)(o.c.getDocumentTypes),N=Object(u.c)(o.c.fetching),h=Object(T.qb)(),P=Object(T.sb)(T.O),g=t({uuid:"spa.recoverUser.email.hint"}),R=t({uuid:"spa.recoverUser.email.text"});i.b.useEffect((function(){e(o.b.getDocumentType(null))}),[e]);var A=function(){var e=t({uuid:"spa.documentType.error.cdi"}),n=t({uuid:"spa.documentType.error.cuit"}),a=t({uuid:"spa.documentType.error.passport"}),i=t({uuid:"spa.generic.field.error.required"}),u=t({uuid:"spa.generic.mail.format.invalid"}),o=Object(j.a)(r("core.email.maxLength")),s=Object(j.a)(r("spa.email.validationFormat")),E=new RegExp(s),l=t({uuid:"spa.email.error.tooBig",replace:"".concat(o)});return Object(c.a)(c.e.object({email:Object(O.a)({textErrorRequired:i,textErrorEmail:u,textErrorMaxLength:l,emailMaxLength:o,emailValidationRegex:E})}),Object(b.b)({textErrorCdi:e,textErrorCuit:n,textErrorPassport:a,textErrorRequired:i}))}();return Object(f.jsx)(m.a,{"header-onBack":function(){h(P)},"header-title":"spa.recoverUser.title",children:Object(f.jsx)("section",{children:Object(f.jsxs)(d.a,{schema:A,onSubmit:function(e){return v.apply(this,arguments)},children:[Object(f.jsx)("div",{className:M.a.textSubtitle,children:Object(f.jsx)(E.b,{uuid:"spa.recoverUser.step1.text"})}),Object(f.jsxs)("div",{className:M.a.alignInputs,children:[Object(f.jsx)(b.a,{documentTypeDefValue:p.a,documentTypeList:x}),Object(f.jsx)(l.a,{withoutSpaces:!0,helper:g,id:"email",label:R,name:"email"})]}),Object(f.jsx)(s.a,{label:{uuid:"spa.recoverUser.continue"},loading:N,type:"submit"})]})})});function v(){return(v=Object(a.a)(Object(n.a)().mark((function t(r){return Object(n.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e(o.b.recoverUser(r));case 2:case"end":return t.stop()}}),t)})))).apply(this,arguments)}}},440:function(e,t,r){e.exports={NAME_EXTERNAL_CONTAINER:"ContainerExternal",TYPE_EXTERNAL_CONTAINER:"Container",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_INPUT_FIELD:"InputField",TYPE_INPUT_FIELD:"Element",NAME_INPUT_SELECT:"InputSelect",TYPE_INPUT_SELECT:"Element",NAME_INPUT_NUMBER:"InputNumber",TYPE_INPUT_NUMBER:"Element",NAME_XS:"xs",NAME_SM:"sm",NAME_MD:"md",NAME_LG:"lg",textSubtitle:"_rules_textSubtitle__12jSX",alignInputs:"_rules_alignInputs__32E27",textBody:"_rules_textBody__1Kovy"}},554:function(e,t,r){"use strict";r.d(t,"a",(function(){return c}));var n=r(39),a=r(187),i=r(6);function c(e){var t=e.textErrorRequired,r=e.textErrorEmail,c=e.textErrorMaxLength,u=e.emailMaxLength,o=e.emailValidationRegex,s=[Object(a.d)(n.e.string.ofLength(i.fb,u),c),Object(a.d)(Object(a.h)(o),r)];return Object(n.c)((function(e){var r=s.find((function(t){return!Object(n.d)(e,t)}));return e&&r?r:Object(a.d)(n.e.string.required(),t)}))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=202.13b2cd99.chunk.js.map