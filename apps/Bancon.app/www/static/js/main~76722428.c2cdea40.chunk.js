(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[235],{14:function(e,n,a){"use strict";a.d(n,"b",(function(){return r})),a.d(n,"a",(function(){return t}));var i=a(6),r="preferences",t={fetching:!1,fetchingOtpConfigurationPre:!1,fetchingHasSecureDevice:!1,fetchingHasKeyPhone:void 0,fetchingNotificationsConfiguration:!1,error:void 0,warning:void 0,hasChangedPassword:!1,securitySealList:[],securitySealImage:i.D,accessToken:i.D,personalData:void 0,hasSelectBancorPassword:!1,hasSelectSelfie:!1,hasExpiredPhoneKey:!1,hasValidPhoneKey:!1,hasValidatePassword:!1,hasAssignOTP:!1,deviceModelOTP:i.D,isTheDeviceSecure:void 0,hasSecureDevice:!1,hasSendSMS:!1,hasSuccessSMSStep:!1,timer:i.Sb,hasActualDevice:!1,countUserDevices:i.Sb,communicationConfigurations:[],isEmailChangeTokenSent:!1,isEmailChangeTokenConfirmed:!1,isDataModified:!1,exchangeToken:i.D,sendFrontDocument:!1,sendBackDocument:!1,sendSelfie:!1,hasSelfie:!1,idTransaction:i.D,otpType:i.D,countSendOtpSMS:i.Sb,isSmsEnable:!1,isDeviceCompatibleToken:!1,isAndroid:!1,isOTPSmsValidationAndroidVersion:!1,hasEnabledTokenNow:!1,hasValidateSecurity:!1,seed:void 0,isScreenLock:!1,smsTypifiedFailed:!1,isIosSmsEnabled:!1,firstDoneKeyPhone:!1,isModifiedNotificationsConfiguration:!1,isAlertCodeOTP:null,documentData:i.D,needsProofOfLife:!0}},168:function(e,n,a){"use strict";a.d(n,"a",(function(){return u})),a.d(n,"c",(function(){return v})),a.d(n,"b",(function(){return S})),a.d(n,"d",(function(){return w}));var i=a(9),r=a(6),t="pushNotifications",o={fetching:!1,error:void 0,warning:void 0,accessToken:r.D,listUserDevices:[],alreadyRegistered:!1},c=a(2),s=a(12),d=a(1),f=a(78),u=Object(d.b)(t,["clean"]),l=a(0),h=a(5),g=a(8),S=Object(d.c)(t,{listUserDevices:function(e,n){return Object(h.a)(Object(l.a)().mark((function a(){var i,r;return Object(l.a)().wrap((function(a){for(;;)switch(a.prev=a.next){case 0:if(i=n.rejectWithValue,e){a.next=3;break}return a.abrupt("return",null);case 3:return a.next=5,Object(f.b)(Object(c.a)({},e));case 5:if(r=a.sent){a.next=8;break}return a.abrupt("return",null);case 8:if(!Object(f.e)(r)){a.next=10;break}return a.abrupt("return",i(Object(c.a)(Object(c.a)({},r),f.c[r.code])));case 10:return a.abrupt("return",r);case 11:case"end":return a.stop()}}),a)})))()},deleteUserDevice:function(e,n){return Object(h.a)(Object(l.a)().mark((function a(){var i,r,t,o;return Object(l.a)().wrap((function(a){for(;;)switch(a.prev=a.next){case 0:if(i=n.rejectWithValue,e){a.next=3;break}return a.abrupt("return",null);case 3:return r=e.accessToken,t=e.idDevice,a.next=6,Object(f.a)({accessToken:r,idDevice:t});case 6:if(o=a.sent){a.next=9;break}return a.abrupt("return",null);case 9:if(!Object(f.e)(o)){a.next=11;break}return a.abrupt("return",i(Object(c.a)(Object(c.a)({},o),f.c[o.code])));case 11:return g.a.dispatch(S.listUserDevices({accessToken:r})),a.abrupt("return",o);case 13:case"end":return a.stop()}}),a)})))()},registerUserDevice:function(e,n){return Object(h.a)(Object(l.a)().mark((function a(){var i,r;return Object(l.a)().wrap((function(a){for(;;)switch(a.prev=a.next){case 0:if(i=n.rejectWithValue,e){a.next=3;break}return a.abrupt("return",null);case 3:return a.next=5,Object(f.d)(Object(c.a)({},e));case 5:if(r=a.sent){a.next=8;break}return a.abrupt("return",null);case 8:if(!Object(f.e)(r)){a.next=10;break}return a.abrupt("return",i(Object(c.a)(Object(c.a)({},r),f.c[r.code])));case 10:return a.abrupt("return",r);case 11:case"end":return a.stop()}}),a)})))()}}),p=a(3),b=Object(d.d)(o,(function(e){var n=e.addCase,a=e.addMatcher;n(u.clean,(function(){return Object(c.a)({},o)})),n(S.listUserDevices.fulfilled,(function(e,n){var a=n.payload;e.fetching=!1,e.error=o.error,e.warning=o.warning,a&&(e.listUserDevices=a.data.listUserDevices)})),n(S.deleteUserDevice.fulfilled,(function(e){e.fetching=!1,e.error=o.error,e.warning=o.warning})),n(S.registerUserDevice.fulfilled,(function(e){e.fetching=!1,e.error=o.error,e.warning=o.warning,e.alreadyRegistered=!0})),a((function(e){return Object(s.b)(e,t)}),(function(e){e.fetching=!0,e.error=o.error,e.warning=o.warning})),a((function(e){return Object(s.c)(e,t)}),(function(e,n){var a=n.payload;e.fetching=!1,Object(p.x)(f.c,a.code)?e.warning=a:e.error=a}))}));function v(e){return e[t]}v.fetchingPushNotifications=Object(d.e)(v,(function(e){return e.fetching})),v.listUserDevices=Object(d.e)(v,(function(e){return e.listUserDevices})),v.error=Object(d.e)(v,(function(e){return e.error})),v.warning=Object(d.e)(v,(function(e){return e.warning})),v.alreadyRegistered=Object(d.e)(v,(function(e){return e.alreadyRegistered}));var w=Object(i.a)({},t,b)},170:function(e,n,a){"use strict";a.d(n,"a",(function(){return h}));var i=a(2),r=a(12),t=a(1),o=a(145),c=a(17),s=a(43),d=a(32),f=a(14),u=a(3),l=a(6),h=Object(t.d)(f.a,(function(e){var n=e.addCase,a=e.addMatcher;n(s.a.clean,(function(){return Object(i.a)({},f.a)})),n(s.a.clearHasPasswordChanged,(function(e){e.hasChangedPassword=!1})),n(s.a.cleanWarnings,(function(e){e.warning=f.a.warning})),n(s.a.updateWarnings,(function(e,n){var a=n.payload;e.warning=a})),n(s.a.setDevice,(function(e,n){var a=n.payload;if(a){e.device=a.device;var i=a.device,r=i.osName,t=i.osVersion,c=a.minAndroidVersion,s=a.minIosVersion,d=a.minIpadosVersion,f=a.isSmsEnable,u=a.minOTPSmsValidationAndroidVersion,l=a.isScreenLock,h=a.isIosSmsEnabled,g="Android"===r&&Object(o.a)(t,c),S="iOS"===r&&Object(o.a)(t,s),p="iPadOS"===r&&Object(o.a)(t,d);if(e.isDeviceCompatibleToken=g||S||p||!1,e.isAndroid="Android"===r,e.isSmsEnable=f,e.isScreenLock=l,e.isIosSmsEnabled=h,"Android"===r){var b=Object(o.a)(t,u);e.isOTPSmsValidationAndroidVersion=Boolean(b)}}})),n(d.a.changePasswordPre.fulfilled,(function(e,n){var a=n.payload;e.fetching=!1,e.hasChangedPassword=!1,e.error=f.a.error,e.warning=f.a.warning,a&&(e.securitySealImage=a.data.securitySealImage)})),n(d.a.listSecuritySeal.fulfilled,(function(e,n){var a=n.payload;e.fetching=!1,e.error=f.a.error,e.warning=f.a.warning,a&&(e.securitySealList=a.data.securitySeals)})),n(d.a.changePassword.fulfilled,(function(e,n){var a=n.payload;e.fetching=!1,e.error=f.a.error,e.warning=f.a.warning,e.isAlertCodeOTP=f.a.isAlertCodeOTP,a&&(e.securitySealImage=a.data._securitySeal,e.hasChangedPassword=!0)})),n(s.a.cleanAlertCodeOTP,(function(e){e.isAlertCodeOTP=f.a.isAlertCodeOTP})),n(d.a.modifyUserDataPre.fulfilled,(function(e,n){var a=n.payload;e.fetching=!1,e.error=f.a.error,e.warning=f.a.warning,a&&(e.personalData=a.data)})),n(d.a.updateLatestMailDateActivity.fulfilled,(function(e){e.fetching=!1,e.error=f.a.error,e.warning=f.a.warning})),n(d.a.unlinkOTP.fulfilled,(function(e,n){var a,i=n.payload;e.fetching=!1,e.error=f.a.error,e.warning=f.a.warning,i&&(e.idTransaction=null!==(a=i.idTransaction)&&void 0!==a?a:l.D,e.validationType=void 0,e.deviceModelOTP=l.D,e.otpType=l.D,e.seed=void 0,e.seedUser=void 0,e.hasSelfie=!1)})),n(d.a.linkOTP.fulfilled,(function(e,n){var a,i=n.payload,r=n.meta;if(e.fetching=!1,e.error=f.a.error,e.warning=f.a.warning,i){var t=r.arg.validationType,o=i.data,s=o.seed,d=o.seedUser;e.validationType=t,e.idTransaction=null!==(a=i.idTransaction)&&void 0!==a?a:l.D,t===c.j.OTPMOBILE&&s&&(e.seed=s,e.otpType=l.Lb,e.seedUser=d,e.hasAssignOTP=!0),t===c.j.OTPSMS&&(e.otpType=l.Mb,e.hasAssignOTP=!0)}})),n(d.a.otpConfigurationPre.fulfilled,(function(e,n){var a=n.payload;if(e.fetching=!1,e.fetchingOtpConfigurationPre=!1,e.error=f.a.error,e.warning=f.a.warning,a){var i=a.data,r=i.deviceModel,t=i.isTrustfull,o=i.otpType,c=i.isTheDeviceSecure,s=i.needsProofOfLife;e.exchangeToken=f.a.exchangeToken,e.otpType=o,e.deviceModelOTP=r,e.isTrustful=Boolean(t),e.isTheDeviceSecure=Boolean(c),e.needsProofOfLife=s}})),n(d.a.otpConfigurationPre.pending,(function(e){e.fetchingOtpConfigurationPre=!0})),n(d.a.otpConfigurationPre.rejected,(function(e){e.fetchingOtpConfigurationPre=!1})),n(d.a.hasSecureDevice.fulfilled,(function(e,n){var a=n.payload;if(e.fetching=!1,e.fetchingHasSecureDevice=!1,e.error=f.a.error,e.warning=f.a.warning,a){var i=a.data.secureDevice;e.hasSecureDevice=Boolean(i)}})),n(d.a.hasSecureDevice.pending,(function(e){e.fetchingHasSecureDevice=!0})),n(d.a.hasSecureDevice.rejected,(function(e){e.fetchingHasSecureDevice=!1})),n(d.a.activateKeyPhone.fulfilled,(function(e){e.fetching=!1,e.error=f.a.error,e.warning=f.a.warning,e.hasValidateSecurity=!0})),n(d.a.hasKeyPhone.fulfilled,(function(e,n){var a=n.payload;if(e.fetching=!1,e.fetchingHasKeyPhone=!1,e.error=f.a.error,e.warning=f.a.warning,a){var i=a.data,r=i.expired,t=i.valid;e.hasExpiredPhoneKey=Boolean(r),e.hasValidPhoneKey=Boolean(t),e.firstDoneKeyPhone||(e.firstDoneKeyPhone=!0)}})),n(d.a.hasKeyPhone.pending,(function(e){e.fetchingHasKeyPhone=!0})),n(d.a.hasKeyPhone.rejected,(function(e){e.fetchingHasKeyPhone=!1})),n(d.a.sendValidationSMS.fulfilled,(function(e){e.fetching=!1,e.error=f.a.error,e.warning=f.a.warning,e.hasSendSMS=!0})),n(d.a.validateSMS.fulfilled,(function(e,n){var a,i=n.payload;(e.fetching=!1,e.error=f.a.error,e.warning=f.a.warning,i)&&(e.idTransaction=null!==(a=i.idTransaction)&&void 0!==a?a:l.D,i.data.numberValidated&&(e.hasValidateSecurity=!0))})),n(d.a.updateMailActivity.fulfilled,(function(e,n){var a=n.payload;(e.fetching=!1,e.error=f.a.error,e.warning=f.a.warning,a)&&(a.data.mail&&(e.isEmailChangeTokenSent=!0))})),n(d.a.validateEmailToken.fulfilled,(function(e){e.fetching=!1,e.error=f.a.error,e.warning=f.a.warning,e.isEmailChangeTokenConfirmed=!0,e.isEmailChangeTokenSent=!0})),n(d.a.updateUserData.fulfilled,(function(e){e.fetching=!1,e.error=f.a.error,e.warning=f.a.warning,e.isDataModified=!0})),n(d.a.sendFrontDocument.fulfilled,(function(e,n){var a=n.meta,i=n.payload;if(e.fetching=!1,e.error=f.a.error,e.warning=f.a.warning,i){var r=i.data._exchangeToken;e.exchangeToken=r,e.sendFrontDocument=!0,e.documentData=a.arg.documentData}})),n(d.a.sendBackDocument.fulfilled,(function(e,n){var a=n.payload;e.fetching=!1,e.error=f.a.error,e.warning=f.a.warning,a&&(e.sendBackDocument=!0)})),n(d.a.sendSelfie.fulfilled,(function(e,n){var a=n.payload;e.fetching=!1,e.error=f.a.error,e.warning=f.a.warning,a&&(e.hasValidateSecurity=!0,e.exchangeToken=f.a.exchangeToken)})),n(s.a.cleanRenaperStep,(function(e){e.sendFrontDocument=f.a.sendFrontDocument,e.sendBackDocument=f.a.sendBackDocument,e.sendSelfie=f.a.sendSelfie,e.hasSelfie=f.a.hasSelfie})),n(s.a.cleanIsEmailChangeTokenSent,(function(e){e.isEmailChangeTokenSent=!1})),n(s.a.cleanIsEmailChangeTokenConfirmed,(function(e){e.isEmailChangeTokenConfirmed=!1})),n(s.a.cleanIsDataModified,(function(e){e.isDataModified=!1})),n(s.a.cleanSMSSteps,(function(e){e.hasAssignOTP=!1,e.hasExpiredPhoneKey=!1,e.hasSecureDevice=!1,e.hasSelectBancorPassword=!1,e.hasSelectSelfie=!1,e.hasSuccessSMSStep=!1,e.hasValidPhoneKey=!1,e.hasValidatePassword=!1})),n(s.a.setBancorPasswordStep,(function(e){e.hasSelectSelfie=!1,e.hasSelectBancorPassword=!0})),n(s.a.cleanBancorPasswordStep,(function(e){e.hasExpiredPhoneKey=f.a.hasExpiredPhoneKey,e.hasValidPhoneKey=f.a.hasValidPhoneKey,e.hasValidatePassword=f.a.hasValidatePassword,e.hasAssignOTP=f.a.hasAssignOTP})),n(s.a.cleanOTP,(function(e){e.validationType=f.a.validationType,e.hasAssignOTP=f.a.hasAssignOTP,e.hasEnabledTokenNow=f.a.hasEnabledTokenNow,e.hasSelectBancorPassword=f.a.hasSelectBancorPassword,e.hasSelectSelfie=f.a.hasSelectSelfie,e.hasValidateSecurity=f.a.hasValidateSecurity,e.exchangeToken=f.a.exchangeToken,e.hasSendSMS=f.a.hasSendSMS,e.smsTypifiedFailed=f.a.smsTypifiedFailed,e.fetchingHasKeyPhone=f.a.fetchingHasKeyPhone})),n(s.a.hasSmsTypifiedFailed,(function(e){e.smsTypifiedFailed=!0})),n(s.a.cleanSeed,(function(e){e.seed=f.a.seed})),n(s.a.setStepSMSSuccess,(function(e){e.hasSuccessSMSStep=!0})),n(s.a.setSelfieStep,(function(e){e.hasSelectBancorPassword=!1,e.hasSelectSelfie=!0})),n(s.a.setViewedTicket,(function(e){e.hasSelectSelfie=!1,e.hasSelectBancorPassword=!1})),n(s.a.setEnabledTokenNow,(function(e){e.hasEnabledTokenNow=!0})),n(d.a.getNotificationsConfiguration.fulfilled,(function(e,n){var a=n.payload;if(e.fetching=!1,e.fetchingNotificationsConfiguration=!1,e.error=f.a.error,e.warning=f.a.warning,a){var i=a.data,r=i.hasActualDevice,t=i.countUserDevices,o=i.communicationConfigurations;e.hasActualDevice=r,e.countUserDevices=t,e.communicationConfigurations=o}})),n(d.a.getNotificationsConfiguration.pending,(function(e){e.fetchingNotificationsConfiguration=!0})),n(d.a.getNotificationsConfiguration.rejected,(function(e){e.fetchingNotificationsConfiguration=!1})),n(d.a.modifyNotificationsConfiguration.fulfilled,(function(e){e.fetching=!1,e.error=f.a.error,e.warning=f.a.warning,e.isModifiedNotificationsConfiguration=!0})),n(s.a.setIsModifiedNotificationsConfiguration,(function(e,n){var a=n.payload;e.isModifiedNotificationsConfiguration=a})),n(s.a.cleanModalOTP,(function(e){e.countSendOtpSMS=f.a.countSendOtpSMS})),n(d.a.checkEmailNeedsRefreshed.fulfilled,(function(e,n){var a=n.payload;if(e.fetching=!1,e.error=f.a.error,e.warning=f.a.warning,a){var i=a.data.refreshIsRequired;e.isEmailNeedsRefreshed=i}})),n(d.a.sendOtpOverSms.fulfilled,(function(e){e.fetching=!1,e.error=f.a.error,e.warning=f.a.warning,e.countSendOtpSMS=e.countSendOtpSMS+l.fb})),a((function(e){return Object(r.b)(e,f.b)}),(function(e){e.fetching=!0,e.error=f.a.error,e.warning=f.a.warning})),a((function(e){return Object(r.c)(e,f.b)}),(function(e,n){var a=n.payload;e.fetching=!1,Object(u.x)(c.o,a.code)?e.warning=a:e.error=a;var i=a.code;e.isAlertCodeOTP=i===u.k}))}))},276:function(e,n,a){"use strict";a.d(n,"a",(function(){return g}));var i=a(0),r=a(5),t=a(16),o=a(11),c=a(36),s=a(45),d=a(171),f=a(8),u=a(6),l=a(140),h=a(93);function g(){var e=Object(c.i)().isMobile,n=Object(f.c)(l.a.otpType),a=Object(f.c)(l.a.seed),g=Object(f.c)(h.a.linkedSoftTokenUser),S=Object(f.c)(h.a.linkedDeviceModel),p=o.b.useState(u.D),b=Object(t.a)(p,2),v=b[0],w=b[1],O=o.b.useState(!1),T=Object(t.a)(O,2),P=T[0],y=T[1],D=o.b.useCallback(Object(r.a)(Object(i.a)().mark((function r(){var t,o,c;return Object(i.a)().wrap((function(i){for(;;)switch(i.prev=i.next){case 0:if(e&&n){i.next=2;break}return i.abrupt("return");case 2:return i.next=4,Object(s.b)(u.T);case 4:if(t=i.sent,!(o=t.value)&&a&&(o=a),!Object(s.d)(t)&&null!==o){i.next=9;break}return i.abrupt("return");case 9:if(!g||!S){i.next=15;break}return i.next=12,Object(d.a)({seed:o});case 12:c=i.sent,w(c.value),y(!0);case 15:case"end":return i.stop()}}),r)}))),[e,n,a,g,S]);return o.b.useEffect((function(){D()}),[D]),{softToken:v,isSeedPresent:P}}},43:function(e,n,a){"use strict";a.d(n,"a",(function(){return t}));var i=a(1),r=a(14),t=Object(i.b)(r.b,["clean","setBancorPasswordStep","setSelfieStep","setStepSMSSuccess","setStepSMS","cleanSMSSteps","setViewedTicket","cleanIsEmailChangeTokenSent","cleanIsEmailChangeTokenConfirmed","cleanIsDataModified","cleanRenaperStep","cleanBancorPasswordStep","cleanWarnings","updateWarnings","verifyEmail","clearHasPasswordChanged","setDevice","setEnabledTokenNow","setSMSSelected","cleanOTP","cleanSeed","hasSmsTypifiedFailed","setIsModifiedNotificationsConfiguration","cleanModalOTP","cleanAlertCodeOTP"])}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=main~76722428.c2cdea40.chunk.js.map