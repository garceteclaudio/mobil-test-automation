(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[257],{108:function(e,t,r){"use strict";r.d(t,"d",(function(){return a.b})),r.d(t,"f",(function(){return O})),r.d(t,"e",(function(){return f})),r.d(t,"a",(function(){return u.a})),r.d(t,"c",(function(){return N})),r.d(t,"b",(function(){return I})),r.d(t,"h",(function(){return w})),r.d(t,"i",(function(){return M})),r.d(t,"g",(function(){return q}));var n=r(9),a=r(60),i=r(2),c=r(1),s=r(12),o=r(121),u=r(35),b=r(3),d=r(106),f=Object(c.d)(a.a,(function(e){var t=e.addCase,r=e.addMatcher;t(u.a.setJustLoggedOut,(function(e,t){var r=t.payload;e.hasJustLoggedOut=r})),t(u.a.setIsFingerButtonClicked,(function(e,t){var r=t.payload;e.isFingerButtonClicked=r})),t(u.a.setPermanentLockout,(function(e,t){var r=t.payload;e.permanentLockout=r})),t(u.a.setLockoutDate,(function(e,t){var r=t.payload;e.lockoutDate=r})),t(u.a.setAvailability,(function(e,t){var r=t.payload;return Object(i.a)(Object(i.a)({},e),r)})),t(u.a.setBiometrySessionConfigured,(function(e,t){var r=t.payload;return Object(i.a)(Object(i.a)({},e),{},{isBiometrySessionRequested:a.a.isBiometrySessionRequested,isBiometrySessionConfigured:r})})),t(u.a.setBiometryDeviceSaved,(function(e,t){var r=t.payload;return Object(i.a)(Object(i.a)({},e),{},{isBiometryDeviceSaved:r})})),t(u.a.setBiometrySessionRequested,(function(e,t){var r=t.payload;return Object(i.a)(Object(i.a)({},e),{},{isBiometrySessionRequested:r})})),t(u.a.setBiometryPreferencesRequested,(function(e,t){var r=t.payload;return Object(i.a)(Object(i.a)({},e),{},{isBiometryPreferencesRequested:r})})),t(o.a.saveDevice.fulfilled,(function(e){return Object(i.a)(Object(i.a)({},e),{},{isBiometryDeviceSaved:!0,fetching:!1,error:a.a.error,warning:a.a.warning})})),r((function(e){return Object(s.b)(e,a.b)}),(function(e){e.fetching=!0,e.error=a.a.error,e.warning=a.a.warning})),r((function(e){return Object(s.c)(e,a.b)}),(function(e,t){var r=t.payload;e.fetching=!1,Object(b.x)(d.a,r.code)?e.warning=r:e.error=r}))}));function O(e){return e[a.b]}O.availability=Object(c.e)(O,(function(e){return{userIsNotEnrolled:e.userIsNotEnrolled,isHardwareUnavailable:e.isHardwareUnavailable,isBiometryAvailable:e.isBiometryAvailable,isBiometryFace:e.isBiometryFace,device:e.device}})),O.isBiometrySessionRequested=Object(c.e)(O,(function(e){return e.isBiometrySessionRequested})),O.isBiometryPreferencesRequested=Object(c.e)(O,(function(e){return e.isBiometryPreferencesRequested})),O.isBiometryDeviceSaved=Object(c.e)(O,(function(e){return e.isBiometryDeviceSaved})),O.isBiometrySessionConfigured=Object(c.e)(O,(function(e){return e.isBiometrySessionConfigured})),O.hasJustLoggedOut=Object(c.e)(O,(function(e){return e.hasJustLoggedOut})),O.isFingerButtonClicked=Object(c.e)(O,(function(e){return e.isFingerButtonClicked})),O.fetching=Object(c.e)(O,(function(e){return e.fetching})),O.error=Object(c.e)(O,(function(e){return e.error})),O.warning=Object(c.e)(O,(function(e){return e.warning})),O.lockoutDate=Object(c.e)(O,(function(e){return e.lockoutDate})),O.lockoutPermanent=Object(c.e)(O,(function(e){return e.permanentLockout})),O.userIsNotEnrolled=Object(c.e)(O,(function(e){return e.userIsNotEnrolled})),O.isHardwareUnavailable=Object(c.e)(O,(function(e){return e.isHardwareUnavailable}));var l=r(0),p=r(5),v=r(16),E=r(11),m=r(45),y=r(254),j=r(36),R=r(6),k=r(44),B=r(287),S=r(79),h=r(33),g=r(166),L=r(8),T=r(81),N="accessToken",I="fingerPrintToken",x="unknown",_=function(e){return e[e.NOT_CALLED=0]="NOT_CALLED",e[e.CALLED=1]="CALLED",e[e.EVENT=2]="EVENT",e}(_||{});function D(e,t){var r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],n=E.b.useState(!1),a=Object(v.a)(n,2),i=a[0],c=a[1],s=E.b.useCallback((function(){i||(document.addEventListener(e,t,{once:!0}),c(!0))}),[i,c,e,t]),o=E.b.useCallback((function(){i&&(document.removeEventListener(e,t),c(!1))}),[i,c,e,t]);return E.b.useEffect((function(){return!i&&r&&s(),o}),[s,o,r,i]),[s,o,i]}function w(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t=arguments.length>1?arguments[1]:void 0,r=Object(L.c)(O.availability),n=E.b.useState(_.NOT_CALLED),a=Object(v.a)(n,2),i=a[0],c=a[1],s=D("resume",E.b.useCallback((function(){i&&c(_.EVENT)}),[i]),e),o=Object(v.a)(s,1)[0];return E.b.useEffect((function(){i!==_.CALLED&&Object(p.a)(Object(l.a)().mark((function e(){var r,n,a,s,o,b;return Object(l.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(y.b)();case 2:return r=e.sent,n=r.isAvailable,a=r.code,s=r.CODE,e.next=6,Object(j.a)();case 6:o=e.sent,b={isHardwareUnavailable:a===s.NO_HARDWARE,userIsNotEnrolled:a===s.NO_AVAILABLE,isBiometryAvailable:n,isBiometryFace:a===s.FACE,device:Object(j.h)(o)?void 0:o},L.a.dispatch(u.a.setAvailability(b)),i===_.EVENT&&t&&t(b),c(_.CALLED);case 11:case"end":return e.stop()}}),e)})))()}),[i,c,t]),{state:r,install:o}}var C={REGISTER:"register",LOGIN:"login"},A={isBiometryLoading:!1,biometryResult:null,biometryError:void 0},P={BIOMETRY_UNIDENTIFIED:"spa.error.biometry.unidentified",BIOMETRY_FAILED:"spa.error.biometry.failed",BIOMETRY_KIND:"spa.error.biometry.kind",AUTH_NO_TOKEN:"spa.error.biometry.authNoToken",AUTH_NO_SESSION:"spa.error.biometry.authNoSession",AUTH_UNKNOWN:"spa.error.biometry.authUnknown",SESSION_INVALID:"spa.error.biometry.sessionInvalid",REGISTER_NO_TOKEN:"spa.error.biometry.registerNoToken",REGISTER_NO_SECRET:"spa.error.biometry.registerNoSecret",BIOMETRY_UNLINKED:"spa.error.biometry.unlinked",BIOMETRY_LOCKED_TEMPORARLY:"spa.error.biometry.lockedTemporarly",BIOMETRY_LOCKED_PERMANENTLY:"spa.error.biometry.lockedPermanently",BIOMETRY_REGISTER_LOCKED_TEMPORARLY:"spa.error.biometry.registerLockedTemporarly",BIOMETRY_REGISTER_LOCKED_PERMANENTLY:"spa.error.biometry.registerLockedPermanently"};function M(){var e=Object(L.c)(O.lockoutDate),t=Object(L.c)(O.lockoutPermanent),r=e?((new Date).getTime()-e)/R.xb:R.Sb,n=r>R.Sb?R.Gb-r:R.Sb,a=E.b.useRef(null);return D("pause",E.b.useCallback((function(){t&&L.a.dispatch(u.a.setPermanentLockout(!1))}),[t])),E.b.useEffect((function(){if(n>R.Sb&&!t&&null===a.current){var e=setInterval((function(){L.a.dispatch(u.a.setLockoutDate(void 0))}),n*R.xb);return a.current=e,function(){clearInterval(e),a.current=null}}return function(){}}),[n,t]),n>R.Sb||t}function q(e){var t=e.onUnavailable,r=e.onRegister,n=e.onSkip,a=e.onLogin,c=e.onRegisterPreference,s=e.textGet,b=e.textHeader,f=e.textTitle,j=e.textCancel,I=e.textError,_=e.isVUFingerprintEnabled,D=e.url,w=e.timeout,M=E.b.useRef(!1),q=E.b.useRef(!1),U=E.b.useState(A.isBiometryLoading),Y=Object(v.a)(U,2),F=Y[0],G=Y[1],K=E.b.useState(A.biometryResult),H=Object(v.a)(K,2),J=H[0],V=H[1],W=E.b.useState(A.biometryError),z=Object(v.a)(W,2),Q=z[0],X=z[1],Z=Object(L.c)(h.e.token),$=Object(L.c)(h.e.fetching),ee=Object(L.c)(O.hasJustLoggedOut),te=Object(L.c)(O.isFingerButtonClicked),re=Object(L.c)(O.isBiometryDeviceSaved),ne=Object(L.c)(h.e.isSessionActive),ae=Object(L.c)(O.isBiometrySessionRequested),ie=Object(L.c)(O.isBiometryPreferencesRequested),ce=Object(L.c)(O.availability),se=ce.isBiometryAvailable,oe=ce.isBiometryFace,ue=ce.device,be=Object(L.c)(O.isBiometrySessionConfigured),de=Object(L.c)(O.userIsNotEnrolled);return E.b.useEffect((function(){M.current?M.current=!1:q.current?q.current=!1:(be&&!ne&&te&&(te&&(G(!0),L.a.dispatch(u.a.setIsFingerButtonClicked(!1)),q.current=!0),Object(p.a)(Object(l.a)().mark((function e(){var t,r,n;return Object(l.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(m.b)(N);case 2:if(t=e.sent,!(r=t.value)){e.next=13;break}return e.next=7,me(r);case 7:if((n=e.sent)&&n.existSessionWithFingerPrint){e.next=13;break}return L.a.dispatch(u.a.setBiometrySessionConfigured(!1)),e.next=12,Object(m.a)(N);case 12:return e.abrupt("return",je(P.BIOMETRY_UNLINKED));case 13:return e.next=15,fe(C.LOGIN);case 15:return e.abrupt("return",void 0);case 16:case"end":return e.stop()}}),e)})))()),ee&&(L.a.dispatch(u.a.setJustLoggedOut(!1)),M.current=!0))}),[be,ne,ee,te]),E.b.useEffect((function(){$||G(!1)}),[$]),E.b.useEffect((function(){Object(p.a)(Object(l.a)().mark((function e(){return Object(l.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(ne){e.next=2;break}return e.abrupt("return");case 2:if(ae||be){e.next=5;break}return n?n():(L.a.dispatch(u.a.setBiometrySessionRequested(!1)),L.a.dispatch(u.a.setBiometryPreferencesRequested(!1))),e.abrupt("return");case 5:if(!ae){e.next=8;break}return e.next=8,fe(C.REGISTER,{hasConfirmation:!0});case 8:case"end":return e.stop()}}),e)})))()}),[be,ae,ne]),E.b.useEffect((function(){Object(p.a)(Object(l.a)().mark((function e(){return Object(l.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!Z||!ie){e.next=3;break}return e.next=3,fe(C.REGISTER,{hasConfirmation:!0});case 3:case"end":return e.stop()}}),e)})))()}),[ie,Z]),E.b.useEffect((function(){ne&&be&&n&&n()}),[ne,be]),E.b.useEffect((function(){Object(p.a)(Object(l.a)().mark((function e(){var t,r,n,i,c;return Object(l.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(J){e.next=2;break}return e.abrupt("return",void 0);case 2:if(t=J.isLockedTemporarly,r=J.isLockedPermanently,n=J.isAuthenticated,i=J.kind,c=J.cancelled,n){e.next=7;break}return be||(ie?L.a.dispatch(u.a.setBiometryPreferencesRequested(!1)):(L.a.dispatch(u.a.setBiometrySessionRequested(!1)),a&&a())),Re(i,r,t,c),e.abrupt("return",!1);case 7:V(A.biometryResult),e.t0=i,e.next=e.t0===C.REGISTER?11:e.t0===C.LOGIN?12:13;break;case 11:return e.abrupt("return",le());case 12:return e.abrupt("return",ve());case 13:return e.abrupt("return",je(P.BIOMETRY_KIND));case 14:case"end":return e.stop()}}),e)})))()}),[J]),E.b.useEffect((function(){Object(p.a)(Object(l.a)().mark((function e(){var t;return Object(l.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(re){e.next=2;break}return e.abrupt("return",void 0);case 2:if(Z){e.next=4;break}return e.abrupt("return",je(P.REGISTER_NO_TOKEN));case 4:return e.next=6,Object(m.c)({key:N,val:Z});case 6:if(t=e.sent,L.a.dispatch(u.a.setBiometryDeviceSaved(!1)),t){e.next=10;break}return e.abrupt("return",je(P.REGISTER_NO_SECRET));case 10:return L.a.dispatch(u.a.setBiometrySessionConfigured(!0)),ie?(L.a.dispatch(u.a.setBiometryPreferencesRequested(!1)),c&&c()):r&&r(),e.abrupt("return",void 0);case 13:case"end":return e.stop()}}),e)})))()}),[re,Z]),{device:ue,isSectionActive:ne,isBiometryLoading:F,isBiometrySessionRequested:ae,isBiometryPreferencesRequested:ie,isBiometrySessionConfigured:be,isBiometryAvailable:se,isBiometryFace:oe,biometryResult:J,isBiometryDeviceSaved:re,biometryError:Q};function fe(e,t){return Oe.apply(this,arguments)}function Oe(){return(Oe=Object(p.a)(Object(l.a)().mark((function e(r,n){var a;return Object(l.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(se){e.next=3;break}return t?t():be||(L.a.dispatch(u.a.setBiometrySessionRequested(!1)),L.a.dispatch(u.a.setBiometryPreferencesRequested(!1))),e.abrupt("return");case 3:return e.next=5,Object(y.a)(Object(i.a)({androidLabelHeader:b,androidLabelTitle:f,bothLabelDesc:" ",bothLabelCancel:j},n||{}));case 5:(a=e.sent).cancelled&&G(!1),V(Object(i.a)(Object(i.a)({},a),{},{kind:r}));case 8:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function le(){return pe.apply(this,arguments)}function pe(){return(pe=Object(p.a)(Object(l.a)().mark((function e(){var t,r;return Object(l.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(m.b)(N);case 2:t=e.sent,!Z||de||Object(m.d)(t)||(r=t.value)&&L.a.dispatch(g.b.biometricSecurityDelete({token:Z,accessToken:r})),L.a.dispatch(o.a.saveDevice({deviceModel:(null===ue||void 0===ue?void 0:ue.model)||x}));case 5:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function ve(){return Ee.apply(this,arguments)}function Ee(){return(Ee=Object(p.a)(Object(l.a)().mark((function e(){var t,r,n,c,s;return Object(l.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(m.b)(N);case 2:return t=e.sent,r=t.value,e.next=6,Object(m.b)(R.U);case 6:if(n=e.sent,c=n.value,!Object(m.d)(t)&&r){e.next=10;break}return e.abrupt("return",je(P.AUTH_NO_TOKEN));case 10:return e.next=12,me(r);case 12:if((s=e.sent)&&s.existSessionWithFingerPrint){e.next=15;break}return e.abrupt("return",je(P.AUTH_NO_SESSION));case 15:return Object(p.a)(Object(l.a)().mark((function e(){var t,n;return Object(l.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(e.prev=0,e.t0=i.a,e.t1={accessToken:r,seedUser:String(c),deviceModel:null===ue||void 0===ue?void 0:ue.model},!_){e.next=9;break}return e.next=6,Object(T.d)({url:D,timeout:w});case 6:e.t2=e.sent,e.next=10;break;case 9:e.t2={};case 10:return e.t3=e.t2,t=(0,e.t0)(e.t1,e.t3),e.next=14,L.a.dispatch(h.b.loginFingerprint(t)).unwrap();case 14:if(n=e.sent,!Object(k.j)(n)){e.next=17;break}return e.abrupt("return",je(P.AUTH_UNKNOWN));case 17:a&&a();case 18:return e.prev=18,L.a.dispatch(u.a.setBiometrySessionRequested(!1)),L.a.dispatch(u.a.setBiometryPreferencesRequested(!1)),e.finish(18);case 22:return e.abrupt("return",void 0);case 23:case"end":return e.stop()}}),e,null,[[0,,18,22]])})))(),e.abrupt("return",void 0);case 17:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function me(e){return ye.apply(this,arguments)}function ye(){return(ye=Object(p.a)(Object(l.a)().mark((function e(t){var r;return Object(l.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(d.c)({accessToken:t});case 2:if(r=e.sent,!Object(d.d)(r)){e.next=5;break}return e.abrupt("return",je(P.SESSION_INVALID));case 5:return e.abrupt("return",r.data);case 6:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function je(e){var t=s({uuid:e}),r=new Error(t);G(A.isBiometryLoading),V(A.biometryResult),X(r),Object(B.a)(r),L.a.dispatch(S.a.set([{duration:R.v,text:"".concat(I,": ").concat(t),kind:"ERROR"}]))}function Re(e,t,r,n){var a=e===C.REGISTER;t?(L.a.dispatch(u.a.setPermanentLockout(!0)),je(a?P.BIOMETRY_REGISTER_LOCKED_PERMANENTLY:P.BIOMETRY_LOCKED_PERMANENTLY)):r?(L.a.dispatch(u.a.setLockoutDate((new Date).getTime())),je(a?P.BIOMETRY_REGISTER_LOCKED_TEMPORARLY:P.BIOMETRY_LOCKED_TEMPORARLY)):n||je(P.BIOMETRY_UNIDENTIFIED)}}Object(n.a)({},a.b,f)},60:function(e,t,r){"use strict";r.d(t,"b",(function(){return n})),r.d(t,"a",(function(){return a}));var n="biometry",a={fetching:!1,error:void 0,warning:void 0,device:void 0,isBiometryAvailable:!1,isBiometryFace:void 0,isBiometrySessionConfigured:!1,isBiometryDeviceSaved:!1,isBiometryPreferencesRequested:!1,isBiometrySessionRequested:!1,hasJustLoggedOut:!1,isFingerButtonClicked:!1,lockoutDate:void 0,permanentLockout:!1,isHardwareUnavailable:!0,userIsNotEnrolled:!0}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi1kYXRhL3NsaWNlcy9iaW9tZXRyeS9fcmVkdWNlcnMudHMiLCJ3ZWJwYWNrOi8vLy4tZGF0YS9zbGljZXMvYmlvbWV0cnkvX3NlbGVjdG9ycy50cyIsIndlYnBhY2s6Ly8vLi1kYXRhL3NsaWNlcy9iaW9tZXRyeS9faG9va3MudHN4Iiwid2VicGFjazovLy8uLWRhdGEvc2xpY2VzL2Jpb21ldHJ5L2luZGV4LnRzIiwid2VicGFjazovLy8uLWRhdGEvc2xpY2VzL2Jpb21ldHJ5L19uYW1lc3BhY2UudHMiXSwibmFtZXMiOlsiUmVkdWNlclNsaWNlQmlvbWV0cnkiLCJDcmVhdGVSZWR1Y2VyIiwiSU5JVF9TTElDRV9CSU9NRVRSWSIsIl9yZWYiLCJhZGRDYXNlIiwiYWRkTWF0Y2hlciIsIkFjdGlvblNsaWNlQmlvbWV0cnkiLCJzZXRKdXN0TG9nZ2VkT3V0Iiwic3RhdGUiLCJfcmVmMiIsInBheWxvYWQiLCJoYXNKdXN0TG9nZ2VkT3V0Iiwic2V0SXNGaW5nZXJCdXR0b25DbGlja2VkIiwiX3JlZjMiLCJpc0ZpbmdlckJ1dHRvbkNsaWNrZWQiLCJzZXRQZXJtYW5lbnRMb2Nrb3V0IiwiX3JlZjQiLCJwZXJtYW5lbnRMb2Nrb3V0Iiwic2V0TG9ja291dERhdGUiLCJfcmVmNSIsImxvY2tvdXREYXRlIiwic2V0QXZhaWxhYmlsaXR5IiwiX3JlZjYiLCJfb2JqZWN0U3ByZWFkIiwic2V0QmlvbWV0cnlTZXNzaW9uQ29uZmlndXJlZCIsIl9yZWY3IiwiaXNCaW9tZXRyeVNlc3Npb25SZXF1ZXN0ZWQiLCJpc0Jpb21ldHJ5U2Vzc2lvbkNvbmZpZ3VyZWQiLCJzZXRCaW9tZXRyeURldmljZVNhdmVkIiwiX3JlZjgiLCJpc0Jpb21ldHJ5RGV2aWNlU2F2ZWQiLCJzZXRCaW9tZXRyeVNlc3Npb25SZXF1ZXN0ZWQiLCJfcmVmOSIsInNldEJpb21ldHJ5UHJlZmVyZW5jZXNSZXF1ZXN0ZWQiLCJfcmVmMTAiLCJpc0Jpb21ldHJ5UHJlZmVyZW5jZXNSZXF1ZXN0ZWQiLCJGZXRjaGVyU2xpY2VCaW9tZXRyeSIsInNhdmVEZXZpY2UiLCJmdWxmaWxsZWQiLCJmZXRjaGluZyIsImVycm9yIiwid2FybmluZyIsImFjdGlvbiIsImlzUGVuZGluZyIsIk5BTUVfU0xJQ0VfQklPTUVUUlkiLCJpc1JlamVjdGVkIiwiX3JlZjExIiwiaXNWYWxpZGF0ZUVycm9yQ29kZSIsIkJJT01FVFJZX0VSUk9SUyIsImNvZGUiLCJTZWxlY3RvclNsaWNlQmlvbWV0cnkiLCJzdG9yZSIsImF2YWlsYWJpbGl0eSIsIkNyZWF0ZVNlbGVjdG9yIiwidXNlcklzTm90RW5yb2xsZWQiLCJpc0hhcmR3YXJlVW5hdmFpbGFibGUiLCJpc0Jpb21ldHJ5QXZhaWxhYmxlIiwiaXNCaW9tZXRyeUZhY2UiLCJkZXZpY2UiLCJsb2Nrb3V0UGVybWFuZW50IiwiS0VZX1NFQ1JFVCIsIktFWV9MRUdBQ1lfU0VDUkVUIiwiVU5LTk9XTiIsIkF2YWlsYWJpbGl0eVN0YXR1cyIsInVzZUV2ZW50IiwiZXZlbnQiLCJoYW5kbGUiLCJpbnN0YWxsT25TdGFydHVwIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiX1JlYWN0JHVzZVN0YXRlIiwiUmVhY3QiLCJ1c2VTdGF0ZSIsIl9SZWFjdCR1c2VTdGF0ZTIiLCJfc2xpY2VkVG9BcnJheSIsImluc3RhbGxlZCIsInNldEluc3RhbGxlZCIsImluc3RhbGwiLCJ1c2VDYWxsYmFjayIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uY2UiLCJyZW1vdmUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwidXNlRWZmZWN0IiwidXNlQmlvbWV0cnlBdmFpbGFiaWxpdHkiLCJvbkJpb21ldHJpY0NhbGwiLCJ1c2VTZWxlY3RvciIsIl9SZWFjdCR1c2VTdGF0ZTMiLCJOT1RfQ0FMTEVEIiwiX1JlYWN0JHVzZVN0YXRlNCIsImJpb21ldHJ5Q2FsbGVkIiwic2V0QmlvbWV0cnlDYWxsZWQiLCJfdXNlRXZlbnQiLCJFVkVOVCIsIkNBTExFRCIsIl9hc3luY1RvR2VuZXJhdG9yIiwiX3JlZ2VuZXJhdG9yUnVudGltZSIsIm1hcmsiLCJfY2FsbGVlIiwicmVzdWx0IiwiaXNBdmFpbGFibGUiLCJDT0RFIiwiYmlvbWV0cnlEYXRhIiwid3JhcCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJCaW9tZXRyeUF2YWlsYWJsZSIsInNlbnQiLCJNb2JpbGVJbmZvIiwiTk9fSEFSRFdBUkUiLCJOT19BVkFJTEFCTEUiLCJGQUNFIiwiaXNFcnJvck1vYmlsZUluZm8iLCJTdG9yZSIsImRpc3BhdGNoIiwic3RvcCIsIktJTkRfQklPTUVUUlkiLCJSRUdJU1RFUiIsIkxPR0lOIiwiU1RBVEVfQklPTUVUUlkiLCJpc0Jpb21ldHJ5TG9hZGluZyIsImJpb21ldHJ5UmVzdWx0IiwiYmlvbWV0cnlFcnJvciIsIkVSUk9SX0JJT01FVFJZIiwiQklPTUVUUllfVU5JREVOVElGSUVEIiwiQklPTUVUUllfRkFJTEVEIiwiQklPTUVUUllfS0lORCIsIkFVVEhfTk9fVE9LRU4iLCJBVVRIX05PX1NFU1NJT04iLCJBVVRIX1VOS05PV04iLCJTRVNTSU9OX0lOVkFMSUQiLCJSRUdJU1RFUl9OT19UT0tFTiIsIlJFR0lTVEVSX05PX1NFQ1JFVCIsIkJJT01FVFJZX1VOTElOS0VEIiwiQklPTUVUUllfTE9DS0VEX1RFTVBPUkFSTFkiLCJCSU9NRVRSWV9MT0NLRURfUEVSTUFORU5UTFkiLCJCSU9NRVRSWV9SRUdJU1RFUl9MT0NLRURfVEVNUE9SQVJMWSIsIkJJT01FVFJZX1JFR0lTVEVSX0xPQ0tFRF9QRVJNQU5FTlRMWSIsInVzZUJpb21ldHJ5TG9jayIsInRpbWVGcm9tTG9ja291dCIsIkRhdGUiLCJnZXRUaW1lIiwiU0VDT05EIiwiWkVSTyIsInRpbWVVbnRpbFVubG9jayIsIlRISVJUWSIsImludGVydmFsUmVmIiwidXNlUmVmIiwiY3VycmVudCIsImlkIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwidXNlQmlvbWV0cnkiLCJhcmciLCJvblVuYXZhaWxhYmxlIiwib25SZWdpc3RlciIsIm9uU2tpcCIsIm9uTG9naW4iLCJvblJlZ2lzdGVyUHJlZmVyZW5jZSIsInRleHRHZXQiLCJ0ZXh0SGVhZGVyIiwidGV4dFRpdGxlIiwidGV4dENhbmNlbCIsInRleHRFcnJvciIsImlzVlVGaW5nZXJwcmludEVuYWJsZWQiLCJ1cmwiLCJ0aW1lb3V0IiwicmVmTG9nZ2VkT3V0Rml4ZWQiLCJyZWZCaW9tZXRyeUxpbmtGaXhlZCIsIl9SZWFjdCR1c2VTdGF0ZTUiLCJfUmVhY3QkdXNlU3RhdGU2Iiwic2V0QmlvbWV0cnlMb2FkaW5nIiwiX1JlYWN0JHVzZVN0YXRlNyIsIl9SZWFjdCR1c2VTdGF0ZTgiLCJzZXRCaW9tZXRyeVJlc3VsdCIsIl9SZWFjdCR1c2VTdGF0ZTkiLCJfUmVhY3QkdXNlU3RhdGUxMCIsInNldEJpb21ldHJ5RXJyb3IiLCJ0b2tlbiIsIlNlbGVjdG9yU2xpY2VTZXNzaW9uIiwiaXNTZWN0aW9uQWN0aXZlIiwiaXNTZXNzaW9uQWN0aXZlIiwiX3VzZVNlbGVjdG9yIiwiX2NhbGxlZTIiLCJhY2Nlc3NUb2tlbk91dHB1dCIsImFjY2Vzc1Rva2VuIiwic2Vzc2lvbiIsIl9jb250ZXh0MiIsIlNlY3JldEdldCIsInZhbHVlIiwiaGFuZGxlU2Vzc2lvbiIsImV4aXN0U2Vzc2lvbldpdGhGaW5nZXJQcmludCIsIlNlY3JldERlbGV0ZSIsImFicnVwdCIsImhhbmRsZUVycm9yIiwiYmlvbWV0cnlTaG93IiwiX2NhbGxlZTMiLCJfY29udGV4dDMiLCJoYXNDb25maXJtYXRpb24iLCJfY2FsbGVlNCIsIl9jb250ZXh0NCIsIl9jYWxsZWU1IiwiaXNMb2NrZWRUZW1wb3Jhcmx5IiwiaXNMb2NrZWRQZXJtYW5lbnRseSIsImlzQXV0aGVudGljYXRlZCIsImtpbmQiLCJjYW5jZWxsZWQiLCJfY29udGV4dDUiLCJoYW5kbGVMb2NrIiwidDAiLCJoYW5kbGVSZWdpc3RlciIsImhhbmRsZUxvZ2luIiwiX2NhbGxlZTYiLCJoYXNTZWNyZXQiLCJfY29udGV4dDYiLCJTZWNyZXRTZXQiLCJrZXkiLCJ2YWwiLCJfeCIsIl94MiIsIl9iaW9tZXRyeVNob3ciLCJhcHBseSIsIl9jYWxsZWU3IiwiYXJnS2luZCIsImFyZ1BsdWdpbiIsInJlc3BvbnNlIiwiX2NvbnRleHQ3IiwiQmlvbWV0cnlBdXRoIiwiYW5kcm9pZExhYmVsSGVhZGVyIiwiYW5kcm9pZExhYmVsVGl0bGUiLCJib3RoTGFiZWxEZXNjIiwiYm90aExhYmVsQ2FuY2VsIiwiX2hhbmRsZVJlZ2lzdGVyIiwiX2NhbGxlZTgiLCJvbGRBY2Nlc3NUb2tlbiIsIm9sZFRva2VuVmFsdWUiLCJfY29udGV4dDgiLCJpc1NlY3JldEVycm9yIiwiRmV0Y2hlclNsaWNlUHJlZmVyZW5jZXNCaW9tZXRyeSIsImJpb21ldHJpY1NlY3VyaXR5RGVsZXRlIiwiZGV2aWNlTW9kZWwiLCJtb2RlbCIsIl9oYW5kbGVMb2dpbiIsIl9jYWxsZWUxMCIsInNlZWRVc2VyT3V0cHV0Iiwic2VlZFVzZXIiLCJfY29udGV4dDEwIiwiS0VZX1NFRURfVVNFUiIsIl9jYWxsZWU5IiwibG9naW5QYXJhbWV0ZXJzIiwiX2NvbnRleHQ5IiwidDEiLCJTdHJpbmciLCJnZXRWdUZyYXVkUGFyYW1zIiwidDIiLCJ0MyIsIkZldGNoZXJTbGljZVNlc3Npb24iLCJsb2dpbkZpbmdlcnByaW50IiwidW53cmFwIiwiaXNMb2dpbkVycm9yIiwiZmluaXNoIiwiX3gzIiwiX2hhbmRsZVNlc3Npb24iLCJfY2FsbGVlMTEiLCJfY29udGV4dDExIiwiU2Vzc2lvbkV4aXN0cyIsImlzQmlvbWV0cnlFcnJvciIsImRhdGEiLCJhcmdFcnJvciIsInRyYW5zbGF0ZWRFcnJvciIsInV1aWQiLCJFcnJvciIsImVycmxvZyIsIkFjdGlvblNsaWNlVG9hc3QiLCJzZXQiLCJkdXJhdGlvbiIsIkRVUkFUSU9OX0wiLCJ0ZXh0IiwiY29uY2F0IiwiaXNSZWdpc3RlciIsIl9kZWZpbmVQcm9wZXJ0eSJdLCJtYXBwaW5ncyI6Im9mQVVhQSxFQUF1QkMsWUFDaENDLEtBQ0EsU0FBQUMsR0FBOEIs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QUFnQyxFQUNoQ1QsNEJBQTRCLEVBQzVCZixrQkFBa0IsRUFDbEJHLHVCQUF1QixFQUN2Qk0saUJBQWFrRCxFQUNickQsa0JBQWtCLEVBQ2xCc0MsdUJBQXVCLEVBQ3ZCRCxtQkFBbUIsRSIsImZpbGUiOiJzdGF0aWMvanMvbWFpbn5lZDE5YzM3YS45ZTBiYmYzZi5jaHVuay5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgUGF5bG9hZEFjdGlvbiB9IGZyb20gXCJAcGtnL3JlYWN0L3NyYy9zdG9yZVwiO1xuaW1wb3J0IHsgQ3JlYXRlUmVkdWNlciB9IGZyb20gXCJAcGtnL3JlYWN0L3NyYy9zdG9yZVwiO1xuaW1wb3J0IHsgaXNQZW5kaW5nLCBpc1JlamVjdGVkIH0gZnJvbSBcIkBwa2cvcmVhY3Qvc3JjL3N0b3JlL3V0aWxzXCI7XG5pbXBvcnQgeyBGZXRjaGVyU2xpY2VCaW9tZXRyeSB9IGZyb20gXCIuL19mZXRjaGVyc1wiO1xuaW1wb3J0IHsgQWN0aW9uU2xpY2VCaW9tZXRyeSB9IGZyb20gXCIuL19hY3Rpb25zXCI7XG5pbXBvcnQgeyBJTklUX1NMSUNFX0JJT01FVFJZLCBOQU1FX1NMSUNFX0JJT01FVFJZIH0gZnJvbSBcIi4vX25hbWVzcGFjZVwiO1xuaW1wb3J0IHR5cGUgeyBOU0FQSUVycm9yIH0gZnJvbSBcIi4uLy4uL2FwaS9lcnJvclwiO1xuaW1wb3J0IHsgaXNWYWxpZGF0ZUVycm9yQ29kZSB9IGZyb20gXCIuLi8uLi9hcGkvZXJyb3JcIjtcbmltcG9ydCB7IEJJT01FVFJZX0VSUk9SUyB9IGZyb20gXCIuLi8uLi9hcGkvbG9naW4vYmlvbWV0cnlcIjtcblxuZXhwb3J0IGNvbnN0IFJlZHVjZXJTbGljZUJpb21ldHJ5ID0gQ3JlYXRlUmVkdWNlcihcbiAgICBJTklUX1NMSUNFX0JJT01FVFJZLFxuICAgICh7IGFkZENhc2UsIGFkZE1hdGNoZXIgfSkgPT4ge1xuICAgICAgICBhZGRDYXNlKEFjdGlvblNsaWNlQmlvbWV0cnkuc2V0SnVzdExvZ2dlZE91dCwgKHN0YXRlLCB7IHBheWxvYWQgfSkgPT4ge1xuICAgICAgICAgICAgc3RhdGUuaGFzSnVzdExvZ2dlZE91dCA9IHBheWxvYWQ7XG4gICAgICAgIH0pO1xuICAgICAgICBhZGRDYXNlKEFjdGlvblNsaWNlQmlvbWV0cnkuc2V0SXNGaW5nZXJCdXR0b25DbGlja2VkLCAoc3RhdGUsIHsgcGF5bG9hZCB9KSA9PiB7XG4gICAgICAgICAgICBzdGF0ZS5pc0ZpbmdlckJ1dHRvbkNsaWNrZWQgPSBwYXlsb2FkO1xuICAgICAgICB9KTtcbiAgICAgICAgYWRkQ2FzZShBY3Rpb25TbGljZUJpb21ldHJ5LnNldFBlcm1hbmVudExvY2tvdXQsIChzdGF0ZSwgeyBwYXlsb2FkIH0pID0+IHtcbiAgICAgICAgICAgIHN0YXRlLnBlcm1hbmVudExvY2tvdXQgPSBwYXlsb2FkO1xuICAgICAgICB9KTtcblxuICAgICAgICBhZGRDYXNlKEFjdGlvblNsaWNlQmlvbWV0cnkuc2V0TG9ja291dERhdGUsIChzdGF0ZSwgeyBwYXlsb2FkIH0pID0+IHtcbiAgICAgICAgICAgIHN0YXRlLmxvY2tvdXREYXRlID0gcGF5bG9hZDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYWRkQ2FzZShBY3Rpb25TbGljZUJpb21ldHJ5LnNldEF2YWlsYWJpbGl0eSwgKHN0YXRlLCB7IHBheWxvYWQgfSkgPT4gKHtcbiAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgLi4ucGF5bG9hZCxcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIGFkZENhc2UoQWN0aW9uU2xpY2VCaW9tZXRyeS5zZXRCaW9tZXRyeVNlc3Npb25Db25maWd1cmVkLCAoc3RhdGUsIHsgcGF5bG9hZCB9KSA9PiAoe1xuICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICBpc0Jpb21ldHJ5U2Vzc2lvblJlcXVlc3RlZDogSU5JVF9TTElDRV9CSU9NRVRSWS5pc0Jpb21ldHJ5U2Vzc2lvblJlcXVlc3RlZCxcbiAgICAgICAgICAgIGlzQmlvbWV0cnlTZXNzaW9uQ29uZmlndXJlZDogcGF5bG9hZCxcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIGFkZENhc2UoQWN0aW9uU2xpY2VCaW9tZXRyeS5zZXRCaW9tZXRyeURldmljZVNhdmVkLCAoc3RhdGUsIHsgcGF5bG9hZCB9KSA9PiAoe1xuICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICBpc0Jpb21ldHJ5RGV2aWNlU2F2ZWQ6IHBheWxvYWQsXG4gICAgICAgIH0pKTtcblxuICAgICAgICBhZGRDYXNlKEFjdGlvblNsaWNlQmlvbWV0cnkuc2V0QmlvbWV0cnlTZXNzaW9uUmVxdWVzdGVkLCAoc3RhdGUsIHsgcGF5bG9hZCB9KSA9PiAoe1xuICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICBpc0Jpb21ldHJ5U2Vzc2lvblJlcXVlc3RlZDogcGF5bG9hZCxcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIGFkZENhc2UoQWN0aW9uU2xpY2VCaW9tZXRyeS5zZXRCaW9tZXRyeVByZWZlcmVuY2VzUmVxdWVzdGVkLCAoc3RhdGUsIHsgcGF5bG9hZCB9KSA9PiAoe1xuICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICBpc0Jpb21ldHJ5UHJlZmVyZW5jZXNSZXF1ZXN0ZWQ6IHBheWxvYWQsXG4gICAgICAgIH0pKTtcblxuICAgICAgICBhZGRDYXNlKEZldGNoZXJTbGljZUJpb21ldHJ5LnNhdmVEZXZpY2UuZnVsZmlsbGVkLCAoc3RhdGUpID0+ICh7XG4gICAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgICAgIGlzQmlvbWV0cnlEZXZpY2VTYXZlZDogdHJ1ZSxcbiAgICAgICAgICAgIGZldGNoaW5nOiBmYWxzZSxcbiAgICAgICAgICAgIGVycm9yOiBJTklUX1NMSUNFX0JJT01FVFJZLmVycm9yLFxuICAgICAgICAgICAgd2FybmluZzogSU5JVF9TTElDRV9CSU9NRVRSWS53YXJuaW5nLFxuICAgICAgICB9KSk7XG5cbiAgICAgICAgYWRkTWF0Y2hlcihcbiAgICAgICAgICAgIChhY3Rpb24pID0+IGlzUGVuZGluZyhhY3Rpb24sIE5BTUVfU0xJQ0VfQklPTUVUUlkpLFxuICAgICAgICAgICAgKHN0YXRlKSA9PiB7XG4gICAgICAgICAgICAgICAgc3RhdGUuZmV0Y2hpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHN0YXRlLmVycm9yID0gSU5JVF9TTElDRV9CSU9NRVRSWS5lcnJvcjtcbiAgICAgICAgICAgICAgICBzdGF0ZS53YXJuaW5nID0gSU5JVF9TTElDRV9CSU9NRVRSWS53YXJuaW5nO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgKTtcblxuICAgICAgICBhZGRNYXRjaGVyPFBheWxvYWRBY3Rpb248TlNBUElFcnJvci5TY2hlbWE+PihcbiAgICAgICAgICAgIChhY3Rpb24pID0+IGlzUmVqZWN0ZWQoYWN0aW9uLCBOQU1FX1NMSUNFX0JJT01FVFJZKSxcbiAgICAgICAgICAgIChzdGF0ZSwgeyBwYXlsb2FkIH0pID0+IHtcbiAgICAgICAgICAgICAgICBzdGF0ZS5mZXRjaGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmIChpc1ZhbGlkYXRlRXJyb3JDb2RlKEJJT01FVFJZX0VSUk9SUywgcGF5bG9hZC5jb2RlKSkge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS53YXJuaW5nID0gcGF5bG9hZDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5lcnJvciA9IHBheWxvYWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgKTtcbiAgICB9LFxuKTtcbiIsImltcG9ydCB7IENyZWF0ZVNlbGVjdG9yIH0gZnJvbSBcIkBwa2cvcmVhY3Qvc3RvcmVcIjtcbmltcG9ydCB7IE5BTUVfU0xJQ0VfQklPTUVUUlkgfSBmcm9tIFwiLi9fbmFtZXNwYWNlXCI7XG5pbXBvcnQgdHlwZSB7IFN0b3JlU3RhdGUgfSBmcm9tIFwiLi4vLi4vX3JlZHVjZXJcIjtcbmltcG9ydCB0eXBlIHsgTlNTbGljZUJpb21ldHJ5IH0gZnJvbSBcIi4vX25hbWVzcGFjZVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gU2VsZWN0b3JTbGljZUJpb21ldHJ5KHN0b3JlOiBTdG9yZVN0YXRlKTogTlNTbGljZUJpb21ldHJ5LlN0YXRlIHtcbiAgICByZXR1cm4gc3RvcmVbTkFNRV9TTElDRV9CSU9NRVRSWV07XG59XG5cblNlbGVjdG9yU2xpY2VCaW9tZXRyeS5hdmFpbGFiaWxpdHkgPSBDcmVhdGVTZWxlY3RvcihTZWxlY3RvclNsaWNlQmlvbWV0cnksIChzdGF0ZSkgPT4gKHtcbiAgICB1c2VySXNOb3RFbnJvbGxlZDogc3RhdGUudXNlcklzTm90RW5yb2xsZWQsXG4gICAgaXNIYXJkd2FyZVVuYXZhaWxhYmxlOiBzdGF0ZS5pc0hhcmR3YXJlVW5hdmFpbGFibGUsXG4gICAgaXNCaW9tZXRyeUF2YWlsYWJsZTogc3RhdGUuaXNCaW9tZXRyeUF2YWlsYWJsZSxcbiAgICBpc0Jpb21ldHJ5RmFjZTogc3RhdGUuaXNCaW9tZXRyeUZhY2UsXG4gICAgZGV2aWNlOiBzdGF0ZS5kZXZpY2UsXG59KSk7XG5cblNlbGVjdG9yU2xpY2VCaW9tZXRyeS5pc0Jpb21ldHJ5U2Vzc2lvblJlcXVlc3RlZCA9IENyZWF0ZVNlbGVjdG9yKFxuICAgIFNlbGVjdG9yU2xpY2VCaW9tZXRyeSxcbiAgICAoc3RhdGUpID0+IHN0YXRlLmlzQmlvbWV0cnlTZXNzaW9uUmVxdWVzdGVkLFxuKTtcblxuU2VsZWN0b3JTbGljZUJpb21ldHJ5LmlzQmlvbWV0cnlQcmVmZXJlbmNlc1JlcXVlc3RlZCA9IENyZWF0ZVNlbGVjdG9yKFxuICAgIFNlbGVjdG9yU2xpY2VCaW9tZXRyeSxcbiAgICAoc3RhdGUpID0+IHN0YXRlLmlzQmlvbWV0cnlQcmVmZXJlbmNlc1JlcXVlc3RlZCxcbik7XG5cblNlbGVjdG9yU2xpY2VCaW9tZXRyeS5pc0Jpb21ldHJ5RGV2aWNlU2F2ZWQgPSBDcmVhdGVTZWxlY3RvcihcbiAgICBTZWxlY3RvclNsaWNlQmlvbWV0cnksXG4gICAgKHN0YXRlKSA9PiBzdGF0ZS5pc0Jpb21ldHJ5RGV2aWNlU2F2ZWQsXG4pO1xuXG5TZWxlY3RvclNsaWNlQmlvbWV0cnkuaXNCaW9tZXRyeVNlc3Npb25Db25maWd1cmVkID0gQ3JlYXRlU2VsZWN0b3IoXG4gICAgU2VsZWN0b3JTbGljZUJpb21ldHJ5LFxuICAgIChzdGF0ZSkgPT4gc3RhdGUuaXNCaW9tZXRyeVNlc3Npb25Db25maWd1cmVkLFxuKTtcblxuU2VsZWN0b3JTbGljZUJpb21ldHJ5Lmhhc0p1c3RMb2dnZWRPdXQgPSBDcmVhdGVTZWxlY3RvcihcbiAgICBTZWxlY3RvclNsaWNlQmlvbWV0cnksXG4gICAgKHN0YXRlKSA9PiBzdGF0ZS5oYXNKdXN0TG9nZ2VkT3V0LFxuKTtcblxuU2VsZWN0b3JTbGljZUJpb21ldHJ5LmlzRmluZ2VyQnV0dG9uQ2xpY2tlZCA9IENyZWF0ZVNlbGVjdG9yKFxuICAgIFNlbGVjdG9yU2xpY2VCaW9tZXRyeSxcbiAgICAoc3RhdGUpID0+IHN0YXRlLmlzRmluZ2VyQnV0dG9uQ2xpY2tlZCxcbik7XG5cblNlbGVjdG9yU2xpY2VCaW9tZXRyeS5mZXRjaGluZyA9IENyZWF0ZVNlbGVjdG9yKFNlbGVjdG9yU2xpY2VCaW9tZXRyeSwgKHN0YXRlKSA9PiBzdGF0ZS5mZXRjaGluZyk7XG5TZWxlY3RvclNsaWNlQmlvbWV0cnkuZXJyb3IgPSBDcmVhdGVTZWxlY3RvcihTZWxlY3RvclNsaWNlQmlvbWV0cnksIChzdGF0ZSkgPT4gc3RhdGUuZXJyb3IpO1xuXG5TZWxlY3RvclNsaWNlQmlvbWV0cnkud2FybmluZyA9IENyZWF0ZVNlbGVjdG9yKFNlbGVjdG9yU2xpY2VCaW9tZXRyeSwgKHN0YXRlKSA9PiBzdGF0ZS53YXJuaW5nKTtcblNlbGVjdG9yU2xpY2VCaW9tZXRyeS5sb2Nrb3V0RGF0ZSA9IENyZWF0ZVNlbGVjdG9yKFxuICAgIFNlbGVjdG9yU2xpY2VCaW9tZXRyeSxcbiAgICAoc3RhdGUpID0+IHN0YXRlLmxvY2tvdXREYXRlLFxuKTtcblNlbGVjdG9yU2xpY2VCaW9tZXRyeS5sb2Nrb3V0UGVybWFuZW50ID0gQ3JlYXRlU2VsZWN0b3IoXG4gICAgU2VsZWN0b3JTbGljZUJpb21ldHJ5LFxuICAgIChzdGF0ZSkgPT4gc3RhdGUucGVybWFuZW50TG9ja291dCxcbik7XG5cblNlbGVjdG9yU2xpY2VCaW9tZXRyeS51c2VySXNOb3RFbnJvbGxlZCA9IENyZWF0ZVNlbGVjdG9yKFxuICAgIFNlbGVjdG9yU2xpY2VCaW9tZXRyeSxcbiAgICAoc3RhdGUpID0+IHN0YXRlLnVzZXJJc05vdEVucm9sbGVkLFxuKTtcblxuU2VsZWN0b3JTbGljZUJpb21ldHJ5LmlzSGFyZHdhcmVVbmF2YWlsYWJsZSA9IENyZWF0ZVNlbGVjdG9yKFxuICAgIFNlbGVjdG9yU2xpY2VCaW9tZXRyeSxcbiAgICAoc3RhdGUpID0+IHN0YXRlLmlzSGFyZHdhcmVVbmF2YWlsYWJsZSxcbik7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHMgKi9cbmltcG9ydCBSZWFjdCBmcm9tIFwiQHBrZy9yZWFjdFwiO1xuaW1wb3J0IHtcbiAgICBTZWNyZXRTZXQsXG4gICAgU2VjcmV0R2V0LFxuICAgIGlzU2VjcmV0RXJyb3IsXG4gICAgU2VjcmV0RGVsZXRlLFxufSBmcm9tIFwiQHRlY2gvdXRpbHMtY29yZG92YS1wbHVnaW4tdHMvc2VjcmV0XCI7XG5pbXBvcnQgeyBCaW9tZXRyeUF2YWlsYWJsZSwgQmlvbWV0cnlBdXRoIH0gZnJvbSBcIkBwa2cvdXRpbHMtY29yZG92YS1wbHVnaW4tdHMvYmlvbWV0cnlcIjtcbmltcG9ydCB7IGlzRXJyb3JNb2JpbGVJbmZvLCBNb2JpbGVJbmZvIH0gZnJvbSBcIkBwa2cvdXRpbHMtY29yZG92YS1wbHVnaW4tdHMvaW5mb1wiO1xuaW1wb3J0IHR5cGUgeyBBcmdCaW9tZXRyeUF1dGgsIFJlc3BvbnNlQmlvbWV0cnlBdXRoIH0gZnJvbSBcIkBwa2cvdXRpbHMtY29yZG92YS1wbHVnaW4tdHMvYmlvbWV0cnlcIjtcbmltcG9ydCB0eXBlIHsgUmVzcG9uc2VNb2JpbGVJbmZvIH0gZnJvbSBcIkBwa2cvdXRpbHMtY29yZG92YS1wbHVnaW4tdHMvaW5mb1wiO1xuXG5pbXBvcnQgeyBEVVJBVElPTl9MLCBLRVlfU0VFRF9VU0VSLCBTRUNPTkQsIFRISVJUWSwgWkVSTyB9IGZyb20gXCIuLi8uLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IGlzTG9naW5FcnJvciB9IGZyb20gXCIuLi8uLi9hcGkvbG9naW5cIjtcbmltcG9ydCB7IGVycmxvZyB9IGZyb20gXCIuLi8uLi91dGlscy9lcnJvclwiO1xuaW1wb3J0IHsgQWN0aW9uU2xpY2VUb2FzdCB9IGZyb20gXCIuLi90b2FzdFwiO1xuaW1wb3J0IHsgRmV0Y2hlclNsaWNlU2Vzc2lvbiwgU2VsZWN0b3JTbGljZVNlc3Npb24gfSBmcm9tIFwiLi4vc2Vzc2lvblwiO1xuaW1wb3J0IHsgRmV0Y2hlclNsaWNlUHJlZmVyZW5jZXNCaW9tZXRyeSB9IGZyb20gXCIuLi9wcmVmZXJlbmNlcy9iaW9tZXRyeVwiO1xuaW1wb3J0IHsgaXNCaW9tZXRyeUVycm9yLCBTZXNzaW9uRXhpc3RzIH0gZnJvbSBcIi4uLy4uL2FwaS9sb2dpbi9iaW9tZXRyeVwiO1xuaW1wb3J0IHsgU3RvcmUsIHVzZVNlbGVjdG9yIH0gZnJvbSBcIi4uLy4uXCI7XG5pbXBvcnQgeyBBY3Rpb25TbGljZUJpb21ldHJ5IH0gZnJvbSBcIi4vX2FjdGlvbnNcIjtcbmltcG9ydCB7IFNlbGVjdG9yU2xpY2VCaW9tZXRyeSB9IGZyb20gXCIuL19zZWxlY3RvcnNcIjtcbmltcG9ydCB7IEZldGNoZXJTbGljZUJpb21ldHJ5IH0gZnJvbSBcIi4vX2ZldGNoZXJzXCI7XG5pbXBvcnQgdHlwZSB7IE5TU2xpY2VCaW9tZXRyeSB9IGZyb20gXCIuXCI7XG5pbXBvcnQgeyBnZXRWdUZyYXVkUGFyYW1zIH0gZnJvbSBcIi4uL3Z1XCI7XG5cbmV4cG9ydCBjb25zdCBLRVlfU0VDUkVUID0gXCJhY2Nlc3NUb2tlblwiIGFzIGNvbnN0O1xuZXhwb3J0IGNvbnN0IEtFWV9MRUdBQ1lfU0VDUkVUID0gXCJmaW5nZXJQcmludFRva2VuXCIgYXMgY29uc3Q7XG5cbmNvbnN0IFVOS05PV04gPSBcInVua25vd25cIiBhcyBjb25zdDtcblxudHlwZSBldmVudHMgPSBcInBhdXNlXCIgfCBcInJlc3VtZVwiIHwgXCJ2aXNpYmlsaXR5Y2hhbmdlXCI7XG5lbnVtIEF2YWlsYWJpbGl0eVN0YXR1cyB7XG4gICAgTk9UX0NBTExFRCxcbiAgICBDQUxMRUQsXG4gICAgRVZFTlQsXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VFdmVudChcbiAgICBldmVudDogZXZlbnRzLFxuICAgIGhhbmRsZTogKCkgPT4gdm9pZCxcbiAgICBpbnN0YWxsT25TdGFydHVwID0gdHJ1ZSxcbik6IFsoKSA9PiB2b2lkLCAoKSA9PiB2b2lkLCBib29sZWFuXSB7XG4gICAgLyoqXG4gICAgICogVGhpcyBlZmZlY3QgYWRkIGFuIGNvcmR2YSBwYXVzZSBvciByZXN1bWUgZXZlbnRcbiAgICAgKiBJdHMgdXNlZCBpbiBzY2VuYXJpZXMgd2hlcmUgdGhlIHVzZXIgbmF2aWdhdGVzIHRvIGFub3RoZXIgYXBwbGljYXRpb25cbiAgICAgKiBsaWtlIFwiY29uZmlndXJhdGlvblwiIGFuZCBlbnJvbGxzIGEgZmluZ2VycHJpbnRcbiAgICAgKi9cblxuICAgIGNvbnN0IFtpbnN0YWxsZWQsIHNldEluc3RhbGxlZF0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG5cbiAgICBjb25zdCBpbnN0YWxsID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICBpZiAoaW5zdGFsbGVkKSByZXR1cm47XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZSwgeyBvbmNlOiB0cnVlIH0pO1xuICAgICAgICBzZXRJbnN0YWxsZWQodHJ1ZSk7XG4gICAgfSwgW2luc3RhbGxlZCwgc2V0SW5zdGFsbGVkLCBldmVudCwgaGFuZGxlXSk7XG5cbiAgICBjb25zdCByZW1vdmUgPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgIGlmICghaW5zdGFsbGVkKSByZXR1cm47XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZSk7XG4gICAgICAgIHNldEluc3RhbGxlZChmYWxzZSk7XG4gICAgfSwgW2luc3RhbGxlZCwgc2V0SW5zdGFsbGVkLCBldmVudCwgaGFuZGxlXSk7XG5cbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIWluc3RhbGxlZCAmJiBpbnN0YWxsT25TdGFydHVwKSBpbnN0YWxsKCk7XG4gICAgICAgIHJldHVybiByZW1vdmU7XG4gICAgfSwgW2luc3RhbGwsIHJlbW92ZSwgaW5zdGFsbE9uU3RhcnR1cCwgaW5zdGFsbGVkXSk7XG5cbiAgICByZXR1cm4gW2luc3RhbGwsIHJlbW92ZSwgaW5zdGFsbGVkXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUJpb21ldHJ5QXZhaWxhYmlsaXR5KFxuICAgIGluc3RhbGxPblN0YXJ0dXAgPSB0cnVlLFxuICAgIG9uQmlvbWV0cmljQ2FsbD86IChkYXRhOiBOU1NsaWNlQmlvbWV0cnkuU3RhdGVBdmFpbGFiaWxpdHkpID0+IHVua25vd24sXG4pIHtcbiAgICBjb25zdCBzdGF0ZSA9IHVzZVNlbGVjdG9yKFNlbGVjdG9yU2xpY2VCaW9tZXRyeS5hdmFpbGFiaWxpdHkpO1xuICAgIGNvbnN0IFtiaW9tZXRyeUNhbGxlZCwgc2V0QmlvbWV0cnlDYWxsZWRdID0gUmVhY3QudXNlU3RhdGUoQXZhaWxhYmlsaXR5U3RhdHVzLk5PVF9DQUxMRUQpO1xuXG4gICAgY29uc3QgaGFuZGxlUmVzdW1lID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICBpZiAoYmlvbWV0cnlDYWxsZWQpIHNldEJpb21ldHJ5Q2FsbGVkKEF2YWlsYWJpbGl0eVN0YXR1cy5FVkVOVCk7XG4gICAgfSwgW2Jpb21ldHJ5Q2FsbGVkXSk7XG5cbiAgICBjb25zdCBbaW5zdGFsbF0gPSB1c2VFdmVudChcInJlc3VtZVwiLCBoYW5kbGVSZXN1bWUsIGluc3RhbGxPblN0YXJ0dXApO1xuXG4gICAgLy8gU2UgZW5jYXJnYSBkZSBkZXRlcm1pbmFyIHNpIGxhIGJpb21ldHLDrWEgZXN0YSBkaXNwb25pYmxlXG4gICAgLy8geSB0YW1iaWVuIGRldGVybWluYSBzaSBleGlzdGUgZWwgdGlwbyBGYWNlSUQgZGlzcG9uaWJsZSAoc2kgbm8sIGFzdW1pcmVtb3MgZ2VuZXJpYy9maW5nZXIpXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKGJpb21ldHJ5Q2FsbGVkID09PSBBdmFpbGFiaWxpdHlTdGF0dXMuQ0FMTEVEKSByZXR1cm47XG4gICAgICAgIChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBCaW9tZXRyeUF2YWlsYWJsZSgpO1xuICAgICAgICAgICAgY29uc3QgeyBpc0F2YWlsYWJsZSwgY29kZSwgQ09ERSB9ID0gcmVzdWx0O1xuICAgICAgICAgICAgY29uc3QgZGV2aWNlID0gYXdhaXQgTW9iaWxlSW5mbygpO1xuICAgICAgICAgICAgY29uc3QgYmlvbWV0cnlEYXRhOiBOU1NsaWNlQmlvbWV0cnkuU3RhdGVBdmFpbGFiaWxpdHkgPSB7XG4gICAgICAgICAgICAgICAgaXNIYXJkd2FyZVVuYXZhaWxhYmxlOiBjb2RlID09PSBDT0RFLk5PX0hBUkRXQVJFLFxuICAgICAgICAgICAgICAgIHVzZXJJc05vdEVucm9sbGVkOiBjb2RlID09PSBDT0RFLk5PX0FWQUlMQUJMRSxcbiAgICAgICAgICAgICAgICBpc0Jpb21ldHJ5QXZhaWxhYmxlOiBpc0F2YWlsYWJsZSxcbiAgICAgICAgICAgICAgICBpc0Jpb21ldHJ5RmFjZTogY29kZSA9PT0gQ09ERS5GQUNFLFxuICAgICAgICAgICAgICAgIGRldmljZTogaXNFcnJvck1vYmlsZUluZm8oZGV2aWNlKSA/IHVuZGVmaW5lZCA6IGRldmljZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBTdG9yZS5kaXNwYXRjaChBY3Rpb25TbGljZUJpb21ldHJ5LnNldEF2YWlsYWJpbGl0eShiaW9tZXRyeURhdGEpKTtcbiAgICAgICAgICAgIGlmIChiaW9tZXRyeUNhbGxlZCA9PT0gQXZhaWxhYmlsaXR5U3RhdHVzLkVWRU5UICYmIG9uQmlvbWV0cmljQ2FsbClcbiAgICAgICAgICAgICAgICBvbkJpb21ldHJpY0NhbGwoYmlvbWV0cnlEYXRhKTtcbiAgICAgICAgICAgIHNldEJpb21ldHJ5Q2FsbGVkKEF2YWlsYWJpbGl0eVN0YXR1cy5DQUxMRUQpO1xuICAgICAgICB9KSgpO1xuICAgIH0sIFtiaW9tZXRyeUNhbGxlZCwgc2V0QmlvbWV0cnlDYWxsZWQsIG9uQmlvbWV0cmljQ2FsbF0pO1xuXG4gICAgcmV0dXJuIHsgc3RhdGUsIGluc3RhbGwgfTtcbn1cblxuZXhwb3J0IGNvbnN0IEtJTkRfQklPTUVUUlkgPSB7XG4gICAgUkVHSVNURVI6IFwicmVnaXN0ZXJcIixcbiAgICBMT0dJTjogXCJsb2dpblwiLFxufSBhcyBjb25zdDtcblxuZXhwb3J0IGNvbnN0IFNUQVRFX0JJT01FVFJZID0ge1xuICAgIGlzQmlvbWV0cnlMb2FkaW5nOiBmYWxzZSxcbiAgICBiaW9tZXRyeVJlc3VsdDogbnVsbCxcbiAgICBiaW9tZXRyeUVycm9yOiB1bmRlZmluZWQsXG59IGFzIGNvbnN0O1xuXG4vLyBUT0RPOiBhZ3JlZ2FyIGxsYXZlcyBpMThuXG5leHBvcnQgY29uc3QgRVJST1JfQklPTUVUUlkgPSB7XG4gICAgQklPTUVUUllfVU5JREVOVElGSUVEOiBcInNwYS5lcnJvci5iaW9tZXRyeS51bmlkZW50aWZpZWRcIixcbiAgICBCSU9NRVRSWV9GQUlMRUQ6IFwic3BhLmVycm9yLmJpb21ldHJ5LmZhaWxlZFwiLFxuICAgIEJJT01FVFJZX0tJTkQ6IFwic3BhLmVycm9yLmJpb21ldHJ5LmtpbmRcIixcbiAgICBBVVRIX05PX1RPS0VOOiBcInNwYS5lcnJvci5iaW9tZXRyeS5hdXRoTm9Ub2tlblwiLFxuICAgIEFVVEhfTk9fU0VTU0lPTjogXCJzcGEuZXJyb3IuYmlvbWV0cnkuYXV0aE5vU2Vzc2lvblwiLFxuICAgIEFVVEhfVU5LTk9XTjogXCJzcGEuZXJyb3IuYmlvbWV0cnkuYXV0aFVua25vd25cIixcbiAgICBTRVNTSU9OX0lOVkFMSUQ6IFwic3BhLmVycm9yLmJpb21ldHJ5LnNlc3Npb25JbnZhbGlkXCIsXG4gICAgUkVHSVNURVJfTk9fVE9LRU46IFwic3BhLmVycm9yLmJpb21ldHJ5LnJlZ2lzdGVyTm9Ub2tlblwiLFxuICAgIFJFR0lTVEVSX05PX1NFQ1JFVDogXCJzcGEuZXJyb3IuYmlvbWV0cnkucmVnaXN0ZXJOb1NlY3JldFwiLFxuICAgIEJJT01FVFJZX1VOTElOS0VEOiBcInNwYS5lcnJvci5iaW9tZXRyeS51bmxpbmtlZFwiLFxuICAgIEJJT01FVFJZX0xPQ0tFRF9URU1QT1JBUkxZOiBcInNwYS5lcnJvci5iaW9tZXRyeS5sb2NrZWRUZW1wb3Jhcmx5XCIsXG4gICAgQklPTUVUUllfTE9DS0VEX1BFUk1BTkVOVExZOiBcInNwYS5lcnJvci5iaW9tZXRyeS5sb2NrZWRQZXJtYW5lbnRseVwiLFxuICAgIEJJT01FVFJZX1JFR0lTVEVSX0xPQ0tFRF9URU1QT1JBUkxZOiBcInNwYS5lcnJvci5iaW9tZXRyeS5yZWdpc3RlckxvY2tlZFRlbXBvcmFybHlcIixcbiAgICBCSU9NRVRSWV9SRUdJU1RFUl9MT0NLRURfUEVSTUFORU5UTFk6IFwic3BhLmVycm9yLmJpb21ldHJ5LnJlZ2lzdGVyTG9ja2VkUGVybWFuZW50bHlcIixcbn0gYXMgY29uc3Q7XG5cbnR5cGUgQXJnVXNlQmlvbWV0cnkgPSB7XG4gICAgLyoqIEVqZWN1dGFkbyBubyBoYXkgbmVjZXNpZGFkIGRlIGVqZWN1dGFyIGVsIGZsdWpvIGJpb21ldHJpY28gKi9cbiAgICBvblNraXA/OiAoKSA9PiB1bmtub3duO1xuICAgIC8qKiBFamVjdXRhZG8gY3VhbmRvIGVsIGRpc3Bvc2l0aXZvIGJpb21ldHJpY28gbm8gZXN0YSBkaXNwb25pYmxlICovXG4gICAgb25VbmF2YWlsYWJsZT86ICgpID0+IHVua25vd247XG4gICAgLyoqIEVqZWN1dGFkbyBjdWFuZG8gZWwgZGlzcG9zaXRpdm8gZnVlIHJlZ2lzdHJhZG8gY29ycmVjdGFtZW50ZSAqL1xuICAgIG9uUmVnaXN0ZXI/OiAoKSA9PiB1bmtub3duO1xuICAgIC8qKiBFamVjdXRhZG8gY3VhbmRvIGVsIGRpc3Bvc2l0aXZvIGVzdGEgcmVnaXN0cmFkbyB5IGF1dGVudGljYWRvICovXG4gICAgb25Mb2dpbj86ICgpID0+IHVua25vd247XG4gICAgLyoqIEVqZWN1dGFkbyBjdWFuZG8gZWwgZGlzcG9zaXRpdm8gZnVlIHJlZ2lzdHJhZG8gY29ycmVjdGFtZW50ZSBwb3IgcHJlZmVyZW5jaWEgKi9cbiAgICBvblJlZ2lzdGVyUHJlZmVyZW5jZT86ICgpID0+IHVua25vd247XG4gICAgLyoqRnVuY2lvbiBxdWUgdHJhZHVjZSBsb3MgdXVpZCBhIHRleHRvICovXG4gICAgdGV4dEdldDogKGFyZzogeyB1dWlkOiBzdHJpbmc7IHJlcGxhY2U/OiBzdHJpbmcgfCBzdHJpbmdbXSB9KSA9PiBzdHJpbmc7XG4gICAgLyoqIFRleHRvIG1vc3RyYWRvIGVuIGVsIGVuY2FiZXphZG8gZGVsIGRpYWxvZ28gZGUgYmlvbWV0csOtYSAqL1xuICAgIHRleHRIZWFkZXI6IHN0cmluZztcbiAgICAvKiogVGV4dG8gbW9zdHJhZG8gZW4gZWwgdGl0dWxvIGRlbCBkaWFsb2dvIGRlIGJpb21ldHLDrWEgKi9cbiAgICB0ZXh0VGl0bGU6IHN0cmluZztcbiAgICAvKiogVGV4dG8gbW9zdHJhZG8gZW4gZWwgYm90b24gZGUgY2FuY2VsYXIgZGVsIGRpYWxvZ28gZGUgYmlvbWV0csOtYSAqL1xuICAgIHRleHRDYW5jZWw6IHN0cmluZztcbiAgICAvKiogVGV4dG8gbW9zdHJhZG8gZW4gZWwgdG9hc3QgY3VhbmRvIGV4aXN0YSB1biBlcnJvciBlbiBsYSBiaW9tZXRyw61hKi9cbiAgICB0ZXh0RXJyb3I6IHN0cmluZztcbiAgICAvKiogaXMgdnUgZW5hYmxlZCAqL1xuICAgIGlzVlVGaW5nZXJwcmludEVuYWJsZWQ6IGJvb2xlYW47XG4gICAgdXJsOiBzdHJpbmc7XG4gICAgdGltZW91dDogbnVtYmVyO1xufTtcblxudHlwZSBLaW5kQmlvbWV0cnkgPSB0eXBlb2YgS0lORF9CSU9NRVRSWVtrZXlvZiB0eXBlb2YgS0lORF9CSU9NRVRSWV07XG5cbnR5cGUgRXJyb3JCaW9tZXRyeSA9IHR5cGVvZiBFUlJPUl9CSU9NRVRSWVtrZXlvZiB0eXBlb2YgRVJST1JfQklPTUVUUlldO1xuXG50eXBlIFN0YXRlQmlvbWV0cnlSZXN1bHQgPSBudWxsIHwgKFJlc3BvbnNlQmlvbWV0cnlBdXRoICYgeyBraW5kOiBLaW5kQmlvbWV0cnkgfSk7XG5cbnR5cGUgU3RhdGVCaW9tZXRyeUVycm9yID0gRXJyb3IgfCB1bmRlZmluZWQ7XG5cbnR5cGUgU3RhdGVCaW9tZXRyeUxvYWRpbmcgPSBib29sZWFuO1xuXG4vLyBUT0RPOiBUb2RvcyBlc3RvcyB0aXBvcyBkZWJlcmlhbiB2ZW5pciBkZXNkZSBlbCBzbGljZSBjb3JyZXNwb25kaWVudGUuXG4vLyBOT1RFOiBBc2VndXJhcnNlIHF1ZSB0b2RvcyBsb3MgdGlwb3MgYXF1aSBlc3RhYmxlY2lkb3MgdGVuZ2FuIGRvY3VtZW50YWNpb24sXG4vLyAgICAgICBwYXJhIHF1ZSBhcXVpIG5vIHNlYSBuZWNlc2FyaW8gZXNjcmliaXJsYS5cbmV4cG9ydCB0eXBlIFJlc3BvbnNlVXNlQmlvbWV0cnkgPSB7XG4gICAgLyoqIERldGVybWluYSBzaSBlbCB1c3VhcmlvIGVzdGEgYXV0ZW50aWNhZG8gY29ycmVjdGFtZW50ZSAqL1xuICAgIGlzU2VjdGlvbkFjdGl2ZTogYm9vbGVhbjtcbiAgICAvKiogQ3VhbmRvIGxhIGJpb21ldHLDrWEgZnVlIGV4aXRvc2FtZW50ZSBzb2xpY2l0YWRhICovXG4gICAgaXNCaW9tZXRyeVNlc3Npb25SZXF1ZXN0ZWQ6IGJvb2xlYW47XG4gICAgLyoqIEN1YW5kbyBsYSBiaW9tZXRyw61hIGZ1ZSBleGl0b3NhbWVudGUgc29saWNpdGFkYSBwb3IgcHJlZmVyZW5jaWFzICovXG4gICAgaXNCaW9tZXRyeVByZWZlcmVuY2VzUmVxdWVzdGVkOiBib29sZWFuO1xuICAgIC8qKiBEZXRlcm1pbmEgc2kgZWwgcHJvY2VzbyBkZSBndWFyZGFkbyBkZSBkaXNwb3NpdGl2byBoYSBmaW5hbGl6YWRvICovXG4gICAgaXNCaW9tZXRyeURldmljZVNhdmVkOiBib29sZWFuO1xuICAgIC8qKiBDdWFuZG8gbGEgYmlvbWV0csOtYSBmdWUgZXhpdG9zYW1lbnRlIGNvbmZpZ3VyYWRhICovXG4gICAgaXNCaW9tZXRyeVNlc3Npb25Db25maWd1cmVkOiBib29sZWFuO1xuICAgIC8qKiBkZXRlcm1pbmEgc2kgbGEgZnVuY2lvbmFsaWRhZCBkZSBiaW9tZXRyw61hIGVzdGEgZGlzcG9uaWJsZSBlbiBlbCBkaXNwb3NpdGl2byBhY3R1YWwgKi9cbiAgICBpc0Jpb21ldHJ5QXZhaWxhYmxlOiBib29sZWFuO1xuICAgIC8qKiBEZXRlcm1pbmEgc2kgbGEgZmVhdHVyZSBkZSBGYWNlSUQgZXN0YSBkaXNwb25pYmxlIChpT1Mgb25seSkgKi9cbiAgICBpc0Jpb21ldHJ5RmFjZT86IGJvb2xlYW47XG4gICAgLyoqIEluZm9ybWFjaW9uIHNvYnJlIGVsIGRpc3Bvc2l0aXZvIGFjdHVhbCAoc29sbyBtb2JpbGUpICovXG4gICAgZGV2aWNlPzogUmVzcG9uc2VNb2JpbGVJbmZvO1xuICAgIC8qKiBDdWFuZG8gYWxndW4gcHJvY2VzbyBkZWwgbWFuZWpvIGRlIGxhIGJpb21ldHLDrWEgZXN0YSBlbiBwcm9jZXNvICovXG4gICAgaXNCaW9tZXRyeUxvYWRpbmc6IFN0YXRlQmlvbWV0cnlMb2FkaW5nO1xuICAgIC8qKiBVbmEgdmV6IHF1ZSBlbCBtb2RhbCBkZSBhdXRlbnRpY2FjaW9uIGFwYXJlemNhIGVzdGEgdmFyaWFibGUgZGV2dWVsdmUgc3UgcmVzdWx0YWRvICovXG4gICAgYmlvbWV0cnlSZXN1bHQ6IFN0YXRlQmlvbWV0cnlSZXN1bHQ7XG4gICAgLyoqIFVsdGltbyBlcnJvciBlbmNvbnRyYWRvIGVuIGVsIGZsdWpvICovXG4gICAgYmlvbWV0cnlFcnJvcjogU3RhdGVCaW9tZXRyeUVycm9yO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUJpb21ldHJ5TG9jaygpOiBib29sZWFuIHtcbiAgICBjb25zdCBsb2Nrb3V0RGF0ZSA9IHVzZVNlbGVjdG9yKFNlbGVjdG9yU2xpY2VCaW9tZXRyeS5sb2Nrb3V0RGF0ZSk7XG4gICAgY29uc3QgbG9ja291dFBlcm1hbmVudCA9IHVzZVNlbGVjdG9yKFNlbGVjdG9yU2xpY2VCaW9tZXRyeS5sb2Nrb3V0UGVybWFuZW50KTtcblxuICAgIGNvbnN0IHRpbWVGcm9tTG9ja291dCA9IGxvY2tvdXREYXRlID8gKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gbG9ja291dERhdGUpIC8gU0VDT05EIDogWkVSTztcbiAgICBjb25zdCB0aW1lVW50aWxVbmxvY2s6IG51bWJlciA9IHRpbWVGcm9tTG9ja291dCA+IFpFUk8gPyBUSElSVFkgLSB0aW1lRnJvbUxvY2tvdXQgOiBaRVJPO1xuICAgIGNvbnN0IGludGVydmFsUmVmID0gUmVhY3QudXNlUmVmPFJldHVyblR5cGU8dHlwZW9mIHNldEludGVydmFsPiB8IG51bGw+KG51bGwpO1xuXG4gICAgY29uc3QgaGFuZGxlUmVzdW1lID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICBpZiAobG9ja291dFBlcm1hbmVudCkgU3RvcmUuZGlzcGF0Y2goQWN0aW9uU2xpY2VCaW9tZXRyeS5zZXRQZXJtYW5lbnRMb2Nrb3V0KGZhbHNlKSk7XG4gICAgfSwgW2xvY2tvdXRQZXJtYW5lbnRdKTtcblxuICAgIHVzZUV2ZW50KFwicGF1c2VcIiwgaGFuZGxlUmVzdW1lKTtcblxuICAgIC8qKlxuICAgICAqIHVzZUVmZmVjdCB0aGF0IGlzIGFjdGl2YXRlZCB3aGVuIHRoZSB1c2VyIGxvY2tlZCBoaXMgYmlvbWV0cmljIHNlbnNvclxuICAgICAqIGFuZCBzaWduYWxzIHRoZSBhcHBsaWNhdGlvbiB0aGF0IGEgdGVtcG9yYWwgYmlvbWV0cmljIGxvY2sgaXMgb3Zlci5cbiAgICAgKi9cbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAodGltZVVudGlsVW5sb2NrID4gWkVSTyAmJiAhbG9ja291dFBlcm1hbmVudCAmJiBpbnRlcnZhbFJlZi5jdXJyZW50ID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBpZCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICAgICAgICBTdG9yZS5kaXNwYXRjaChBY3Rpb25TbGljZUJpb21ldHJ5LnNldExvY2tvdXREYXRlKHVuZGVmaW5lZCkpO1xuICAgICAgICAgICAgfSwgdGltZVVudGlsVW5sb2NrICogU0VDT05EKTtcbiAgICAgICAgICAgIGludGVydmFsUmVmLmN1cnJlbnQgPSBpZDtcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpZCk7XG4gICAgICAgICAgICAgICAgaW50ZXJ2YWxSZWYuY3VycmVudCA9IG51bGw7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoKSA9PiB7fTtcbiAgICB9LCBbdGltZVVudGlsVW5sb2NrLCBsb2Nrb3V0UGVybWFuZW50XSk7XG5cbiAgICByZXR1cm4gdGltZVVudGlsVW5sb2NrID4gWkVSTyB8fCBsb2Nrb3V0UGVybWFuZW50O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlQmlvbWV0cnkoYXJnOiBBcmdVc2VCaW9tZXRyeSk6IFJlc3BvbnNlVXNlQmlvbWV0cnkge1xuICAgIGNvbnN0IHtcbiAgICAgICAgb25VbmF2YWlsYWJsZSxcbiAgICAgICAgb25SZWdpc3RlcixcbiAgICAgICAgb25Ta2lwLFxuICAgICAgICBvbkxvZ2luLFxuICAgICAgICBvblJlZ2lzdGVyUHJlZmVyZW5jZSxcbiAgICAgICAgdGV4dEdldCxcbiAgICAgICAgdGV4dEhlYWRlcixcbiAgICAgICAgdGV4dFRpdGxlLFxuICAgICAgICB0ZXh0Q2FuY2VsLFxuICAgICAgICB0ZXh0RXJyb3IsXG4gICAgICAgIGlzVlVGaW5nZXJwcmludEVuYWJsZWQsXG4gICAgICAgIHVybCxcbiAgICAgICAgdGltZW91dCxcbiAgICB9ID0gYXJnO1xuXG4gICAgY29uc3QgcmVmTG9nZ2VkT3V0Rml4ZWQgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICAgIGNvbnN0IHJlZkJpb21ldHJ5TGlua0ZpeGVkID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcblxuICAgIGNvbnN0IFtpc0Jpb21ldHJ5TG9hZGluZywgc2V0QmlvbWV0cnlMb2FkaW5nXSA9IFJlYWN0LnVzZVN0YXRlPFN0YXRlQmlvbWV0cnlMb2FkaW5nPihcbiAgICAgICAgU1RBVEVfQklPTUVUUlkuaXNCaW9tZXRyeUxvYWRpbmcsXG4gICAgKTtcbiAgICBjb25zdCBbYmlvbWV0cnlSZXN1bHQsIHNldEJpb21ldHJ5UmVzdWx0XSA9IFJlYWN0LnVzZVN0YXRlPFN0YXRlQmlvbWV0cnlSZXN1bHQ+KFxuICAgICAgICBTVEFURV9CSU9NRVRSWS5iaW9tZXRyeVJlc3VsdCxcbiAgICApO1xuICAgIGNvbnN0IFtiaW9tZXRyeUVycm9yLCBzZXRCaW9tZXRyeUVycm9yXSA9IFJlYWN0LnVzZVN0YXRlPFN0YXRlQmlvbWV0cnlFcnJvcj4oXG4gICAgICAgIFNUQVRFX0JJT01FVFJZLmJpb21ldHJ5RXJyb3IsXG4gICAgKTtcbiAgICBjb25zdCB0b2tlbiA9IHVzZVNlbGVjdG9yKFNlbGVjdG9yU2xpY2VTZXNzaW9uLnRva2VuKTtcbiAgICBjb25zdCBmZXRjaGluZyA9IHVzZVNlbGVjdG9yKFNlbGVjdG9yU2xpY2VTZXNzaW9uLmZldGNoaW5nKTtcbiAgICBjb25zdCBoYXNKdXN0TG9nZ2VkT3V0ID0gdXNlU2VsZWN0b3IoU2VsZWN0b3JTbGljZUJpb21ldHJ5Lmhhc0p1c3RMb2dnZWRPdXQpO1xuICAgIGNvbnN0IGlzRmluZ2VyQnV0dG9uQ2xpY2tlZCA9IHVzZVNlbGVjdG9yKFNlbGVjdG9yU2xpY2VCaW9tZXRyeS5pc0ZpbmdlckJ1dHRvbkNsaWNrZWQpO1xuICAgIGNvbnN0IGlzQmlvbWV0cnlEZXZpY2VTYXZlZCA9IHVzZVNlbGVjdG9yKFNlbGVjdG9yU2xpY2VCaW9tZXRyeS5pc0Jpb21ldHJ5RGV2aWNlU2F2ZWQpO1xuICAgIGNvbnN0IGlzU2VjdGlvbkFjdGl2ZSA9IHVzZVNlbGVjdG9yKFNlbGVjdG9yU2xpY2VTZXNzaW9uLmlzU2Vzc2lvbkFjdGl2ZSk7XG4gICAgY29uc3QgaXNCaW9tZXRyeVNlc3Npb25SZXF1ZXN0ZWQgPSB1c2VTZWxlY3RvcihcbiAgICAgICAgU2VsZWN0b3JTbGljZUJpb21ldHJ5LmlzQmlvbWV0cnlTZXNzaW9uUmVxdWVzdGVkLFxuICAgICk7XG4gICAgY29uc3QgaXNCaW9tZXRyeVByZWZlcmVuY2VzUmVxdWVzdGVkID0gdXNlU2VsZWN0b3IoXG4gICAgICAgIFNlbGVjdG9yU2xpY2VCaW9tZXRyeS5pc0Jpb21ldHJ5UHJlZmVyZW5jZXNSZXF1ZXN0ZWQsXG4gICAgKTtcbiAgICBjb25zdCB7IGlzQmlvbWV0cnlBdmFpbGFibGUsIGlzQmlvbWV0cnlGYWNlLCBkZXZpY2UgfSA9IHVzZVNlbGVjdG9yKFxuICAgICAgICBTZWxlY3RvclNsaWNlQmlvbWV0cnkuYXZhaWxhYmlsaXR5LFxuICAgICk7XG4gICAgY29uc3QgaXNCaW9tZXRyeVNlc3Npb25Db25maWd1cmVkID0gdXNlU2VsZWN0b3IoXG4gICAgICAgIFNlbGVjdG9yU2xpY2VCaW9tZXRyeS5pc0Jpb21ldHJ5U2Vzc2lvbkNvbmZpZ3VyZWQsXG4gICAgKTtcbiAgICBjb25zdCB1c2VySXNOb3RFbnJvbGxlZCA9IHVzZVNlbGVjdG9yKFNlbGVjdG9yU2xpY2VCaW9tZXRyeS51c2VySXNOb3RFbnJvbGxlZCk7XG5cbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICAvLyBzaSBhY2FiYW1vcyBkZSBjYW1iaWFyIGVsIHZhbG9yIGRlIHNldEp1c3RMb2dnZWRPdXQsIGV2aXRlbW9zIGVsIGNpY2xhZG8uXG4gICAgICAgIGlmIChyZWZMb2dnZWRPdXRGaXhlZC5jdXJyZW50KSB7XG4gICAgICAgICAgICByZWZMb2dnZWRPdXRGaXhlZC5jdXJyZW50ID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlZkJpb21ldHJ5TGlua0ZpeGVkLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIHJlZkJpb21ldHJ5TGlua0ZpeGVkLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNCaW9tZXRyeVNlc3Npb25Db25maWd1cmVkICYmICFpc1NlY3Rpb25BY3RpdmUgJiYgaXNGaW5nZXJCdXR0b25DbGlja2VkKSB7XG4gICAgICAgICAgICAvL1RPRE86IEVzdGUgY29uZGljaW9uYWwgeWEgbm8gZXMgbmVjZXNhcmlvLCBwZXJvIHNlIGRlYmUgcmV2aXNhclxuICAgICAgICAgICAgaWYgKGlzRmluZ2VyQnV0dG9uQ2xpY2tlZCkge1xuICAgICAgICAgICAgICAgIHNldEJpb21ldHJ5TG9hZGluZyh0cnVlKTtcbiAgICAgICAgICAgICAgICBTdG9yZS5kaXNwYXRjaChBY3Rpb25TbGljZUJpb21ldHJ5LnNldElzRmluZ2VyQnV0dG9uQ2xpY2tlZChmYWxzZSkpO1xuICAgICAgICAgICAgICAgIHJlZkJpb21ldHJ5TGlua0ZpeGVkLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAvL0RldGVjdHMgaWYgdGhlIGRldmljZSB3YXMgdW5saW5rZWQgcHJldmlvdXNseSBmcm9tIFdlYlxuICAgICAgICAgICAgICAgIGNvbnN0IGFjY2Vzc1Rva2VuT3V0cHV0ID0gYXdhaXQgU2VjcmV0R2V0KEtFWV9TRUNSRVQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFjY2Vzc1Rva2VuID0gYWNjZXNzVG9rZW5PdXRwdXQudmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKGFjY2Vzc1Rva2VuKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlc3Npb24gPSBhd2FpdCBoYW5kbGVTZXNzaW9uKGFjY2Vzc1Rva2VuKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXNlc3Npb24gfHwgIXNlc3Npb24uZXhpc3RTZXNzaW9uV2l0aEZpbmdlclByaW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBTdG9yZS5kaXNwYXRjaChBY3Rpb25TbGljZUJpb21ldHJ5LnNldEJpb21ldHJ5U2Vzc2lvbkNvbmZpZ3VyZWQoZmFsc2UpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IFNlY3JldERlbGV0ZShLRVlfU0VDUkVUKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGVFcnJvcihFUlJPUl9CSU9NRVRSWS5CSU9NRVRSWV9VTkxJTktFRCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYXdhaXQgYmlvbWV0cnlTaG93KEtJTkRfQklPTUVUUlkuTE9HSU4pO1xuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9KSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNKdXN0TG9nZ2VkT3V0KSB7XG4gICAgICAgICAgICBTdG9yZS5kaXNwYXRjaChBY3Rpb25TbGljZUJpb21ldHJ5LnNldEp1c3RMb2dnZWRPdXQoZmFsc2UpKTtcbiAgICAgICAgICAgIHJlZkxvZ2dlZE91dEZpeGVkLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfSwgW2lzQmlvbWV0cnlTZXNzaW9uQ29uZmlndXJlZCwgaXNTZWN0aW9uQWN0aXZlLCBoYXNKdXN0TG9nZ2VkT3V0LCBpc0ZpbmdlckJ1dHRvbkNsaWNrZWRdKTtcblxuICAgIC8vRGV0ZXJtaW5hIHNpIGNhcmdhcm9uIGxvcyBkYXRvcyBkZSBiaW9tZXRyw61hIGFzw60gbXVlc3RyYSBlbCBsb2FkZXJcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIWZldGNoaW5nKSBzZXRCaW9tZXRyeUxvYWRpbmcoZmFsc2UpO1xuICAgIH0sIFtmZXRjaGluZ10pO1xuXG4gICAgLy8gRGV0ZXJtaW5hIHNpIGhheSBxdWUgbW9zdHJhciBsYSBiaW9tZXRyw61hIHBhcmEgcmVnaXN0cm8sIG8gYnJpbmNhciBlbCBwcm9jZXNvIGJpb21ldHJpY28uXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIC8vIEVqZWN1dGFyIHNvbG8gY3VhbmRvIGVsIHN0ZXAzIGZ1ZSBlamVjdXRhZG8gY29ycmVjdGFtZW50ZSAoZXhpc3RlIHVuYSBzZXNpw7NuIGFjdGl2YSlcbiAgICAgICAgICAgIGlmICghaXNTZWN0aW9uQWN0aXZlKSByZXR1cm47XG4gICAgICAgICAgICAvLyBObyBoYXkgc29saWNpdHVkIGRlIHJlZ2lzdHJvIGRlIGJpb21ldHLDrWEsIG5pIHNlIGhhIGZpbmFsaXphZG8gdW5vIHByZXZpYW1lbnRlXG4gICAgICAgICAgICAvLyBmbHVqbyBwYXJhIGRpc3Bvc2l0aXZvcyBzaW4gc29wb3J0ZSBiaW9tZXRyaWNvIGltcGxpY2l0by5cbiAgICAgICAgICAgIGlmICghaXNCaW9tZXRyeVNlc3Npb25SZXF1ZXN0ZWQgJiYgIWlzQmlvbWV0cnlTZXNzaW9uQ29uZmlndXJlZCkge1xuICAgICAgICAgICAgICAgIGlmIChvblNraXApIG9uU2tpcCgpO1xuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBTdG9yZS5kaXNwYXRjaChBY3Rpb25TbGljZUJpb21ldHJ5LnNldEJpb21ldHJ5U2Vzc2lvblJlcXVlc3RlZChmYWxzZSkpO1xuICAgICAgICAgICAgICAgICAgICBTdG9yZS5kaXNwYXRjaChBY3Rpb25TbGljZUJpb21ldHJ5LnNldEJpb21ldHJ5UHJlZmVyZW5jZXNSZXF1ZXN0ZWQoZmFsc2UpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRXhpc3RlIHVuYSBzb2xpY2l0dWQgZGUgcmVnaXN0cm8uIEluaWNpYXIgZmx1am8uXG4gICAgICAgICAgICBpZiAoaXNCaW9tZXRyeVNlc3Npb25SZXF1ZXN0ZWQpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBiaW9tZXRyeVNob3coS0lORF9CSU9NRVRSWS5SRUdJU1RFUiwgeyBoYXNDb25maXJtYXRpb246IHRydWUgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKCk7XG4gICAgfSwgW2lzQmlvbWV0cnlTZXNzaW9uQ29uZmlndXJlZCwgaXNCaW9tZXRyeVNlc3Npb25SZXF1ZXN0ZWQsIGlzU2VjdGlvbkFjdGl2ZV0pO1xuXG4gICAgLy8gSW5pY2lhIGVsIHByb2Nlc28gY3VhbmRvIHNlIGludGVudGEgcmVnaXN0cmFyIGJpb23DqXRyaWNvIHBvciBtZWRpbyBkZSBwcmVmZXJlbmNpYXMuXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIC8vIEV4aXN0ZSB1bmEgc29saWNpdHVkIGRlIHJlZ2lzdHJvLiBJbmljaWFyIGZsdWpvLlxuICAgICAgICAgICAgaWYgKHRva2VuICYmIGlzQmlvbWV0cnlQcmVmZXJlbmNlc1JlcXVlc3RlZCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IGJpb21ldHJ5U2hvdyhLSU5EX0JJT01FVFJZLlJFR0lTVEVSLCB7IGhhc0NvbmZpcm1hdGlvbjogdHJ1ZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkoKTtcbiAgICB9LCBbaXNCaW9tZXRyeVByZWZlcmVuY2VzUmVxdWVzdGVkLCB0b2tlbl0pO1xuXG4gICAgLy9SZWRpcmVjdGlvbiB0byBIb21lIHdoZW4gdGhlIHNlc3Npb24gaXMgYWN0aXZlIGFuZCBzZXNzaW9uIGNvbmZpZ3VyZWRcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoaXNTZWN0aW9uQWN0aXZlICYmIGlzQmlvbWV0cnlTZXNzaW9uQ29uZmlndXJlZCkge1xuICAgICAgICAgICAgaWYgKG9uU2tpcCkgb25Ta2lwKCk7XG4gICAgICAgIH1cbiAgICB9LCBbaXNTZWN0aW9uQWN0aXZlLCBpc0Jpb21ldHJ5U2Vzc2lvbkNvbmZpZ3VyZWRdKTtcblxuICAgIC8vIERldGVybWluYSB1biBmbHVqbyBhIHNlZ3VpciBkZSBhY3VlcmRvIGFsIHRpcG8gZGUgYXV0ZW50aWNhY2lvbiBiaW9tZXRyaWNhLlxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWJpb21ldHJ5UmVzdWx0KSByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgY29uc3QgeyBpc0xvY2tlZFRlbXBvcmFybHksIGlzTG9ja2VkUGVybWFuZW50bHksIGlzQXV0aGVudGljYXRlZCwga2luZCwgY2FuY2VsbGVkIH0gPVxuICAgICAgICAgICAgICAgIGJpb21ldHJ5UmVzdWx0O1xuICAgICAgICAgICAgLy8gbWFuZWphciBjYXNvcyBjdWFuZG8gZWwgYmlvbWV0cmljbyBubyBzZSBpbmdyZXNhIGNvcnJlY3RhbWVudGUuXG4gICAgICAgICAgICBpZiAoIWlzQXV0aGVudGljYXRlZCkge1xuICAgICAgICAgICAgICAgIGlmICghaXNCaW9tZXRyeVNlc3Npb25Db25maWd1cmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vQ2xlYW5zIHNlc3Npb24gcmVxdWllc3RlZCBhbmQgcmVkaXJlY3RzIHRvIG5vcm1hbCBsb2dpbiBzdWNjZXNzXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0Jpb21ldHJ5UHJlZmVyZW5jZXNSZXF1ZXN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFN0b3JlLmRpc3BhdGNoKEFjdGlvblNsaWNlQmlvbWV0cnkuc2V0QmlvbWV0cnlQcmVmZXJlbmNlc1JlcXVlc3RlZChmYWxzZSkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgU3RvcmUuZGlzcGF0Y2goQWN0aW9uU2xpY2VCaW9tZXRyeS5zZXRCaW9tZXRyeVNlc3Npb25SZXF1ZXN0ZWQoZmFsc2UpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvbkxvZ2luKSBvbkxvZ2luKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaGFuZGxlTG9jayhraW5kLCBpc0xvY2tlZFBlcm1hbmVudGx5LCBpc0xvY2tlZFRlbXBvcmFybHksIGNhbmNlbGxlZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2V0QmlvbWV0cnlSZXN1bHQoU1RBVEVfQklPTUVUUlkuYmlvbWV0cnlSZXN1bHQpO1xuICAgICAgICAgICAgLy8gbGEgYmlvbWV0csOtYSBmdWUgaW5ncmVzYWRhIGNvcnJlY3RhbWVudGUsIGRldGVybWluYXIgZWwgZmx1am8gZGUgYWN1ZXJkbyBhbCB0aXBvLlxuICAgICAgICAgICAgc3dpdGNoIChraW5kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBLSU5EX0JJT01FVFJZLlJFR0lTVEVSOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlUmVnaXN0ZXIoKTtcbiAgICAgICAgICAgICAgICBjYXNlIEtJTkRfQklPTUVUUlkuTE9HSU46XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGVMb2dpbigpO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGVFcnJvcihFUlJPUl9CSU9NRVRSWS5CSU9NRVRSWV9LSU5EKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkoKTtcbiAgICB9LCBbYmlvbWV0cnlSZXN1bHRdKTtcblxuICAgIC8vIFJlYWNjaW9uYSBjdWFuZG8gZWwgZGlzcG9zaXRpdm8gZXMgc2FsdmFkbyBwb3IgbWVkaW8gZGUgcHJlZmVyZW5jaWFzLCB0ZXJtaW5hbmRvIGVsIHByb2Nlc28gZGUgcmVnaXN0cm8uXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGlmICghaXNCaW9tZXRyeURldmljZVNhdmVkKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKCF0b2tlbikgcmV0dXJuIGhhbmRsZUVycm9yKEVSUk9SX0JJT01FVFJZLlJFR0lTVEVSX05PX1RPS0VOKTtcbiAgICAgICAgICAgIGNvbnN0IGhhc1NlY3JldCA9IGF3YWl0IFNlY3JldFNldCh7IGtleTogS0VZX1NFQ1JFVCwgdmFsOiB0b2tlbiB9KTtcbiAgICAgICAgICAgIFN0b3JlLmRpc3BhdGNoKEFjdGlvblNsaWNlQmlvbWV0cnkuc2V0QmlvbWV0cnlEZXZpY2VTYXZlZChmYWxzZSkpO1xuICAgICAgICAgICAgaWYgKCFoYXNTZWNyZXQpIHJldHVybiBoYW5kbGVFcnJvcihFUlJPUl9CSU9NRVRSWS5SRUdJU1RFUl9OT19TRUNSRVQpO1xuICAgICAgICAgICAgLy8gZWwgcHJvY2VzbyBkZSBndWFyZGFkbyBkZWwgc2VjcmV0byBmdWUgZXhpdG9zby5cbiAgICAgICAgICAgIFN0b3JlLmRpc3BhdGNoKEFjdGlvblNsaWNlQmlvbWV0cnkuc2V0QmlvbWV0cnlTZXNzaW9uQ29uZmlndXJlZCh0cnVlKSk7XG4gICAgICAgICAgICBpZiAoaXNCaW9tZXRyeVByZWZlcmVuY2VzUmVxdWVzdGVkKSB7XG4gICAgICAgICAgICAgICAgU3RvcmUuZGlzcGF0Y2goQWN0aW9uU2xpY2VCaW9tZXRyeS5zZXRCaW9tZXRyeVByZWZlcmVuY2VzUmVxdWVzdGVkKGZhbHNlKSk7XG4gICAgICAgICAgICAgICAgaWYgKG9uUmVnaXN0ZXJQcmVmZXJlbmNlKSBvblJlZ2lzdGVyUHJlZmVyZW5jZSgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChvblJlZ2lzdGVyKSBvblJlZ2lzdGVyKCk7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9KSgpO1xuICAgIH0sIFtpc0Jpb21ldHJ5RGV2aWNlU2F2ZWQsIHRva2VuXSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBkZXZpY2UsXG4gICAgICAgIGlzU2VjdGlvbkFjdGl2ZSxcbiAgICAgICAgaXNCaW9tZXRyeUxvYWRpbmcsXG4gICAgICAgIGlzQmlvbWV0cnlTZXNzaW9uUmVxdWVzdGVkLFxuICAgICAgICBpc0Jpb21ldHJ5UHJlZmVyZW5jZXNSZXF1ZXN0ZWQsXG4gICAgICAgIGlzQmlvbWV0cnlTZXNzaW9uQ29uZmlndXJlZCxcbiAgICAgICAgaXNCaW9tZXRyeUF2YWlsYWJsZSxcbiAgICAgICAgaXNCaW9tZXRyeUZhY2UsXG4gICAgICAgIGJpb21ldHJ5UmVzdWx0LFxuICAgICAgICBpc0Jpb21ldHJ5RGV2aWNlU2F2ZWQsXG4gICAgICAgIGJpb21ldHJ5RXJyb3IsXG4gICAgfTtcblxuICAgIC8qKiBNZXRvZG8gcXVlIGludm9jYSBlbCBkaWFsb2dvIGRlIGxlY3R1cmEgZGUgYmlvbWV0cmljbyAqL1xuICAgIGFzeW5jIGZ1bmN0aW9uIGJpb21ldHJ5U2hvdyhhcmdLaW5kOiBLaW5kQmlvbWV0cnksIGFyZ1BsdWdpbj86IFBhcnRpYWw8QXJnQmlvbWV0cnlBdXRoPikge1xuICAgICAgICBpZiAoIWlzQmlvbWV0cnlBdmFpbGFibGUpIHtcbiAgICAgICAgICAgIGlmIChvblVuYXZhaWxhYmxlKSBvblVuYXZhaWxhYmxlKCk7XG4gICAgICAgICAgICBlbHNlIGlmICghaXNCaW9tZXRyeVNlc3Npb25Db25maWd1cmVkKSB7XG4gICAgICAgICAgICAgICAgU3RvcmUuZGlzcGF0Y2goQWN0aW9uU2xpY2VCaW9tZXRyeS5zZXRCaW9tZXRyeVNlc3Npb25SZXF1ZXN0ZWQoZmFsc2UpKTtcbiAgICAgICAgICAgICAgICBTdG9yZS5kaXNwYXRjaChBY3Rpb25TbGljZUJpb21ldHJ5LnNldEJpb21ldHJ5UHJlZmVyZW5jZXNSZXF1ZXN0ZWQoZmFsc2UpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBUT0RPOiBEZXRlcm1pbmFyIGNvbW8gc2VyYSBmdW5jaW9uYWxtZW50ZSBlbCBmbHVqbyBwYXJhIHZhbGlkYXIgc2VzacOzbi5cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBCaW9tZXRyeUF1dGgoe1xuICAgICAgICAgICAgYW5kcm9pZExhYmVsSGVhZGVyOiB0ZXh0SGVhZGVyLFxuICAgICAgICAgICAgYW5kcm9pZExhYmVsVGl0bGU6IHRleHRUaXRsZSxcbiAgICAgICAgICAgIGJvdGhMYWJlbERlc2M6IFwiIFwiLFxuICAgICAgICAgICAgYm90aExhYmVsQ2FuY2VsOiB0ZXh0Q2FuY2VsLFxuICAgICAgICAgICAgLi4uKGFyZ1BsdWdpbiB8fCB7fSksXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocmVzcG9uc2UuY2FuY2VsbGVkKSBzZXRCaW9tZXRyeUxvYWRpbmcoZmFsc2UpO1xuICAgICAgICBzZXRCaW9tZXRyeVJlc3VsdCh7IC4uLnJlc3BvbnNlLCBraW5kOiBhcmdLaW5kIH0pO1xuICAgIH1cblxuICAgIC8qKiBNZXRvZG8gcXVlIHJlZ2lzdHJhIGVsIGJpb21ldHJpY28gZW4gZWwgYmFja2VuZCAqL1xuICAgIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZVJlZ2lzdGVyKCkge1xuICAgICAgICAvLyBUT0RPOiBEZXRlcm1pbmFyIGNvbW8gc2VyYSBmdW5jaW9uYWxtZW50ZSBlbCBmbHVqbyBwYXJhIHZhbGlkYXIgc2VzacOzbi5cbiAgICAgICAgLy8gY29uc3Qgc2Vzc2lvbiA9IGF3YWl0IGhhbmRsZVNlc3Npb24odG9rZW4pO1xuICAgICAgICAvLyAvLyBub3MgYXNlZ3VyYW1vcyBkZSBxdWUgbm8gZXhpc3RhIHVuYSBzZXNpw7NuIHByZXZpYSBjb24gZXN0ZSBkaXNwb3NpdGl2b1xuICAgICAgICAvLyBpZiAoIXNlc3Npb24pIHJldHVybjtcbiAgICAgICAgLy8gaWYgKHNlc3Npb24uZXhpc3RTZXNzaW9uV2l0aEZpbmdlclByaW50KSB7XG4gICAgICAgIC8vICAgICBoYW5kbGVFcnJvcihuZXcgRXJyb3IoXCJEVVBMSUNBVEVfU0VTU0lPTlwiKSk7XG4gICAgICAgIC8vICAgICByZXR1cm47XG4gICAgICAgIC8vIH1cbiAgICAgICAgLy8gc2UgZW5jYXJnYSBkZSBwb25lciBlbCBpc0Jpb21ldHJ5U2Vzc2lvbkNvbmZpZ3VyZWQgZW4gdHJ1ZSAoZWplY3V0YW5kbyBlbCB1c2VFZmZlY3QpXG4gICAgICAgIGNvbnN0IG9sZEFjY2Vzc1Rva2VuID0gYXdhaXQgU2VjcmV0R2V0KEtFWV9TRUNSRVQpO1xuICAgICAgICBpZiAodG9rZW4gJiYgIXVzZXJJc05vdEVucm9sbGVkICYmICFpc1NlY3JldEVycm9yKG9sZEFjY2Vzc1Rva2VuKSkge1xuICAgICAgICAgICAgY29uc3Qgb2xkVG9rZW5WYWx1ZSA9IG9sZEFjY2Vzc1Rva2VuLnZhbHVlO1xuICAgICAgICAgICAgaWYgKG9sZFRva2VuVmFsdWUpXG4gICAgICAgICAgICAgICAgU3RvcmUuZGlzcGF0Y2goXG4gICAgICAgICAgICAgICAgICAgIEZldGNoZXJTbGljZVByZWZlcmVuY2VzQmlvbWV0cnkuYmlvbWV0cmljU2VjdXJpdHlEZWxldGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4sXG4gICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3NUb2tlbjogb2xkVG9rZW5WYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBTdG9yZS5kaXNwYXRjaChGZXRjaGVyU2xpY2VCaW9tZXRyeS5zYXZlRGV2aWNlKHsgZGV2aWNlTW9kZWw6IGRldmljZT8ubW9kZWwgfHwgVU5LTk9XTiB9KSk7XG4gICAgfVxuXG4gICAgLyoqIE1ldG9kbyBxdWUgY3JlYSB1bmEgc2VzacOzbiB2YWxpZGEgKi9cbiAgICBhc3luYyBmdW5jdGlvbiBoYW5kbGVMb2dpbigpIHtcbiAgICAgICAgY29uc3QgYWNjZXNzVG9rZW5PdXRwdXQgPSBhd2FpdCBTZWNyZXRHZXQoS0VZX1NFQ1JFVCk7XG4gICAgICAgIGNvbnN0IGFjY2Vzc1Rva2VuID0gYWNjZXNzVG9rZW5PdXRwdXQudmFsdWU7XG4gICAgICAgIGNvbnN0IHNlZWRVc2VyT3V0cHV0ID0gYXdhaXQgU2VjcmV0R2V0KEtFWV9TRUVEX1VTRVIpO1xuICAgICAgICBjb25zdCBzZWVkVXNlciA9IHNlZWRVc2VyT3V0cHV0LnZhbHVlO1xuICAgICAgICBpZiAoaXNTZWNyZXRFcnJvcihhY2Nlc3NUb2tlbk91dHB1dCkgfHwgIWFjY2Vzc1Rva2VuKSB7XG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlRXJyb3IoRVJST1JfQklPTUVUUlkuQVVUSF9OT19UT0tFTik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBub3MgYXNlZ3VyYW1vcyBkZSBxdWUgbm8gZXhpc3RhIHVuYSBzZXNpw7NuIHByZXZpYSBjb24gZXN0ZSBkaXNwb3NpdGl2b1xuICAgICAgICBjb25zdCBzZXNzaW9uID0gYXdhaXQgaGFuZGxlU2Vzc2lvbihhY2Nlc3NUb2tlbik7XG4gICAgICAgIGlmICghc2Vzc2lvbiB8fCAhc2Vzc2lvbi5leGlzdFNlc3Npb25XaXRoRmluZ2VyUHJpbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVFcnJvcihFUlJPUl9CSU9NRVRSWS5BVVRIX05PX1NFU1NJT04pO1xuICAgICAgICB9XG4gICAgICAgIC8vIGluaWNpYWxpemFyIHNlc2nDs24gY29uIGVsIHRva2VuIHByb3BvcmNpb25hZG8uXG4gICAgICAgIChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvZ2luUGFyYW1ldGVycyA9IHtcbiAgICAgICAgICAgICAgICAgICAgYWNjZXNzVG9rZW4sXG4gICAgICAgICAgICAgICAgICAgIHNlZWRVc2VyOiBTdHJpbmcoc2VlZFVzZXIpLFxuICAgICAgICAgICAgICAgICAgICBkZXZpY2VNb2RlbDogZGV2aWNlPy5tb2RlbCxcbiAgICAgICAgICAgICAgICAgICAgLi4uKGlzVlVGaW5nZXJwcmludEVuYWJsZWQgPyBhd2FpdCBnZXRWdUZyYXVkUGFyYW1zKHsgdXJsLCB0aW1lb3V0IH0pIDoge30pLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBTdG9yZS5kaXNwYXRjaChcbiAgICAgICAgICAgICAgICAgICAgRmV0Y2hlclNsaWNlU2Vzc2lvbi5sb2dpbkZpbmdlcnByaW50KGxvZ2luUGFyYW1ldGVycyksXG4gICAgICAgICAgICAgICAgKS51bndyYXAoKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNMb2dpbkVycm9yKHJlc3BvbnNlKSkgcmV0dXJuIGhhbmRsZUVycm9yKEVSUk9SX0JJT01FVFJZLkFVVEhfVU5LTk9XTik7XG4gICAgICAgICAgICAgICAgaWYgKG9uTG9naW4pIHtcbiAgICAgICAgICAgICAgICAgICAgb25Mb2dpbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgLy9SZXNldHMgY29uZmlndXJhdGlvbiB2YXJpYWJsZXMgaW4gYmlvbWV0cnlcbiAgICAgICAgICAgICAgICBTdG9yZS5kaXNwYXRjaChBY3Rpb25TbGljZUJpb21ldHJ5LnNldEJpb21ldHJ5U2Vzc2lvblJlcXVlc3RlZChmYWxzZSkpO1xuICAgICAgICAgICAgICAgIFN0b3JlLmRpc3BhdGNoKEFjdGlvblNsaWNlQmlvbWV0cnkuc2V0QmlvbWV0cnlQcmVmZXJlbmNlc1JlcXVlc3RlZChmYWxzZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfSkoKTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBhc3luYyBmdW5jdGlvbiBoYW5kbGVTZXNzaW9uKGFjY2Vzc1Rva2VuOiBzdHJpbmcpIHtcbiAgICAgICAgLy8gRGV0ZXJtaW5hbW9zIHNpIGxhIHNlc2nDs24gYWN0dWFsIGVzIHZhbGlkYSwgcGFyYSBkZXRlcm1pbmFyIGZsdWpvcy5cbiAgICAgICAgY29uc3Qgc2Vzc2lvbiA9IGF3YWl0IFNlc3Npb25FeGlzdHMoeyBhY2Nlc3NUb2tlbiB9KTtcbiAgICAgICAgaWYgKGlzQmlvbWV0cnlFcnJvcihzZXNzaW9uKSkge1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZUVycm9yKEVSUk9SX0JJT01FVFJZLlNFU1NJT05fSU5WQUxJRCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlc3Npb24uZGF0YTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVFcnJvcihhcmdFcnJvcjogRXJyb3JCaW9tZXRyeSkge1xuICAgICAgICBjb25zdCB0cmFuc2xhdGVkRXJyb3IgPSB0ZXh0R2V0KHsgdXVpZDogYXJnRXJyb3IgfSk7XG4gICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKHRyYW5zbGF0ZWRFcnJvcik7XG4gICAgICAgIHNldEJpb21ldHJ5TG9hZGluZyhTVEFURV9CSU9NRVRSWS5pc0Jpb21ldHJ5TG9hZGluZyk7XG4gICAgICAgIHNldEJpb21ldHJ5UmVzdWx0KFNUQVRFX0JJT01FVFJZLmJpb21ldHJ5UmVzdWx0KTtcbiAgICAgICAgc2V0QmlvbWV0cnlFcnJvcihlcnJvcik7XG4gICAgICAgIGVycmxvZyhlcnJvcik7XG4gICAgICAgIFN0b3JlLmRpc3BhdGNoKFxuICAgICAgICAgICAgQWN0aW9uU2xpY2VUb2FzdC5zZXQoW1xuICAgICAgICAgICAgICAgIHsgZHVyYXRpb246IERVUkFUSU9OX0wsIHRleHQ6IGAke3RleHRFcnJvcn06ICR7dHJhbnNsYXRlZEVycm9yfWAsIGtpbmQ6IFwiRVJST1JcIiB9LFxuICAgICAgICAgICAgXSksXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlTG9jayhcbiAgICAgICAga2luZDogS2luZEJpb21ldHJ5LFxuICAgICAgICBpc0xvY2tlZFBlcm1hbmVudGx5OiBib29sZWFuLFxuICAgICAgICBpc0xvY2tlZFRlbXBvcmFybHk6IGJvb2xlYW4sXG4gICAgICAgIGNhbmNlbGxlZDogYm9vbGVhbixcbiAgICApIHtcbiAgICAgICAgY29uc3QgaXNSZWdpc3RlciA9IGtpbmQgPT09IEtJTkRfQklPTUVUUlkuUkVHSVNURVI7XG5cbiAgICAgICAgaWYgKGlzTG9ja2VkUGVybWFuZW50bHkpIHtcbiAgICAgICAgICAgIFN0b3JlLmRpc3BhdGNoKEFjdGlvblNsaWNlQmlvbWV0cnkuc2V0UGVybWFuZW50TG9ja291dCh0cnVlKSk7XG4gICAgICAgICAgICBoYW5kbGVFcnJvcihcbiAgICAgICAgICAgICAgICBpc1JlZ2lzdGVyXG4gICAgICAgICAgICAgICAgICAgID8gRVJST1JfQklPTUVUUlkuQklPTUVUUllfUkVHSVNURVJfTE9DS0VEX1BFUk1BTkVOVExZXG4gICAgICAgICAgICAgICAgICAgIDogRVJST1JfQklPTUVUUlkuQklPTUVUUllfTE9DS0VEX1BFUk1BTkVOVExZLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0xvY2tlZFRlbXBvcmFybHkpIHtcbiAgICAgICAgICAgIFN0b3JlLmRpc3BhdGNoKEFjdGlvblNsaWNlQmlvbWV0cnkuc2V0TG9ja291dERhdGUobmV3IERhdGUoKS5nZXRUaW1lKCkpKTtcbiAgICAgICAgICAgIGhhbmRsZUVycm9yKFxuICAgICAgICAgICAgICAgIGlzUmVnaXN0ZXJcbiAgICAgICAgICAgICAgICAgICAgPyBFUlJPUl9CSU9NRVRSWS5CSU9NRVRSWV9SRUdJU1RFUl9MT0NLRURfVEVNUE9SQVJMWVxuICAgICAgICAgICAgICAgICAgICA6IEVSUk9SX0JJT01FVFJZLkJJT01FVFJZX0xPQ0tFRF9URU1QT1JBUkxZLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmICghY2FuY2VsbGVkKSB7XG4gICAgICAgICAgICBoYW5kbGVFcnJvcihFUlJPUl9CSU9NRVRSWS5CSU9NRVRSWV9VTklERU5USUZJRUQpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgTkFNRV9TTElDRV9CSU9NRVRSWSB9IGZyb20gXCIuL19uYW1lc3BhY2VcIjtcbmltcG9ydCB7IFJlZHVjZXJTbGljZUJpb21ldHJ5IH0gZnJvbSBcIi4vX3JlZHVjZXJzXCI7XG5cbmV4cG9ydCAqIGZyb20gXCIuL19uYW1lc3BhY2VcIjtcbmV4cG9ydCAqIGZyb20gXCIuL19zZWxlY3RvcnNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL19yZWR1Y2Vyc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vX2ZldGNoZXJzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9fYWN0aW9uc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vX2hvb2tzXCI7XG5cbmV4cG9ydCBjb25zdCBTbGljZUJpb21ldHJ5ID0geyBbTkFNRV9TTElDRV9CSU9NRVRSWV06IFJlZHVjZXJTbGljZUJpb21ldHJ5IH07XG4iLCJpbXBvcnQgdHlwZSB7IFJlc3BvbnNlTW9iaWxlSW5mbyB9IGZyb20gXCJAcGtnL3V0aWxzLWNvcmRvdmEtcGx1Z2luLXRzL2luZm9cIjtcbmltcG9ydCB0eXBlIHsgTlNBUElFcnJvciB9IGZyb20gXCIuLi8uLi9hcGkvZXJyb3JcIjtcblxuaW1wb3J0IHR5cGUgeyBOU0FQSUJpb21ldHJ5IH0gZnJvbSBcIi4uLy4uL2FwaS9sb2dpbi9iaW9tZXRyeVwiO1xuaW1wb3J0IHR5cGUgeyBOU0FQSVByZWZlcmVuY2VzIH0gZnJvbSBcIi4uLy4uL2FwaS9wcmVmZXJlbmNlc1wiO1xuaW1wb3J0IHR5cGUgeyBSZXNwb25zZVZ1IH0gZnJvbSBcIi4uL3Z1XCI7XG5cbmV4cG9ydCBjb25zdCBOQU1FX1NMSUNFX0JJT01FVFJZID0gXCJiaW9tZXRyeVwiO1xuXG5leHBvcnQgZGVjbGFyZSBuYW1lc3BhY2UgTlNTbGljZUJpb21ldHJ5IHtcbiAgICBleHBvcnQgdHlwZSBQcm9wQXV0aCA9IHtcbiAgICAgICAgYWNjZXNzVG9rZW46IE5TQVBJQmlvbWV0cnkuYWNjZXNzVG9rZW47XG4gICAgICAgIHNlZWRVc2VyPzogc3RyaW5nO1xuICAgICAgICBkZXZpY2VNb2RlbD86IHN0cmluZztcbiAgICB9ICYgUGFydGlhbDxSZXNwb25zZVZ1PjtcblxuICAgIGV4cG9ydCB0eXBlIFByb3BTYXZlRGV2aWNlID0ge1xuICAgICAgICBkZXZpY2VNb2RlbDogTlNBUElQcmVmZXJlbmNlcy5kZXZpY2VNb2RlbDtcbiAgICB9O1xuXG4gICAgZXhwb3J0IHR5cGUgU3RhdGVBdmFpbGFiaWxpdHkgPSB7XG4gICAgICAgIC8qKiBiYXNpYyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgbW9iaWxlIGRldmljZSAqL1xuICAgICAgICBkZXZpY2U/OiBSZXNwb25zZU1vYmlsZUluZm87XG4gICAgICAgIC8qKiBEZXRlcm1pbmEgc2kgbGEgYmlvbWV0csOtYSBlc3RhIGRpc3BvbmlibGUgKi9cbiAgICAgICAgaXNCaW9tZXRyeUF2YWlsYWJsZTogYm9vbGVhbjtcbiAgICAgICAgLyoqIERldGVybWluYSBzaSBGYWNlSUQgZXN0YSBkaXNwb25pYmxlICovXG4gICAgICAgIGlzQmlvbWV0cnlGYWNlPzogYm9vbGVhbjtcbiAgICAgICAgLyoqIHRydWUgd2hlbiBubyBoYXJkd2FyZSBpcyBhdmFpbGlhYmxlIGZvciBiaW9tZXRyeSAqL1xuICAgICAgICBpc0hhcmR3YXJlVW5hdmFpbGFibGU6IGJvb2xlYW47XG4gICAgICAgIC8qKiB0cnVlIHdoZW4gdGhlIGN1cnJlbnQgdXNlciBoYXMgbm8gYmlvbWV0cnkgZW5yb2xsZWQgKi9cbiAgICAgICAgdXNlcklzTm90RW5yb2xsZWQ6IGJvb2xlYW47XG4gICAgfTtcblxuICAgIGV4cG9ydCB0eXBlIFN0YXRlID0gU3RhdGVBdmFpbGFiaWxpdHkgJiB7XG4gICAgICAgIGZldGNoaW5nOiBib29sZWFuO1xuICAgICAgICBlcnJvcj86IE5TQVBJRXJyb3IuU2NoZW1hO1xuICAgICAgICB3YXJuaW5nPzogTlNBUElFcnJvci5TY2hlbWE7XG4gICAgICAgIC8qKiBFbCBwcm9jZXNvIGRlIHNldHVwIGRlIGJpb21ldHLDrWEgaGEgc2lkbyBzb2xpY2l0YWRvICovXG4gICAgICAgIGlzQmlvbWV0cnlTZXNzaW9uUmVxdWVzdGVkOiBib29sZWFuO1xuICAgICAgICAvKiogRWwgcHJvY2VzbyBkZSBzZXR1cCBkZSBiaW9tZXRyw61hIGhhIHNpZG8gc29saWNpdGFkbyBkZXNkZSBwcmVmZXJlbmNpYXMqL1xuICAgICAgICBpc0Jpb21ldHJ5UHJlZmVyZW5jZXNSZXF1ZXN0ZWQ6IGJvb2xlYW47XG4gICAgICAgIC8qKiBOb3RpZmljYSBjdWFuZG8gZWwgcHJvY2VzbyBkZSBzYWx2YWRvIGRlIGRpc3Bvc2l0aXZvIGZ1ZSBjb21wbGV0YWRvICovXG4gICAgICAgIGlzQmlvbWV0cnlEZXZpY2VTYXZlZDogYm9vbGVhbjtcbiAgICAgICAgLyoqIEVsIHByb2Nlc28gZGUgc2V0dXAgZGUgYmlvbWV0csOtYSBoYSBzaWRvIGNvbXBsZXRhZG8gKi9cbiAgICAgICAgaXNCaW9tZXRyeVNlc3Npb25Db25maWd1cmVkOiBib29sZWFuO1xuICAgICAgICAvKiogRGV0ZXJtaW5hIHNpIGxhIHNlc2nDs24gYWNhYmEgZGUgc2VyIGZpbmFsaXphZGEgKi9cbiAgICAgICAgaGFzSnVzdExvZ2dlZE91dDogYm9vbGVhbjtcbiAgICAgICAgLyoqIERldGVybWluYSBzaSBkYSBjbGljayBhbCBsaW5rIGRlIGxvZ2luIHBvciBiaW9lbXRyaWEgKi9cbiAgICAgICAgaXNGaW5nZXJCdXR0b25DbGlja2VkOiBib29sZWFuO1xuICAgICAgICAvKiogVU5JWCB0aW1lIGluIHdoaWNoIHRoZSB1c2VyIGxvY2tlZCBoaXMgYmlvbWV0cmljIGF1dGhlbnRpZmljYXRpb25cbiAgICAgICAgICogYWZ0ZXIgNSB1bnN1Y2Nlc2Z1bCBhdHRlbXBzICovXG4gICAgICAgIGxvY2tvdXREYXRlPzogbnVtYmVyO1xuICAgICAgICAvKiogVHJ1ZSBpZiB0aGUgdXNlciBmYWlscyB0byBhdXRoZW50aWNhdGUgdG9vIG1hbnkgdGltZXMgKi9cbiAgICAgICAgcGVybWFuZW50TG9ja291dDogYm9vbGVhbjtcbiAgICB9O1xufVxuXG5leHBvcnQgY29uc3QgSU5JVF9TTElDRV9CSU9NRVRSWTogTlNTbGljZUJpb21ldHJ5LlN0YXRlID0ge1xuICAgIGZldGNoaW5nOiBmYWxzZSxcbiAgICBlcnJvcjogdW5kZWZpbmVkLFxuICAgIHdhcm5pbmc6IHVuZGVmaW5lZCxcbiAgICBkZXZpY2U6IHVuZGVmaW5lZCxcbiAgICBpc0Jpb21ldHJ5QXZhaWxhYmxlOiBmYWxzZSxcbiAgICBpc0Jpb21ldHJ5RmFjZTogdW5kZWZpbmVkLFxuICAgIGlzQmlvbWV0cnlTZXNzaW9uQ29uZmlndXJlZDogZmFsc2UsXG4gICAgaXNCaW9tZXRyeURldmljZVNhdmVkOiBmYWxzZSxcbiAgICBpc0Jpb21ldHJ5UHJlZmVyZW5jZXNSZXF1ZXN0ZWQ6IGZhbHNlLFxuICAgIGlzQmlvbWV0cnlTZXNzaW9uUmVxdWVzdGVkOiBmYWxzZSxcbiAgICBoYXNKdXN0TG9nZ2VkT3V0OiBmYWxzZSxcbiAgICBpc0ZpbmdlckJ1dHRvbkNsaWNrZWQ6IGZhbHNlLFxuICAgIGxvY2tvdXREYXRlOiB1bmRlZmluZWQsXG4gICAgcGVybWFuZW50TG9ja291dDogZmFsc2UsXG4gICAgaXNIYXJkd2FyZVVuYXZhaWxhYmxlOiB0cnVlLFxuICAgIHVzZXJJc05vdEVucm9sbGVkOiB0cnVlLFxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=
//# sourceMappingURL=main~ed19c37a.9e0bbf3f.chunk.js.map