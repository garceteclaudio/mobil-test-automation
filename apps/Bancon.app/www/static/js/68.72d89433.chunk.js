(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[68,265,278],{246:function(e,t,n){"use strict";n.r(t),n.d(t,"NAME_NOTIFICATIONS",(function(){return k})),n.d(t,"TYPE_NOTIFICATIONS",(function(){return y})),n.d(t,"DEF_NOTIFICATIONS",(function(){return F})),n.d(t,"default",(function(){return w}));var i=n(0),a=n(5),r=n(30),c=n(2),o=n(16),s=n(11),u=n(41),l=n(36),f=n(80),b=n(9),d=n(742),O=n.n(d),p=n(10),E=O.a.NAME_INTERSECTOR,m=(O.a.TYPE_INTERSECTOR,"intersection-trigger");function T(e){var t=e.children,n=e.onIntersect,i=e.threshold,a=e.rootMargin,r=s.b.useRef([]);s.b.useEffect((function(){var e=r.current;if(e)return e.forEach((function(e){var t=e.element;return e.observer.observe(t)})),function(){e.forEach((function(e){var t=e.element;return e.observer.unobserve(t)}))}}),[]);var o=s.b.Children.map(t,(function(e){var t;if(!e||!s.b.isValidElement(e))return null;if(!e.props||!e.props[m])return e;if(!e.key||"string"!==typeof e.key)throw new Error('Elements containing prop "'.concat(m,'" must have a key also'));var o=e.key.replace(/^\.\$/,""),u=Object(c.a)(Object(c.a)({},e.props),{},(t={},Object(b.a)(t,m,void 0),Object(b.a)(t,"ref",(function(t){if(r.current&&t){var c=new IntersectionObserver((function(e){e.forEach((function(e){var t={boundingClientRect:e.boundingClientRect,intersectionRatio:e.intersectionRatio,intersectionRect:e.intersectionRect,isIntersecting:e.isIntersecting,key:o,rootBounds:e.rootBounds,target:e.target,time:e.time};n(t)}))}),{threshold:i,rootMargin:a,root:t.parentElement});r.current.push({key:o,element:t,observer:c}),e.ref&&"function"===typeof e.ref&&e.ref(t)}})),t));return s.b.cloneElement(e,u)}));return Object(p.jsx)(s.b.Fragment,{children:o})}T.displayName=E,T.defaultProps={};var j=n(6),_=n(8),N=n(643),h=n(158),A=n(33),v=n(38),x=n(50),I=n(642),R=n(497),g=n(51),M=n(62),P=n(446),C=n.n(P),S=n(462),L=n.n(S),k=C.a.NAME_NOTIFICATIONS,y=C.a.TYPE_NOTIFICATIONS,F={};function w(e){var t=Object(f.g)(),n=Object(_.b)(),b=Object(v.c)().textGet,d=Object(g.sb)(g.p),O=Object(_.c)(h.c.communicationsList),E=Object(_.c)(h.c.pageNumber),m=Object(_.c)(h.c.communicationsFetching),P=Object(_.c)(h.c.communicationSelected),C=Object(_.c)(h.c.notificationsActive),S=Object(_.c)(A.e.token),F=Object(_.c)(h.c.totalPages),w=Object(_.c)(h.c.communicationsUnreadCount),D=s.b.useState(E),Y=Object(o.a)(D,2),U=Y[0],B=Y[1],H=s.b.useState(null),V=Object(o.a)(H,2),W=V[0],z=V[1],X=s.b.useState([]),G=Object(o.a)(X,2),K=G[0],q=G[1],J=s.b.useState(!1),$=Object(o.a)(J,2),Q=$[0],Z=$[1],ee=s.b.useState(!1),te=Object(o.a)(ee,2),ne=te[0],ie=te[1],ae=w>j.Sb,re=U+j.fb<=F,ce=K.length>j.Sb,oe=Boolean(O&&O.length>j.Sb),se=P&&(null===P||void 0===P?void 0:P.communication.idCommunication),ue=Object(l.i)().isDesktop,le=s.b.useCallback((function(e){return K.map((function(t){var n=Object(c.a)({},t);return t.idCommunication!==se&&t.idCommunication!==e||(n.userRead=!0),n}))}),[K,se]),fe=s.b.useCallback((function(e,t){return e.filter((function(e){var n=null;switch(t){case M.f.read:n=e.userRead;break;case M.f.unread:n=!e.userRead}return n||e.idCommunication===se}))}),[se]),be=s.b.useCallback((function(e){var t=K.filter((function(e){return e.userRead})).length,n=e.filter((function(e){return e.userRead})).length;K.length===e.length&&t===n||q(e)}),[K]),de=s.b.useCallback((function(e){var t=le(e);t=C!==M.f.all?fe(t,C):K,be(t)}),[K,fe,C,le,be]);s.b.useEffect((function(){de()}),[P,de]),s.b.useEffect((function(){U===j.fb&&q([]),n(h.b.getNotificationsByType(Object(c.a)({accessToken:S,pageNumber:U},null!==W&&{unread:W}))),n(h.b.getNotificationsUnreadCount({accessToken:S}))}),[n,S,U,W]),s.b.useEffect((function(){oe&&(U===j.fb?q(O):q((function(e){return[].concat(Object(r.a)(e),Object(r.a)(O))})),n(h.a.cleanNotificationsList()))}),[oe,n,O,U]),s.b.useEffect((function(){m&&Z(!0)}),[m]);var Oe=[{type:M.f.all,uuid:"spa.widget.notifications.detail.all"},{type:M.f.unread,uuid:"spa.widget.notifications.detail.unread"},{type:M.f.read,uuid:"spa.widget.notifications.detail.read"}];return s.b.useEffect((function(){B(j.fb),ie(!0)}),[]),Object(p.jsx)(R.a,{hasNotifications:!1,"header-onBack":function(){B(j.fb),t(j.c)},children:ne&&Object(p.jsxs)(u.a,Object(c.a)(Object(c.a)({name:k,tag:"section",type:y},e),{},{children:[Object(p.jsxs)("header",{children:[Object(p.jsxs)("div",{className:L.a.notificationsTitle,children:[Object(p.jsx)(v.b,{tag:"h1",uuid:"spa.widget.notifications.title"}),ae?Object(p.jsx)(x.Badge,{content:String(w),size:"small"}):null]}),Object(p.jsx)("div",{className:L.a.notificationsChips,children:Oe.map((function(e){var t=e.type,n=e.uuid;return Object(p.jsx)(x.Chip,{active:t===C,"data-type":t,disabled:m,variant:"white",onClick:Ee,children:Object(p.jsx)(v.b,{tag:"span",uuid:n})},t)}))})]}),m&&!ce||!Q?Object(p.jsx)("div",{className:L.a.notificationSpinner,children:Object(p.jsx)(x.Lottie,{loop:!0,play:!0,"aria-atomic":"true","aria-live":"assertive",name:"spinner",size:"xlarge",title:b({uuid:"spa.a11y.notification.loading.page"})})}):function(){if(ce)return Object(p.jsxs)("section",{className:L.a.notificationsList,children:[Object(p.jsx)("div",{className:L.a.notificationsCard,children:Object(p.jsx)("ul",{children:K.map((function(e,t){var n=e.idCommunication,i=e.body,a=e.subject,r=e.sentDate,c=e.userRead,o=ue&&n===se,u=K.length===t+j.fb;return Object(p.jsxs)(s.b.Fragment,{children:[Object(p.jsx)("li",{children:Object(p.jsx)(N.a,{body:i,buttonOnClick:function(e){return function(e,t){return Te.apply(this,arguments)}(e,n)},buttonText:"spa.widgets.notifications.communications.hide",date:r,isSelected:o,isUnRead:!c,title:a,onClick:function(e){return function(e,t){return me.apply(this,arguments)}(e,n)}})}),re&&u&&Object(p.jsx)(T,{onIntersect:pe,children:Object(p.jsx)(x.Box,{"intersection-trigger":!0,className:L.a.infiniteScroll,children:Object(p.jsx)(x.Lottie,{loop:!0,play:!0,"aria-atomic":"true","aria-live":"assertive",name:"spinner",size:"medium",title:b({uuid:"spa.a11y.notification.loading.list"})})},"bottom-list")})]},n)}))})}),P&&Object(p.jsx)("div",{className:L.a.notificationDetail,children:Object(p.jsx)(I.a,{})})]});if(!oe)return Object(p.jsxs)("div",{className:L.a.notificationsEmpty,children:[Object(p.jsx)(x.Icon,{name:"bell",size:"xlarge",stroke:"gray-600"}),Object(p.jsx)(v.b,{uuid:"spa.widget.notifications.none"})]});return Object(p.jsx)("div",{})}()]}))});function pe(e){e.isIntersecting&&B(E+j.fb)}function Ee(e){if(!m){var t=e.currentTarget.dataset.type;switch(B(j.fb),t){case M.f.all:if(C===M.f.all)return;z(null),n(h.a.setNotificationsActive(M.f.all));break;case M.f.read:if(C===M.f.read)return;z(!1),n(h.a.setNotificationsActive(M.f.read));break;case M.f.unread:if(C===M.f.unread)return;z(!0),n(h.a.setNotificationsActive(M.f.unread))}n(h.a.cleanNotificationSelected())}}function me(){return(me=Object(a.a)(Object(i.a)().mark((function e(a,r){return Object(i.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(a.stopPropagation(),!W){e.next=4;break}return e.next=4,n(h.b.markAsReadCommunication({accessToken:S,idCommunication:r}));case 4:return e.next=6,n(h.b.readCommunication({accessToken:S,idCommunication:r}));case 6:if(n(h.b.getNotificationsUnreadCount({accessToken:S})),!ue){e.next=9;break}return e.abrupt("return");case 9:B(j.fb),t(d,{replace:!0});case 11:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Te(){return(Te=Object(a.a)(Object(i.a)().mark((function e(t,a){return Object(i.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t.stopPropagation(),S){e.next=3;break}return e.abrupt("return");case 3:return e.next=5,n(h.b.markAsReadCommunication({accessToken:S,idCommunication:a}));case 5:return e.next=7,n(h.b.getNotificationsUnreadCount({accessToken:S}));case 7:de(a);case 8:case"end":return e.stop()}}),e)})))).apply(this,arguments)}}},446:function(e,t,n){e.exports={NAME_NOTIFICATIONS:"Notifications",TYPE_NOTIFICATIONS:"Section"}},462:function(e,t,n){e.exports={NAME_NOTIFICATIONS:"Notifications",TYPE_NOTIFICATIONS:"Section",NAME_BASEINTERNAL_CONTAINER:"BaseInternalContainer",TYPE_BASEINTERNAL_CONTAINER:"Container",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_XS:"xs",NAME_SM:"sm",NAME_MD:"md",NAME_LG:"lg",notificationsTitle:"_rules_notificationsTitle__K7afD",notificationsChips:"_rules_notificationsChips__3qgkY",notificationSpinner:"_rules_notificationSpinner__1Fk_r",notificationsEmpty:"_rules_notificationsEmpty__1cUgN",notificationsList:"_rules_notificationsList__1LaGn",notificationsCard:"_rules_notificationsCard__26gWN",infiniteScroll:"_rules_infiniteScroll__281ul",notificationDetail:"_rules_notificationDetail__WhVTj"}},499:function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var i=n(0),a=n(5);function r(e){var t=e.filename,n=e.path,i=e.flags;return new Promise((function(e,a){var r;function c(e){a(e)}(r=window.cordova.file[n],new Promise((function(e,t){window.resolveLocalFileSystemURL(r,(function(t){e(t)}),(function(e){t(e)}))}))).then((function(n){var a=n;a.getFile(t,i,(function(t){var n=new FileReader;t.createWriter((function(i){e({fileEntry:t,dirEntry:a,fileReader:n,fileWriter:i,fileWrite:function(e){return new Promise((function(t,n){i.onwriteend=function(){return t(i)},i.onerror=function(e){return n(e)},i.write(e)}))},fileRemove:function(){return new Promise((function(e,n){t.remove((function(){return e(!0)}),(function(e){return n(e)}))}))}})}),c)}),c)}))}))}var c=n(36),o=n(26),s=n(28);function u(){return l.apply(this,arguments)}function l(){return(l=Object(a.a)(Object(i.a)().mark((function e(){var t;return Object(i.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(o.c)();case 2:if(e.sent&&cordova.plugins){e.next=5;break}throw o.a.CORDOVA_UNAVAILABLE;case 5:if(t=cordova.plugins.fileOpener2){e.next=8;break}throw o.a.PLUGIN_UNAVAILABLE;case 8:return e.abrupt("return",t);case 9:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function f(e){return b.apply(this,arguments)}function b(){return b=Object(a.a)(Object(i.a)().mark((function e(t){var n,a,r,c,l;return Object(i.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.contentType,a=t.fileName,r=t.withDialog,e.next=3,Object(o.c)();case 3:if(e.sent){e.next=6;break}throw o.a.CORDOVA_UNAVAILABLE;case 6:return e.next=8,u();case 8:return c=e.sent,l=r?c.open:c.showOpenWithDialog,e.abrupt("return",new Promise((function(e,t){try{l(a,n,{success:function(){e({code:s.a.SUCCESS,value:!0})},error:function(e){function t(t){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}((function(e){t("boolean"===typeof e?new s.b(s.a.ERROR,c.open.name,s.c):new s.b(s.a.ERROR,c.open.name,e.message))}))})}catch(i){t(new s.b(s.a.ERROR_UNKNOWN,c.open.name,s.c))}})));case 11:case"end":return e.stop()}}),e)}))),b.apply(this,arguments)}function d(){var e=Object(c.i)(),t=e.isDesktop,n=e.isUnknown,o=e.platform;function s(e){var t=e.split(".").pop();return"png"===t||"jpg"===t||"gif"===t||"bmp"===t?"image/".concat(t):"pdf"===t?"application/".concat(t):"doc"===t||"docx"===t?"application/msword":"ppt"===t||"pptx"===t?"application/vnd.ms-powerpoint":"xls"===t||"xlsx"===t?"application/vnd.ms-excel":"xlsm"===t?"application/vnd.ms-excel.sheet.macroEnabled.12":"txt"===t?"text/plain":"zip"===t?"application/zip":void 0}return function(){var e=Object(a.a)(Object(i.a)().mark((function e(a,u){var l,b,d,O,p,E,m;return Object(i.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(l=o===c.b.CORDOVA_ANDROID,!(b=s(a))){e.next=19;break}if(!t&&!n){e.next=9;break}return(d=document.createElement("a")).href=window.URL.createObjectURL(u),d.download=a,d.click(),e.abrupt("return");case 9:return e.next=11,r({filename:a,path:l?"externalApplicationStorageDirectory":"dataDirectory",flags:{create:!0,exclusive:!1}});case 11:return O=e.sent,p=O.fileWrite,E=O.fileEntry,e.next=16,p(u);case 16:return m={contentType:b,fileName:E.nativeURL,withDialog:!0},e.next=19,f(m);case 19:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}()}},624:function(e,t,n){e.exports={NAME_NOTIFICATION_DETAILS:"NotificationDetails",TYPE_NOTIFICATION_DETAILS:"Section"}},625:function(e,t,n){e.exports={NAME_NOTIFICATION_DETAILS:"NotificationDetails",TYPE_NOTIFICATION_DETAILS:"Section",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_LINK:"Link",TYPE_LINK:"Element",NAME_XS:"xs",NAME_SM:"sm",NAME_MD:"md",NAME_LG:"lg",notificationSpinner:"_rules_notificationSpinner__13Rh6",notificationTitle:"_rules_notificationTitle__omaAq",notificationDate:"_rules_notificationDate__sf2zd"}},626:function(e,t,n){e.exports={NAME_DOWNLOAD_FILE:"DownloadFile",TYPE_DOWNLOAD_FILE:"Section"}},627:function(e,t,n){e.exports={NAME_DOWNLOAD_FILE:"DownloadFile",TYPE_DOWNLOAD_FILE:"Section",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",linkfile:"_rules_linkfile__3r2gH"}},642:function(e,t,n){"use strict";n.d(t,"a",(function(){return L}));var i=n(2),a=n(11),r=n(50),c=n(41),o=n(8),s=n(158),u=n(6),l=n(100),f=n(624),b=n.n(f),d=n(625),O=n.n(d),p=n(504),E=n(38),m=n(0),T=n(5),j=n(4),_=n(33),N=n(82),h=n(626),A=n.n(h),v=n(627),x=n.n(v),I=n(499),R=n(10),g=A.a.NAME_DOWNLOAD_FILE,M=A.a.TYPE_DOWNLOAD_FILE;function P(e){var t=Object(o.c)(_.e.token),n="".concat(j.d.BANCOR_FRONTEND,"/files/download"),i=e,a=i.nameFile,s=i.idFile,u=Object(I.a)();function l(){return(l=Object(T.a)(Object(m.a)().mark((function e(){var i;return Object(m.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(j.b)({method:j.c.POST,url:n,token:t,body:{idFile:s}});case 2:if(i=e.sent){e.next=5;break}return e.abrupt("return");case 5:if(a){e.next=7;break}return e.abrupt("return");case 7:u(a,i);case 8:case"end":return e.stop()}}),e)})))).apply(this,arguments)}return Object(R.jsxs)(c.a,{name:g,tag:"section",type:M,children:[" ",Object(R.jsxs)(N.a,{className:x.a.linkfile,kind:"plain",label:a,onClick:function(){return l.apply(this,arguments)},children:[Object(R.jsx)(r.Icon,{name:"clip",size:"small",stroke:"gray-600"}),Object(R.jsx)(E.b,{tag:"span",children:a})]},s)]})}var C=b.a.NAME_NOTIFICATION_DETAILS,S=b.a.TYPE_NOTIFICATION_DETAILS;function L(e){var t=Object(E.c)().textGet,n=Object(o.c)(s.c.communicationSelected),f=Object(o.c)(s.c.communicationReadFetching),b=a.b.useRef(null);a.b.useEffect((function(){b&&b.current&&b.current.focus()}),[n]);var d=null===n||void 0===n?void 0:n.communication.sentDate;return Object(R.jsx)(c.a,Object(i.a)(Object(i.a)({ref:b,name:C,tabIndex:u.Sb,tag:"section",type:S},e),{},{children:f?Object(R.jsx)("div",{className:O.a.notificationSpinner,children:Object(R.jsx)(r.Lottie,{loop:!0,play:!0,"aria-atomic":"true","aria-live":"assertive",name:"spinner",size:"xlarge",title:t({uuid:"spa.a11y.notification.loading.detail"})})}):Object(R.jsxs)(a.b.Fragment,{children:[Object(R.jsxs)("header",{children:[Object(R.jsx)(E.b,{className:O.a.notificationTitle,tag:"h2",children:null===n||void 0===n?void 0:n.communication.subject}),d&&Object(R.jsx)(p.a,{className:O.a.notificationDate,date:d,formatParams:{format:l.a.SHORT}})]}),Object(R.jsx)("section",{children:Object(R.jsx)(E.b,{children:Object(R.jsx)("span",{dangerouslySetInnerHTML:{__html:(null===n||void 0===n?void 0:n.communication.body)||u.D}})})}),Object(R.jsx)("footer",{children:((null===n||void 0===n?void 0:n.attachments)||[]).map((function(e){var t=e.idFile,n=e.fileName;return Object(R.jsx)(P,{idFile:t,nameFile:n},t)}))})]})}))}},742:function(e,t,n){e.exports={NAME_INTERSECTOR:"Intersector",TYPE_INTERSECTOR:"Element"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=68.72d89433.chunk.js.map