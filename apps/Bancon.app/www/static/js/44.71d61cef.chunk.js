/*! For license information please see 44.71d61cef.chunk.js.LICENSE.txt */
(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[44],{793:function(e,t,n){!function(e){"use strict";var t=function(e){return e instanceof HTMLElement},n=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],r=Object.assign({},e),o=[],i=[],a=function(){var e=[].concat(i);i.length=0,e.forEach((function(e){var t=e.type,n=e.data;u(t,n)}))},u=function(e,t,n){!n||document.hidden?(f[e]&&f[e](t),o.push({type:e,data:t})):i.push({type:e,data:t})},s=function(e){for(var t,n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];return c[e]?(t=c)[e].apply(t,r):null},l={getState:function(){return Object.assign({},r)},processActionQueue:function(){var e=[].concat(o);return o.length=0,e},processDispatchQueue:a,dispatch:u,query:s},c={};t.forEach((function(e){c=Object.assign({},e(r),{},c)}));var f={};return n.forEach((function(e){f=Object.assign({},e(u,s,r),{},f)})),l},r=function(e,t,n){"function"!==typeof n?Object.defineProperty(e,t,Object.assign({},n)):e[t]=n},o=function(e,t){for(var n in e)e.hasOwnProperty(n)&&t(n,e[n])},i=function(e){var t={};return o(e,(function(n){r(t,n,e[n])})),t},a=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;if(null===n)return e.getAttribute(t)||e.hasAttribute(t);e.setAttribute(t,n)},u="http://www.w3.org/2000/svg",s=["svg","path"],l=function(e){return s.includes(e)},c=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};"object"===typeof t&&(n=t,t=null);var r=l(e)?document.createElementNS(u,e):document.createElement(e);return t&&(l(e)?a(r,"class",t):r.className=t),o(n,(function(e,t){a(r,e,t)})),r},f=function(e){return function(t,n){"undefined"!==typeof n&&e.children[n]?e.insertBefore(t,e.children[n]):e.appendChild(t)}},d=function(e,t){return function(e,n){return"undefined"!==typeof n?t.splice(n,0,e):t.push(e),e}},p=function(e,t){return function(n){return t.splice(t.indexOf(n),1),n.element.parentNode&&e.removeChild(n.element),n}},E="undefined"!==typeof window&&"undefined"!==typeof window.document,_=function(){return E},T="children"in(_()?c("svg"):{})?function(e){return e.children.length}:function(e){return e.childNodes.length},I=function(e,t,n,r){var o=n[0]||e.left,i=n[1]||e.top,a=o+e.width,u=i+e.height*(r[1]||1),s={element:Object.assign({},e),inner:{left:e.left,top:e.top,right:e.right,bottom:e.bottom},outer:{left:o,top:i,right:a,bottom:u}};return t.filter((function(e){return!e.isRectIgnored()})).map((function(e){return e.rect})).forEach((function(e){v(s.inner,Object.assign({},e.inner)),v(s.outer,Object.assign({},e.outer))})),m(s.inner),s.outer.bottom+=s.element.marginBottom,s.outer.right+=s.element.marginRight,m(s.outer),s},v=function(e,t){t.top+=e.top,t.right+=e.left,t.bottom+=e.top,t.left+=e.left,t.bottom>e.bottom&&(e.bottom=t.bottom),t.right>e.right&&(e.right=t.right)},m=function(e){e.width=e.right-e.left,e.height=e.bottom-e.top},h=function(e){return"number"===typeof e},g=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.001;return Math.abs(e-t)<r&&Math.abs(n)<r},R=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.stiffness,n=void 0===t?.5:t,r=e.damping,o=void 0===r?.75:r,a=e.mass,u=void 0===a?10:a,s=null,l=null,c=0,f=!1,d=i({interpolate:function(e,t){if(!f){if(!h(s)||!h(l))return f=!0,void(c=0);g(l+=c+=-(l-s)*n/u,s,c*=o)||t?(l=s,c=0,f=!0,d.onupdate(l),d.oncomplete(l)):d.onupdate(l)}},target:{set:function(e){if(h(e)&&!h(l)&&(l=e),null===s&&(s=e,l=e),l===(s=e)||"undefined"===typeof s)return f=!0,c=0,d.onupdate(l),void d.oncomplete(l);f=!1},get:function(){return s}},resting:{get:function(){return f}},onupdate:function(e){},oncomplete:function(e){}});return d},O=function(e){return e<.5?2*e*e:(4-2*e)*e-1},y=function(){var e,t,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=n.duration,o=void 0===r?500:r,a=n.easing,u=void 0===a?O:a,s=n.delay,l=void 0===s?0:s,c=null,f=!0,d=!1,p=null,E=i({interpolate:function(n,r){f||null===p||(null===c&&(c=n),n-c<l||((e=n-c-l)>=o||r?(e=1,t=d?0:1,E.onupdate(t*p),E.oncomplete(t*p),f=!0):(t=e/o,E.onupdate((e>=0?u(d?1-t:t):0)*p))))},target:{get:function(){return d?0:p},set:function(e){if(null===p)return p=e,E.onupdate(e),void E.oncomplete(e);e<p?(p=1,d=!0):(d=!1,p=e),f=!1,c=null}},resting:{get:function(){return f}},onupdate:function(e){},oncomplete:function(e){}});return E},D={spring:R,tween:y},S=function(e,t,n){var r=e[t]&&"object"===typeof e[t][n]?e[t][n]:e[t]||e,o="string"===typeof r?r:r.type,i="object"===typeof r?Object.assign({},r):{};return D[o]?D[o](i):null},A=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];(t=Array.isArray(t)?t:[t]).forEach((function(t){e.forEach((function(e){var o=e,i=function(){return n[e]},a=function(t){return n[e]=t};"object"===typeof e&&(o=e.key,i=e.getter||i,a=e.setter||a),t[o]&&!r||(t[o]={get:i,set:a})}))}))},L=function(e){return function(t,n){e.addEventListener(t,n)}},b=function(e){return function(t,n){e.removeEventListener(t,n)}},P=function(e){return null!=e},M={opacity:1,scaleX:1,scaleY:1,translateX:0,translateY:0,rotateX:0,rotateY:0,rotateZ:0,originX:0,originY:0},N=function(e){var t=e.mixinConfig,n=e.viewProps,r=e.viewInternalAPI,o=e.viewExternalAPI,i=e.view,a=Object.assign({},n),u={};A(t,[r,o],n);var s=function(){return[n.translateX||0,n.translateY||0]},l=function(){return[n.scaleX||0,n.scaleY||0]},c=function(){return i.rect?I(i.rect,i.childViews,s(),l()):null};return r.rect={get:c},o.rect={get:c},t.forEach((function(e){n[e]="undefined"===typeof a[e]?M[e]:a[e]})),{write:function(){if(w(u,n))return C(i.element,n),Object.assign(u,Object.assign({},n)),!0},destroy:function(){}}},w=function(e,t){if(Object.keys(e).length!==Object.keys(t).length)return!0;for(var n in t)if(t[n]!==e[n])return!0;return!1},C=function(e,t){var n=t.opacity,r=t.perspective,o=t.translateX,i=t.translateY,a=t.scaleX,u=t.scaleY,s=t.rotateX,l=t.rotateY,c=t.rotateZ,f=t.originX,d=t.originY,p=t.width,E=t.height,_="",T="";(P(f)||P(d))&&(T+="transform-origin: "+(f||0)+"px "+(d||0)+"px;"),P(r)&&(_+="perspective("+r+"px) "),(P(o)||P(i))&&(_+="translate3d("+(o||0)+"px, "+(i||0)+"px, 0) "),(P(a)||P(u))&&(_+="scale3d("+(P(a)?a:1)+", "+(P(u)?u:1)+", 1) "),P(c)&&(_+="rotateZ("+c+"rad) "),P(s)&&(_+="rotateX("+s+"rad) "),P(l)&&(_+="rotateY("+l+"rad) "),_.length&&(T+="transform:"+_+";"),P(n)&&(T+="opacity:"+n+";",0===n&&(T+="visibility:hidden;"),n<1&&(T+="pointer-events:none;")),P(E)&&(T+="height:"+E+"px;"),P(p)&&(T+="width:"+p+"px;");var I=e.elementCurrentStyle||"";T.length===I.length&&T===I||(e.style.cssText=T,e.elementCurrentStyle=T)},G={styles:N,listeners:function(e){e.mixinConfig,e.viewProps,e.viewInternalAPI;var t=e.viewExternalAPI,n=(e.viewState,e.view),r=[],o=L(n.element),i=b(n.element);return t.on=function(e,t){r.push({type:e,fn:t}),o(e,t)},t.off=function(e,t){r.splice(r.findIndex((function(n){return n.type===e&&n.fn===t})),1),i(e,t)},{write:function(){return!0},destroy:function(){r.forEach((function(e){i(e.type,e.fn)}))}}},animations:function(e){var t=e.mixinConfig,n=e.viewProps,r=e.viewInternalAPI,i=e.viewExternalAPI,a=Object.assign({},n),u=[];return o(t,(function(e,t){var o=S(t);o&&(o.onupdate=function(t){n[e]=t},o.target=a[e],A([{key:e,setter:function(e){o.target!==e&&(o.target=e)},getter:function(){return n[e]}}],[r,i],n,!0),u.push(o))})),{write:function(e){var t=document.hidden,n=!0;return u.forEach((function(r){r.resting||(n=!1),r.interpolate(e,t)})),n},destroy:function(){}}},apis:function(e){var t=e.mixinConfig,n=e.viewProps,r=e.viewExternalAPI;A(t,r,n)}},U=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return t.layoutCalculated||(e.paddingTop=parseInt(n.paddingTop,10)||0,e.marginTop=parseInt(n.marginTop,10)||0,e.marginRight=parseInt(n.marginRight,10)||0,e.marginBottom=parseInt(n.marginBottom,10)||0,e.marginLeft=parseInt(n.marginLeft,10)||0,t.layoutCalculated=!0),e.left=t.offsetLeft||0,e.top=t.offsetTop||0,e.width=t.offsetWidth||0,e.height=t.offsetHeight||0,e.right=e.left+e.width,e.bottom=e.top+e.height,e.scrollTop=t.scrollTop,e.hidden=null===t.offsetParent,e},B=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.tag,n=void 0===t?"div":t,r=e.name,o=void 0===r?null:r,a=e.attributes,u=void 0===a?{}:a,s=e.read,l=void 0===s?function(){}:s,E=e.write,_=void 0===E?function(){}:E,v=e.create,m=void 0===v?function(){}:v,h=e.destroy,g=void 0===h?function(){}:h,R=e.filterFrameActionsForChild,O=void 0===R?function(e,t){return t}:R,y=e.didCreateView,D=void 0===y?function(){}:y,S=e.didWriteView,A=void 0===S?function(){}:S,L=e.ignoreRect,b=void 0!==L&&L,P=e.ignoreRectUpdate,M=void 0!==P&&P,N=e.mixins,w=void 0===N?[]:N;return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=c(n,"filepond--"+o,u),a=window.getComputedStyle(r,null),s=U(),E=null,v=!1,h=[],R=[],y={},S={},L=[_],P=[l],N=[g],C=function(){return r},B=function(){return h.concat()},F=function(){return y},q=function(e){return function(t,n){return t(e,n)}},V=function(){return E||(E=I(s,h,[0,0],[1,1]))},x=function(){E=null,h.forEach((function(e){return e._read()})),!(M&&s.width&&s.height)&&U(s,r,a);var e={root:z,props:t,rect:s};P.forEach((function(t){return t(e)}))},Y=function(e,n,r){var o=0===n.length;return L.forEach((function(i){!1===i({props:t,root:z,actions:n,timestamp:e,shouldOptimize:r})&&(o=!1)})),R.forEach((function(t){!1===t.write(e)&&(o=!1)})),h.filter((function(e){return!!e.element.parentNode})).forEach((function(t){t._write(e,O(t,n),r)||(o=!1)})),h.forEach((function(t,i){t.element.parentNode||(z.appendChild(t.element,i),t._read(),t._write(e,O(t,n),r),o=!1)})),v=o,A({props:t,root:z,actions:n,timestamp:e}),o},k=function(){R.forEach((function(e){return e.destroy()})),N.forEach((function(e){e({root:z,props:t})})),h.forEach((function(e){return e._destroy()}))},j={element:{get:C},style:{get:function(){return a}},childViews:{get:B}},H=Object.assign({},j,{rect:{get:V},ref:{get:F},is:function(e){return o===e},appendChild:f(r),createChildView:q(e),linkView:function(e){return h.push(e),e},unlinkView:function(e){h.splice(h.indexOf(e),1)},appendChildView:d(r,h),removeChildView:p(r,h),registerWriter:function(e){return L.push(e)},registerReader:function(e){return P.push(e)},registerDestroyer:function(e){return N.push(e)},invalidateLayout:function(){return r.layoutCalculated=!1},dispatch:e.dispatch,query:e.query}),W={element:{get:C},childViews:{get:B},rect:{get:V},resting:{get:function(){return v}},isRectIgnored:function(){return b},_read:x,_write:Y,_destroy:k},X=Object.assign({},j,{rect:{get:function(){return s}}});Object.keys(w).sort((function(e,t){return"styles"===e?1:"styles"===t?-1:0})).forEach((function(e){var n=G[e]({mixinConfig:w[e],viewProps:t,viewState:S,viewInternalAPI:H,viewExternalAPI:W,view:i(X)});n&&R.push(n)}));var z=i(H);m({root:z,props:t});var Q=T(r);return h.forEach((function(e,t){z.appendChild(e.element,Q+t)})),D(z),i(W)}},F=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:60,r="__framePainter";if(window[r])return window[r].readers.push(e),void window[r].writers.push(t);window[r]={readers:[e],writers:[t]};var o=window[r],i=1e3/n,a=null,u=null,s=null,l=null,c=function(){document.hidden?(s=function(){return window.setTimeout((function(){return f(performance.now())}),i)},l=function(){return window.clearTimeout(u)}):(s=function(){return window.requestAnimationFrame(f)},l=function(){return window.cancelAnimationFrame(u)})};document.addEventListener("visibilitychange",(function(){l&&l(),c(),f(performance.now())}));var f=function e(t){u=s(e),a||(a=t);var n=t-a;n<=i||(a=t-n%i,o.readers.forEach((function(e){return e()})),o.writers.forEach((function(e){return e(t)})))};return c(),f(performance.now()),{pause:function(){l(u)}}},q=function(e,t){return function(n){var r=n.root,o=n.props,i=n.actions,a=void 0===i?[]:i,u=n.timestamp,s=n.shouldOptimize;a.filter((function(t){return e[t.type]})).forEach((function(t){return e[t.type]({root:r,props:o,action:t.data,timestamp:u,shouldOptimize:s})})),t&&t({root:r,props:o,actions:a,timestamp:u,shouldOptimize:s})}},V=function(e,t){return t.parentNode.insertBefore(e,t)},x=function(e,t){return t.parentNode.insertBefore(e,t.nextSibling)},Y=function(e){return Array.isArray(e)},k=function(e){return null==e},j=function(e){return e.trim()},H=function(e){return""+e},W=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:",";return k(e)?[]:Y(e)?e:H(e).split(t).map(j).filter((function(e){return e.length}))},X=function(e){return"boolean"===typeof e},z=function(e){return X(e)?e:"true"===e},Q=function(e){return"string"===typeof e},Z=function(e){return h(e)?e:Q(e)?H(e).replace(/[a-z]+/gi,""):0},K=function(e){return parseInt(Z(e),10)},$=function(e){return parseFloat(Z(e))},J=function(e){return h(e)&&isFinite(e)&&Math.floor(e)===e},ee=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1e3;if(J(e))return e;var n=H(e).trim();return/MB$/i.test(n)?(n=n.replace(/MB$i/,"").trim(),K(n)*t*t):/KB/i.test(n)?(n=n.replace(/KB$i/,"").trim(),K(n)*t):K(n)},te=function(e){return"function"===typeof e},ne=function(e){for(var t=self,n=e.split("."),r=null;r=n.shift();)if(!(t=t[r]))return null;return t},re={process:"POST",patch:"PATCH",revert:"DELETE",fetch:"GET",restore:"GET",load:"GET"},oe=function(e){var t={};return t.url=Q(e)?e:e.url||"",t.timeout=e.timeout?parseInt(e.timeout,10):0,t.headers=e.headers?e.headers:{},o(re,(function(n){t[n]=ie(n,e[n],re[n],t.timeout,t.headers)})),t.process=e.process||Q(e)||e.url?t.process:null,t.remove=e.remove||null,delete t.headers,t},ie=function(e,t,n,r,o){if(null===t)return null;if("function"===typeof t)return t;var i={url:"GET"===n||"PATCH"===n?"?"+e+"=":"",method:n,headers:o,withCredentials:!1,timeout:r,onload:null,ondata:null,onerror:null};if(Q(t))return i.url=t,i;if(Object.assign(i,t),Q(i.headers)){var a=i.headers.split(/:(.+)/);i.headers={header:a[0],value:a[1]}}return i.withCredentials=z(i.withCredentials),i},ae=function(e){return null===e},ue=function(e){return"object"===typeof e&&null!==e},se=function(e){return ue(e)&&Q(e.url)&&ue(e.process)&&ue(e.revert)&&ue(e.restore)&&ue(e.fetch)},le=function(e){return Y(e)?"array":ae(e)?"null":J(e)?"int":/^[0-9]+ ?(?:GB|MB|KB)$/gi.test(e)?"bytes":se(e)?"api":typeof e},ce=function(e){return e.replace(/{\s*'/g,'{"').replace(/'\s*}/g,'"}').replace(/'\s*:/g,'":').replace(/:\s*'/g,':"').replace(/,\s*'/g,',"').replace(/'\s*,/g,'",')},fe={array:W,boolean:z,int:function(e){return"bytes"===le(e)?ee(e):K(e)},number:$,float:$,bytes:ee,string:function(e){return te(e)?e:H(e)},function:function(e){return ne(e)},serverapi:function(e){return oe(e)},object:function(e){try{return JSON.parse(ce(e))}catch(t){return null}}},de=function(e,t){return fe[t](e)},pe=function(e,t,n){if(e===t)return e;var r=le(e);if(r!==n){var o=de(e,n);if(r=le(o),null===o)throw'Trying to assign value with incorrect type to "'+option+'", allowed type: "'+n+'"';e=o}return e},Ee=function(e,t){var n=e;return{enumerable:!0,get:function(){return n},set:function(r){n=pe(r,e,t)}}},_e=function(e){var t={};return o(e,(function(n){var r=e[n];t[n]=Ee(r[0],r[1])})),i(t)},Te=function(e){return{items:[],listUpdateTimeout:null,itemUpdateTimeout:null,processingQueue:[],options:_e(e)}},Ie=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"-";return e.split(/(?=[A-Z])/).map((function(e){return e.toLowerCase()})).join(t)},ve=function(e,t){var n={};return o(t,(function(t){n[t]={get:function(){return e.getState().options[t]},set:function(n){e.dispatch("SET_"+Ie(t,"_").toUpperCase(),{value:n})}}})),n},me=function(e){return function(t,n,r){var i={};return o(e,(function(e){var n=Ie(e,"_").toUpperCase();i["SET_"+n]=function(o){try{r.options[e]=o.value}catch(i){}t("DID_SET_"+n,{value:r.options[e]})}})),i}},he=function(e){return function(t){var n={};return o(e,(function(e){n["GET_"+Ie(e,"_").toUpperCase()]=function(n){return t.options[e]}})),n}},ge={API:1,DROP:2,BROWSE:3,PASTE:4,NONE:5},Re=function(){return Math.random().toString(36).substring(2,11)};function Oe(e){this.wrapped=e}function ye(e){var t,n;function r(e,r){return new Promise((function(i,a){var u={key:e,arg:r,resolve:i,reject:a,next:null};n?n=n.next=u:(t=n=u,o(e,r))}))}function o(t,n){try{var r=e[t](n),a=r.value,u=a instanceof Oe;Promise.resolve(u?a.wrapped:a).then((function(e){u?o("next",e):i(r.done?"return":"normal",e)}),(function(e){o("throw",e)}))}catch(s){i("throw",s)}}function i(e,r){switch(e){case"return":t.resolve({value:r,done:!0});break;case"throw":t.reject(r);break;default:t.resolve({value:r,done:!1})}(t=t.next)?o(t.key,t.arg):n=null}this._invoke=r,"function"!==typeof e.return&&(this.return=void 0)}function De(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}function Se(e,t){if(null==e)return{};var n,r,o=De(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function Ae(e){return Le(e)||be(e)||Pe()}function Le(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}function be(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}function Pe(){throw new TypeError("Invalid attempt to spread non-iterable instance")}"function"===typeof Symbol&&Symbol.asyncIterator&&(ye.prototype[Symbol.asyncIterator]=function(){return this}),ye.prototype.next=function(e){return this._invoke("next",e)},ye.prototype.throw=function(e){return this._invoke("throw",e)},ye.prototype.return=function(e){return this._invoke("return",e)};var Me=function(e,t){return e.splice(t,1)},Ne=function(e,t){t?e():document.hidden?Promise.resolve(1).then(e):setTimeout(e,0)},we=function(){var e=[],t=function(t,n){Me(e,e.findIndex((function(e){return e.event===t&&(e.cb===n||!n)})))},n=function(t,n,r){e.filter((function(e){return e.event===t})).map((function(e){return e.cb})).forEach((function(e){return Ne((function(){return e.apply(void 0,Ae(n))}),r)}))};return{fireSync:function(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),o=1;o<t;o++)r[o-1]=arguments[o];n(e,r,!0)},fire:function(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),o=1;o<t;o++)r[o-1]=arguments[o];n(e,r,!1)},on:function(t,n){e.push({event:t,cb:n})},onOnce:function(n,r){e.push({event:n,cb:function(){t(n,r),r.apply(void 0,arguments)}})},off:t}},Ce=function(e,t,n){Object.getOwnPropertyNames(e).filter((function(e){return!n.includes(e)})).forEach((function(n){return Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))},Ge=["fire","process","revert","load","on","off","onOnce","retryLoad","extend","archive","archived","release","released","requestProcessing","freeze"],Ue=function(e){var t={};return Ce(e,t,Ge),t},Be=function(e){e.forEach((function(t,n){t.released&&Me(e,n)}))},Fe={INIT:1,IDLE:2,PROCESSING_QUEUED:9,PROCESSING:3,PROCESSING_COMPLETE:5,PROCESSING_ERROR:6,PROCESSING_REVERT_ERROR:10,LOADING:7,LOAD_ERROR:8},qe={INPUT:1,LIMBO:2,LOCAL:3},Ve=function(e){return/[^0-9]+/.exec(e)},xe=function(){return Ve(1.1.toLocaleString())[0]},Ye=function(){var e=xe(),t=1e3.toLocaleString();return t!==1e3.toString()?Ve(t)[0]:"."===e?",":"."},ke={BOOLEAN:"boolean",INT:"int",NUMBER:"number",STRING:"string",ARRAY:"array",OBJECT:"object",FUNCTION:"function",ACTION:"action",SERVER_API:"serverapi",REGEX:"regex"},je=[],He=function(e,t,n){return new Promise((function(r,o){var i=je.filter((function(t){return t.key===e})).map((function(e){return e.cb}));if(0!==i.length){var a=i.shift();i.reduce((function(e,t){return e.then((function(e){return t(e,n)}))}),a(t,n)).then((function(e){return r(e)})).catch((function(e){return o(e)}))}else r(t)}))},We=function(e,t,n){return je.filter((function(t){return t.key===e})).map((function(e){return e.cb(t,n)}))},Xe=function(e,t){return je.push({key:e,cb:t})},ze=function(e){return Object.assign(Ke,e)},Qe=function(){return Object.assign({},Ke)},Ze=function(e){o(e,(function(e,t){Ke[e]&&(Ke[e][0]=pe(t,Ke[e][0],Ke[e][1]))}))},Ke={id:[null,ke.STRING],name:["filepond",ke.STRING],disabled:[!1,ke.BOOLEAN],className:[null,ke.STRING],required:[!1,ke.BOOLEAN],captureMethod:[null,ke.STRING],allowSyncAcceptAttribute:[!0,ke.BOOLEAN],allowDrop:[!0,ke.BOOLEAN],allowBrowse:[!0,ke.BOOLEAN],allowPaste:[!0,ke.BOOLEAN],allowMultiple:[!1,ke.BOOLEAN],allowReplace:[!0,ke.BOOLEAN],allowRevert:[!0,ke.BOOLEAN],allowRemove:[!0,ke.BOOLEAN],allowProcess:[!0,ke.BOOLEAN],allowReorder:[!1,ke.BOOLEAN],allowDirectoriesOnly:[!1,ke.BOOLEAN],storeAsFile:[!1,ke.BOOLEAN],forceRevert:[!1,ke.BOOLEAN],maxFiles:[null,ke.INT],checkValidity:[!1,ke.BOOLEAN],itemInsertLocationFreedom:[!0,ke.BOOLEAN],itemInsertLocation:["before",ke.STRING],itemInsertInterval:[75,ke.INT],dropOnPage:[!1,ke.BOOLEAN],dropOnElement:[!0,ke.BOOLEAN],dropValidation:[!1,ke.BOOLEAN],ignoredFiles:[[".ds_store","thumbs.db","desktop.ini"],ke.ARRAY],instantUpload:[!0,ke.BOOLEAN],maxParallelUploads:[2,ke.INT],allowMinimumUploadDuration:[!0,ke.BOOLEAN],chunkUploads:[!1,ke.BOOLEAN],chunkForce:[!1,ke.BOOLEAN],chunkSize:[5e6,ke.INT],chunkRetryDelays:[[500,1e3,3e3],ke.ARRAY],server:[null,ke.SERVER_API],fileSizeBase:[1e3,ke.INT],labelFileSizeBytes:["bytes",ke.STRING],labelFileSizeKilobytes:["KB",ke.STRING],labelFileSizeMegabytes:["MB",ke.STRING],labelFileSizeGigabytes:["GB",ke.STRING],labelDecimalSeparator:[xe(),ke.STRING],labelThousandsSeparator:[Ye(),ke.STRING],labelIdle:['Drag & Drop your files or <span class="filepond--label-action">Browse</span>',ke.STRING],labelInvalidField:["Field contains invalid files",ke.STRING],labelFileWaitingForSize:["Waiting for size",ke.STRING],labelFileSizeNotAvailable:["Size not available",ke.STRING],labelFileCountSingular:["file in list",ke.STRING],labelFileCountPlural:["files in list",ke.STRING],labelFileLoading:["Loading",ke.STRING],labelFileAdded:["Added",ke.STRING],labelFileLoadError:["Error during load",ke.STRING],labelFileRemoved:["Removed",ke.STRING],labelFileRemoveError:["Error during remove",ke.STRING],labelFileProcessing:["Uploading",ke.STRING],labelFileProcessingComplete:["Upload complete",ke.STRING],labelFileProcessingAborted:["Upload cancelled",ke.STRING],labelFileProcessingError:["Error during upload",ke.STRING],labelFileProcessingRevertError:["Error during revert",ke.STRING],labelTapToCancel:["tap to cancel",ke.STRING],labelTapToRetry:["tap to retry",ke.STRING],labelTapToUndo:["tap to undo",ke.STRING],labelButtonRemoveItem:["Remove",ke.STRING],labelButtonAbortItemLoad:["Abort",ke.STRING],labelButtonRetryItemLoad:["Retry",ke.STRING],labelButtonAbortItemProcessing:["Cancel",ke.STRING],labelButtonUndoItemProcessing:["Undo",ke.STRING],labelButtonRetryItemProcessing:["Retry",ke.STRING],labelButtonProcessItem:["Upload",ke.STRING],iconRemove:['<svg width="26" height="26" viewBox="0 0 26 26" xmlns="http://www.w3.org/2000/svg"><path d="M11.586 13l-2.293 2.293a1 1 0 0 0 1.414 1.414L13 14.414l2.293 2.293a1 1 0 0 0 1.414-1.414L14.414 13l2.293-2.293a1 1 0 0 0-1.414-1.414L13 11.586l-2.293-2.293a1 1 0 0 0-1.414 1.414L11.586 13z" fill="currentColor" fill-rule="nonzero"/></svg>',ke.STRING],iconProcess:['<svg width="26" height="26" viewBox="0 0 26 26" xmlns="http://www.w3.org/2000/svg"><path d="M14 10.414v3.585a1 1 0 0 1-2 0v-3.585l-1.293 1.293a1 1 0 0 1-1.414-1.415l3-3a1 1 0 0 1 1.414 0l3 3a1 1 0 0 1-1.414 1.415L14 10.414zM9 18a1 1 0 0 1 0-2h8a1 1 0 0 1 0 2H9z" fill="currentColor" fill-rule="evenodd"/></svg>',ke.STRING],iconRetry:['<svg width="26" height="26" viewBox="0 0 26 26" xmlns="http://www.w3.org/2000/svg"><path d="M10.81 9.185l-.038.02A4.997 4.997 0 0 0 8 13.683a5 5 0 0 0 5 5 5 5 0 0 0 5-5 1 1 0 0 1 2 0A7 7 0 1 1 9.722 7.496l-.842-.21a.999.999 0 1 1 .484-1.94l3.23.806c.535.133.86.675.73 1.21l-.804 3.233a.997.997 0 0 1-1.21.73.997.997 0 0 1-.73-1.21l.23-.928v-.002z" fill="currentColor" fill-rule="nonzero"/></svg>',ke.STRING],iconUndo:['<svg width="26" height="26" viewBox="0 0 26 26" xmlns="http://www.w3.org/2000/svg"><path d="M9.185 10.81l.02-.038A4.997 4.997 0 0 1 13.683 8a5 5 0 0 1 5 5 5 5 0 0 1-5 5 1 1 0 0 0 0 2A7 7 0 1 0 7.496 9.722l-.21-.842a.999.999 0 1 0-1.94.484l.806 3.23c.133.535.675.86 1.21.73l3.233-.803a.997.997 0 0 0 .73-1.21.997.997 0 0 0-1.21-.73l-.928.23-.002-.001z" fill="currentColor" fill-rule="nonzero"/></svg>',ke.STRING],iconDone:['<svg width="26" height="26" viewBox="0 0 26 26" xmlns="http://www.w3.org/2000/svg"><path d="M18.293 9.293a1 1 0 0 1 1.414 1.414l-7.002 7a1 1 0 0 1-1.414 0l-3.998-4a1 1 0 1 1 1.414-1.414L12 15.586l6.294-6.293z" fill="currentColor" fill-rule="nonzero"/></svg>',ke.STRING],oninit:[null,ke.FUNCTION],onwarning:[null,ke.FUNCTION],onerror:[null,ke.FUNCTION],onactivatefile:[null,ke.FUNCTION],oninitfile:[null,ke.FUNCTION],onaddfilestart:[null,ke.FUNCTION],onaddfileprogress:[null,ke.FUNCTION],onaddfile:[null,ke.FUNCTION],onprocessfilestart:[null,ke.FUNCTION],onprocessfileprogress:[null,ke.FUNCTION],onprocessfileabort:[null,ke.FUNCTION],onprocessfilerevert:[null,ke.FUNCTION],onprocessfile:[null,ke.FUNCTION],onprocessfiles:[null,ke.FUNCTION],onremovefile:[null,ke.FUNCTION],onpreparefile:[null,ke.FUNCTION],onupdatefiles:[null,ke.FUNCTION],onreorderfiles:[null,ke.FUNCTION],beforeDropFile:[null,ke.FUNCTION],beforeAddFile:[null,ke.FUNCTION],beforeRemoveFile:[null,ke.FUNCTION],beforePrepareFile:[null,ke.FUNCTION],stylePanelLayout:[null,ke.STRING],stylePanelAspectRatio:[null,ke.STRING],styleItemPanelAspectRatio:[null,ke.STRING],styleButtonRemoveItemPosition:["left",ke.STRING],styleButtonProcessItemPosition:["right",ke.STRING],styleLoadIndicatorPosition:["right",ke.STRING],styleProgressIndicatorPosition:["right",ke.STRING],styleButtonRemoveItemAlign:[!1,ke.BOOLEAN],files:[[],ke.ARRAY],credits:[["https://pqina.nl/","Powered by PQINA"],ke.ARRAY]},$e=function(e,t){return k(t)?e[0]||null:J(t)?e[t]||null:("object"===typeof t&&(t=t.id),e.find((function(e){return e.id===t}))||null)},Je=function(e){if(k(e))return e;if(/:/.test(e)){var t=e.split(":");return t[1]/t[0]}return parseFloat(e)},et=function(e){return e.filter((function(e){return!e.archived}))},tt={EMPTY:0,IDLE:1,ERROR:2,BUSY:3,READY:4},nt=null,rt=function(){if(null===nt)try{var e=new DataTransfer;e.items.add(new File(["hello world"],"This_Works.txt"));var t=document.createElement("input");t.setAttribute("type","file"),t.files=e.files,nt=1===t.files.length}catch(n){nt=!1}return nt},ot=[Fe.LOAD_ERROR,Fe.PROCESSING_ERROR,Fe.PROCESSING_REVERT_ERROR],it=[Fe.LOADING,Fe.PROCESSING,Fe.PROCESSING_QUEUED,Fe.INIT],at=[Fe.PROCESSING_COMPLETE],ut=function(e){return ot.includes(e.status)},st=function(e){return it.includes(e.status)},lt=function(e){return at.includes(e.status)},ct=function(e){return ue(e.options.server)&&(ue(e.options.server.process)||te(e.options.server.process))},ft=function(e){return{GET_STATUS:function(){var t=et(e.items),n=tt.EMPTY,r=tt.ERROR,o=tt.BUSY,i=tt.IDLE,a=tt.READY;return 0===t.length?n:t.some(ut)?r:t.some(st)?o:t.some(lt)?a:i},GET_ITEM:function(t){return $e(e.items,t)},GET_ACTIVE_ITEM:function(t){return $e(et(e.items),t)},GET_ACTIVE_ITEMS:function(){return et(e.items)},GET_ITEMS:function(){return e.items},GET_ITEM_NAME:function(t){var n=$e(e.items,t);return n?n.filename:null},GET_ITEM_SIZE:function(t){var n=$e(e.items,t);return n?n.fileSize:null},GET_STYLES:function(){return Object.keys(e.options).filter((function(e){return/^style/.test(e)})).map((function(t){return{name:t,value:e.options[t]}}))},GET_PANEL_ASPECT_RATIO:function(){return/circle/.test(e.options.stylePanelLayout)?1:Je(e.options.stylePanelAspectRatio)},GET_ITEM_PANEL_ASPECT_RATIO:function(){return e.options.styleItemPanelAspectRatio},GET_ITEMS_BY_STATUS:function(t){return et(e.items).filter((function(e){return e.status===t}))},GET_TOTAL_ITEMS:function(){return et(e.items).length},SHOULD_UPDATE_FILE_INPUT:function(){return e.options.storeAsFile&&rt()&&!ct(e)},IS_ASYNC:function(){return ct(e)},GET_FILE_SIZE_LABELS:function(e){return{labelBytes:e("GET_LABEL_FILE_SIZE_BYTES")||void 0,labelKilobytes:e("GET_LABEL_FILE_SIZE_KILOBYTES")||void 0,labelMegabytes:e("GET_LABEL_FILE_SIZE_MEGABYTES")||void 0,labelGigabytes:e("GET_LABEL_FILE_SIZE_GIGABYTES")||void 0}}}},dt=function(e){var t=et(e.items).length;if(!e.options.allowMultiple)return 0===t;var n=e.options.maxFiles;return null===n||t<n},pt=function(e,t,n){return Math.max(Math.min(n,e),t)},Et=function(e,t,n){return e.splice(t,0,n)},_t=function(e,t,n){return k(t)?null:"undefined"===typeof n?(e.push(t),t):(n=pt(n,0,e.length),Et(e,n,t),t)},Tt=function(e){return/^\s*data:([a-z]+\/[a-z0-9-+.]+(;[a-z-]+=[a-z0-9-]+)?)?(;base64)?,([a-z0-9!$&',()*+;=\-._~:@\/?%\s]*)\s*$/i.test(e)},It=function(e){return e.split("/").pop().split("?").shift()},vt=function(e){return e.split(".").pop()},mt=function(e){if("string"!==typeof e)return"";var t=e.split("/").pop();return/svg/.test(t)?"svg":/zip|compressed/.test(t)?"zip":/plain/.test(t)?"txt":/msword/.test(t)?"doc":/[a-z]+/.test(t)?"jpeg"===t?"jpg":t:""},ht=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return(t+e).slice(-t.length)},gt=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new Date;return e.getFullYear()+"-"+ht(e.getMonth()+1,"00")+"-"+ht(e.getDate(),"00")+"_"+ht(e.getHours(),"00")+"-"+ht(e.getMinutes(),"00")+"-"+ht(e.getSeconds(),"00")},Rt=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,o="string"===typeof n?e.slice(0,e.size,n):e.slice(0,e.size,e.type);return o.lastModifiedDate=new Date,e._relativePath&&(o._relativePath=e._relativePath),Q(t)||(t=gt()),t&&null===r&&vt(t)?o.name=t:(r=r||mt(o.type),o.name=t+(r?"."+r:"")),o},Ot=function(){return window.BlobBuilder=window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder},yt=function(e,t){var n=Ot();if(n){var r=new n;return r.append(e),r.getBlob(t)}return new Blob([e],{type:t})},Dt=function(e,t){for(var n=new ArrayBuffer(e.length),r=new Uint8Array(n),o=0;o<e.length;o++)r[o]=e.charCodeAt(o);return yt(n,t)},St=function(e){return(/^data:(.+);/.exec(e)||[])[1]||null},At=function(e){return e.split(",")[1].replace(/\s/g,"")},Lt=function(e){return atob(At(e))},bt=function(e){var t=St(e),n=Lt(e);return Dt(n,t)},Pt=function(e,t,n){return Rt(bt(e),t,null,n)},Mt=function(e){if(!/^content-disposition:/i.test(e))return null;var t=e.split(/filename=|filename\*=.+''/).splice(1).map((function(e){return e.trim().replace(/^["']|[;"']{0,2}$/g,"")})).filter((function(e){return e.length}));return t.length?decodeURI(t[t.length-1]):null},Nt=function(e){if(/content-length:/i.test(e)){var t=e.match(/[0-9]+/)[0];return t?parseInt(t,10):null}return null},wt=function(e){return/x-content-transfer-id:/i.test(e)&&(e.split(":")[1]||"").trim()||null},Ct=function(e){var t={source:null,name:null,size:null},n=e.split("\n"),r=!0,o=!1,i=void 0;try{for(var a,u=n[Symbol.iterator]();!(r=(a=u.next()).done);r=!0){var s=a.value,l=Mt(s);if(l)t.name=l;else{var c=Nt(s);if(c)t.size=c;else{var f=wt(s);f&&(t.source=f)}}}}catch(d){o=!0,i=d}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return t},Gt=function(e){var t={source:null,complete:!1,progress:0,size:null,timestamp:null,duration:0,request:null},n=function(){return t.progress},r=function(){t.request&&t.request.abort&&t.request.abort()},o=function(){var e=t.source;a.fire("init",e),e instanceof File?a.fire("load",e):e instanceof Blob?a.fire("load",Rt(e,e.name)):Tt(e)?a.fire("load",Pt(e)):i(e)},i=function(n){e?(t.timestamp=Date.now(),t.request=e(n,(function(e){t.duration=Date.now()-t.timestamp,t.complete=!0,e instanceof Blob&&(e=Rt(e,e.name||It(n))),a.fire("load",e instanceof Blob?e:e?e.body:null)}),(function(e){a.fire("error","string"===typeof e?{type:"error",code:0,body:e}:e)}),(function(e,n,r){r&&(t.size=r),t.duration=Date.now()-t.timestamp,e?(t.progress=n/r,a.fire("progress",t.progress)):t.progress=null}),(function(){a.fire("abort")}),(function(e){var n=Ct("string"===typeof e?e:e.headers);a.fire("meta",{size:t.size||n.size,filename:n.name,source:n.source})}))):a.fire("error",{type:"error",body:"Can't load URL",code:400})},a=Object.assign({},we(),{setSource:function(e){return t.source=e},getProgress:n,abort:r,load:o});return a},Ut=function(e){return/GET|HEAD/.test(e)},Bt=function(e,t,n){var r={onheaders:function(){},onprogress:function(){},onload:function(){},ontimeout:function(){},onerror:function(){},onabort:function(){},abort:function(){o=!0,a.abort()}},o=!1,i=!1;n=Object.assign({method:"POST",headers:{},withCredentials:!1},n),t=encodeURI(t),Ut(n.method)&&e&&(t=""+t+encodeURIComponent("string"===typeof e?e:JSON.stringify(e)));var a=new XMLHttpRequest;return(Ut(n.method)?a:a.upload).onprogress=function(e){o||r.onprogress(e.lengthComputable,e.loaded,e.total)},a.onreadystatechange=function(){a.readyState<2||4===a.readyState&&0===a.status||i||(i=!0,r.onheaders(a))},a.onload=function(){a.status>=200&&a.status<300?r.onload(a):r.onerror(a)},a.onerror=function(){return r.onerror(a)},a.onabort=function(){o=!0,r.onabort()},a.ontimeout=function(){return r.ontimeout(a)},a.open(n.method,t,!0),J(n.timeout)&&(a.timeout=n.timeout),Object.keys(n.headers).forEach((function(e){var t=unescape(encodeURIComponent(n.headers[e]));a.setRequestHeader(e,t)})),n.responseType&&(a.responseType=n.responseType),n.withCredentials&&(a.withCredentials=!0),a.send(e),r},Ft=function(e,t,n,r){return{type:e,code:t,body:n,headers:r}},qt=function(e){return function(t){e(Ft("error",0,"Timeout",t.getAllResponseHeaders()))}},Vt=function(e){return/\?/.test(e)},xt=function(){for(var e="",t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return n.forEach((function(t){e+=Vt(e)&&Vt(t)?t.replace(/\?/,"&"):t})),e},Yt=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1?arguments[1]:void 0;if("function"===typeof t)return t;if(!t||!Q(t.url))return null;var n=t.onload||function(e){return e},r=t.onerror||function(e){return null};return function(o,i,a,u,s,l){var c=Bt(o,xt(e,t.url),Object.assign({},t,{responseType:"blob"}));return c.onload=function(e){var r=e.getAllResponseHeaders(),a=Ct(r).name||It(o);i(Ft("load",e.status,"HEAD"===t.method?null:Rt(n(e.response),a),r))},c.onerror=function(e){a(Ft("error",e.status,r(e.response)||e.statusText,e.getAllResponseHeaders()))},c.onheaders=function(e){l(Ft("headers",e.status,null,e.getAllResponseHeaders()))},c.ontimeout=qt(a),c.onprogress=u,c.onabort=s,c}},kt={QUEUED:0,COMPLETE:1,PROCESSING:2,ERROR:3,WAITING:4},jt=function(e,t,n,r,o,i,a,u,s,l,c){for(var f=[],d=c.chunkTransferId,p=c.chunkServer,E=c.chunkSize,_=c.chunkRetryDelays,T={serverId:d,aborted:!1},I=t.ondata||function(e){return e},v=t.onload||function(e,t){return"HEAD"===t?e.getResponseHeader("Upload-Offset"):e.response},m=t.onerror||function(e){return null},h=function(i){var u=new FormData;ue(o)&&u.append(n,JSON.stringify(o));var s="function"===typeof t.headers?t.headers(r,o):Object.assign({},t.headers,{"Upload-Length":r.size}),l=Object.assign({},t,{headers:s}),c=Bt(I(u),xt(e,t.url),l);c.onload=function(e){return i(v(e,l.method))},c.onerror=function(e){return a(Ft("error",e.status,m(e.response)||e.statusText,e.getAllResponseHeaders()))},c.ontimeout=qt(a)},g=function(n){var r=xt(e,p.url,T.serverId),o={headers:"function"===typeof t.headers?t.headers(T.serverId):Object.assign({},t.headers),method:"HEAD"},i=Bt(null,r,o);i.onload=function(e){return n(v(e,o.method))},i.onerror=function(e){return a(Ft("error",e.status,m(e.response)||e.statusText,e.getAllResponseHeaders()))},i.ontimeout=qt(a)},R=Math.floor(r.size/E),O=0;O<=R;O++){var y=O*E,D=r.slice(y,y+E,"application/offset+octet-stream");f[O]={index:O,size:D.size,offset:y,data:D,file:r,progress:0,retries:Ae(_),status:kt.QUEUED,error:null,request:null,timeout:null}}var S=function(){return i(T.serverId)},A=function(e){return e.status===kt.QUEUED||e.status===kt.ERROR},L=function(t){if(!T.aborted)if(t=t||f.find(A)){t.status=kt.PROCESSING,t.progress=null;var n=p.ondata||function(e){return e},o=p.onerror||function(e){return null},i=xt(e,p.url,T.serverId),u="function"===typeof p.headers?p.headers(t):Object.assign({},p.headers,{"Content-Type":"application/offset+octet-stream","Upload-Offset":t.offset,"Upload-Length":r.size,"Upload-Name":r.name}),l=t.request=Bt(n(t.data),i,Object.assign({},p,{headers:u}));l.onload=function(){t.status=kt.COMPLETE,t.request=null,M()},l.onprogress=function(e,n,r){t.progress=e?n:null,P()},l.onerror=function(e){t.status=kt.ERROR,t.request=null,t.error=o(e.response)||e.statusText,b(t)||a(Ft("error",e.status,o(e.response)||e.statusText,e.getAllResponseHeaders()))},l.ontimeout=function(e){t.status=kt.ERROR,t.request=null,b(t)||qt(a)(e)},l.onabort=function(){t.status=kt.QUEUED,t.request=null,s()}}else f.every((function(e){return e.status===kt.COMPLETE}))&&S()},b=function(e){return 0!==e.retries.length&&(e.status=kt.WAITING,clearTimeout(e.timeout),e.timeout=setTimeout((function(){L(e)}),e.retries.shift()),!0)},P=function(){var e=f.reduce((function(e,t){return null===e||null===t.progress?null:e+t.progress}),0);if(null===e)return u(!1,0,0);var t=f.reduce((function(e,t){return e+t.size}),0);u(!0,e,t)},M=function(){f.filter((function(e){return e.status===kt.PROCESSING})).length>=1||L()},N=function(){f.forEach((function(e){clearTimeout(e.timeout),e.request&&e.request.abort()}))};return T.serverId?g((function(e){T.aborted||(f.filter((function(t){return t.offset<e})).forEach((function(e){e.status=kt.COMPLETE,e.progress=e.size})),M())})):h((function(e){T.aborted||(l(e),T.serverId=e,M())})),{abort:function(){T.aborted=!0,N()}}},Ht=function(e,t,n,r){return function(o,i,a,u,s,l,c){if(o){var f=r.chunkUploads,d=f&&o.size>r.chunkSize,p=f&&(d||r.chunkForce);if(o instanceof Blob&&p)return jt(e,t,n,o,i,a,u,s,l,c,r);var E=t.ondata||function(e){return e},_=t.onload||function(e){return e},T=t.onerror||function(e){return null},I="function"===typeof t.headers?t.headers(o,i)||{}:Object.assign({},t.headers),v=Object.assign({},t,{headers:I}),m=new FormData;ue(i)&&m.append(n,JSON.stringify(i)),(o instanceof Blob?[{name:null,file:o}]:o).forEach((function(e){m.append(n,e.file,null===e.name?e.file.name:""+e.name+e.file.name)}));var h=Bt(E(m),xt(e,t.url),v);return h.onload=function(e){a(Ft("load",e.status,_(e.response),e.getAllResponseHeaders()))},h.onerror=function(e){u(Ft("error",e.status,T(e.response)||e.statusText,e.getAllResponseHeaders()))},h.ontimeout=qt(u),h.onprogress=s,h.onabort=l,h}}},Wt=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1?arguments[1]:void 0,n=arguments.length>2?arguments[2]:void 0,r=arguments.length>3?arguments[3]:void 0;return"function"===typeof t?function(){for(var e=arguments.length,o=new Array(e),i=0;i<e;i++)o[i]=arguments[i];return t.apply(void 0,[n].concat(o,[r]))}:t&&Q(t.url)?Ht(e,t,n,r):null},Xt=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1?arguments[1]:void 0;if("function"===typeof t)return t;if(!t||!Q(t.url))return function(e,t){return t()};var n=t.onload||function(e){return e},r=t.onerror||function(e){return null};return function(o,i,a){var u=Bt(o,e+t.url,t);return u.onload=function(e){i(Ft("load",e.status,n(e.response),e.getAllResponseHeaders()))},u.onerror=function(e){a(Ft("error",e.status,r(e.response)||e.statusText,e.getAllResponseHeaders()))},u.ontimeout=qt(a),u}},zt=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;return e+Math.random()*(t-e)},Qt=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1e3,n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:25,r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:250,o=null,i=Date.now();return t>0&&function a(){var u=Date.now()-i,s=zt(n,r);u+s>t&&(s=u+s-t);var l=u/t;l>=1||document.hidden?e(1):(e(l),o=setTimeout(a,s))}(),{clear:function(){clearTimeout(o)}}},Zt=function(e,t){var n={complete:!1,perceivedProgress:0,perceivedPerformanceUpdater:null,progress:null,timestamp:null,perceivedDuration:0,duration:0,request:null,response:null},r=t.allowMinimumUploadDuration,o=function(t,o){var i=function(){0!==n.duration&&null!==n.progress&&l.fire("progress",l.getProgress())},a=function(){n.complete=!0,l.fire("load-perceived",n.response.body)};l.fire("start"),n.timestamp=Date.now(),n.perceivedPerformanceUpdater=Qt((function(e){n.perceivedProgress=e,n.perceivedDuration=Date.now()-n.timestamp,i(),n.response&&1===n.perceivedProgress&&!n.complete&&a()}),r?zt(750,1500):0),n.request=e(t,o,(function(e){n.response=ue(e)?e:{type:"load",code:200,body:""+e,headers:{}},n.duration=Date.now()-n.timestamp,n.progress=1,l.fire("load",n.response.body),(!r||r&&1===n.perceivedProgress)&&a()}),(function(e){n.perceivedPerformanceUpdater.clear(),l.fire("error",ue(e)?e:{type:"error",code:0,body:""+e})}),(function(e,t,r){n.duration=Date.now()-n.timestamp,n.progress=e?t/r:null,i()}),(function(){n.perceivedPerformanceUpdater.clear(),l.fire("abort",n.response?n.response.body:null)}),(function(e){l.fire("transfer",e)}))},i=function(){n.request&&(n.perceivedPerformanceUpdater.clear(),n.request.abort&&n.request.abort(),n.complete=!0)},a=function(){i(),n.complete=!1,n.perceivedProgress=0,n.progress=0,n.timestamp=null,n.perceivedDuration=0,n.duration=0,n.request=null,n.response=null},u=r?function(){return n.progress?Math.min(n.progress,n.perceivedProgress):null}:function(){return n.progress||null},s=r?function(){return Math.min(n.duration,n.perceivedDuration)}:function(){return n.duration},l=Object.assign({},we(),{process:o,abort:i,getProgress:u,getDuration:s,reset:a});return l},Kt=function(e){return e.substring(0,e.lastIndexOf("."))||e},$t=function(e){var t=[e.name,e.size,e.type];return e instanceof Blob||Tt(e)?t[0]=e.name||gt():Tt(e)?(t[1]=e.length,t[2]=St(e)):Q(e)&&(t[0]=It(e),t[1]=0,t[2]="application/octet-stream"),{name:t[0],size:t[1],type:t[2]}},Jt=function(e){return!!(e instanceof File||e instanceof Blob&&e.name)},en=function e(t){if(!ue(t))return t;var n=Y(t)?[]:{};for(var r in t)if(t.hasOwnProperty(r)){var o=t[r];n[r]=o&&ue(o)?e(o):o}return n},tn=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,r=Re(),o={archived:!1,frozen:!1,released:!1,source:null,file:n,serverFileReference:t,transferId:null,processingAborted:!1,status:t?Fe.PROCESSING_COMPLETE:Fe.INIT,activeLoader:null,activeProcessor:null},a=null,u={},s=function(e){return o.status=e},l=function(e){if(!o.released&&!o.frozen){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];O.fire.apply(O,[e].concat(n))}},c=function(){return vt(o.file.name)},f=function(){return o.file.type},d=function(){return o.file.size},p=function(){return o.file},E=function(t,n,r){o.source=t,O.fireSync("init"),o.file?O.fireSync("load-skip"):(o.file=$t(t),n.on("init",(function(){l("load-init")})),n.on("meta",(function(t){o.file.size=t.size,o.file.filename=t.filename,t.source&&(e=qe.LIMBO,o.serverFileReference=t.source,o.status=Fe.PROCESSING_COMPLETE),l("load-meta")})),n.on("progress",(function(e){s(Fe.LOADING),l("load-progress",e)})),n.on("error",(function(e){s(Fe.LOAD_ERROR),l("load-request-error",e)})),n.on("abort",(function(){s(Fe.INIT),l("load-abort")})),n.on("load",(function(t){o.activeLoader=null;var n=function(t){o.file=Jt(t)?t:o.file,e===qe.LIMBO&&o.serverFileReference?s(Fe.PROCESSING_COMPLETE):s(Fe.IDLE),l("load")},i=function(e){o.file=t,l("load-meta"),s(Fe.LOAD_ERROR),l("load-file-error",e)};o.serverFileReference?n(t):r(t,n,i)})),n.setSource(t),o.activeLoader=n,n.load())},_=function(){o.activeLoader&&o.activeLoader.load()},T=function(){o.activeLoader?o.activeLoader.abort():(s(Fe.INIT),l("load-abort"))},I=function e(t,n){if(o.processingAborted)o.processingAborted=!1;else if(s(Fe.PROCESSING),a=null,o.file instanceof Blob){t.on("load",(function(e){o.transferId=null,o.serverFileReference=e})),t.on("transfer",(function(e){o.transferId=e})),t.on("load-perceived",(function(e){o.activeProcessor=null,o.transferId=null,o.serverFileReference=e,s(Fe.PROCESSING_COMPLETE),l("process-complete",e)})),t.on("start",(function(){l("process-start")})),t.on("error",(function(e){o.activeProcessor=null,s(Fe.PROCESSING_ERROR),l("process-error",e)})),t.on("abort",(function(e){o.activeProcessor=null,o.serverFileReference=e,s(Fe.IDLE),l("process-abort"),a&&a()})),t.on("progress",(function(e){l("process-progress",e)}));var r=function(e){o.archived||t.process(e,Object.assign({},u))},i=console.error;n(o.file,r,i),o.activeProcessor=t}else O.on("load",(function(){e(t,n)}))},v=function(){o.processingAborted=!1,s(Fe.PROCESSING_QUEUED)},m=function(){return new Promise((function(e){if(!o.activeProcessor)return o.processingAborted=!0,s(Fe.IDLE),l("process-abort"),void e();a=function(){e()},o.activeProcessor.abort()}))},h=function(e,t){return new Promise((function(n,r){var i=null!==o.serverFileReference?o.serverFileReference:o.transferId;null!==i?(e(i,(function(){o.serverFileReference=null,o.transferId=null,n()}),(function(e){t?(s(Fe.PROCESSING_REVERT_ERROR),l("process-revert-error"),r(e)):n()})),s(Fe.IDLE),l("process-revert")):n()}))},g=function(e,t,n){var r=e.split("."),o=r[0],i=r.pop(),a=u;r.forEach((function(e){return a=a[e]})),JSON.stringify(a[i])!==JSON.stringify(t)&&(a[i]=t,l("metadata-update",{key:o,value:u[o],silent:n}))},R=function(e){return en(e?u[e]:u)},O=Object.assign({id:{get:function(){return r}},origin:{get:function(){return e},set:function(t){return e=t}},serverId:{get:function(){return o.serverFileReference}},transferId:{get:function(){return o.transferId}},status:{get:function(){return o.status}},filename:{get:function(){return o.file.name}},filenameWithoutExtension:{get:function(){return Kt(o.file.name)}},fileExtension:{get:c},fileType:{get:f},fileSize:{get:d},file:{get:p},relativePath:{get:function(){return o.file._relativePath}},source:{get:function(){return o.source}},getMetadata:R,setMetadata:function(e,t,n){if(ue(e)){var r=e;return Object.keys(r).forEach((function(e){g(e,r[e],t)})),e}return g(e,t,n),t},extend:function(e,t){return y[e]=t},abortLoad:T,retryLoad:_,requestProcessing:v,abortProcessing:m,load:E,process:I,revert:h},we(),{freeze:function(){return o.frozen=!0},release:function(){return o.released=!0},released:{get:function(){return o.released}},archive:function(){return o.archived=!0},archived:{get:function(){return o.archived}}}),y=i(O);return y},nn=function(e,t){return k(t)?0:Q(t)?e.findIndex((function(e){return e.id===t})):-1},rn=function(e,t){var n=nn(e,t);if(!(n<0))return e[n]||null},on=function(e,t,n,r,o,i){var a=Bt(null,e,{method:"GET",responseType:"blob"});return a.onload=function(n){var r=n.getAllResponseHeaders(),o=Ct(r).name||It(e);t(Ft("load",n.status,Rt(n.response,o),r))},a.onerror=function(e){n(Ft("error",e.status,e.statusText,e.getAllResponseHeaders()))},a.onheaders=function(e){i(Ft("headers",e.status,null,e.getAllResponseHeaders()))},a.ontimeout=qt(n),a.onprogress=r,a.onabort=o,a},an=function(e){return 0===e.indexOf("//")&&(e=location.protocol+e),e.toLowerCase().replace("blob:","").replace(/([a-z])?:\/\//,"$1").split("/")[0]},un=function(e){return(e.indexOf(":")>-1||e.indexOf("//")>-1)&&an(location.href)!==an(e)},sn=function(e){return function(){return te(e)?e.apply(void 0,arguments):e}},ln=function(e){return!Jt(e.file)},cn=function(e,t){clearTimeout(t.listUpdateTimeout),t.listUpdateTimeout=setTimeout((function(){e("DID_UPDATE_ITEMS",{items:et(t.items)})}),0)},fn=function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return new Promise((function(t){if(!e)return t(!0);var r=e.apply(void 0,n);return null==r?t(!0):"boolean"===typeof r?t(r):void("function"===typeof r.then&&r.then(t))}))},dn=function(e,t){e.items.sort((function(e,n){return t(Ue(e),Ue(n))}))},pn=function(e,t){return function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=n.query,o=n.success,i=void 0===o?function(){}:o,a=n.failure,u=void 0===a?function(){}:a,s=Se(n,["query","success","failure"]),l=$e(e.items,r);l?t(l,i,u,s||{}):u({error:Ft("error",0,"Item not found"),file:null})}},En=function(e,t,n){return{ABORT_ALL:function(){et(n.items).forEach((function(e){e.freeze(),e.abortLoad(),e.abortProcessing()}))},DID_SET_FILES:function(t){var r=t.value,o=(void 0===r?[]:r).map((function(e){return{source:e.source?e.source:e,options:e.options}})),i=et(n.items);i.forEach((function(t){o.find((function(e){return e.source===t.source||e.source===t.file}))||e("REMOVE_ITEM",{query:t,remove:!1})})),i=et(n.items),o.forEach((function(t,n){i.find((function(e){return e.source===t.source||e.file===t.source}))||e("ADD_ITEM",Object.assign({},t,{interactionMethod:ge.NONE,index:n}))}))},DID_UPDATE_ITEM_METADATA:function(r){var o=r.id,i=r.action,a=r.change;a.silent||(clearTimeout(n.itemUpdateTimeout),n.itemUpdateTimeout=setTimeout((function(){var r=rn(n.items,o);if(t("IS_ASYNC")){r.origin===qe.LOCAL&&e("DID_LOAD_ITEM",{id:r.id,error:null,serverFileReference:r.source});var u=function(){setTimeout((function(){e("REQUEST_ITEM_PROCESSING",{query:o})}),32)},s=function(e){r.revert(Xt(n.options.server.url,n.options.server.revert),t("GET_FORCE_REVERT")).then(e?u:function(){}).catch((function(){}))},l=function(e){r.abortProcessing().then(e?u:function(){})};return r.status===Fe.PROCESSING_COMPLETE?s(n.options.instantUpload):r.status===Fe.PROCESSING?l(n.options.instantUpload):void(n.options.instantUpload&&u())}He("SHOULD_PREPARE_OUTPUT",!1,{item:r,query:t,action:i,change:a}).then((function(n){var i=t("GET_BEFORE_PREPARE_FILE");i&&(n=i(r,n)),n&&e("REQUEST_PREPARE_OUTPUT",{query:o,item:r,success:function(t){e("DID_PREPARE_OUTPUT",{id:o,file:t})}},!0)}))}),0))},MOVE_ITEM:function(e){var t=e.query,r=e.index,o=$e(n.items,t);if(o){var i=n.items.indexOf(o);i!==(r=pt(r,0,n.items.length-1))&&n.items.splice(r,0,n.items.splice(i,1)[0])}},SORT:function(r){var o=r.compare;dn(n,o),e("DID_SORT_ITEMS",{items:t("GET_ACTIVE_ITEMS")})},ADD_ITEMS:function(n){var r=n.items,o=n.index,i=n.interactionMethod,a=n.success,u=void 0===a?function(){}:a,s=n.failure,l=void 0===s?function(){}:s,c=o;if(-1===o||"undefined"===typeof o){var f=t("GET_ITEM_INSERT_LOCATION"),d=t("GET_TOTAL_ITEMS");c="before"===f?0:d}var p=t("GET_IGNORED_FILES"),E=function(e){return Jt(e)?!p.includes(e.name.toLowerCase()):!k(e)},_=r.filter(E).map((function(t){return new Promise((function(n,r){e("ADD_ITEM",{interactionMethod:i,source:t.source||t,success:n,failure:r,index:c++,options:t.options||{}})}))}));Promise.all(_).then(u).catch(l)},ADD_ITEM:function(r){var o=r.source,i=r.index,a=void 0===i?-1:i,u=r.interactionMethod,s=r.success,l=void 0===s?function(){}:s,c=r.failure,f=void 0===c?function(){}:c,d=r.options,p=void 0===d?{}:d;if(k(o))f({error:Ft("error",0,"No source"),file:null});else if(!Jt(o)||!n.options.ignoredFiles.includes(o.name.toLowerCase())){if(!dt(n)){if(n.options.allowMultiple||!n.options.allowMultiple&&!n.options.allowReplace){var E=Ft("warning",0,"Max files");return e("DID_THROW_MAX_FILES",{source:o,error:E}),void f({error:E,file:null})}var _=et(n.items)[0];if(_.status===Fe.PROCESSING_COMPLETE||_.status===Fe.PROCESSING_REVERT_ERROR){var T=t("GET_FORCE_REVERT");if(_.revert(Xt(n.options.server.url,n.options.server.revert),T).then((function(){T&&e("ADD_ITEM",{source:o,index:a,interactionMethod:u,success:l,failure:f,options:p})})).catch((function(){})),T)return}e("REMOVE_ITEM",{query:_.id})}var I="local"===p.type?qe.LOCAL:"limbo"===p.type?qe.LIMBO:qe.INPUT,v=tn(I,I===qe.INPUT?null:o,p.file);Object.keys(p.metadata||{}).forEach((function(e){v.setMetadata(e,p.metadata[e])})),We("DID_CREATE_ITEM",v,{query:t,dispatch:e});var m=t("GET_ITEM_INSERT_LOCATION");n.options.itemInsertLocationFreedom||(a="before"===m?-1:n.items.length),_t(n.items,v,a),te(m)&&o&&dn(n,m);var h=v.id;v.on("init",(function(){e("DID_INIT_ITEM",{id:h})})),v.on("load-init",(function(){e("DID_START_ITEM_LOAD",{id:h})})),v.on("load-meta",(function(){e("DID_UPDATE_ITEM_META",{id:h})})),v.on("load-progress",(function(t){e("DID_UPDATE_ITEM_LOAD_PROGRESS",{id:h,progress:t})})),v.on("load-request-error",(function(t){var r=sn(n.options.labelFileLoadError)(t);if(t.code>=400&&t.code<500)return e("DID_THROW_ITEM_INVALID",{id:h,error:t,status:{main:r,sub:t.code+" ("+t.body+")"}}),void f({error:t,file:Ue(v)});e("DID_THROW_ITEM_LOAD_ERROR",{id:h,error:t,status:{main:r,sub:n.options.labelTapToRetry}})})),v.on("load-file-error",(function(t){e("DID_THROW_ITEM_INVALID",{id:h,error:t.status,status:t.status}),f({error:t.status,file:Ue(v)})})),v.on("load-abort",(function(){e("REMOVE_ITEM",{query:h})})),v.on("load-skip",(function(){e("COMPLETE_LOAD_ITEM",{query:h,item:v,data:{source:o,success:l}})})),v.on("load",(function(){var r=function(r){r?(v.on("metadata-update",(function(t){e("DID_UPDATE_ITEM_METADATA",{id:h,change:t})})),He("SHOULD_PREPARE_OUTPUT",!1,{item:v,query:t}).then((function(r){var i=t("GET_BEFORE_PREPARE_FILE");i&&(r=i(v,r));var a=function(){e("COMPLETE_LOAD_ITEM",{query:h,item:v,data:{source:o,success:l}}),cn(e,n)};r?e("REQUEST_PREPARE_OUTPUT",{query:h,item:v,success:function(t){e("DID_PREPARE_OUTPUT",{id:h,file:t}),a()}},!0):a()}))):e("REMOVE_ITEM",{query:h})};He("DID_LOAD_ITEM",v,{query:t,dispatch:e}).then((function(){fn(t("GET_BEFORE_ADD_FILE"),Ue(v)).then(r)})).catch((function(t){if(!t||!t.error||!t.status)return r(!1);e("DID_THROW_ITEM_INVALID",{id:h,error:t.error,status:t.status})}))})),v.on("process-start",(function(){e("DID_START_ITEM_PROCESSING",{id:h})})),v.on("process-progress",(function(t){e("DID_UPDATE_ITEM_PROCESS_PROGRESS",{id:h,progress:t})})),v.on("process-error",(function(t){e("DID_THROW_ITEM_PROCESSING_ERROR",{id:h,error:t,status:{main:sn(n.options.labelFileProcessingError)(t),sub:n.options.labelTapToRetry}})})),v.on("process-revert-error",(function(t){e("DID_THROW_ITEM_PROCESSING_REVERT_ERROR",{id:h,error:t,status:{main:sn(n.options.labelFileProcessingRevertError)(t),sub:n.options.labelTapToRetry}})})),v.on("process-complete",(function(t){e("DID_COMPLETE_ITEM_PROCESSING",{id:h,error:null,serverFileReference:t}),e("DID_DEFINE_VALUE",{id:h,value:t})})),v.on("process-abort",(function(){e("DID_ABORT_ITEM_PROCESSING",{id:h})})),v.on("process-revert",(function(){e("DID_REVERT_ITEM_PROCESSING",{id:h}),e("DID_DEFINE_VALUE",{id:h,value:null})})),e("DID_ADD_ITEM",{id:h,index:a,interactionMethod:u}),cn(e,n);var g=n.options.server||{},R=g.url,O=g.load,y=g.restore,D=g.fetch;v.load(o,Gt(I===qe.INPUT?Q(o)&&un(o)&&D?Yt(R,D):on:I===qe.LIMBO?Yt(R,y):Yt(R,O)),(function(e,n,r){He("LOAD_FILE",e,{query:t}).then(n).catch(r)}))}},REQUEST_PREPARE_OUTPUT:function(e){var n=e.item,r=e.success,o=e.failure,i=void 0===o?function(){}:o,a={error:Ft("error",0,"Item not found"),file:null};if(n.archived)return i(a);He("PREPARE_OUTPUT",n.file,{query:t,item:n}).then((function(e){He("COMPLETE_PREPARE_OUTPUT",e,{query:t,item:n}).then((function(e){if(n.archived)return i(a);r(e)}))}))},COMPLETE_LOAD_ITEM:function(r){var o=r.item,i=r.data,a=i.success,u=i.source,s=t("GET_ITEM_INSERT_LOCATION");if(te(s)&&u&&dn(n,s),e("DID_LOAD_ITEM",{id:o.id,error:null,serverFileReference:o.origin===qe.INPUT?null:u}),a(Ue(o)),o.origin!==qe.LOCAL)return o.origin===qe.LIMBO?(e("DID_COMPLETE_ITEM_PROCESSING",{id:o.id,error:null,serverFileReference:u}),void e("DID_DEFINE_VALUE",{id:o.id,value:o.serverId||u})):void(t("IS_ASYNC")&&n.options.instantUpload&&e("REQUEST_ITEM_PROCESSING",{query:o.id}));e("DID_LOAD_LOCAL_ITEM",{id:o.id})},RETRY_ITEM_LOAD:pn(n,(function(e){e.retryLoad()})),REQUEST_ITEM_PREPARE:pn(n,(function(t,n,r){e("REQUEST_PREPARE_OUTPUT",{query:t.id,item:t,success:function(r){e("DID_PREPARE_OUTPUT",{id:t.id,file:r}),n({file:t,output:r})},failure:r},!0)})),REQUEST_ITEM_PROCESSING:pn(n,(function(r,o,i){if(r.status===Fe.IDLE||r.status===Fe.PROCESSING_ERROR)r.status!==Fe.PROCESSING_QUEUED&&(r.requestProcessing(),e("DID_REQUEST_ITEM_PROCESSING",{id:r.id}),e("PROCESS_ITEM",{query:r,success:o,failure:i},!0));else{var a=function(){return e("REQUEST_ITEM_PROCESSING",{query:r,success:o,failure:i})},u=function(){return document.hidden?a():setTimeout(a,32)};r.status===Fe.PROCESSING_COMPLETE||r.status===Fe.PROCESSING_REVERT_ERROR?r.revert(Xt(n.options.server.url,n.options.server.revert),t("GET_FORCE_REVERT")).then(u).catch((function(){})):r.status===Fe.PROCESSING&&r.abortProcessing().then(u)}})),PROCESS_ITEM:pn(n,(function(r,o,i){var a=t("GET_MAX_PARALLEL_UPLOADS");if(t("GET_ITEMS_BY_STATUS",Fe.PROCESSING).length!==a){if(r.status!==Fe.PROCESSING){var u=function t(){var r=n.processingQueue.shift();if(r){var o=r.id,i=r.success,a=r.failure,u=$e(n.items,o);u&&!u.archived?e("PROCESS_ITEM",{query:o,success:i,failure:a},!0):t()}};r.onOnce("process-complete",(function(){o(Ue(r)),u();var i=n.options.server;if(n.options.instantUpload&&r.origin===qe.LOCAL&&te(i.remove)){var a=function(){};r.origin=qe.LIMBO,n.options.server.remove(r.source,a,a)}t("GET_ITEMS_BY_STATUS",Fe.PROCESSING_COMPLETE).length===n.items.length&&e("DID_COMPLETE_ITEM_PROCESSING_ALL")})),r.onOnce("process-error",(function(e){i({error:e,file:Ue(r)}),u()}));var s=n.options;r.process(Zt(Wt(s.server.url,s.server.process,s.name,{chunkTransferId:r.transferId,chunkServer:s.server.patch,chunkUploads:s.chunkUploads,chunkForce:s.chunkForce,chunkSize:s.chunkSize,chunkRetryDelays:s.chunkRetryDelays}),{allowMinimumUploadDuration:t("GET_ALLOW_MINIMUM_UPLOAD_DURATION")}),(function(n,o,i){He("PREPARE_OUTPUT",n,{query:t,item:r}).then((function(t){e("DID_PREPARE_OUTPUT",{id:r.id,file:t}),o(t)})).catch(i)}))}}else n.processingQueue.push({id:r.id,success:o,failure:i})})),RETRY_ITEM_PROCESSING:pn(n,(function(t){e("REQUEST_ITEM_PROCESSING",{query:t})})),REQUEST_REMOVE_ITEM:pn(n,(function(n){fn(t("GET_BEFORE_REMOVE_FILE"),Ue(n)).then((function(t){t&&e("REMOVE_ITEM",{query:n})}))})),RELEASE_ITEM:pn(n,(function(e){e.release()})),REMOVE_ITEM:pn(n,(function(r,o,i,a){var u=function(){var t=r.id;rn(n.items,t).archive(),e("DID_REMOVE_ITEM",{error:null,id:t,item:r}),cn(e,n),o(Ue(r))},s=n.options.server;r.origin===qe.LOCAL&&s&&te(s.remove)&&!1!==a.remove?(e("DID_START_ITEM_REMOVE",{id:r.id}),s.remove(r.source,(function(){return u()}),(function(t){e("DID_THROW_ITEM_REMOVE_ERROR",{id:r.id,error:Ft("error",0,t,null),status:{main:sn(n.options.labelFileRemoveError)(t),sub:n.options.labelTapToRetry}})}))):((a.revert&&r.origin!==qe.LOCAL&&null!==r.serverId||n.options.chunkUploads&&r.file.size>n.options.chunkSize||n.options.chunkUploads&&n.options.chunkForce)&&r.revert(Xt(n.options.server.url,n.options.server.revert),t("GET_FORCE_REVERT")),u())})),ABORT_ITEM_LOAD:pn(n,(function(e){e.abortLoad()})),ABORT_ITEM_PROCESSING:pn(n,(function(t){t.serverId?e("REVERT_ITEM_PROCESSING",{id:t.id}):t.abortProcessing().then((function(){n.options.instantUpload&&e("REMOVE_ITEM",{query:t.id})}))})),REQUEST_REVERT_ITEM_PROCESSING:pn(n,(function(r){if(n.options.instantUpload){var o=function(t){t&&e("REVERT_ITEM_PROCESSING",{query:r})},i=t("GET_BEFORE_REMOVE_FILE");if(!i)return o(!0);var a=i(Ue(r));return null==a?o(!0):"boolean"===typeof a?o(a):void("function"===typeof a.then&&a.then(o))}e("REVERT_ITEM_PROCESSING",{query:r})})),REVERT_ITEM_PROCESSING:pn(n,(function(r){r.revert(Xt(n.options.server.url,n.options.server.revert),t("GET_FORCE_REVERT")).then((function(){(n.options.instantUpload||ln(r))&&e("REMOVE_ITEM",{query:r.id})})).catch((function(){}))})),SET_OPTIONS:function(t){var n=t.options,r=Object.keys(n),o=_n.filter((function(e){return r.includes(e)}));[].concat(Ae(o),Ae(Object.keys(n).filter((function(e){return!o.includes(e)})))).forEach((function(t){e("SET_"+Ie(t,"_").toUpperCase(),{value:n[t]})}))}}},_n=["server"],Tn=function(e){return e},In=function(e){return document.createElement(e)},vn=function(e,t){var n=e.childNodes[0];n?t!==n.nodeValue&&(n.nodeValue=t):(n=document.createTextNode(t),e.appendChild(n))},mn=function(e,t,n,r){var o=(r%360-90)*Math.PI/180;return{x:e+n*Math.cos(o),y:t+n*Math.sin(o)}},hn=function(e,t,n,r,o,i){var a=mn(e,t,n,o),u=mn(e,t,n,r);return["M",a.x,a.y,"A",n,n,0,i,0,u.x,u.y].join(" ")},gn=function(e,t,n,r,o){var i=1;return o>r&&o-r<=.5&&(i=0),r>o&&r-o>=.5&&(i=0),hn(e,t,n,360*Math.min(.9999,r),360*Math.min(.9999,o),i)},Rn=B({tag:"div",name:"progress-indicator",ignoreRectUpdate:!0,ignoreRect:!0,create:function(e){var t=e.root,n=e.props;n.spin=!1,n.progress=0,n.opacity=0;var r=c("svg");t.ref.path=c("path",{"stroke-width":2,"stroke-linecap":"round"}),r.appendChild(t.ref.path),t.ref.svg=r,t.appendChild(r)},write:function(e){var t=e.root,n=e.props;if(0!==n.opacity){n.align&&(t.element.dataset.align=n.align);var r=parseInt(a(t.ref.path,"stroke-width"),10),o=.5*t.rect.element.width,i=0,u=0;n.spin?(i=0,u=.5):(i=0,u=n.progress);var s=gn(o,o,o-r,i,u);a(t.ref.path,"d",s),a(t.ref.path,"stroke-opacity",n.spin||n.progress>0?1:0)}},mixins:{apis:["progress","spin","align"],styles:["opacity"],animations:{opacity:{type:"tween",duration:500},progress:{type:"spring",stiffness:.95,damping:.65,mass:10}}}}),On=B({tag:"button",attributes:{type:"button"},ignoreRect:!0,ignoreRectUpdate:!0,name:"file-action-button",mixins:{apis:["label"],styles:["translateX","translateY","scaleX","scaleY","opacity"],animations:{scaleX:"spring",scaleY:"spring",translateX:"spring",translateY:"spring",opacity:{type:"tween",duration:250}},listeners:!0},create:function(e){var t=e.root,n=e.props;t.element.innerHTML=(n.icon||"")+"<span>"+n.label+"</span>",n.isDisabled=!1},write:function(e){var t=e.root,n=e.props,r=n.isDisabled,o=t.query("GET_DISABLED")||0===n.opacity;o&&!r?(n.isDisabled=!0,a(t.element,"disabled","disabled")):!o&&r&&(n.isDisabled=!1,t.element.removeAttribute("disabled"))}}),yn=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:".",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1e3,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=r.labelBytes,i=void 0===o?"bytes":o,a=r.labelKilobytes,u=void 0===a?"KB":a,s=r.labelMegabytes,l=void 0===s?"MB":s,c=r.labelGigabytes,f=void 0===c?"GB":c,d=n,p=n*n,E=n*n*n;return(e=Math.round(Math.abs(e)))<d?e+" "+i:e<p?Math.floor(e/d)+" "+u:e<E?Dn(e/p,1,t)+" "+l:Dn(e/E,2,t)+" "+f},Dn=function(e,t,n){return e.toFixed(t).split(".").filter((function(e){return"0"!==e})).join(n)},Sn=function(e){var t=e.root,n=e.props,r=In("span");r.className="filepond--file-info-main",a(r,"aria-hidden","true"),t.appendChild(r),t.ref.fileName=r;var o=In("span");o.className="filepond--file-info-sub",t.appendChild(o),t.ref.fileSize=o,vn(o,t.query("GET_LABEL_FILE_WAITING_FOR_SIZE")),vn(r,Tn(t.query("GET_ITEM_NAME",n.id)))},An=function(e){var t=e.root,n=e.props;vn(t.ref.fileSize,yn(t.query("GET_ITEM_SIZE",n.id),".",t.query("GET_FILE_SIZE_BASE"),t.query("GET_FILE_SIZE_LABELS",t.query))),vn(t.ref.fileName,Tn(t.query("GET_ITEM_NAME",n.id)))},Ln=function(e){var t=e.root,n=e.props;J(t.query("GET_ITEM_SIZE",n.id))?An({root:t,props:n}):vn(t.ref.fileSize,t.query("GET_LABEL_FILE_SIZE_NOT_AVAILABLE"))},bn=B({name:"file-info",ignoreRect:!0,ignoreRectUpdate:!0,write:q({DID_LOAD_ITEM:An,DID_UPDATE_ITEM_META:An,DID_THROW_ITEM_LOAD_ERROR:Ln,DID_THROW_ITEM_INVALID:Ln}),didCreateView:function(e){We("CREATE_VIEW",Object.assign({},e,{view:e}))},create:Sn,mixins:{styles:["translateX","translateY"],animations:{translateX:"spring",translateY:"spring"}}}),Pn=function(e){return Math.round(100*e)},Mn=function(e){var t=e.root,n=In("span");n.className="filepond--file-status-main",t.appendChild(n),t.ref.main=n;var r=In("span");r.className="filepond--file-status-sub",t.appendChild(r),t.ref.sub=r,Nn({root:t,action:{progress:null}})},Nn=function(e){var t=e.root,n=e.action,r=null===n.progress?t.query("GET_LABEL_FILE_LOADING"):t.query("GET_LABEL_FILE_LOADING")+" "+Pn(n.progress)+"%";vn(t.ref.main,r),vn(t.ref.sub,t.query("GET_LABEL_TAP_TO_CANCEL"))},wn=function(e){var t=e.root;vn(t.ref.main,""),vn(t.ref.sub,"")},Cn=function(e){var t=e.root,n=e.action;vn(t.ref.main,n.status.main),vn(t.ref.sub,n.status.sub)},Gn=B({name:"file-status",ignoreRect:!0,ignoreRectUpdate:!0,write:q({DID_LOAD_ITEM:wn,DID_REVERT_ITEM_PROCESSING:wn,DID_REQUEST_ITEM_PROCESSING:function(e){var t=e.root;vn(t.ref.main,t.query("GET_LABEL_FILE_PROCESSING")),vn(t.ref.sub,t.query("GET_LABEL_TAP_TO_CANCEL"))},DID_ABORT_ITEM_PROCESSING:function(e){var t=e.root;vn(t.ref.main,t.query("GET_LABEL_FILE_PROCESSING_ABORTED")),vn(t.ref.sub,t.query("GET_LABEL_TAP_TO_RETRY"))},DID_COMPLETE_ITEM_PROCESSING:function(e){var t=e.root;vn(t.ref.main,t.query("GET_LABEL_FILE_PROCESSING_COMPLETE")),vn(t.ref.sub,t.query("GET_LABEL_TAP_TO_UNDO"))},DID_UPDATE_ITEM_PROCESS_PROGRESS:function(e){var t=e.root,n=e.action,r=null===n.progress?t.query("GET_LABEL_FILE_PROCESSING"):t.query("GET_LABEL_FILE_PROCESSING")+" "+Pn(n.progress)+"%";vn(t.ref.main,r),vn(t.ref.sub,t.query("GET_LABEL_TAP_TO_CANCEL"))},DID_UPDATE_ITEM_LOAD_PROGRESS:Nn,DID_THROW_ITEM_LOAD_ERROR:Cn,DID_THROW_ITEM_INVALID:Cn,DID_THROW_ITEM_PROCESSING_ERROR:Cn,DID_THROW_ITEM_PROCESSING_REVERT_ERROR:Cn,DID_THROW_ITEM_REMOVE_ERROR:Cn}),didCreateView:function(e){We("CREATE_VIEW",Object.assign({},e,{view:e}))},create:Mn,mixins:{styles:["translateX","translateY","opacity"],animations:{opacity:{type:"tween",duration:250},translateX:"spring",translateY:"spring"}}}),Un={AbortItemLoad:{label:"GET_LABEL_BUTTON_ABORT_ITEM_LOAD",action:"ABORT_ITEM_LOAD",className:"filepond--action-abort-item-load",align:"LOAD_INDICATOR_POSITION"},RetryItemLoad:{label:"GET_LABEL_BUTTON_RETRY_ITEM_LOAD",action:"RETRY_ITEM_LOAD",icon:"GET_ICON_RETRY",className:"filepond--action-retry-item-load",align:"BUTTON_PROCESS_ITEM_POSITION"},RemoveItem:{label:"GET_LABEL_BUTTON_REMOVE_ITEM",action:"REQUEST_REMOVE_ITEM",icon:"GET_ICON_REMOVE",className:"filepond--action-remove-item",align:"BUTTON_REMOVE_ITEM_POSITION"},ProcessItem:{label:"GET_LABEL_BUTTON_PROCESS_ITEM",action:"REQUEST_ITEM_PROCESSING",icon:"GET_ICON_PROCESS",className:"filepond--action-process-item",align:"BUTTON_PROCESS_ITEM_POSITION"},AbortItemProcessing:{label:"GET_LABEL_BUTTON_ABORT_ITEM_PROCESSING",action:"ABORT_ITEM_PROCESSING",className:"filepond--action-abort-item-processing",align:"BUTTON_PROCESS_ITEM_POSITION"},RetryItemProcessing:{label:"GET_LABEL_BUTTON_RETRY_ITEM_PROCESSING",action:"RETRY_ITEM_PROCESSING",icon:"GET_ICON_RETRY",className:"filepond--action-retry-item-processing",align:"BUTTON_PROCESS_ITEM_POSITION"},RevertItemProcessing:{label:"GET_LABEL_BUTTON_UNDO_ITEM_PROCESSING",action:"REQUEST_REVERT_ITEM_PROCESSING",icon:"GET_ICON_UNDO",className:"filepond--action-revert-item-processing",align:"BUTTON_PROCESS_ITEM_POSITION"}},Bn=[];o(Un,(function(e){Bn.push(e)}));var Fn=function(e){if("right"===Yn(e))return 0;var t=e.ref.buttonRemoveItem.rect.element;return t.hidden?null:t.width+t.left},qn=function(e){return e.ref.buttonAbortItemLoad.rect.element.width},Vn=function(e){return Math.floor(e.ref.buttonRemoveItem.rect.element.height/4)},xn=function(e){return Math.floor(e.ref.buttonRemoveItem.rect.element.left/2)},Yn=function(e){return e.query("GET_STYLE_BUTTON_REMOVE_ITEM_POSITION")},kn={buttonAbortItemLoad:{opacity:0},buttonRetryItemLoad:{opacity:0},buttonRemoveItem:{opacity:0},buttonProcessItem:{opacity:0},buttonAbortItemProcessing:{opacity:0},buttonRetryItemProcessing:{opacity:0},buttonRevertItemProcessing:{opacity:0},loadProgressIndicator:{opacity:0,align:function(e){return e.query("GET_STYLE_LOAD_INDICATOR_POSITION")}},processProgressIndicator:{opacity:0,align:function(e){return e.query("GET_STYLE_PROGRESS_INDICATOR_POSITION")}},processingCompleteIndicator:{opacity:0,scaleX:.75,scaleY:.75},info:{translateX:0,translateY:0,opacity:0},status:{translateX:0,translateY:0,opacity:0}},jn={buttonRemoveItem:{opacity:1},buttonProcessItem:{opacity:1},info:{translateX:Fn},status:{translateX:Fn}},Hn={buttonAbortItemProcessing:{opacity:1},processProgressIndicator:{opacity:1},status:{opacity:1}},Wn={DID_THROW_ITEM_INVALID:{buttonRemoveItem:{opacity:1},info:{translateX:Fn},status:{translateX:Fn,opacity:1}},DID_START_ITEM_LOAD:{buttonAbortItemLoad:{opacity:1},loadProgressIndicator:{opacity:1},status:{opacity:1}},DID_THROW_ITEM_LOAD_ERROR:{buttonRetryItemLoad:{opacity:1},buttonRemoveItem:{opacity:1},info:{translateX:Fn},status:{opacity:1}},DID_START_ITEM_REMOVE:{processProgressIndicator:{opacity:1,align:Yn},info:{translateX:Fn},status:{opacity:0}},DID_THROW_ITEM_REMOVE_ERROR:{processProgressIndicator:{opacity:0,align:Yn},buttonRemoveItem:{opacity:1},info:{translateX:Fn},status:{opacity:1,translateX:Fn}},DID_LOAD_ITEM:jn,DID_LOAD_LOCAL_ITEM:{buttonRemoveItem:{opacity:1},info:{translateX:Fn},status:{translateX:Fn}},DID_START_ITEM_PROCESSING:Hn,DID_REQUEST_ITEM_PROCESSING:Hn,DID_UPDATE_ITEM_PROCESS_PROGRESS:Hn,DID_COMPLETE_ITEM_PROCESSING:{buttonRevertItemProcessing:{opacity:1},info:{opacity:1},status:{opacity:1}},DID_THROW_ITEM_PROCESSING_ERROR:{buttonRemoveItem:{opacity:1},buttonRetryItemProcessing:{opacity:1},status:{opacity:1},info:{translateX:Fn}},DID_THROW_ITEM_PROCESSING_REVERT_ERROR:{buttonRevertItemProcessing:{opacity:1},status:{opacity:1},info:{opacity:1}},DID_ABORT_ITEM_PROCESSING:{buttonRemoveItem:{opacity:1},buttonProcessItem:{opacity:1},info:{translateX:Fn},status:{opacity:1}},DID_REVERT_ITEM_PROCESSING:jn},Xn=B({create:function(e){var t=e.root;t.element.innerHTML=t.query("GET_ICON_DONE")},name:"processing-complete-indicator",ignoreRect:!0,mixins:{styles:["scaleX","scaleY","opacity"],animations:{scaleX:"spring",scaleY:"spring",opacity:{type:"tween",duration:250}}}}),zn=function(e){var t,n=e.root,r=e.props,i=Object.keys(Un).reduce((function(e,t){return e[t]=Object.assign({},Un[t]),e}),{}),a=r.id,u=n.query("GET_ALLOW_REVERT"),s=n.query("GET_ALLOW_REMOVE"),l=n.query("GET_ALLOW_PROCESS"),c=n.query("GET_INSTANT_UPLOAD"),f=n.query("IS_ASYNC"),d=n.query("GET_STYLE_BUTTON_REMOVE_ITEM_ALIGN");f?l&&!u?t=function(e){return!/RevertItemProcessing/.test(e)}:!l&&u?t=function(e){return!/ProcessItem|RetryItemProcessing|AbortItemProcessing/.test(e)}:l||u||(t=function(e){return!/Process/.test(e)}):t=function(e){return!/Process/.test(e)};var p=t?Bn.filter(t):Bn.concat();if(c&&u&&(i.RevertItemProcessing.label="GET_LABEL_BUTTON_REMOVE_ITEM",i.RevertItemProcessing.icon="GET_ICON_REMOVE"),f&&!u){var E=Wn.DID_COMPLETE_ITEM_PROCESSING;E.info.translateX=xn,E.info.translateY=Vn,E.status.translateY=Vn,E.processingCompleteIndicator={opacity:1,scaleX:1,scaleY:1}}if(f&&!l&&(["DID_START_ITEM_PROCESSING","DID_REQUEST_ITEM_PROCESSING","DID_UPDATE_ITEM_PROCESS_PROGRESS","DID_THROW_ITEM_PROCESSING_ERROR"].forEach((function(e){Wn[e].status.translateY=Vn})),Wn.DID_THROW_ITEM_PROCESSING_ERROR.status.translateX=qn),d&&u){i.RevertItemProcessing.align="BUTTON_REMOVE_ITEM_POSITION";var _=Wn.DID_COMPLETE_ITEM_PROCESSING;_.info.translateX=Fn,_.status.translateY=Vn,_.processingCompleteIndicator={opacity:1,scaleX:1,scaleY:1}}s||(i.RemoveItem.disabled=!0),o(i,(function(e,t){var r=n.createChildView(On,{label:n.query(t.label),icon:n.query(t.icon),opacity:0});p.includes(e)&&n.appendChildView(r),t.disabled&&(r.element.setAttribute("disabled","disabled"),r.element.setAttribute("hidden","hidden")),r.element.dataset.align=n.query("GET_STYLE_"+t.align),r.element.classList.add(t.className),r.on("click",(function(e){e.stopPropagation(),t.disabled||n.dispatch(t.action,{query:a})})),n.ref["button"+e]=r})),n.ref.processingCompleteIndicator=n.appendChildView(n.createChildView(Xn)),n.ref.processingCompleteIndicator.element.dataset.align=n.query("GET_STYLE_BUTTON_PROCESS_ITEM_POSITION"),n.ref.info=n.appendChildView(n.createChildView(bn,{id:a})),n.ref.status=n.appendChildView(n.createChildView(Gn,{id:a}));var T=n.appendChildView(n.createChildView(Rn,{opacity:0,align:n.query("GET_STYLE_LOAD_INDICATOR_POSITION")}));T.element.classList.add("filepond--load-indicator"),n.ref.loadProgressIndicator=T;var I=n.appendChildView(n.createChildView(Rn,{opacity:0,align:n.query("GET_STYLE_PROGRESS_INDICATOR_POSITION")}));I.element.classList.add("filepond--process-indicator"),n.ref.processProgressIndicator=I,n.ref.activeStyles=[]},Qn=function(e){var t=e.root,n=e.actions,r=e.props;Zn({root:t,actions:n,props:r});var i=n.concat().filter((function(e){return/^DID_/.test(e.type)})).reverse().find((function(e){return Wn[e.type]}));if(i){t.ref.activeStyles=[];var a=Wn[i.type];o(kn,(function(e,n){var r=t.ref[e];o(n,(function(n,o){var i=a[e]&&"undefined"!==typeof a[e][n]?a[e][n]:o;t.ref.activeStyles.push({control:r,key:n,value:i})}))}))}t.ref.activeStyles.forEach((function(e){var n=e.control,r=e.key,o=e.value;n[r]="function"===typeof o?o(t):o}))},Zn=q({DID_SET_LABEL_BUTTON_ABORT_ITEM_PROCESSING:function(e){var t=e.root,n=e.action;t.ref.buttonAbortItemProcessing.label=n.value},DID_SET_LABEL_BUTTON_ABORT_ITEM_LOAD:function(e){var t=e.root,n=e.action;t.ref.buttonAbortItemLoad.label=n.value},DID_SET_LABEL_BUTTON_ABORT_ITEM_REMOVAL:function(e){var t=e.root,n=e.action;t.ref.buttonAbortItemRemoval.label=n.value},DID_REQUEST_ITEM_PROCESSING:function(e){var t=e.root;t.ref.processProgressIndicator.spin=!0,t.ref.processProgressIndicator.progress=0},DID_START_ITEM_LOAD:function(e){var t=e.root;t.ref.loadProgressIndicator.spin=!0,t.ref.loadProgressIndicator.progress=0},DID_START_ITEM_REMOVE:function(e){var t=e.root;t.ref.processProgressIndicator.spin=!0,t.ref.processProgressIndicator.progress=0},DID_UPDATE_ITEM_LOAD_PROGRESS:function(e){var t=e.root,n=e.action;t.ref.loadProgressIndicator.spin=!1,t.ref.loadProgressIndicator.progress=n.progress},DID_UPDATE_ITEM_PROCESS_PROGRESS:function(e){var t=e.root,n=e.action;t.ref.processProgressIndicator.spin=!1,t.ref.processProgressIndicator.progress=n.progress}}),Kn=B({create:zn,write:Qn,didCreateView:function(e){We("CREATE_VIEW",Object.assign({},e,{view:e}))},name:"file"}),$n=B({create:function(e){var t=e.root,n=e.props;t.ref.fileName=In("legend"),t.appendChild(t.ref.fileName),t.ref.file=t.appendChildView(t.createChildView(Kn,{id:n.id})),t.ref.data=!1},ignoreRect:!0,write:q({DID_LOAD_ITEM:function(e){var t=e.root,n=e.props;vn(t.ref.fileName,Tn(t.query("GET_ITEM_NAME",n.id)))}}),didCreateView:function(e){We("CREATE_VIEW",Object.assign({},e,{view:e}))},tag:"fieldset",name:"file-wrapper"}),Jn={type:"spring",damping:.6,mass:7},er=function(e){var t=e.root,n=e.props;[{name:"top"},{name:"center",props:{translateY:null,scaleY:null},mixins:{animations:{scaleY:Jn},styles:["translateY","scaleY"]}},{name:"bottom",props:{translateY:null},mixins:{animations:{translateY:Jn},styles:["translateY"]}}].forEach((function(e){tr(t,e,n.name)})),t.element.classList.add("filepond--"+n.name),t.ref.scalable=null},tr=function(e,t,n){var r=B({name:"panel-"+t.name+" filepond--"+n,mixins:t.mixins,ignoreRectUpdate:!0}),o=e.createChildView(r,t.props);e.ref[t.name]=e.appendChildView(o)},nr=B({name:"panel",read:function(e){var t=e.root;return e.props.heightCurrent=t.ref.bottom.translateY},write:function(e){var t=e.root,n=e.props;if(null!==t.ref.scalable&&n.scalable===t.ref.scalable||(t.ref.scalable=!X(n.scalable)||n.scalable,t.element.dataset.scalable=t.ref.scalable),n.height){var r=t.ref.top.rect.element,o=t.ref.bottom.rect.element,i=Math.max(r.height+o.height,n.height);t.ref.center.translateY=r.height,t.ref.center.scaleY=(i-r.height-o.height)/100,t.ref.bottom.translateY=i-o.height}},create:er,ignoreRect:!0,mixins:{apis:["height","heightCurrent","scalable"]}}),rr=function(e){var t=e.map((function(e){return e.id})),n=void 0;return{setIndex:function(e){n=e},getIndex:function(){return n},getItemIndex:function(e){return t.indexOf(e.id)}}},or={type:"spring",stiffness:.75,damping:.45,mass:10},ir="spring",ar={DID_START_ITEM_LOAD:"busy",DID_UPDATE_ITEM_LOAD_PROGRESS:"loading",DID_THROW_ITEM_INVALID:"load-invalid",DID_THROW_ITEM_LOAD_ERROR:"load-error",DID_LOAD_ITEM:"idle",DID_THROW_ITEM_REMOVE_ERROR:"remove-error",DID_START_ITEM_REMOVE:"busy",DID_START_ITEM_PROCESSING:"busy processing",DID_REQUEST_ITEM_PROCESSING:"busy processing",DID_UPDATE_ITEM_PROCESS_PROGRESS:"processing",DID_COMPLETE_ITEM_PROCESSING:"processing-complete",DID_THROW_ITEM_PROCESSING_ERROR:"processing-error",DID_THROW_ITEM_PROCESSING_REVERT_ERROR:"processing-revert-error",DID_ABORT_ITEM_PROCESSING:"cancelled",DID_REVERT_ITEM_PROCESSING:"idle"},ur=function(e){var t=e.root,n=e.props;if(t.ref.handleClick=function(e){return t.dispatch("DID_ACTIVATE_ITEM",{id:n.id})},t.element.id="filepond--item-"+n.id,t.element.addEventListener("click",t.ref.handleClick),t.ref.container=t.appendChildView(t.createChildView($n,{id:n.id})),t.ref.panel=t.appendChildView(t.createChildView(nr,{name:"item-panel"})),t.ref.panel.height=null,n.markedForRemoval=!1,t.query("GET_ALLOW_REORDER")){t.element.dataset.dragState="idle";var r=function(e){if(e.isPrimary){var r=!1,o={x:e.pageX,y:e.pageY};n.dragOrigin={x:t.translateX,y:t.translateY},n.dragCenter={x:e.offsetX,y:e.offsetY};var i=rr(t.query("GET_ACTIVE_ITEMS"));t.dispatch("DID_GRAB_ITEM",{id:n.id,dragState:i});var a=function(e){e.isPrimary&&(e.stopPropagation(),e.preventDefault(),n.dragOffset={x:e.pageX-o.x,y:e.pageY-o.y},n.dragOffset.x*n.dragOffset.x+n.dragOffset.y*n.dragOffset.y>16&&!r&&(r=!0,t.element.removeEventListener("click",t.ref.handleClick)),t.dispatch("DID_DRAG_ITEM",{id:n.id,dragState:i}))},u=function e(u){u.isPrimary&&(document.removeEventListener("pointermove",a),document.removeEventListener("pointerup",e),n.dragOffset={x:u.pageX-o.x,y:u.pageY-o.y},t.dispatch("DID_DROP_ITEM",{id:n.id,dragState:i}),r&&setTimeout((function(){return t.element.addEventListener("click",t.ref.handleClick)}),0))};document.addEventListener("pointermove",a),document.addEventListener("pointerup",u)}};t.element.addEventListener("pointerdown",r)}},sr=q({DID_UPDATE_PANEL_HEIGHT:function(e){var t=e.root,n=e.action;t.height=n.height}}),lr=q({DID_GRAB_ITEM:function(e){var t=e.root;e.props.dragOrigin={x:t.translateX,y:t.translateY}},DID_DRAG_ITEM:function(e){e.root.element.dataset.dragState="drag"},DID_DROP_ITEM:function(e){var t=e.root,n=e.props;n.dragOffset=null,n.dragOrigin=null,t.element.dataset.dragState="drop"}},(function(e){var t=e.root,n=e.actions,r=e.props,o=e.shouldOptimize;"drop"===t.element.dataset.dragState&&t.scaleX<=1&&(t.element.dataset.dragState="idle");var i=n.concat().filter((function(e){return/^DID_/.test(e.type)})).reverse().find((function(e){return ar[e.type]}));i&&i.type!==r.currentState&&(r.currentState=i.type,t.element.dataset.filepondItemState=ar[r.currentState]||"");var a=t.query("GET_ITEM_PANEL_ASPECT_RATIO")||t.query("GET_PANEL_ASPECT_RATIO");a?o||(t.height=t.rect.element.width*a):(sr({root:t,actions:n,props:r}),!t.height&&t.ref.container.rect.element.height>0&&(t.height=t.ref.container.rect.element.height)),o&&(t.ref.panel.height=null),t.ref.panel.height=t.height})),cr=B({create:ur,write:lr,destroy:function(e){var t=e.root,n=e.props;t.element.removeEventListener("click",t.ref.handleClick),t.dispatch("RELEASE_ITEM",{query:n.id})},tag:"li",name:"item",mixins:{apis:["id","interactionMethod","markedForRemoval","spawnDate","dragCenter","dragOrigin","dragOffset"],styles:["translateX","translateY","scaleX","scaleY","opacity","height"],animations:{scaleX:ir,scaleY:ir,translateX:or,translateY:or,opacity:{type:"tween",duration:150}}}}),fr=function(e,t){return Math.max(1,Math.floor((e+1)/t))},dr=function(e,t,n){if(n){var r=e.rect.element.width,o=t.length,i=null;if(0===o||n.top<t[0].rect.element.top)return-1;var a=t[0].rect.element,u=a.marginLeft+a.marginRight,s=a.width+u,l=fr(r,s);if(1===l){for(var c=0;c<o;c++){var f=t[c],d=f.rect.outer.top+.5*f.rect.element.height;if(n.top<d)return c}return o}for(var p=a.marginTop+a.marginBottom,E=a.height+p,_=0;_<o;_++){var T=_%l*s,I=Math.floor(_/l)*E,v=I-a.marginTop,m=T+s,h=I+E+a.marginBottom;if(n.top<h&&n.top>v){if(n.left<m)return _;i=_!==o-1?_:null}}return null!==i?i:o}},pr={height:0,width:0,get getHeight(){return this.height},set setHeight(e){0!==this.height&&0!==e||(this.height=e)},get getWidth(){return this.width},set setWidth(e){0!==this.width&&0!==e||(this.width=e)},setDimensions:function(e,t){0!==this.height&&0!==e||(this.height=e),0!==this.width&&0!==t||(this.width=t)}},Er=function(e){var t=e.root;a(t.element,"role","list"),t.ref.lastItemSpanwDate=Date.now()},_r=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1;e.dragOffset?(e.translateX=null,e.translateY=null,e.translateX=e.dragOrigin.x+e.dragOffset.x,e.translateY=e.dragOrigin.y+e.dragOffset.y,e.scaleX=1.025,e.scaleY=1.025):(e.translateX=t,e.translateY=n,Date.now()>e.spawnDate&&(0===e.opacity&&Tr(e,t,n,r,o),e.scaleX=1,e.scaleY=1,e.opacity=1))},Tr=function(e,t,n,r,o){e.interactionMethod===ge.NONE?(e.translateX=null,e.translateX=t,e.translateY=null,e.translateY=n):e.interactionMethod===ge.DROP?(e.translateX=null,e.translateX=t-20*r,e.translateY=null,e.translateY=n-10*o,e.scaleX=.8,e.scaleY=.8):e.interactionMethod===ge.BROWSE?(e.translateY=null,e.translateY=n-30):e.interactionMethod===ge.API&&(e.translateX=null,e.translateX=t-30,e.translateY=null)},Ir=function(e){return e.rect.element.height+.5*e.rect.element.marginBottom+.5*e.rect.element.marginTop},vr=function(e){return e.rect.element.width+.5*e.rect.element.marginLeft+.5*e.rect.element.marginRight},mr=q({DID_ADD_ITEM:function(e){var t=e.root,n=e.action,r=n.id,o=n.index,i=n.interactionMethod;t.ref.addIndex=o;var a=Date.now(),u=a,s=1;if(i!==ge.NONE){s=0;var l=t.query("GET_ITEM_INSERT_INTERVAL"),c=a-t.ref.lastItemSpanwDate;u=c<l?a+(l-c):a}t.ref.lastItemSpanwDate=u,t.appendChildView(t.createChildView(cr,{spawnDate:u,id:r,opacity:s,interactionMethod:i}),o)},DID_REMOVE_ITEM:function(e){var t=e.root,n=e.action.id,r=t.childViews.find((function(e){return e.id===n}));r&&(r.scaleX=.9,r.scaleY=.9,r.opacity=0,r.markedForRemoval=!0)},DID_DRAG_ITEM:function(e){var t=e.root,n=e.action,r=n.id,o=n.dragState,i=t.query("GET_ITEM",{id:r}),a=t.childViews.find((function(e){return e.id===r})),u=t.childViews.length,s=o.getItemIndex(i);if(a){var l={x:a.dragOrigin.x+a.dragOffset.x+a.dragCenter.x,y:a.dragOrigin.y+a.dragOffset.y+a.dragCenter.y},c=Ir(a),f=vr(a),d=Math.floor(t.rect.outer.width/f);d>u&&(d=u);var p=Math.floor(u/d+1);pr.setHeight=c*p,pr.setWidth=f*d;var E={y:Math.floor(l.y/c),x:Math.floor(l.x/f),getGridIndex:function(){return l.y>pr.getHeight||l.y<0||l.x>pr.getWidth||l.x<0?s:this.y*d+this.x},getColIndex:function(){for(var e=t.query("GET_ACTIVE_ITEMS"),n=t.childViews.filter((function(e){return e.rect.element.height})),r=e.map((function(e){return n.find((function(t){return t.id===e.id}))})),o=r.findIndex((function(e){return e===a})),i=Ir(a),u=r.length,s=u,c=0,f=0,d=0;d<u;d++)if(c=(f=c)+Ir(r[d]),l.y<c){if(o>d){if(l.y<f+i){s=d;break}continue}s=d;break}return s}},_=d>1?E.getGridIndex():E.getColIndex();t.dispatch("MOVE_ITEM",{query:a,index:_});var T=o.getIndex();if(void 0===T||T!==_){if(o.setIndex(_),void 0===T)return;t.dispatch("DID_REORDER_ITEMS",{items:t.query("GET_ACTIVE_ITEMS"),origin:s,target:_})}}}}),hr=B({create:Er,write:function(e){var t=e.root,n=e.props,r=e.actions,o=e.shouldOptimize;mr({root:t,props:n,actions:r});var i=n.dragCoordinates,a=t.rect.element.width,u=t.childViews.filter((function(e){return e.rect.element.height})),s=t.query("GET_ACTIVE_ITEMS").map((function(e){return u.find((function(t){return t.id===e.id}))})).filter((function(e){return e})),l=i?dr(t,s,i):null,c=t.ref.addIndex||null;t.ref.addIndex=null;var f=0,d=0,p=0;if(0!==s.length){var E=s[0].rect.element,_=E.marginTop+E.marginBottom,T=E.marginLeft+E.marginRight,I=E.width+T,v=E.height+_,m=fr(a,I);if(1===m){var h=0,g=0;s.forEach((function(e,t){if(l){var n=t-l;g=-2===n?.25*-_:-1===n?.75*-_:0===n?.75*_:1===n?.25*_:0}o&&(e.translateX=null,e.translateY=null),e.markedForRemoval||_r(e,0,h+g);var r=(e.rect.element.height+_)*(e.markedForRemoval?e.opacity:1);h+=r}))}else{var R=0,O=0;s.forEach((function(e,t){t===l&&(f=1),t===c&&(p+=1),e.markedForRemoval&&e.opacity<.5&&(d-=1);var n=t+p+f+d,r=n%m,i=Math.floor(n/m),a=r*I,u=i*v,s=Math.sign(a-R),E=Math.sign(u-O);R=a,O=u,e.markedForRemoval||(o&&(e.translateX=null,e.translateY=null),_r(e,a,u,s,E))}))}}},tag:"ul",name:"list",didWriteView:function(e){var t=e.root;t.childViews.filter((function(e){return e.markedForRemoval&&0===e.opacity&&e.resting})).forEach((function(e){e._destroy(),t.removeChildView(e)}))},filterFrameActionsForChild:function(e,t){return t.filter((function(t){return!t.data||!t.data.id||e.id===t.data.id}))},mixins:{apis:["dragCoordinates"]}}),gr=function(e){var t=e.root,n=e.props;t.ref.list=t.appendChildView(t.createChildView(hr)),n.dragCoordinates=null,n.overflowing=!1},Rr=q({DID_DRAG:function(e){var t=e.root,n=e.props,r=e.action;t.query("GET_ITEM_INSERT_LOCATION_FREEDOM")&&(n.dragCoordinates={left:r.position.scopeLeft-t.ref.list.rect.element.left,top:r.position.scopeTop-(t.rect.outer.top+t.rect.element.marginTop+t.rect.element.scrollTop)})},DID_END_DRAG:function(e){e.props.dragCoordinates=null}}),Or=B({create:gr,write:function(e){var t=e.root,n=e.props,r=e.actions;if(Rr({root:t,props:n,actions:r}),t.ref.list.dragCoordinates=n.dragCoordinates,n.overflowing&&!n.overflow&&(n.overflowing=!1,t.element.dataset.state="",t.height=null),n.overflow){var o=Math.round(n.overflow);o!==t.height&&(n.overflowing=!0,t.element.dataset.state="overflow",t.height=o)}},name:"list-scroller",mixins:{apis:["overflow","dragCoordinates"],styles:["height","translateY"],animations:{translateY:"spring"}}}),yr=function(e,t,n){n?a(e,t,arguments.length>3&&void 0!==arguments[3]?arguments[3]:""):e.removeAttribute(t)},Dr=function(e){if(e&&""!==e.value){try{e.value=""}catch(o){}if(e.value){var t=In("form"),n=e.parentNode,r=e.nextSibling;t.appendChild(e),t.reset(),r?n.insertBefore(e,r):n.appendChild(e)}}},Sr=function(e){var t=e.root,n=e.props;t.element.id="filepond--browser-"+n.id,a(t.element,"name",t.query("GET_NAME")),a(t.element,"aria-controls","filepond--assistant-"+n.id),a(t.element,"aria-labelledby","filepond--drop-label-"+n.id),Ar({root:t,action:{value:t.query("GET_ACCEPTED_FILE_TYPES")}}),Lr({root:t,action:{value:t.query("GET_ALLOW_MULTIPLE")}}),br({root:t,action:{value:t.query("GET_ALLOW_DIRECTORIES_ONLY")}}),Pr({root:t}),Mr({root:t,action:{value:t.query("GET_REQUIRED")}}),Nr({root:t,action:{value:t.query("GET_CAPTURE_METHOD")}}),t.ref.handleChange=function(e){if(t.element.value){var r=Array.from(t.element.files).map((function(e){return e._relativePath=e.webkitRelativePath,e}));setTimeout((function(){n.onload(r),Dr(t.element)}),250)}},t.element.addEventListener("change",t.ref.handleChange)},Ar=function(e){var t=e.root,n=e.action;t.query("GET_ALLOW_SYNC_ACCEPT_ATTRIBUTE")&&yr(t.element,"accept",!!n.value,n.value?n.value.join(","):"")},Lr=function(e){var t=e.root,n=e.action;yr(t.element,"multiple",n.value)},br=function(e){var t=e.root,n=e.action;yr(t.element,"webkitdirectory",n.value)},Pr=function(e){var t=e.root,n=t.query("GET_DISABLED"),r=t.query("GET_ALLOW_BROWSE"),o=n||!r;yr(t.element,"disabled",o)},Mr=function(e){var t=e.root;e.action.value?0===t.query("GET_TOTAL_ITEMS")&&yr(t.element,"required",!0):yr(t.element,"required",!1)},Nr=function(e){var t=e.root,n=e.action;yr(t.element,"capture",!!n.value,!0===n.value?"":n.value)},wr=function(e){var t=e.root,n=t.element;t.query("GET_TOTAL_ITEMS")>0?(yr(n,"required",!1),yr(n,"name",!1)):(yr(n,"name",!0,t.query("GET_NAME")),t.query("GET_CHECK_VALIDITY")&&n.setCustomValidity(""),t.query("GET_REQUIRED")&&yr(n,"required",!0))},Cr=B({tag:"input",name:"browser",ignoreRect:!0,ignoreRectUpdate:!0,attributes:{type:"file"},create:Sr,destroy:function(e){var t=e.root;t.element.removeEventListener("change",t.ref.handleChange)},write:q({DID_LOAD_ITEM:wr,DID_REMOVE_ITEM:wr,DID_THROW_ITEM_INVALID:function(e){var t=e.root;t.query("GET_CHECK_VALIDITY")&&t.element.setCustomValidity(t.query("GET_LABEL_INVALID_FIELD"))},DID_SET_DISABLED:Pr,DID_SET_ALLOW_BROWSE:Pr,DID_SET_ALLOW_DIRECTORIES_ONLY:br,DID_SET_ALLOW_MULTIPLE:Lr,DID_SET_ACCEPTED_FILE_TYPES:Ar,DID_SET_CAPTURE_METHOD:Nr,DID_SET_REQUIRED:Mr})}),Gr={ENTER:13,SPACE:32},Ur=function(e){var t=e.root,n=e.props,r=In("label");a(r,"for","filepond--browser-"+n.id),a(r,"id","filepond--drop-label-"+n.id),a(r,"aria-hidden","true"),t.ref.handleKeyDown=function(e){(e.keyCode===Gr.ENTER||e.keyCode===Gr.SPACE)&&(e.preventDefault(),t.ref.label.click())},t.ref.handleClick=function(e){e.target===r||r.contains(e.target)||t.ref.label.click()},r.addEventListener("keydown",t.ref.handleKeyDown),t.element.addEventListener("click",t.ref.handleClick),Br(r,n.caption),t.appendChild(r),t.ref.label=r},Br=function(e,t){e.innerHTML=t;var n=e.querySelector(".filepond--label-action");return n&&a(n,"tabindex","0"),t},Fr=B({name:"drop-label",ignoreRect:!0,create:Ur,destroy:function(e){var t=e.root;t.ref.label.addEventListener("keydown",t.ref.handleKeyDown),t.element.removeEventListener("click",t.ref.handleClick)},write:q({DID_SET_LABEL_IDLE:function(e){var t=e.root,n=e.action;Br(t.ref.label,n.value)}}),mixins:{styles:["opacity","translateX","translateY"],animations:{opacity:{type:"tween",duration:150},translateX:"spring",translateY:"spring"}}}),qr=B({name:"drip-blob",ignoreRect:!0,mixins:{styles:["translateX","translateY","scaleX","scaleY","opacity"],animations:{scaleX:"spring",scaleY:"spring",translateX:"spring",translateY:"spring",opacity:{type:"tween",duration:250}}}}),Vr=function(e){var t=e.root,n=.5*t.rect.element.width,r=.5*t.rect.element.height;t.ref.blob=t.appendChildView(t.createChildView(qr,{opacity:0,scaleX:2.5,scaleY:2.5,translateX:n,translateY:r}))},xr=function(e){var t=e.root,n=e.props,r=e.actions;Yr({root:t,props:n,actions:r});var o=t.ref.blob;0===r.length&&o&&0===o.opacity&&(t.removeChildView(o),t.ref.blob=null)},Yr=q({DID_DRAG:function(e){var t=e.root,n=e.action;t.ref.blob?(t.ref.blob.translateX=n.position.scopeLeft,t.ref.blob.translateY=n.position.scopeTop,t.ref.blob.scaleX=1,t.ref.blob.scaleY=1,t.ref.blob.opacity=1):Vr({root:t})},DID_DROP:function(e){var t=e.root;t.ref.blob&&(t.ref.blob.scaleX=2.5,t.ref.blob.scaleY=2.5,t.ref.blob.opacity=0)},DID_END_DRAG:function(e){var t=e.root;t.ref.blob&&(t.ref.blob.opacity=0)}}),kr=B({ignoreRect:!0,ignoreRectUpdate:!0,name:"drip",write:xr}),jr=function(e,t){try{var n=new DataTransfer;t.forEach((function(e){e instanceof File?n.items.add(e):n.items.add(new File([e],e.name,{type:e.type}))})),e.files=n.files}catch(r){return!1}return!0},Hr=function(e){return e.root.ref.fields={}},Wr=function(e,t){return e.ref.fields[t]},Xr=function(e){e.query("GET_ACTIVE_ITEMS").forEach((function(t){e.ref.fields[t.id]&&e.element.appendChild(e.ref.fields[t.id])}))},zr=function(e){var t=e.root;return Xr(t)},Qr=q({DID_SET_DISABLED:function(e){var t=e.root;t.element.disabled=t.query("GET_DISABLED")},DID_ADD_ITEM:function(e){var t=e.root,n=e.action,r=!(t.query("GET_ITEM",n.id).origin===qe.LOCAL)&&t.query("SHOULD_UPDATE_FILE_INPUT"),o=In("input");o.type=r?"file":"hidden",o.name=t.query("GET_NAME"),o.disabled=t.query("GET_DISABLED"),t.ref.fields[n.id]=o,Xr(t)},DID_LOAD_ITEM:function(e){var t=e.root,n=e.action,r=Wr(t,n.id);if(r&&(null!==n.serverFileReference&&(r.value=n.serverFileReference),t.query("SHOULD_UPDATE_FILE_INPUT"))){var o=t.query("GET_ITEM",n.id);jr(r,[o.file])}},DID_REMOVE_ITEM:function(e){var t=e.root,n=e.action,r=Wr(t,n.id);r&&(r.parentNode&&r.parentNode.removeChild(r),delete t.ref.fields[n.id])},DID_DEFINE_VALUE:function(e){var t=e.root,n=e.action,r=Wr(t,n.id);r&&(null===n.value?r.removeAttribute("value"):r.value=n.value,Xr(t))},DID_PREPARE_OUTPUT:function(e){var t=e.root,n=e.action;t.query("SHOULD_UPDATE_FILE_INPUT")&&setTimeout((function(){var e=Wr(t,n.id);e&&jr(e,[n.file])}),0)},DID_REORDER_ITEMS:zr,DID_SORT_ITEMS:zr}),Zr=B({tag:"fieldset",name:"data",create:Hr,write:Qr,ignoreRect:!0}),Kr=function(e){return"getRootNode"in e?e.getRootNode():document},$r=["jpg","jpeg","png","gif","bmp","webp","svg","tiff"],Jr=["css","csv","html","txt"],eo={zip:"zip|compressed",epub:"application/epub+zip"},to=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return e=e.toLowerCase(),$r.includes(e)?"image/"+("jpg"===e?"jpeg":"svg"===e?"svg+xml":e):Jr.includes(e)?"text/"+e:eo[e]||""},no=function(e){return new Promise((function(t,n){var r=po(e);if(r.length&&!ro(e))return t(r);oo(e).then(t)}))},ro=function(e){return!!e.files&&e.files.length>0},oo=function(e){return new Promise((function(t,n){var r=(e.items?Array.from(e.items):[]).filter((function(e){return io(e)})).map((function(e){return ao(e)}));r.length?Promise.all(r).then((function(e){var n=[];e.forEach((function(e){n.push.apply(n,e)})),t(n.filter((function(e){return e})).map((function(e){return e._relativePath||(e._relativePath=e.webkitRelativePath),e})))})).catch(console.error):t(e.files?Array.from(e.files):[])}))},io=function(e){if(co(e)){var t=fo(e);if(t)return t.isFile||t.isDirectory}return"file"===e.kind},ao=function(e){return new Promise((function(t,n){lo(e)?uo(fo(e)).then(t).catch(n):t([e.getAsFile()])}))},uo=function(e){return new Promise((function(t,n){var r=[],o=0,i=0,a=function(){0===i&&0===o&&t(r)},u=function e(t){o++;var u=t.createReader(),s=function t(){u.readEntries((function(n){if(0===n.length)return o--,void a();n.forEach((function(t){t.isDirectory?e(t):(i++,t.file((function(e){var n=so(e);t.fullPath&&(n._relativePath=t.fullPath),r.push(n),i--,a()})))})),t()}),n)};s()};u(e)}))},so=function(e){if(e.type.length)return e;var t=e.lastModifiedDate,n=e.name,r=to(vt(e.name));return r.length?((e=e.slice(0,e.size,r)).name=n,e.lastModifiedDate=t,e):e},lo=function(e){return co(e)&&(fo(e)||{}).isDirectory},co=function(e){return"webkitGetAsEntry"in e},fo=function(e){return e.webkitGetAsEntry()},po=function(e){var t=[];try{if((t=_o(e)).length)return t;t=Eo(e)}catch(n){}return t},Eo=function(e){var t=e.getData("url");return"string"===typeof t&&t.length?[t]:[]},_o=function(e){var t=e.getData("text/html");if("string"===typeof t&&t.length){var n=t.match(/src\s*=\s*"(.+?)"/);if(n)return[n[1]]}return[]},To=[],Io=function(e){return{pageLeft:e.pageX,pageTop:e.pageY,scopeLeft:e.offsetX||e.layerX,scopeTop:e.offsetY||e.layerY}},vo=function(e,t,n){var r=mo(t),o={element:e,filterElement:n,state:null,ondrop:function(){},onenter:function(){},ondrag:function(){},onexit:function(){},onload:function(){},allowdrop:function(){}};return o.destroy=r.addListener(o),o},mo=function(e){var t=To.find((function(t){return t.element===e}));if(t)return t;var n=ho(e);return To.push(n),n},ho=function(e){var t=[],n={dragenter:Do,dragover:So,dragleave:Lo,drop:Ao},r={};o(n,(function(n,o){r[n]=o(e,t),e.addEventListener(n,r[n],!1)}));var i={element:e,addListener:function(a){return t.push(a),function(){t.splice(t.indexOf(a),1),0===t.length&&(To.splice(To.indexOf(i),1),o(n,(function(t){e.removeEventListener(t,r[t],!1)})))}}};return i},go=function(e,t){return"elementFromPoint"in e||(e=document),e.elementFromPoint(t.x,t.y)},Ro=function(e,t){var n=Kr(t),r=go(n,{x:e.pageX-window.pageXOffset,y:e.pageY-window.pageYOffset});return r===t||t.contains(r)},Oo=null,yo=function(e,t){try{e.dropEffect=t}catch(n){}},Do=function(e,t){return function(e){e.preventDefault(),Oo=e.target,t.forEach((function(t){var n=t.element,r=t.onenter;Ro(e,n)&&(t.state="enter",r(Io(e)))}))}},So=function(e,t){return function(e){e.preventDefault();var n=e.dataTransfer;no(n).then((function(r){var o=!1;t.some((function(t){var i=t.filterElement,a=t.element,u=t.onenter,s=t.onexit,l=t.ondrag,c=t.allowdrop;yo(n,"copy");var f=c(r);if(f)if(Ro(e,a)){if(o=!0,null===t.state)return t.state="enter",void u(Io(e));if(t.state="over",i&&!f)return void yo(n,"none");l(Io(e))}else i&&!o&&yo(n,"none"),t.state&&(t.state=null,s(Io(e)));else yo(n,"none")}))}))}},Ao=function(e,t){return function(e){e.preventDefault();var n=e.dataTransfer;no(n).then((function(n){t.forEach((function(t){var r=t.filterElement,o=t.element,i=t.ondrop,a=t.onexit,u=t.allowdrop;if(t.state=null,!r||Ro(e,o))return u(n)?void i(Io(e),n):a(Io(e))}))}))}},Lo=function(e,t){return function(e){Oo===e.target&&t.forEach((function(t){var n=t.onexit;t.state=null,n(Io(e))}))}},bo=function(e,t,n){e.classList.add("filepond--hopper");var r=n.catchesDropsOnPage,o=n.requiresDropOnElement,i=n.filterItems,a=void 0===i?function(e){return e}:i,u=vo(e,r?document.documentElement:e,o),s="",l="";u.allowdrop=function(e){return t(a(e))},u.ondrop=function(e,n){var r=a(n);t(r)?(l="drag-drop",c.onload(r,e)):c.ondragend(e)},u.ondrag=function(e){c.ondrag(e)},u.onenter=function(e){l="drag-over",c.ondragstart(e)},u.onexit=function(e){l="drag-exit",c.ondragend(e)};var c={updateHopperState:function(){s!==l&&(e.dataset.hopperState=l,s=l)},onload:function(){},ondragstart:function(){},ondrag:function(){},ondragend:function(){},destroy:function(){u.destroy()}};return c},Po=!1,Mo=[],No=function(e){var t=document.activeElement;if(t&&/textarea|input/i.test(t.nodeName)){for(var n=!1,r=t;r!==document.body;){if(r.classList.contains("filepond--root")){n=!0;break}r=r.parentNode}if(!n)return}no(e.clipboardData).then((function(e){e.length&&Mo.forEach((function(t){return t(e)}))}))},wo=function(e){Mo.includes(e)||(Mo.push(e),Po||(Po=!0,document.addEventListener("paste",No)))},Co=function(e){Me(Mo,Mo.indexOf(e)),0===Mo.length&&(document.removeEventListener("paste",No),Po=!1)},Go=function(){var e=function(e){t.onload(e)},t={destroy:function(){Co(e)},onload:function(){}};return wo(e),t},Uo=null,Bo=null,Fo=[],qo=function(e,t){e.element.textContent=t},Vo=function(e){e.element.textContent=""},xo=function(e,t,n){var r=e.query("GET_TOTAL_ITEMS");qo(e,n+" "+t+", "+r+" "+(1===r?e.query("GET_LABEL_FILE_COUNT_SINGULAR"):e.query("GET_LABEL_FILE_COUNT_PLURAL"))),clearTimeout(Bo),Bo=setTimeout((function(){Vo(e)}),1500)},Yo=function(e){return e.element.parentNode.contains(document.activeElement)},ko=function(e){var t=e.root,n=e.action,r=t.query("GET_ITEM",n.id).filename,o=t.query("GET_LABEL_FILE_PROCESSING_ABORTED");qo(t,r+" "+o)},jo=function(e){var t=e.root,n=e.action,r=t.query("GET_ITEM",n.id).filename;qo(t,n.status.main+" "+r+" "+n.status.sub)},Ho=B({create:function(e){var t=e.root,n=e.props;t.element.id="filepond--assistant-"+n.id,a(t.element,"role","status"),a(t.element,"aria-live","polite"),a(t.element,"aria-relevant","additions")},ignoreRect:!0,ignoreRectUpdate:!0,write:q({DID_LOAD_ITEM:function(e){var t=e.root,n=e.action;if(Yo(t)){t.element.textContent="";var r=t.query("GET_ITEM",n.id);Fo.push(r.filename),clearTimeout(Uo),Uo=setTimeout((function(){xo(t,Fo.join(", "),t.query("GET_LABEL_FILE_ADDED")),Fo.length=0}),750)}},DID_REMOVE_ITEM:function(e){var t=e.root,n=e.action;if(Yo(t)){var r=n.item;xo(t,r.filename,t.query("GET_LABEL_FILE_REMOVED"))}},DID_COMPLETE_ITEM_PROCESSING:function(e){var t=e.root,n=e.action,r=t.query("GET_ITEM",n.id).filename,o=t.query("GET_LABEL_FILE_PROCESSING_COMPLETE");qo(t,r+" "+o)},DID_ABORT_ITEM_PROCESSING:ko,DID_REVERT_ITEM_PROCESSING:ko,DID_THROW_ITEM_REMOVE_ERROR:jo,DID_THROW_ITEM_LOAD_ERROR:jo,DID_THROW_ITEM_INVALID:jo,DID_THROW_ITEM_PROCESSING_ERROR:jo}),tag:"span",name:"assistant"}),Wo=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"-";return e.replace(new RegExp(t+".","g"),(function(e){return e.charAt(1).toUpperCase()}))},Xo=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:16,n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],r=Date.now(),o=null;return function(){for(var i=arguments.length,a=new Array(i),u=0;u<i;u++)a[u]=arguments[u];clearTimeout(o);var s=Date.now()-r,l=function(){r=Date.now(),e.apply(void 0,a)};s<t?n||(o=setTimeout(l,t-s)):l()}},zo=1e6,Qo=function(e){return e.preventDefault()},Zo=function(e){var t=e.root,n=e.props,r=t.query("GET_ID");r&&(t.element.id=r);var o=t.query("GET_CLASS_NAME");o&&o.split(" ").filter((function(e){return e.length})).forEach((function(e){t.element.classList.add(e)})),t.ref.label=t.appendChildView(t.createChildView(Fr,Object.assign({},n,{translateY:null,caption:t.query("GET_LABEL_IDLE")}))),t.ref.list=t.appendChildView(t.createChildView(Or,{translateY:null})),t.ref.panel=t.appendChildView(t.createChildView(nr,{name:"panel-root"})),t.ref.assistant=t.appendChildView(t.createChildView(Ho,Object.assign({},n))),t.ref.data=t.appendChildView(t.createChildView(Zr,Object.assign({},n))),t.ref.measure=In("div"),t.ref.measure.style.height="100%",t.element.appendChild(t.ref.measure),t.ref.bounds=null,t.query("GET_STYLES").filter((function(e){return!k(e.value)})).map((function(e){var n=e.name,r=e.value;t.element.dataset[n]=r})),t.ref.widthPrevious=null,t.ref.widthUpdated=Xo((function(){t.ref.updateHistory=[],t.dispatch("DID_RESIZE_ROOT")}),250),t.ref.previousAspectRatio=null,t.ref.updateHistory=[];var i=window.matchMedia("(pointer: fine) and (hover: hover)").matches,a="PointerEvent"in window;t.query("GET_ALLOW_REORDER")&&a&&!i&&(t.element.addEventListener("touchmove",Qo,{passive:!1}),t.element.addEventListener("gesturestart",Qo));var u=t.query("GET_CREDITS");if(2===u.length){var s=document.createElement("a");s.className="filepond--credits",s.setAttribute("aria-hidden","true"),s.href=u[0],s.tabindex=-1,s.target="_blank",s.rel="noopener noreferrer",s.textContent=u[1],t.element.appendChild(s),t.ref.credits=s}},Ko=function(e){var t=e.root,n=e.props,r=e.actions;if(ai({root:t,props:n,actions:r}),r.filter((function(e){return/^DID_SET_STYLE_/.test(e.type)})).filter((function(e){return!k(e.data.value)})).map((function(e){var n=e.type,r=e.data,o=Wo(n.substring(8).toLowerCase(),"_");t.element.dataset[o]=r.value,t.invalidateLayout()})),!t.rect.element.hidden){t.rect.element.width!==t.ref.widthPrevious&&(t.ref.widthPrevious=t.rect.element.width,t.ref.widthUpdated());var o=t.ref.bounds;o||(o=t.ref.bounds=ei(t),t.element.removeChild(t.ref.measure),t.ref.measure=null);var i=t.ref,a=i.hopper,u=i.label,s=i.list,l=i.panel;a&&a.updateHopperState();var c=t.query("GET_PANEL_ASPECT_RATIO"),f=t.query("GET_ALLOW_MULTIPLE"),d=t.query("GET_TOTAL_ITEMS"),p=d===(f?t.query("GET_MAX_FILES")||zo:1),E=r.find((function(e){return"DID_ADD_ITEM"===e.type}));if(p&&E){var _=E.data.interactionMethod;u.opacity=0,f?u.translateY=-40:_===ge.API?u.translateX=40:_===ge.BROWSE?u.translateY=40:u.translateY=30}else p||(u.opacity=1,u.translateX=0,u.translateY=0);var T=$o(t),I=Jo(t),v=u.rect.element.height,m=!f||p?0:v,h=p?s.rect.element.marginTop:0,g=0===d?0:s.rect.element.marginBottom,R=m+h+I.visual+g,O=m+h+I.bounds+g;if(s.translateY=Math.max(0,m-s.rect.element.marginTop)-T.top,c){var y=t.rect.element.width,D=y*c;c!==t.ref.previousAspectRatio&&(t.ref.previousAspectRatio=c,t.ref.updateHistory=[]);var S=t.ref.updateHistory;S.push(y);var A=2;if(S.length>2*A)for(var L=S.length,b=L-10,P=0,M=L;M>=b;M--)if(S[M]===S[M-2]&&P++,P>=A)return;l.scalable=!1,l.height=D;var N=D-m-(g-T.bottom)-(p?h:0);I.visual>N?s.overflow=N:s.overflow=null,t.height=D}else if(o.fixedHeight){l.scalable=!1;var w=o.fixedHeight-m-(g-T.bottom)-(p?h:0);I.visual>w?s.overflow=w:s.overflow=null}else if(o.cappedHeight){var C=R>=o.cappedHeight,G=Math.min(o.cappedHeight,R);l.scalable=!0,l.height=C?G:G-T.top-T.bottom;var U=G-m-(g-T.bottom)-(p?h:0);R>o.cappedHeight&&I.visual>U?s.overflow=U:s.overflow=null,t.height=Math.min(o.cappedHeight,O-T.top-T.bottom)}else{var B=d>0?T.top+T.bottom:0;l.scalable=!0,l.height=Math.max(v,R-B),t.height=Math.max(v,O-B)}t.ref.credits&&l.heightCurrent&&(t.ref.credits.style.transform="translateY("+l.heightCurrent+"px)")}},$o=function(e){var t=e.ref.list.childViews[0].childViews[0];return t?{top:t.rect.element.marginTop,bottom:t.rect.element.marginBottom}:{top:0,bottom:0}},Jo=function(e){var t=0,n=0,r=e.ref.list,o=r.childViews[0],i=o.childViews.filter((function(e){return e.rect.element.height})),a=e.query("GET_ACTIVE_ITEMS").map((function(e){return i.find((function(t){return t.id===e.id}))})).filter((function(e){return e}));if(0===a.length)return{visual:t,bounds:n};var u=o.rect.element.width,s=dr(o,a,r.dragCoordinates),l=a[0].rect.element,c=l.marginTop+l.marginBottom,f=l.marginLeft+l.marginRight,d=l.width+f,p=l.height+c,E="undefined"!==typeof s&&s>=0?1:0,_=a.find((function(e){return e.markedForRemoval&&e.opacity<.45}))?-1:0,T=a.length+E+_,I=fr(u,d);return 1===I?a.forEach((function(e){var r=e.rect.element.height+c;n+=r,t+=r*e.opacity})):(n=Math.ceil(T/I)*p,t=n),{visual:t,bounds:n}},ei=function(e){var t=e.ref.measureHeight||null;return{cappedHeight:parseInt(e.style.maxHeight,10)||null,fixedHeight:0===t?null:t}},ti=function(e,t){var n=e.query("GET_ALLOW_REPLACE"),r=e.query("GET_ALLOW_MULTIPLE"),o=e.query("GET_TOTAL_ITEMS"),i=e.query("GET_MAX_FILES"),a=t.length;return(!r&&a>1||!(!r&&n)&&!!(J(i=r?i:1)&&o+a>i))&&(e.dispatch("DID_THROW_MAX_FILES",{source:t,error:Ft("warning",0,"Max files")}),!0)},ni=function(e,t,n){var r=e.childViews[0];return dr(r,t,{left:n.scopeLeft-r.rect.element.left,top:n.scopeTop-(e.rect.outer.top+e.rect.element.marginTop+e.rect.element.scrollTop)})},ri=function(e){var t=e.query("GET_ALLOW_DROP"),n=e.query("GET_DISABLED"),r=t&&!n;if(r&&!e.ref.hopper){var o=bo(e.element,(function(t){var n=e.query("GET_BEFORE_DROP_FILE")||function(){return!0};return!e.query("GET_DROP_VALIDATION")||t.every((function(t){return We("ALLOW_HOPPER_ITEM",t,{query:e.query}).every((function(e){return!0===e}))&&n(t)}))}),{filterItems:function(t){var n=e.query("GET_IGNORED_FILES");return t.filter((function(e){return!Jt(e)||!n.includes(e.name.toLowerCase())}))},catchesDropsOnPage:e.query("GET_DROP_ON_PAGE"),requiresDropOnElement:e.query("GET_DROP_ON_ELEMENT")});o.onload=function(t,n){var r=e.ref.list.childViews[0].childViews.filter((function(e){return e.rect.element.height})),o=e.query("GET_ACTIVE_ITEMS").map((function(e){return r.find((function(t){return t.id===e.id}))})).filter((function(e){return e}));He("ADD_ITEMS",t,{dispatch:e.dispatch}).then((function(t){if(ti(e,t))return!1;e.dispatch("ADD_ITEMS",{items:t,index:ni(e.ref.list,o,n),interactionMethod:ge.DROP})})),e.dispatch("DID_DROP",{position:n}),e.dispatch("DID_END_DRAG",{position:n})},o.ondragstart=function(t){e.dispatch("DID_START_DRAG",{position:t})},o.ondrag=Xo((function(t){e.dispatch("DID_DRAG",{position:t})})),o.ondragend=function(t){e.dispatch("DID_END_DRAG",{position:t})},e.ref.hopper=o,e.ref.drip=e.appendChildView(e.createChildView(kr))}else!r&&e.ref.hopper&&(e.ref.hopper.destroy(),e.ref.hopper=null,e.removeChildView(e.ref.drip))},oi=function(e,t){var n=e.query("GET_ALLOW_BROWSE"),r=e.query("GET_DISABLED"),o=n&&!r;o&&!e.ref.browser?e.ref.browser=e.appendChildView(e.createChildView(Cr,Object.assign({},t,{onload:function(t){He("ADD_ITEMS",t,{dispatch:e.dispatch}).then((function(t){if(ti(e,t))return!1;e.dispatch("ADD_ITEMS",{items:t,index:-1,interactionMethod:ge.BROWSE})}))}})),0):!o&&e.ref.browser&&(e.removeChildView(e.ref.browser),e.ref.browser=null)},ii=function(e){var t=e.query("GET_ALLOW_PASTE"),n=e.query("GET_DISABLED"),r=t&&!n;r&&!e.ref.paster?(e.ref.paster=Go(),e.ref.paster.onload=function(t){He("ADD_ITEMS",t,{dispatch:e.dispatch}).then((function(t){if(ti(e,t))return!1;e.dispatch("ADD_ITEMS",{items:t,index:-1,interactionMethod:ge.PASTE})}))}):!r&&e.ref.paster&&(e.ref.paster.destroy(),e.ref.paster=null)},ai=q({DID_SET_ALLOW_BROWSE:function(e){var t=e.root,n=e.props;oi(t,n)},DID_SET_ALLOW_DROP:function(e){var t=e.root;ri(t)},DID_SET_ALLOW_PASTE:function(e){var t=e.root;ii(t)},DID_SET_DISABLED:function(e){var t=e.root,n=e.props;ri(t),ii(t),oi(t,n),t.query("GET_DISABLED")?t.element.dataset.disabled="disabled":t.element.removeAttribute("data-disabled")}}),ui=B({name:"root",read:function(e){var t=e.root;t.ref.measure&&(t.ref.measureHeight=t.ref.measure.offsetHeight)},create:Zo,write:Ko,destroy:function(e){var t=e.root;t.ref.paster&&t.ref.paster.destroy(),t.ref.hopper&&t.ref.hopper.destroy(),t.element.removeEventListener("touchmove",Qo),t.element.removeEventListener("gesturestart",Qo)},mixins:{styles:["height"]}}),si=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=null,r=Qe(),o=n(Te(r),[ft,he(r)],[En,me(r)]);o.dispatch("SET_OPTIONS",{options:e});var a=function(){document.hidden||o.dispatch("KICK")};document.addEventListener("visibilitychange",a);var u=null,s=!1,l=!1,c=null,f=null,d=function(){s||(s=!0),clearTimeout(u),u=setTimeout((function(){s=!1,c=null,f=null,l&&(l=!1,o.dispatch("DID_STOP_RESIZE"))}),500)};window.addEventListener("resize",d);var p=ui(o,{id:Re()}),E=!1,_=!1,T={_read:function(){s&&(f=window.innerWidth,c||(c=f),l||f===c||(o.dispatch("DID_START_RESIZE"),l=!0)),_&&E&&(E=null===p.element.offsetParent),E||(p._read(),_=p.rect.element.hidden)},_write:function(e){var t=o.processActionQueue().filter((function(e){return!/^SET_/.test(e.type)}));E&&!t.length||(g(t),E=p._write(e,t,l),Be(o.query("GET_ITEMS")),E&&o.processDispatchQueue())}},I=function(e){return function(t){var n={type:e};if(!t)return n;if(t.hasOwnProperty("error")&&(n.error=t.error?Object.assign({},t.error):null),t.status&&(n.status=Object.assign({},t.status)),t.file&&(n.output=t.file),t.source)n.file=t.source;else if(t.item||t.id){var r=t.item?t.item:o.query("GET_ITEM",t.id);n.file=r?Ue(r):null}return t.items&&(n.items=t.items.map(Ue)),/progress/.test(e)&&(n.progress=t.progress),t.hasOwnProperty("origin")&&t.hasOwnProperty("target")&&(n.origin=t.origin,n.target=t.target),n}},v={DID_DESTROY:I("destroy"),DID_INIT:I("init"),DID_THROW_MAX_FILES:I("warning"),DID_INIT_ITEM:I("initfile"),DID_START_ITEM_LOAD:I("addfilestart"),DID_UPDATE_ITEM_LOAD_PROGRESS:I("addfileprogress"),DID_LOAD_ITEM:I("addfile"),DID_THROW_ITEM_INVALID:[I("error"),I("addfile")],DID_THROW_ITEM_LOAD_ERROR:[I("error"),I("addfile")],DID_THROW_ITEM_REMOVE_ERROR:[I("error"),I("removefile")],DID_PREPARE_OUTPUT:I("preparefile"),DID_START_ITEM_PROCESSING:I("processfilestart"),DID_UPDATE_ITEM_PROCESS_PROGRESS:I("processfileprogress"),DID_ABORT_ITEM_PROCESSING:I("processfileabort"),DID_COMPLETE_ITEM_PROCESSING:I("processfile"),DID_COMPLETE_ITEM_PROCESSING_ALL:I("processfiles"),DID_REVERT_ITEM_PROCESSING:I("processfilerevert"),DID_THROW_ITEM_PROCESSING_ERROR:[I("error"),I("processfile")],DID_REMOVE_ITEM:I("removefile"),DID_UPDATE_ITEMS:I("updatefiles"),DID_ACTIVATE_ITEM:I("activatefile"),DID_REORDER_ITEMS:I("reorderfiles")},m=function(e){var t=Object.assign({pond:C},e);delete t.type,p.element.dispatchEvent(new CustomEvent("FilePond:"+e.type,{detail:t,bubbles:!0,cancelable:!0,composed:!0}));var n=[];e.hasOwnProperty("error")&&n.push(e.error),e.hasOwnProperty("file")&&n.push(e.file);var r=["type","error","file"];Object.keys(e).filter((function(e){return!r.includes(e)})).forEach((function(t){return n.push(e[t])})),C.fire.apply(C,[e.type].concat(n));var i=o.query("GET_ON"+e.type.toUpperCase());i&&i.apply(void 0,n)},g=function(e){e.length&&e.filter((function(e){return v[e.type]})).forEach((function(e){var t=v[e.type];(Array.isArray(t)?t:[t]).forEach((function(t){"DID_INIT_ITEM"===e.type?m(t(e.data)):setTimeout((function(){m(t(e.data))}),0)}))}))},R=function(e){return o.dispatch("SET_OPTIONS",{options:e})},O=function(e){return o.query("GET_ACTIVE_ITEM",e)},y=function(e){return new Promise((function(t,n){o.dispatch("REQUEST_ITEM_PREPARE",{query:e,success:function(e){t(e)},failure:function(e){n(e)}})}))},D=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return new Promise((function(n,r){L([{source:e,options:t}],{index:t.index}).then((function(e){return n(e&&e[0])})).catch(r)}))},S=function(e){return e.file&&e.id},A=function(e,t){return"object"!==typeof e||S(e)||t||(t=e,e=void 0),o.dispatch("REMOVE_ITEM",Object.assign({},t,{query:e})),null===o.query("GET_ACTIVE_ITEM",e)},L=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return new Promise((function(e,n){var r=[],i={};if(Y(t[0]))r.push.apply(r,t[0]),Object.assign(i,t[1]||{});else{var a=t[t.length-1];"object"!==typeof a||a instanceof Blob||Object.assign(i,t.pop()),r.push.apply(r,t)}o.dispatch("ADD_ITEMS",{items:r,index:i.index,interactionMethod:ge.API,success:e,failure:n})}))},b=function(){return o.query("GET_ACTIVE_ITEMS")},P=function(e){return new Promise((function(t,n){o.dispatch("REQUEST_ITEM_PROCESSING",{query:e,success:function(e){t(e)},failure:function(e){n(e)}})}))},M=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=Array.isArray(t[0])?t[0]:t,o=r.length?r:b();return Promise.all(o.map(y))},N=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=Array.isArray(t[0])?t[0]:t;if(!r.length){var o=b().filter((function(e){return!(e.status===Fe.IDLE&&e.origin===qe.LOCAL)&&e.status!==Fe.PROCESSING&&e.status!==Fe.PROCESSING_COMPLETE&&e.status!==Fe.PROCESSING_REVERT_ERROR}));return Promise.all(o.map(P))}return Promise.all(r.map(P))},w=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r,o=Array.isArray(t[0])?t[0]:t;"object"===typeof o[o.length-1]?r=o.pop():Array.isArray(t[0])&&(r=t[1]);var i=b();return o.length?o.map((function(e){return h(e)?i[e]?i[e].id:null:e})).filter((function(e){return e})).map((function(e){return A(e,r)})):Promise.all(i.map((function(e){return A(e,r)})))},C=Object.assign({},we(),{},T,{},ve(o,r),{setOptions:R,addFile:D,addFiles:L,getFile:O,processFile:P,prepareFile:y,removeFile:A,moveFile:function(e,t){return o.dispatch("MOVE_ITEM",{query:e,index:t})},getFiles:b,processFiles:N,removeFiles:w,prepareFiles:M,sort:function(e){return o.dispatch("SORT",{compare:e})},browse:function(){var e=p.element.querySelector("input[type=file]");e&&e.click()},destroy:function(){C.fire("destroy",p.element),o.dispatch("ABORT_ALL"),p._destroy(),window.removeEventListener("resize",d),document.removeEventListener("visibilitychange",a),o.dispatch("DID_DESTROY")},insertBefore:function(e){return V(p.element,e)},insertAfter:function(e){return x(p.element,e)},appendTo:function(e){return e.appendChild(p.element)},replaceElement:function(e){V(p.element,e),e.parentNode.removeChild(e),t=e},restoreElement:function(){t&&(x(t,p.element),p.element.parentNode.removeChild(p.element),t=null)},isAttachedTo:function(e){return p.element===e||t===e},element:{get:function(){return p.element}},status:{get:function(){return o.query("GET_STATUS")}}});return o.dispatch("DID_INIT"),i(C)},li=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={};return o(Qe(),(function(e,n){t[e]=n[0]})),si(Object.assign({},t,{},e))},ci=function(e){return e.charAt(0).toLowerCase()+e.slice(1)},fi=function(e){return Wo(e.replace(/^data-/,""))},di=function e(t,n){o(n,(function(n,r){o(t,(function(e,o){var i=new RegExp(n);if(i.test(e)&&(delete t[e],!1!==r))if(Q(r))t[r]=o;else{var a=r.group;ue(r)&&!t[a]&&(t[a]={}),t[a][ci(e.replace(i,""))]=o}})),r.mapping&&e(t[r.group],r.mapping)}))},pi=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=[];o(e.attributes,(function(t){n.push(e.attributes[t])}));var r=n.filter((function(e){return e.name})).reduce((function(t,n){var r=a(e,n.name);return t[fi(n.name)]=r===n.name||r,t}),{});return di(r,t),r},Ei=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n={"^class$":"className","^multiple$":"allowMultiple","^capture$":"captureMethod","^webkitdirectory$":"allowDirectoriesOnly","^server":{group:"server",mapping:{"^process":{group:"process"},"^revert":{group:"revert"},"^fetch":{group:"fetch"},"^restore":{group:"restore"},"^load":{group:"load"}}},"^type$":!1,"^files$":!1};We("SET_ATTRIBUTE_TO_OPTION_MAP",n);var r=Object.assign({},t),o=pi("FIELDSET"===e.nodeName?e.querySelector("input[type=file]"):e,n);Object.keys(o).forEach((function(e){ue(o[e])?(ue(r[e])||(r[e]={}),Object.assign(r[e],o[e])):r[e]=o[e]})),r.files=(t.files||[]).concat(Array.from(e.querySelectorAll("input:not([type=file])")).map((function(e){return{source:e.value,options:{type:e.dataset.type}}})));var i=li(r);return e.files&&Array.from(e.files).forEach((function(e){i.addFile(e)})),i.replaceElement(e),i},_i=function(){return t(arguments.length<=0?void 0:arguments[0])?Ei.apply(void 0,arguments):li.apply(void 0,arguments)},Ti=["fire","_read","_write"],Ii=function(e){var t={};return Ce(e,t,Ti),t},vi=function(e,t){return e.replace(/(?:{([a-zA-Z]+)})/g,(function(e,n){return t[n]}))},mi=function(e){var t=new Blob(["(",e.toString(),")()"],{type:"application/javascript"}),n=URL.createObjectURL(t),r=new Worker(n);return{transfer:function(e,t){},post:function(e,t,n){var o=Re();r.onmessage=function(e){e.data.id===o&&t(e.data.message)},r.postMessage({id:o,message:e},n)},terminate:function(){r.terminate(),URL.revokeObjectURL(n)}}},hi=function(e){return new Promise((function(t,n){var r=new Image;r.onload=function(){t(r)},r.onerror=function(e){n(e)},r.src=e}))},gi=function(e,t){var n=e.slice(0,e.size,e.type);return n.lastModifiedDate=e.lastModifiedDate,n.name=t,n},Ri=function(e){return gi(e,e.name)},Oi=[],yi=function(e){if(!Oi.includes(e)){Oi.push(e);var t=e({addFilter:Xe,utils:{Type:ke,forin:o,isString:Q,isFile:Jt,toNaturalFileSize:yn,replaceInString:vi,getExtensionFromFilename:vt,getFilenameWithoutExtension:Kt,guesstimateMimeType:to,getFileFromBlob:Rt,getFilenameFromURL:It,createRoute:q,createWorker:mi,createView:B,createItemAPI:Ue,loadImage:hi,copyFile:Ri,renameFile:gi,createBlob:yt,applyFilterChain:He,text:vn,getNumericAspectRatioFromString:Je},views:{fileActionButton:On}});ze(t.options)}},Di=function(){return"[object OperaMini]"===Object.prototype.toString.call(window.operamini)},Si=function(){return"Promise"in window},Ai=function(){return"slice"in Blob.prototype},Li=function(){return"URL"in window&&"createObjectURL"in window.URL},bi=function(){return"visibilityState"in document},Pi=function(){return"performance"in window},Mi=function(){return"supports"in(window.CSS||{})},Ni=function(){return/MSIE|Trident/.test(window.navigator.userAgent)},wi=function(){var e=_()&&!Di()&&bi()&&Si()&&Ai()&&Li()&&Pi()&&(Mi()||Ni());return function(){return e}}(),Ci={apps:[]},Gi="filepond",Ui=function(){};if(e.Status={},e.FileStatus={},e.FileOrigin={},e.OptionTypes={},e.create=Ui,e.destroy=Ui,e.parse=Ui,e.find=Ui,e.registerPlugin=Ui,e.getOptions=Ui,e.setOptions=Ui,wi()){F((function(){Ci.apps.forEach((function(e){return e._read()}))}),(function(e){Ci.apps.forEach((function(t){return t._write(e)}))}));var Bi=function t(){document.dispatchEvent(new CustomEvent("FilePond:loaded",{detail:{supported:wi,create:e.create,destroy:e.destroy,parse:e.parse,find:e.find,registerPlugin:e.registerPlugin,setOptions:e.setOptions}})),document.removeEventListener("DOMContentLoaded",t)};"loading"!==document.readyState?setTimeout((function(){return Bi()}),0):document.addEventListener("DOMContentLoaded",Bi);var Fi=function(){return o(Qe(),(function(t,n){e.OptionTypes[t]=n[1]}))};e.Status=Object.assign({},tt),e.FileOrigin=Object.assign({},qe),e.FileStatus=Object.assign({},Fe),e.OptionTypes={},Fi(),e.create=function(){var t=_i.apply(void 0,arguments);return t.on("destroy",e.destroy),Ci.apps.push(t),Ii(t)},e.destroy=function(e){var t=Ci.apps.findIndex((function(t){return t.isAttachedTo(e)}));return t>=0&&(Ci.apps.splice(t,1)[0].restoreElement(),!0)},e.parse=function(t){return Array.from(t.querySelectorAll("."+Gi)).filter((function(e){return!Ci.apps.find((function(t){return t.isAttachedTo(e)}))})).map((function(t){return e.create(t)}))},e.find=function(e){var t=Ci.apps.find((function(t){return t.isAttachedTo(e)}));return t?Ii(t):null},e.registerPlugin=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];t.forEach(yi),Fi()},e.getOptions=function(){var e={};return o(Qe(),(function(t,n){e[t]=n[0]})),e},e.setOptions=function(t){return ue(t)&&(Ci.apps.forEach((function(e){e.setOptions(t)})),Ze(t)),e.getOptions()}}e.supported=wi,Object.defineProperty(e,"__esModule",{value:!0})}(t)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=44.71d61cef.chunk.js.map