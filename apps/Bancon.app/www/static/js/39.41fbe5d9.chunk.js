(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[39],{377:function(e,t,a){"use strict";a.r(t),a.d(t,"default",(function(){return g}));var n=a(16),c=a(11),i=a(8),s=a(151),r=a(270),o=a(38),u=a(6),l=a(500),b=a(33),d=a(153),f=a(51),j=a(20),p=a(499),O=a(154),m=a(508),h=a(501),T=a(271),_=a(569),x=a(434),v=a.n(x),E=a(10);function g(e){var t=e.fromWidget,a=Object(i.b)(),x=Object(f.qb)(),g=c.b.useState(!1),w=Object(n.a)(g,2),A=w[0],N=w[1],S=c.b.useState(!1),R=Object(n.a)(S,2),D=R[0],M=R[1],k=Object(i.c)(s.c.fetching),P=Object(i.c)(d.c.transactionsFetching),y=Object(i.c)(s.c.loanSimulation),U=Object(i.c)(s.c.loanAmount),C=Object(i.c)(s.c.offer),F=Object(i.c)(b.e.token),I=Object(i.c)(s.c.selectedLoanTerm),L=Object(i.c)(b.e.token),B=Object(i.c)(s.c.idCreateLoanTransaction),V=Object(i.c)(d.c.transaction),Y=Object(i.c)(O.c.filename),H=Object(i.c)(O.c.content),W=Object(i.c)(O.c.fetchedFile),z=Object(m.a)(Y),K=k||P,G=void 0!==(null===V||void 0===V?void 0:V.idTransactionStatus),J="spa.loan.simulate.step5",X="".concat(J,G?".success":".rejected"),Z=Object(p.a)();if(c.b.useEffect((function(){return function(){a(d.a.clean())}}),[a]),c.b.useEffect((function(){L&&B&&a(d.b.readTransaction({accessToken:L,idTransaction:B}))}),[a,L,B]),c.b.useEffect((function(){(D||A)&&F&&B&&(W||Y||H?(Y&&H&&(A&&(Z(z,Object(h.a)(H)),N(!1)),D&&(Object(T.a)({options:{message:Y,subject:Y},files:[{fileName:z,base64File:H}]}),M(!1))),a(O.a.setFetchedFile(!1))):a(O.b.generatePdf({token:F,idTransaction:B})))}),[H,a,A,W,Y,z,Z,B,D,F]),!y||!C||!I||K)return Object(E.jsx)(r.a,{});var q=y.loanSimulationCBTAmount,Q=y.loanSimulationNominalAnnualRate,$=y.loanSimulationEffectiveAnualRate,ee=y.loanSimulationCFTAnual,te=C.accountNumber,ae=I.loanSimulationTerm;return Object(E.jsx)(_.a,{className:v.a.step5Container,finishButtonText:"spa.form.finish",handleDownload:function(){N(!0)},handleFinish:function(){a(s.a.clean()),x(t?j.m:j.s)},handleShare:function(){M(!0)},isDownloadable:G,isShareable:G,statusCustomMessage:X,subtitle:{label:"".concat(J,".finance.amount"),dataValue:Object(E.jsx)(l.a,{amount:q,currency:u.b})},title:{label:"".concat(J,".title"),dataValue:Object(E.jsx)(l.a,{amount:U,currency:u.b})},transactionDate:null===V||void 0===V?void 0:V.creationDateTime,transactionStatus:null===V||void 0===V?void 0:V.idTransactionStatus,children:Object(E.jsxs)("div",{className:v.a.step5DetailsContainer,children:[Object(E.jsxs)("div",{children:[Object(E.jsx)(o.b,{tag:"p",uuid:"spa.loan.simulate.step4.account"}),Object(E.jsx)(o.b,{children:te})]}),Object(E.jsxs)("div",{children:[Object(E.jsx)(o.b,{tag:"p",uuid:"spa.loan.simulate.step4.fee"}),Object(E.jsx)(o.b,{children:ae})]}),Object(E.jsxs)("div",{children:[Object(E.jsx)(o.b,{tag:"p",uuid:"spa.loan.simulate.step4.tna"}),Object(E.jsx)(l.a,{amount:Q,currency:u.D,suffix:u.jb})]}),Object(E.jsxs)("div",{children:[Object(E.jsx)(o.b,{tag:"p",uuid:"spa.loan.simulate.step4.tea"}),Object(E.jsx)(l.a,{amount:$,currency:u.D,suffix:u.jb})]}),Object(E.jsxs)("div",{children:[Object(E.jsx)(o.b,{tag:"p",uuid:"spa.loan.simulate.step4.cft"}),Object(E.jsx)(l.a,{amount:ee,currency:u.D,suffix:u.jb})]})]})})}},499:function(e,t,a){"use strict";a.d(t,"a",(function(){return f}));var n=a(0),c=a(5);function i(e){var t=e.filename,a=e.path,n=e.flags;return new Promise((function(e,c){var i;function s(e){c(e)}(i=window.cordova.file[a],new Promise((function(e,t){window.resolveLocalFileSystemURL(i,(function(t){e(t)}),(function(e){t(e)}))}))).then((function(a){var c=a;c.getFile(t,n,(function(t){var a=new FileReader;t.createWriter((function(n){e({fileEntry:t,dirEntry:c,fileReader:a,fileWriter:n,fileWrite:function(e){return new Promise((function(t,a){n.onwriteend=function(){return t(n)},n.onerror=function(e){return a(e)},n.write(e)}))},fileRemove:function(){return new Promise((function(e,a){t.remove((function(){return e(!0)}),(function(e){return a(e)}))}))}})}),s)}),s)}))}))}var s=a(36),r=a(26),o=a(28);function u(){return l.apply(this,arguments)}function l(){return(l=Object(c.a)(Object(n.a)().mark((function e(){var t;return Object(n.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(r.c)();case 2:if(e.sent&&cordova.plugins){e.next=5;break}throw r.a.CORDOVA_UNAVAILABLE;case 5:if(t=cordova.plugins.fileOpener2){e.next=8;break}throw r.a.PLUGIN_UNAVAILABLE;case 8:return e.abrupt("return",t);case 9:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function b(e){return d.apply(this,arguments)}function d(){return d=Object(c.a)(Object(n.a)().mark((function e(t){var a,c,i,s,l;return Object(n.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a=t.contentType,c=t.fileName,i=t.withDialog,e.next=3,Object(r.c)();case 3:if(e.sent){e.next=6;break}throw r.a.CORDOVA_UNAVAILABLE;case 6:return e.next=8,u();case 8:return s=e.sent,l=i?s.open:s.showOpenWithDialog,e.abrupt("return",new Promise((function(e,t){try{l(c,a,{success:function(){e({code:o.a.SUCCESS,value:!0})},error:function(e){function t(t){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}((function(e){t("boolean"===typeof e?new o.b(o.a.ERROR,s.open.name,o.c):new o.b(o.a.ERROR,s.open.name,e.message))}))})}catch(n){t(new o.b(o.a.ERROR_UNKNOWN,s.open.name,o.c))}})));case 11:case"end":return e.stop()}}),e)}))),d.apply(this,arguments)}function f(){var e=Object(s.i)(),t=e.isDesktop,a=e.isUnknown,r=e.platform;function o(e){var t=e.split(".").pop();return"png"===t||"jpg"===t||"gif"===t||"bmp"===t?"image/".concat(t):"pdf"===t?"application/".concat(t):"doc"===t||"docx"===t?"application/msword":"ppt"===t||"pptx"===t?"application/vnd.ms-powerpoint":"xls"===t||"xlsx"===t?"application/vnd.ms-excel":"xlsm"===t?"application/vnd.ms-excel.sheet.macroEnabled.12":"txt"===t?"text/plain":"zip"===t?"application/zip":void 0}return function(){var e=Object(c.a)(Object(n.a)().mark((function e(c,u){var l,d,f,j,p,O,m;return Object(n.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(l=r===s.b.CORDOVA_ANDROID,!(d=o(c))){e.next=19;break}if(!t&&!a){e.next=9;break}return(f=document.createElement("a")).href=window.URL.createObjectURL(u),f.download=c,f.click(),e.abrupt("return");case 9:return e.next=11,i({filename:c,path:l?"externalApplicationStorageDirectory":"dataDirectory",flags:{create:!0,exclusive:!1}});case 11:return j=e.sent,p=j.fileWrite,O=j.fileEntry,e.next=16,p(u);case 16:return m={contentType:d,fileName:O.nativeURL,withDialog:!0},e.next=19,b(m);case 19:case"end":return e.stop()}}),e)})));return function(t,a){return e.apply(this,arguments)}}()}},501:function(e,t,a){"use strict";a.d(t,"a",(function(){return i}));var n=512,c=0;function i(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:n,i=window.atob(e),s=[],r=c;r<i.length;r+=a){for(var o=i.slice(r,r+a),u=new Array(o.length),l=c;l<o.length;l++)u[l]=o.charCodeAt(l);s.push(new Uint8Array(u))}return new Blob(s,{type:t})}},508:function(e,t,a){"use strict";a.d(t,"a",(function(){return c}));var n=a(6);function c(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"pdf";if("string"===typeof e&&e.trim()){var a=e.trim().toLowerCase().replace(/[^a-zA-Z0-9]/g,n.Nb);return"".concat(a,".").concat(t)}var c=new Date,i=c.getMonth()+n.fb,s=(i<n.Fb?n.Ub:n.D)+i,r=c.getDate(),o=(r<n.Fb?n.Ub:n.D)+r;return"".concat(c.getFullYear(),"_").concat(s,"_").concat(o,".").concat(t)}},569:function(e,t,a){"use strict";a.d(t,"a",(function(){return v}));var n=a(2),c=(a(11),a(41)),i=a(36),s=a(50),r=a(83),o=a(100),u=a(6),l=a(38),b=a(82),d=a(504),f=a(581),j=a.n(f),p=a(587),O=a.n(p),m=a(10),h=O.a.NAME_TICKET,T=O.a.TYPE_TICKET,_={cancelButtonText:u.D,statusCustomMessage:u.D,isDownloadable:!1,isShareable:!1},x="spa.transaction.ticket";function v(e){var t=e,a=t.transactionDate,u=t.transactionStatus,f=t.statusCustomMessage,p=t.finishButtonText,O=t.cancelButtonText,_=t.children,v=t.className,E=t.isDownloadable,g=t.isShareable,w=t.title,A=t.subtitle,N=t.handleCancel,S=t.handleFinish,R=t.handleDownload,D=t.handleShare,M=Object(i.i)().isDesktop,k=Object(l.c)().textGet,P=E||g,y=function(){switch(u){case r.e.STATUS_AUTHORIZED:return{variant:"success",title:"".concat(x,".status.authorized")};case r.e.STATUS_FINISHED:return{variant:"success",title:"".concat(x,".status.finished")};case r.e.STATUS_IMPUTED:return{variant:"success",title:"".concat(x,".status.imputed")};case r.e.STATUS_PENDING_SIGNATURE:return{variant:"info",title:"".concat(x,".status.pending.signature")};case r.e.STATUS_PENDING:return{variant:"info",title:"".concat(x,".status.pending")};default:return{variant:"error",title:"".concat(x,".status.error")}}}(),U=k({uuid:f||y.title,fallback:f||y.title});return Object(m.jsx)(c.a,{className:v,name:h,tag:"section",type:T,children:Object(m.jsxs)(s.Card,{className:j.a.wrapperTicket,children:[Object(m.jsxs)("header",{children:[Object(m.jsx)(s.Tag,{className:j.a.status,variant:y.variant,children:U}),a&&Object(m.jsx)(d.a,{className:j.a.date,date:a,formatParams:{format:o.a.FULL}}),Object(m.jsxs)("div",{className:j.a.titles,children:[Object(m.jsx)(l.b,{className:j.a.label,fallback:w.label,tag:"h4",uuid:w.label}),Object(m.jsx)(l.b,{className:j.a.value,tag:"span",children:w.dataValue})]}),A&&Object(m.jsxs)("div",{className:j.a.subtitles,children:[Object(m.jsx)(l.b,{className:j.a.label,fallback:A.label,tag:"h6",uuid:A.label}),Object(m.jsx)(l.b,{className:j.a.value,tag:"h6",children:A.dataValue})]})]}),Object(m.jsx)(s.Separator,{}),Object(m.jsxs)("section",{children:[_,P&&Object(m.jsxs)("div",{className:j.a.actions,children:[g&&!M&&Object(m.jsxs)(b.a,{kind:"plain",label:{uuid:"spa.a11y.buttons.share"},type:"button",variant:"text",onClick:D,children:[Object(m.jsx)(s.Icon,{name:"share",size:"small"}),Object(m.jsx)(l.b,{tag:"span",uuid:"spa.a11y.buttons.share"})]}),E&&M&&Object(m.jsxs)(b.a,{kind:"plain",label:{uuid:"spa.a11y.buttons.download"},type:"button",variant:"text",onClick:R,children:[Object(m.jsx)(s.Icon,{name:"download",size:"small"}),Object(m.jsx)(l.b,{tag:"span",uuid:"spa.a11y.buttons.download"})]})]})]}),Object(m.jsxs)("footer",{children:[Object(m.jsx)(b.a,Object(n.a)(Object(n.a)({},M&&{inline:!0}),{},{label:{uuid:p,fallback:p},onClick:S})),O&&Object(m.jsx)(b.a,Object(n.a)(Object(n.a)({},M&&{inline:!0}),{},{label:{uuid:O,fallback:O},variant:"text",onClick:N})),Object(m.jsx)(l.b,{className:j.a.message,tag:"span",uuid:"".concat(x,".footer.message")})]})]})})}v.defaultProps=_},581:function(e,t,a){e.exports={NAME_TICKET:"Ticket",TYPE_TICKET:"Section",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_AMOUNT_FORMATTER:"AmountFormatter",TYPE_AMOUNT_FORMATTER:"Element",NAME_XS:"xs",NAME_SM:"sm",NAME_MD:"md",NAME_LG:"lg",wrapperTicket:"_rules_wrapperTicket__3BmjV",titles:"_rules_titles__2byR7",label:"_rules_label__3_S5E",value:"_rules_value__2g2mZ",subtitles:"_rules_subtitles__2PJAr",status:"_rules_status__19e7z",date:"_rules_date__27-j3",actions:"_rules_actions__240vJ",message:"_rules_message__7JekD",signatureInfo:"_rules_signatureInfo__2WEDU",signatureTitle:"_rules_signatureTitle__wqjUV"}},587:function(e,t,a){e.exports={NAME_TICKET:"Ticket",TYPE_TICKET:"Section"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=39.41fbe5d9.chunk.js.map