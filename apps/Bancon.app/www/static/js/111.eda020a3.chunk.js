(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[111,266],{247:function(e,t,n){"use strict";n.r(t),n.d(t,"NAME_DESKTOP",(function(){return W})),n.d(t,"TYPE_DESKTOP",(function(){return G})),n.d(t,"default",(function(){return J}));var a=n(0),c=n(5),i=n(16),r=n(11),s=n(8),u=n(33),o=n(69),b=n(79),f=n(168),p=n(26),l=n(28),O="pushNotifications";function d(){return j.apply(this,arguments)}function j(){return(j=Object(c.a)(Object(a.a)().mark((function e(){return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(p.c)();case 2:if(e.sent){e.next=5;break}throw p.a.CORDOVA_UNAVAILABLE;case 5:if(window.FirebasePlugin){e.next=7;break}throw{code:p.a.PLUGIN_UNAVAILABLE,message:"Plugin unavailable"};case 7:return e.next=9,v();case 9:if(!e.sent.value){e.next=14;break}e.t0=!0,e.next=17;break;case 14:return e.next=16,w();case 16:e.t0=e.sent.value;case 17:return e.abrupt("return",e.t0);case 18:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function w(){return h.apply(this,arguments)}function h(){return(h=Object(c.a)(Object(a.a)().mark((function e(){return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",new Promise((function(e,t){try{window.FirebasePlugin.grantPermission((function(t){e({code:l.a.SUCCESS,value:t})}),(function(e){t(new l.b(l.a.ERROR,O,e))}))}catch(n){t(new l.b(l.a.ERROR,O,l.c))}})));case 1:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function v(){return g.apply(this,arguments)}function g(){return(g=Object(c.a)(Object(a.a)().mark((function e(){return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",new Promise((function(e,t){try{window.FirebasePlugin.hasPermission((function(t){e({code:l.a.SUCCESS,value:t})}),(function(e){t(new l.b(l.a.ERROR,O,e))}))}catch(n){t(new l.b(l.a.ERROR,O,l.c))}})));case 1:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function E(){return k.apply(this,arguments)}function k(){return(k=Object(c.a)(Object(a.a)().mark((function e(){return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(p.c)();case 2:if(e.sent){e.next=5;break}throw p.a.CORDOVA_UNAVAILABLE;case 5:if(window.FirebasePlugin){e.next=7;break}throw{code:p.a.PLUGIN_UNAVAILABLE,message:"Plugin unavailable"};case 7:return e.abrupt("return",new Promise((function(e,t){try{window.FirebasePlugin.getToken((function(t){e({code:l.a.SUCCESS,value:t})}),(function(e){t(new l.b(l.a.ERROR,O,e))}))}catch(n){t(new l.b(l.a.ERROR,O,l.c))}})));case 8:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var m=n(36),x=n(80),S=n(87),P=n(497),R=n(99),N=n(74),T=n(41),y=n(6),A=n(89),D=n(164),C=n(120),L=n(51),U=n(197),I=n(193),_=n(463),F=n.n(_),V=n(445),B=n.n(V),K=n(318),M=n(10),W=F.a.NAME_DESKTOP,G=F.a.TYPE_DESKTOP;function J(){var e=Object(s.b)(),t=Object(L.pb)(),n=Object(x.g)(),p=Object(m.i)().isMobile,l=r.b.useState(!0),O=Object(i.a)(l,2),j=O[0],w=O[1],h=r.b.useState({pushNotificationsEnabled:!1,pushNotificationsToken:y.D}),v=Object(i.a)(h,2),g=v[0],k=v[1],_=Object(s.c)(S.c.fetching),F=Object(s.c)(S.c.fetchingOtpConfigurationPre),V=Object(s.c)(D.c.fetching),W=Object(s.c)(u.e.isCorporateEnvironment),G=Object(s.c)(u.e.token),J=Object(s.c)(o.c.uniqueDeviceID),Y=Object(s.c)(S.c.deviceModel),q=Object(s.c)(S.c.osName),H=Object(s.c)(S.c.osVersion),Q=Object(s.c)(S.c.deviceBrand),z=Object(s.c)(S.c.isSimulator),X=Object(s.c)(f.c.alreadyRegistered),Z=Object(s.c)(A.e.legacyFeatures),$=W?B.a.LayoutWidgetsCorporate:B.a.LayoutWidgetsRetail,ee=Object(R.a)().getValueConfig,te=Object(N.a)(ee("spa.widget.pending.active")),ne=Object(N.a)(ee("spa.widget.insurance.active")),ae=K.itemsRecirculation.filter((function(e){var t=(Z[e.href]||{}).availableFeature;return void 0!==t&&t})),ce=ne&&ae.length>y.Sb,ie=Object(N.a)(ee("spa.pushNotifications.registerUserDevice.active")),re=(!W&&!ce||W&&!ce&&!te)&&B.a.widgetInactive,se=j&&B.a.fetching,ue=Object(T.c)(B.a.Desktop,$,re,se),oe=r.b.useCallback((function(){return _||F||V||w(!1),function(){return w(!0)}}),[_,V,F]);r.b.useEffect((function(){oe()}),[oe]),r.b.useEffect((function(){p&&ie&&function(){Oe.apply(this,arguments)}()}),[p,ie]);var be=g.pushNotificationsEnabled,fe=g.pushNotificationsToken,pe=r.b.useCallback((function(){return{available:be,platform:String(q),version:String(H),uuid:J,cordova:window.cordova.version,model:String(Y),manufacturer:String(Q),isVirtual:Boolean(z)}}),[Q,Y,z,q,H,be,J]);r.b.useEffect((function(){if(G&&p&&be&&!X){var t=pe();e(f.b.registerUserDevice({accessToken:G,pushToken:fe,idDevice:t.uuid,extraInfo:JSON.stringify(t)}))}}),[G,X,e,pe,p,be,fe]),r.b.useEffect((function(){if(t.state&&t.state.messageToast){var n=t.state.messageToastType?t.state.messageToastType:"WARNING";e(b.a.set([{text:"".concat(t.state.messageToast),kind:n,duration:y.v}]))}}),[e,t]),r.b.useEffect((function(){e(C.b.getClientFeatures({idActivityList:y.Qb}))}),[e]);var le=r.b.useCallback((function(e){null!==e.state&&n("/")}),[n]);return r.b.useEffect((function(){return window.addEventListener("popstate",le),function(){window.removeEventListener("popstate",le)}}),[le]),Object(M.jsxs)(P.a,{withFooter:!0,withHeaderWidget:!0,withoutBox:!0,className:ue,children:[W&&Object(M.jsx)(U.default,{}),!W&&Object(M.jsx)(I.default,{})]});function Oe(){return(Oe=Object(c.a)(Object(a.a)().mark((function e(){var t,n,c;return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,d();case 2:if(t=e.sent,n={pushNotificationsEnabled:t,pushNotificationsToken:y.D},!t){e.next=9;break}return e.next=7,E();case 7:c=e.sent,n.pushNotificationsToken=c.value;case 9:k(n);case 10:case"end":return e.stop()}}),e)})))).apply(this,arguments)}}},463:function(e,t,n){e.exports={NAME_DESKTOP:"Desktop",TYPE_DESKTOP:"Section"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=111.eda020a3.chunk.js.map