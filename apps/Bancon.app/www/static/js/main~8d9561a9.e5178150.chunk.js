(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[239],{1:function(n,t,e){"use strict";e.d(t,"e",(function(){return T})),e.d(t,"d",(function(){return P})),e.d(t,"b",(function(){return E})),e.d(t,"c",(function(){return b})),e.d(t,"h",(function(){return w})),e.d(t,"i",(function(){return y})),e.d(t,"g",(function(){return R})),e.d(t,"a",(function(){return D})),e.d(t,"f",(function(){return C}));var r=e(184),c=e(175),o=e(104),i=e(56),u=e(70),a="@@STORE",f=":",s={INIT:[a,"INIT"].join(f),STORAGE_HYDRATE:[a,"STORAGE","HYDRATE"].join(f)},d=e(9),l=e(2),h=e(30);function E(n,t){return Object(h.a)(new Set(t)).reduce((function(t,e){return Object(l.a)(Object(l.a)({},t),{},Object(d.a)({},e,o.b("".concat(n,"/").concat(e))))}),{})}function b(n,t){return Object.keys(t).reduce((function(e,r){var c=t[r];return Object(l.a)(Object(l.a)({},e),{},Object(d.a)({},r,Object(o.c)("".concat(n,"/fetch/").concat(r),c)))}),{})}var O=e(57),v=e(58),m=e(67),j=e(68),g=e(103),p=(e(0),e(5),function(n){return n.E00="Expecting a valid root key.",n.E01="Could not find '%' on state.",n.E02="Driver '%s' is not available on the browser.",n.E03="Could not serialize state for: %s",n.E04="Could not unserialize state for: %s",n}(p||{})),w=function(n){return n.LOCAL="localStorage",n.SESSION="sessionStorage",n}({});function y(n){var t=window[n];if(!t)throw new I(p.E02,n);return{get:function(n){return new Promise((function(e){e(t.getItem(n))}))},set:function(n,e){return new Promise((function(r){r(t.setItem(n,e))}))},del:function(n){return new Promise((function(e){e(t.removeItem(n))}))}}}var I=function(n){Object(m.a)(e,n);var t=Object(j.a)(e);function e(n){var r;Object(v.a)(this,e),(r=t.call(this)).name="StorageError";for(var c=Object.keys(p).reduce((function(t,e){return p[e]===n?e:t}),""),o=arguments.length,i=new Array(o>1?o-1:0),u=1;u<o;u++)i[u-1]=arguments[u];i.length?i.reduce((function(n,t){return n.replace("%",t)}),p[c]):p[c];return r.message=n,r}return Object(O.a)(e)}(Object(g.a)(Error)),S="production",T=c.a,P=o.e,R=(o.d,i.a,r.a);function D(n){return u.b(n)}function C(n){var t=n.Reducer,e=o.a({devTools:"production"!==S,reducer:function(n,e){return t(n,e)},middleware:function(n){return n({serializableCheck:!1})}});return e.dispatch({type:s.INIT}),{Store:e,useDispatch:function(){return r.b()},useSelector:r.c}}},11:function(n,t,e){"use strict";e.d(t,"a",(function(){return f}));var r=e(7),c=e.n(r),o=e(139),i=e.n(o);Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));var u=function(n){n&&n instanceof Function&&e.e(332).then(e.bind(null,852)).then((function(t){var e=t.getCLS,r=t.getFID,c=t.getFCP,o=t.getLCP,i=t.getTTFB;e(n),r(n),c(n),o(n),i(n)}))},a=e(10);function f(n,t){if(!t)throw new Error("Expecting a valid DOMElement");(n instanceof Promise?n:Promise.resolve(n)).catch((function(n){return Object(a.jsxs)(c.a.Fragment,{children:[Object(a.jsx)("h1",{children:n instanceof Error?n.message:String(n)}),Object(a.jsx)("small",{children:Object(a.jsx)("code",{children:n instanceof Error?n.stack:"Error thrown in @pkg/react, if you're reading this you should catch."})})]})})).then((function(n){i.a.render(Object(a.jsx)(c.a.StrictMode,{children:n}),t)}))}"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(n){n.unregister()})).catch((function(n){console.error(n.message)})),u(void 0);t.b=c.a},12:function(n,t,e){"use strict";e.d(t,"b",(function(){return c})),e.d(t,"c",(function(){return o})),e.d(t,"a",(function(){return i}));var r={REJECTED:"/rejected",PENDING:"/pending",FULFILLED:"/fulfilled"};function c(n,t){return u({action:n,slice:t,status:r.PENDING})}function o(n,t){return u({action:n,slice:t,status:r.REJECTED})}function i(n,t){return u({action:n,slice:t,status:r.FULFILLED})}function u(n){var t=n.action,e=n.status,r=n.slice,c=t.type.endsWith(e);return r?t.type.startsWith(r)&&c:c}},21:function(n,t,e){"use strict";function r(n){try{return Object.getPrototypeOf(n),!0}catch(t){return!1}}e.d(t,"a",(function(){return r}))},41:function(n,t,e){"use strict";e.d(t,"b",(function(){return u})),e.d(t,"c",(function(){return a})),e.d(t,"a",(function(){return f})),e.d(t,"d",(function(){return s}));var r=e(2),c=e(19),o=e(11),i=["tag","name","type","children","html-type","html-name"],u={ROOT:"Root",CONTAINER:"Container",PAGE:"Page",SECTION:"Section",ELEMENT:"Element",PROVIDER:"Provider",BUNDLE:"Bundle"};function a(){for(var n=arguments.length,t=new Array(n),e=0;e<n;e++)t[e]=arguments[e];return t.filter(Boolean).join(" ")}var f=o.b.forwardRef((function(n,t){var e=n.tag,u=void 0===e?"section":e,a=n.name,f=n.type,s=n.children,d=n["html-type"],l=n["html-name"],h=Object(c.a)(n,i);return o.b.createElement(u,Object(r.a)({ref:t,"data-name":a,"data-type":f,name:l,type:d},h),s)}));function s(n){var t=n.refForwarded,e=n.refElement,r=o.b.useRef();return o.b.useEffect((function(){[e,t].forEach((function(n){if(n){var t=r.current||null;"function"!==typeof n?Object.defineProperty(n,"current",{value:t}):n(t)}}))}),[e,t]),r}},418:function(n,t,e){}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=main~8d9561a9.e5178150.chunk.js.map