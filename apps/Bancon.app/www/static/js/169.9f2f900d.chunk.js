(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[169,285],{390:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return j}));n(11);var a=n(80),c=n(117),i=n(8),r=n(6),o=n(38),s=n(270),l=n(532),u=n(504),d=n(497),p=n(51),b=n(448),f=n.n(b),_=n(10);function j(){var e=Object(a.g)(),t=Object(p.sb)(p.y),n=Object(p.sb)(p.n),b=Object(i.c)(c.c.linkCardDetail),j=Object(i.c)(c.c.updateCardDetail),E=Object(i.c)(c.c.hasSetUpdateCvv);if(!b)return Object(_.jsx)(s.a,{});var O=b.idTransactionShort,T=b.dateExecution,m=b.statusTransaction,h=m!==r.F,v=E?"spa.modo.link.cards.modify.cvv.ticket":"spa.modo.link.cards.ticket";return Object(_.jsx)(d.a,{withFooter:!0,className:f.a.linkAccountDetail,hasNotifications:!1,"header-onBack":function(){e(t)},children:Object(_.jsx)(l.a,{hasModoLogo:!0,buttonText:"spa.form.accept",handleButton:function(){e(n)},responseDescription:E?"spa.modo.link.cards.modify.cvv.ticket.decription":h?"spa.modo.link.cards.ticket.description":"spa.modo.link.cards.ticket.description.rejected",responseTitle:E?"spa.modo.link.cards.modify.cvv.ticket.title":h?"spa.modo.link.cards.ticket.title":"spa.modo.link.cards.ticket.title.rejected",titleText:v,transactionStatus:m,children:Object(_.jsxs)("ul",{children:[Object(_.jsxs)("li",{children:[Object(_.jsx)(o.b,{tag:"span",uuid:"spa.modo.link.cards.ticket.transaction.code"}),Object(_.jsx)(o.b,{tag:"span",children:O})]}),Object(_.jsxs)("li",{children:[Object(_.jsx)(o.b,{tag:"span",uuid:"spa.modo.link.cards.ticket.status"}),Object(_.jsx)(o.b,{tag:"span",uuid:"spa.modo.ticket.status.".concat(m)})]}),Object(_.jsxs)("li",{children:[Object(_.jsx)(o.b,{tag:"span",uuid:"spa.modo.link.cards.ticket.date"}),Object(_.jsx)(u.a,{date:T})]}),Object(_.jsxs)("li",{children:[Object(_.jsx)(o.b,{tag:"span",uuid:"spa.modo.link.cards.ticket.payment.method"}),Object(_.jsx)(o.b,{tag:"span",children:"".concat(null===j||void 0===j?void 0:j.mark," ").concat(r.j," ").concat(null===j||void 0===j?void 0:j.lastFourDigits)})]})]})})})}},448:function(e,t,n){e.exports={NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_DATETIME:"DateTime",TYPE_DATETIME:"Element",linkCards:"_rules_linkCards__3-vbU",title:"_rules_title__1DhLn",subtitle:"_rules_subtitle__1Sf0e",description:"_rules_description__2M7lq",availableCardsToLink:"_rules_availableCardsToLink__3Xeyc",linkedCards:"_rules_linkedCards__1grGY",availableCardToLink:"_rules_availableCardToLink__vXvUN",dropdownButton:"_rules_dropdownButton__2BpDE",dropdownItem:"_rules_dropdownItem__3IkOn",associatedCard:"_rules_associatedCard__3M7uh",linkAccountDetail:"_rules_linkAccountDetail__1ar3_"}},499:function(e,t,n){"use strict";n.d(t,"a",(function(){return b}));var a=n(0),c=n(5);function i(e){var t=e.filename,n=e.path,a=e.flags;return new Promise((function(e,c){var i;function r(e){c(e)}(i=window.cordova.file[n],new Promise((function(e,t){window.resolveLocalFileSystemURL(i,(function(t){e(t)}),(function(e){t(e)}))}))).then((function(n){var c=n;c.getFile(t,a,(function(t){var n=new FileReader;t.createWriter((function(a){e({fileEntry:t,dirEntry:c,fileReader:n,fileWriter:a,fileWrite:function(e){return new Promise((function(t,n){a.onwriteend=function(){return t(a)},a.onerror=function(e){return n(e)},a.write(e)}))},fileRemove:function(){return new Promise((function(e,n){t.remove((function(){return e(!0)}),(function(e){return n(e)}))}))}})}),r)}),r)}))}))}var r=n(36),o=n(26),s=n(28);function l(){return u.apply(this,arguments)}function u(){return(u=Object(c.a)(Object(a.a)().mark((function e(){var t;return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(o.c)();case 2:if(e.sent&&cordova.plugins){e.next=5;break}throw o.a.CORDOVA_UNAVAILABLE;case 5:if(t=cordova.plugins.fileOpener2){e.next=8;break}throw o.a.PLUGIN_UNAVAILABLE;case 8:return e.abrupt("return",t);case 9:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function d(e){return p.apply(this,arguments)}function p(){return p=Object(c.a)(Object(a.a)().mark((function e(t){var n,c,i,r,u;return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.contentType,c=t.fileName,i=t.withDialog,e.next=3,Object(o.c)();case 3:if(e.sent){e.next=6;break}throw o.a.CORDOVA_UNAVAILABLE;case 6:return e.next=8,l();case 8:return r=e.sent,u=i?r.open:r.showOpenWithDialog,e.abrupt("return",new Promise((function(e,t){try{u(c,n,{success:function(){e({code:s.a.SUCCESS,value:!0})},error:function(e){function t(t){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}((function(e){t("boolean"===typeof e?new s.b(s.a.ERROR,r.open.name,s.c):new s.b(s.a.ERROR,r.open.name,e.message))}))})}catch(a){t(new s.b(s.a.ERROR_UNKNOWN,r.open.name,s.c))}})));case 11:case"end":return e.stop()}}),e)}))),p.apply(this,arguments)}function b(){var e=Object(r.i)(),t=e.isDesktop,n=e.isUnknown,o=e.platform;function s(e){var t=e.split(".").pop();return"png"===t||"jpg"===t||"gif"===t||"bmp"===t?"image/".concat(t):"pdf"===t?"application/".concat(t):"doc"===t||"docx"===t?"application/msword":"ppt"===t||"pptx"===t?"application/vnd.ms-powerpoint":"xls"===t||"xlsx"===t?"application/vnd.ms-excel":"xlsm"===t?"application/vnd.ms-excel.sheet.macroEnabled.12":"txt"===t?"text/plain":"zip"===t?"application/zip":void 0}return function(){var e=Object(c.a)(Object(a.a)().mark((function e(c,l){var u,p,b,f,_,j,E;return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(u=o===r.b.CORDOVA_ANDROID,!(p=s(c))){e.next=19;break}if(!t&&!n){e.next=9;break}return(b=document.createElement("a")).href=window.URL.createObjectURL(l),b.download=c,b.click(),e.abrupt("return");case 9:return e.next=11,i({filename:c,path:u?"externalApplicationStorageDirectory":"dataDirectory",flags:{create:!0,exclusive:!1}});case 11:return f=e.sent,_=f.fileWrite,j=f.fileEntry,e.next=16,_(l);case 16:return E={contentType:p,fileName:j.nativeURL,withDialog:!0},e.next=19,d(E);case 19:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}()}},501:function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var a=512,c=0;function i(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:a,i=window.atob(e),r=[],o=c;o<i.length;o+=n){for(var s=i.slice(o,o+n),l=new Array(s.length),u=c;u<s.length;u++)l[u]=s.charCodeAt(u);r.push(new Uint8Array(l))}return new Blob(r,{type:t})}},508:function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var a=n(6);function c(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"pdf";if("string"===typeof e&&e.trim()){var n=e.trim().toLowerCase().replace(/[^a-zA-Z0-9]/g,a.Nb);return"".concat(n,".").concat(t)}var c=new Date,i=c.getMonth()+a.fb,r=(i<a.Fb?a.Ub:a.D)+i,o=c.getDate(),s=(o<a.Fb?a.Ub:a.D)+o;return"".concat(c.getFullYear(),"_").concat(r,"_").concat(s,".").concat(t)}},532:function(e,t,n){"use strict";n.d(t,"a",(function(){return w}));var a=n(16),c=n(11),i=n(41),r=n(36),o=n(50),s=n(6),l=n(8),u=n(33),d=n(271),p=n(501),b=n(154),f=n(499),_=n(38),j=n(82),E=n(533),O=n.n(E),T=n(534),m=n.n(T),h=n(508),v=n(270),k=n(10),x=m.a.NAME_TICKET,g=m.a.TYPE_TICKET,N={hasModoLogo:!1,isDownloadable:!1,isShareable:!1,navigateButton:{},responseDescription:s.D};function w(e){var t=e,n=t.idTransaction,s=t.buttonText,E=t.children,T=t.className,m=t.transactionStatus,N=t.responseTitle,w=t.responseDescription,A=t.navigateButton,M=t.hasModoLogo,P=t.titleText,R=t.handleButton,D=t.isDownloadable,I=t.isShareable,C=Object(l.b)(),L=Object(f.a)(),y=Object(r.i)().isDesktop,F=c.b.useState(!1),U=Object(a.a)(F,2),S=U[0],B=U[1],Y=c.b.useState(!1),H=Object(a.a)(Y,2),z=H[0],V=H[1],K=Object(l.c)(u.e.token),G=Object(l.c)(b.c.fetching),W=Object(l.c)(b.c.fetchedFile),X=Object(l.c)(b.c.filename),J=Object(l.c)(b.c.content),q=D||I,Z=Object(h.a)(X),Q="string"===typeof P;c.b.useEffect((function(){C(b.a.clean())}),[C]),c.b.useEffect((function(){(z||S)&&K&&(W||X||J?(X&&J&&(S&&(L(Z,Object(p.a)(J)),B(!1)),z&&(Object(d.a)({options:{message:X,subject:X},files:[{fileName:Z,base64File:J}]}),V(!1))),C(b.a.setFetchedFile(!1))):C(b.b.generatePdf({token:K,idTransaction:n})))}),[J,C,S,W,X,Z,L,n,z,K]);var $={FINISHED:Object(k.jsx)(o.Icon,{name:"success",size:"large",stroke:"success"}),PROCESSING:Object(k.jsx)(o.Icon,{name:"clock",size:"large",stroke:"info"}),PENDING:Object(k.jsx)(o.Icon,{name:"clock",size:"large",stroke:"info"}),FAILED:Object(k.jsx)(o.Icon,{name:"error",size:"large",stroke:"error"}),ANNULED:Object(k.jsx)(o.Icon,{name:"warning",size:"large",stroke:"warning"}),RETURNED:Object(k.jsx)(o.Icon,{name:"warning",size:"large",stroke:"warning"})};return G?Object(k.jsx)(v.a,{}):Object(k.jsxs)(i.a,{className:T,name:x,tag:"section",type:g,children:[Object(k.jsx)("header",{children:Q?Object(k.jsx)(_.b,{className:O.a.title,fallback:P,tag:"h1",uuid:P}):P}),Object(k.jsxs)("section",{children:[q&&Object(k.jsxs)("div",{className:O.a.actions,children:[I&&!y&&Object(k.jsx)(j.a,{icon:"share",kind:"icon",label:{uuid:"spa.a11y.buttons.share"},size:"small",variant:"text",onClick:function(){V(!0)}}),D&&Object(k.jsx)(j.a,{icon:"download",kind:"icon",label:{uuid:"spa.a11y.buttons.download"},size:"small",variant:"text",onClick:function(){B(!0)}})]}),Object(k.jsx)("div",{className:O.a.responseIcon,children:$[m]}),Object(k.jsx)(_.b,{className:O.a.responseTitle,fallback:N,tag:"h2",uuid:N}),w&&Object(k.jsx)(_.b,{className:O.a.responseDescription,tag:"h3",uuid:w}),(null===A||void 0===A?void 0:A.label)&&(null===A||void 0===A?void 0:A.handleClick)&&Object(k.jsx)(j.a,{className:O.a.navigateButton,kind:"plain",label:A.label,type:"button",onClick:A.handleClick}),E,M&&Object(k.jsx)("div",{className:O.a.responseIcon,children:Object(k.jsx)(o.Icon,{name:"modo"})})]}),Object(k.jsx)("footer",{children:Object(k.jsx)(j.a,{label:{uuid:s},onClick:R})})]})}w.defaultProps=N},533:function(e,t,n){e.exports={NAME_TICKET:"Ticket",TYPE_TICKET:"Section",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_IMAGE:"Image",TYPE_IMAGE:"Element",title:"_rules_title__1SNPA",actions:"_rules_actions__30efJ",responseIcon:"_rules_responseIcon__1McyH",responseTitle:"_rules_responseTitle__3H3Id",responseDescription:"_rules_responseDescription__1NvkT",navigateButton:"_rules_navigateButton__Dlve9"}},534:function(e,t,n){e.exports={NAME_TICKET:"Ticket",TYPE_TICKET:"Section"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=169.9f2f900d.chunk.js.map