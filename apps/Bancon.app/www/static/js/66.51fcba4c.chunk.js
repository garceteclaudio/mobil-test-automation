(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[66,97,306],{191:function(e,t,a){"use strict";a.r(t),a.d(t,"default",(function(){return g}));var r=a(16),n=a(39),s=a(11),c=a(8),o=a(187),i=a(99),u=a(38),d=a(517),l=a(568),b=a(530),f=a(270),p=a(87),O=a(79),j=a(6),m=a(33),E=a(609),S=a(157),h=a(82),T=a(453),M=a.n(T),_=a(10);function g(){var e=Object(c.b)(),t=Object(u.c)().textGet,a=Object(i.a)().getValueConfig,T=Object(O.d)(),g=T.showSuccessToast,w=T.showInfoToast,P=s.b.useState(!1),v=Object(r.a)(P,2),A=v[0],L=v[1],R=Object(c.c)(m.e.token),y=Object(c.c)(p.c.fetching),x=Object(c.c)(p.c.warning),C=Object(c.c)(p.c.isAlertCodeOTP),N=Object(c.c)(m.e.username),I=Object(c.c)(m.e.documentNumber),F=Object(c.c)(m.e.documentType),Y=Object(c.c)(p.c.securitySealList),D=Object(c.c)(p.c.hasChangedPassword),k=Object(c.c)(m.e.securitySeal),H=Object(c.c)(p.c.securitySealImage),U=s.b.useState(k),B=Object(r.a)(U,2),q=B[0],V=B[1],J=t({uuid:"spa.form.continue"}),W=t({uuid:"spa.generic.field.error.required"}),X=t({uuid:"spa.preferences.passwordSection.password.label"}),G=t({uuid:"spa.preferences.passwordSection.newPassword.label"}),z=t({uuid:"spa.preferences.passwordSection.newPassword.helper"}),Z=n.e.object({password:Object(n.c)((function(e,t){var a=t.branch[j.Sb].newPassword;return e||a?Object(o.d)(n.e.string(),W):n.e.any()})),newPassword:Object(n.c)((function(e,r){var s=r.branch[j.Sb].password;return e||s?Object(b.a)(t,a,{number:I,type:F},N):n.e.any()})),securitySeal:Object(o.d)(n.e.number.orUndefined(),W)}),K=s.b.useState(),Q=Object(r.a)(K,2),$=Q[0],ee=Q[1];return s.b.useEffect((function(){!1===C&&e(S.a.setIsResetCredential(!0)),e(p.a.cleanModalOTP()),e(p.a.cleanAlertCodeOTP())}),[e,C]),s.b.useEffect((function(){R&&(e(p.b.changePasswordPre({accessToken:R})),e(p.b.listSecuritySeal({accessToken:R})))}),[e,R]),s.b.useEffect((function(){D?(e(m.a.updateSecuritySeal(H)),g("spa.preferences.passwordSection.toastSuccess"),ee(void 0),e(S.a.setIsResetCredential(!0)),e(p.a.clearHasPasswordChanged()),e(p.a.cleanModalOTP()),L(!0)):L(!1)}),[e,D,H,g]),s.b.useEffect((function(){e(p.a.cleanModalOTP())}),[e]),H?Object(_.jsx)("div",{className:M.a.passwordSection,children:Object(_.jsxs)(E.a,{callbackValidate:function(e){var t=e.password,a=void 0===t?j.D:t,r=e.newPassword,n=void 0===r?j.D:r,s=e.securitySeal,c=void 0===s?j.D:s,o=!c||c===Y.findIndex((function(e){return e.src===k}));if(!a&&!n&&o)return w("spa.preferences.passwordSection.hasNothingToChange"),!1;return ee(e),!0},idActivityToRead:"preferences.changepassword.send",isLoading:y,isResetForm:A,schema:Z,warnings:x,onSubmit:function(t){var a,r=t.otp;if(!R)return;e(p.b.changePassword({accessToken:R,otp:String(r),password:null===$||void 0===$?void 0:$.password,newPassword:null===$||void 0===$?void 0:$.newPassword,securitySeal:(null===$||void 0===$||null===(a=$.securitySeal)||void 0===a?void 0:a.toString())||j.D}))},children:[Object(_.jsx)(u.b,{className:M.a.title,tag:"h4",uuid:"spa.preferences.passwordSection.title"}),Object(_.jsx)("div",{className:M.a.securitySealContainer,children:Object(_.jsx)(l.a,{buttonLabel:J,modalTitle:Object(_.jsx)(u.b,{className:M.a.securitySealModalTitle,tag:"h4",uuid:"spa.preferences.passwordSection.securitySeal.modalTitle"}),name:"securitySeal",options:Y,selectedAvatar:q,uuidError:"spa.preferences.passwordSection.securitySeal.error.required",uuidLabel:"spa.preferences.passwordSection.securitySeal.label",onContinue:function(e){V(e)}})}),Object(_.jsxs)("div",{className:M.a.alignInputs,children:[Object(_.jsx)(d.a,{id:"password",label:X,name:"password",onChange:te}),Object(_.jsx)(d.a,{helper:z,id:"newPassword",label:G,name:"newPassword",onChange:te}),Object(_.jsx)(h.a,{label:{uuid:"spa.preferences.passwordSection.accept.button"},type:"submit"})]})]})}):Object(_.jsx)(f.a,{});function te(){e(p.a.cleanWarnings())}}},453:function(e,t,a){e.exports={NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_INPUT_PASSWORD:"InputPassword",TYPE_INPUT_PASSWORD:"Element",NAME_XS:"xs",NAME_SM:"sm",NAME_MD:"md",NAME_LG:"lg",passwordSection:"_rules_passwordSection__2UZmT",title:"_rules_title__3EYAf",securitySealContainer:"_rules_securitySealContainer__1dHLX",alignInputs:"_rules_alignInputs__1nBJl",securitySealModalTitle:"_rules_securitySealModalTitle__3MNL6"}},488:function(e,t,a){"use strict";a.d(t,"a",(function(){return S}));var r=a(2),n=a(16),s=a(19),c=a(11),o=a(502),i=a(505),u=a(41),d=a(6),l=a(79),b=a(8),f=a(493),p=a.n(f),O=a(10),j=["ariaLabel","ariaLabelledby","schema","onSubmit","children","warnings","isRequiredToast","isResetForm"],m=p.a.NAME_FORM,E=p.a.TYPE_FORM;function S(e){var t=e,a=t.ariaLabel,f=t.ariaLabelledby,p=t.schema,S=t.onSubmit,h=t.children,T=t.warnings,M=t.isRequiredToast,_=t.isResetForm,g=Object(s.a)(t,j),w=Object(b.b)(),P=Object(o.e)({resolver:Object(i.a)(p)}),v=P.handleSubmit,A=P.setError,L=P.formState.errors,R=P.reset,y=Object.keys(L),x=c.b.useState(!1),C=Object(n.a)(x,2),N=C[0],I=C[1],F=c.b.useCallback((function(){M&&N&&w(l.a.set({kind:"ERROR",text:{uuid:"spa.form.field.generic.error"},duration:d.w})),I(!1)}),[w,M,N]),Y=c.b.useCallback((function(){R()}),[R]);return c.b.useEffect((function(){T&&Object.keys(T.data).map((function(e){var t=e.startsWith(d.Nb)?e.slice(d.fb):e;return A(t,{message:T.data[e]},{shouldFocus:!1}),null})),y.length>d.Sb&&F(),_&&Y()}),[y.length,_,Y,A,F,T]),Object(O.jsx)(o.b,Object(r.a)(Object(r.a)(Object(r.a)({},P),g),{},{children:Object(O.jsx)(u.a,{noValidate:!0,"aria-label":a,"aria-labelledby":f,name:m,tag:"form",type:E,onSubmit:v(S,(function(){return I(!N)})),children:h})}))}S.useContext=o.f,S.defaultProps={isRequiredToast:!0,isResetForm:!1,warnings:null}},490:function(e,t,a){"use strict";a.d(t,"a",(function(){return j}));var r=a(2),n=a(19),s=a(11),c=a(41),o=a(50),i=a(495),u=a.n(i),d=(a(496),a(38)),l=a(82),b=a(10),f=["ariaLabelledBy","id","children","title","onClose","hasCloseIcon"],p=u.a.TYPE_MODAL,O=u.a.NAME_MODAL;function j(e){var t=e,a=t.ariaLabelledBy,i=t.id,u=t.children,j=t.title,m=t.onClose,E=t.hasCloseIcon,S=Object(n.a)(t,f),h="modal-header-".concat(i||""),T="string"===typeof j?h:a,M="string"===typeof j?Object(b.jsx)(d.b,{id:h,tag:"h4",uuid:j}):j;return Object(b.jsx)(c.a,{name:O,tag:"div",type:p,children:Object(b.jsxs)(o.Modal,Object(r.a)(Object(r.a)({ariaLabelledBy:T,onClose:m},S),{},{children:[Object(b.jsx)(o.Modal.Header,{children:j&&Object(b.jsxs)(s.b.Fragment,{children:[M,E&&Object(b.jsx)(l.a,{icon:"close",kind:"icon",label:{uuid:"spa.a11y.buttons.close.modal"},onClick:m})]})}),u]}))})}j.defaultProps={ariaLabelledBy:"",closeOnBgTap:!0,hasCloseIcon:!0,initialFocusElementId:"",title:""},j.Body=function(e){var t=e.children;return Object(b.jsx)(o.Modal.Body,{children:t})},j.Footer=function(e){var t=e.children,a=e.className;return Object(b.jsx)(o.Modal.Footer,{className:a,children:t})}},493:function(e,t,a){e.exports={NAME_FORM:"Form",TYPE_FORM:"Element"}},495:function(e,t,a){e.exports={NAME_MODAL:"Modal",TYPE_MODAL:"Element"}},496:function(e,t,a){e.exports={NAME_MODAL:"Modal",TYPE_MODAL:"Element"}},522:function(e,t,a){"use strict";a.d(t,"a",(function(){return r})),a.d(t,"c",(function(){return n})),a.d(t,"e",(function(){return s})),a.d(t,"d",(function(){return c})),a.d(t,"f",(function(){return o})),a.d(t,"b",(function(){return i}));var r="AR1B",n=15,s=function(e){return e===r},c=function(e){return"AR1C"===e},o=function(e){return"0005"===e},i={"0005":n,AR1C:11,AR1B:11}},530:function(e,t,a){"use strict";a.d(t,"a",(function(){return u}));var r=a(30),n=a(6),s=a(187),c=a(522),o=a(39),i=a(74);function u(e,t,a,u){var d=Object(i.a)(t("core.password.minLength")),l=Object(i.a)(t("core.password.maxLength")),b=e({uuid:"spa.generic.accessData.error.documentNumberInPassword"}),f=e({uuid:"spa.generic.accessData.error.userInPassword"}),p=e({uuid:"spa.password.error.tooSmall",replace:"".concat(d)}),O=e({uuid:"spa.password.error.tooBig",replace:"".concat(l)}),j=e({uuid:"spa.generic.field.error.required"}),m=Object(s.d)(o.e.string.required(),j),E=[Object(s.d)(o.e.string.ofLength(d),p),Object(s.d)(o.e.string.ofLength(n.fb,l),O),Object(o.b)("document number in password",(function(e){if(!a)return!0;var t=e;var r=a.number,s=a.type===c.a?(o=r,o.slice(n.Jb,n.ab)):r;var o;return!t.includes(s)||b})),Object(o.b)("username in password",(function(e){return!u||(!e.includes(u)||f)})),Object(o.b)("required chars",(function(a){if(a&&S("repeatedCharacters")){var r,s,c=a,o=Object(i.a)(t("spa.password.repeatedCharacters.maximum")),u=null===(r=c.match(/(\w)\1+/g))||void 0===r?void 0:r.find((function(e){return e.length>=o})),d=null===(s=c.match(/([0-9]{3,})/g))||void 0===s?void 0:s.some((function(e){return function(e,t){if(e.length===n.fb)return!1;for(var a=e.charCodeAt(n.Sb),r=n.Sb,s=n.Sb,c=n.fb;c<e.length;c++){var o=e.charCodeAt(c);r>=n.Sb&&(a===n.cb&&o===n.Tb||a+n.fb===o)?r++:r<=n.Sb&&(a===n.Tb&&o===n.cb||a-n.fb===o)?r--:(s=Math.max(Math.abs(r)+n.fb,s),r=n.Sb),a=o}return Math.max(Math.abs(r)+n.fb,s)>=t}(e,o)}));return u?e({uuid:"spa.password.error.repeatedCharacters",replace:"".concat(o)}):!d||e({uuid:"spa.password.error.consecutiveNumbers",replace:"".concat(o)})}return m}))].concat(Object(r.a)(["atLeastOneDigit","atLeastOneLowercaseChar","atLeastOneUppercaseChar"].filter(S).map((function(a){var r=Object(i.a)(t("spa.password.".concat(a,".regex"))),n=e({uuid:"spa.password.error.".concat(a)});return Object(s.d)(o.e.string.match(new RegExp(r)),n)}))));return Object(o.c)((function(e){var t=E.find((function(t){return!Object(o.d)(e,t)}));return e&&t?t:m}));function S(e){return Object(i.a)(t("spa.password.".concat(e,".enabled")))}}},568:function(e,t,a){"use strict";a.d(t,"a",(function(){return E}));var r=a(2),n=a(19),s=(a(11),a(41)),c=a(50),o=a(6),i=a(604),u=a.n(i),d=a(605),l=a.n(d),b=a(488),f=a(38),p=a(10),O=["buttonLabel","modalTitle","name","options","selectedAvatar","uuidError","uuidLabel"],j=l.a.NAME_SECURITY_SEAL,m=l.a.TYPE_SECURITY_SEAL;function E(e){var t=e,a=t.buttonLabel,i=t.modalTitle,d=t.name,l=t.options,E=t.selectedAvatar,S=t.uuidError,h=t.uuidLabel,T=Object(n.a)(t,O),M=b.a.useContext(),_=Object(f.c)().textGet,g=M.register,w=M.formState,P=M.setValue,v=w.errors,A="".concat(d),L=Object.values(l),R=v[d]&&!E,y=_({uuid:S});return Object(p.jsxs)(s.a,{name:j,type:m,children:[Object(p.jsx)(c.SecurityImage,Object(r.a)(Object(r.a)(Object(r.a)({},T),{},{buttonLabel:a,modalTitle:i,options:L,onChooseImage:function(e){var t=l.findIndex((function(t){return t.src===e})),a=t!==o.ab?t+o.fb:t;P(A,a||void 0)},onClose:function(){var e=l.findIndex((function(e){return e.src===E})),t=e!==o.ab?e+o.fb:e;P(A,t||void 0)}},g(A)),{},{children:Object(p.jsx)(c.Badge,{color:"primary",name:"camera",placement:"br",size:"small",children:Object(p.jsx)(c.Avatar,{alt:_({uuid:"login.step2.imageAlt"}),color:"dark-green",name:E?void 0:"user",size:"large",src:E})})})),!R&&Object(p.jsx)(f.b,{uuid:h}),R&&Object(p.jsx)(c.Legend,{className:u.a.errorSecurityImage,variant:"error",children:y})]})}E.defaultProps={}},604:function(e,t,a){e.exports={NAME_SECURITY_SEAL:"SecuritySeal",TYPE_SECURITY_SEAL:"Element",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",errorSecurityImage:"_rules_errorSecurityImage__3LvFw"}},605:function(e,t,a){e.exports={NAME_SECURITY_SEAL:"SecuritySeal",TYPE_SECURITY_SEAL:"Element"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=66.51fcba4c.chunk.js.map