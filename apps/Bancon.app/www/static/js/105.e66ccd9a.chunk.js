(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[105],{353:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return w}));var a=n(0),c=n(5),i=n(11),r=n(39),o=n(80),s=n(8),u=n(149),b=n(270),l=n(488),d=n(489),j=n(38),p=n(82),O=n(494),h=n(147),g=n(554),m=n(74),x=n(99),f=n(50),v=n(51),y=n(428),C=n.n(y),k=n(10);function w(){var e=Object(j.c)().textGet,t=Object(x.a)().getValueConfig,n=Object(o.g)(),y=Object(s.b)(),w=Object(v.sb)(v.R),N=Object(s.c)(u.c.fetching),S=Object(s.c)(u.c.warning),P=Object(s.c)(h.c.exchangeToken),E=e({uuid:"spa.onboarding.step2.email.label"}),T=function(){var n=e({uuid:"spa.generic.field.error.required"}),a=e({uuid:"spa.generic.mail.format.invalid"}),c=Object(m.a)(t("core.email.maxLength")),i=Object(m.a)(t("spa.email.validationFormat")),o=new RegExp(i),s=e({uuid:"spa.email.error.tooBig",replace:"".concat(c)});return r.e.object({email:Object(g.a)({textErrorRequired:n,textErrorEmail:a,textErrorMaxLength:s,emailMaxLength:c,emailValidationRegex:o})})}(),B=i.b.useCallback((function(){y(h.a.clean()),n(w,{replace:!0})}),[y,n,w]);return i.b.useEffect((function(){return document.addEventListener("backbutton",B),function(){return document.removeEventListener("backbutton",B)}}),[B]),N?Object(k.jsx)(b.a,{}):Object(k.jsx)(d.a,{"header-onBack":B,"header-title":"spa.onboarding.step2.title",children:Object(k.jsx)("section",{children:Object(k.jsxs)(l.a,{schema:T,warnings:S,onSubmit:function(e){return q.apply(this,arguments)},children:[Object(k.jsx)(j.b,{className:C.a.title,uuid:"spa.onboarding.step2.text1"}),Object(k.jsx)("div",{className:C.a.inputSelectContainer,children:Object(k.jsx)(O.a,{id:"email",label:E,name:"email",start:Object(k.jsx)(f.Icon,{name:"mail",size:"small",stroke:"gray-600"})})}),Object(k.jsx)(p.a,{label:{uuid:"spa.form.continue"},loading:N,type:"submit"})]})})});function q(){return(q=Object(c.a)(Object(a.a)().mark((function e(t){var n;return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.email,e.next=3,y(u.b.sendEmail({exchangeToken:P,email:n}));case 3:case"end":return e.stop()}}),e)})))).apply(this,arguments)}}},354:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return y}));var a=n(0),c=n(5),i=(n(11),n(39)),r=n(8),o=n(149),s=n(187),u=n(270),b=n(488),l=n(489),d=n(38),j=n(82),p=n(494),O=n(147),h=n(99),g=n(535),m=n(6),x=n(428),f=n.n(x),v=n(10);function y(){var e=Object(d.c)().textGet,t=Object(r.b)(),n=Object(h.a)().getValueConfig,x=Object(r.c)(o.c.fetching),y=Object(r.c)(o.c.warning),C=Object(r.c)(O.c.exchangeToken),k=Object(r.c)(o.c.email),w=Object(g.a)(n),N=e({uuid:"spa.generic.field.error.required"}),S=e({uuid:"spa.onboarding.step3.code.label"}),P=i.e.object({validationCode:Object(s.d)(i.e.string.ofLength(w,w),N)});return x?Object(v.jsx)(u.a,{}):Object(v.jsx)(l.a,{"header-onBack":function(){t(o.a.cleanEmail())},"header-title":"spa.onboarding.step3.title",children:Object(v.jsx)("section",{children:Object(v.jsxs)(b.a,{schema:P,warnings:y,onSubmit:function(e){return T.apply(this,arguments)},children:[Object(v.jsx)(d.b,{className:f.a.validateTitle,uuid:"spa.onboarding.step3.text1"}),Object(v.jsx)(d.b,{className:f.a.emailValue,children:k}),Object(v.jsx)(d.b,{className:f.a.noteEmail,uuid:"spa.onboarding.step3.text3"}),Object(v.jsx)(d.b,{className:f.a.subtitleEmail,uuid:"spa.onboarding.step3.text2"}),Object(v.jsx)("div",{className:f.a.inputContainerEmail,children:Object(v.jsx)(p.a,{withoutSpaces:!0,label:S,maxLength:m.Bb,name:"validationCode",withSuggestions:!1,onChange:function(){t(o.a.cleanWarnings())}})}),Object(v.jsx)(j.a,{label:{uuid:"spa.form.continue"},loading:x,type:"submit"}),Object(v.jsxs)("div",{className:f.a.resendCode,children:[Object(v.jsx)(d.b,{tag:"span",uuid:"spa.onboarding.step3.text4"}),Object(v.jsx)(j.a,{kind:"plain",label:{uuid:"spa.onboarding.step3.button"},onClick:function(){return E.apply(this,arguments)}})]})]})})});function E(){return(E=Object(c.a)(Object(a.a)().mark((function e(){return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t(o.b.sendEmail({exchangeToken:C,email:k}));case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function T(){return(T=Object(c.a)(Object(a.a)().mark((function e(n){var c;return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return c=n.validationCode,e.next=3,t(o.b.sendCodeEmail({validationCode:c,exchangeToken:C}));case 3:case"end":return e.stop()}}),e)})))).apply(this,arguments)}}},355:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return y}));var a=n(0),c=n(5),i=n(11),r=n(39),o=n(8),s=n(149),u=n(79),b=n(187),l=n(488),d=n(489),j=n(38),p=n(82),O=n(512),h=n(50),g=n(6),m=n(147),x=n(428),f=n.n(x),v=n(10);function y(){var e=Object(j.c)().textGet,t=Object(o.b)(),n=Object(o.c)(s.c.fetching),x=Object(o.c)(s.c.warning),y=Object(o.c)(s.c.hasSetValidationCodeEmail),C=Object(o.c)(m.c.exchangeToken),k=e({uuid:"spa.generic.field.error.required"}),w=e({uuid:"spa.onboarding.step4.area.label"}),N=e({uuid:"spa.onboarding.step4.area.helper"}),S=e({uuid:"spa.onboarding.step4.phone.label"}),P=e({uuid:"spa.onboarding.step4.phone.helper"}),E="#".repeat(g.M),T="#".repeat(g.A),B=r.e.object({mobilePhoneCodeArea:Object(b.d)(r.e.string(),k),mobilePhoneNumber:Object(b.d)(r.e.string(),k)}),q=i.b.useCallback((function(){t(u.a.set({kind:"SUCCESS",text:{uuid:"spa.onboarding.step4.success"},duration:g.v}))}),[t]);return i.b.useEffect((function(){y&&q()}),[y,q]),Object(v.jsx)(d.a,{"header-onBack":function(){t(s.a.cleanValidationCodeEmail())},"header-title":"spa.onboarding.step4.title",children:Object(v.jsx)("section",{children:Object(v.jsxs)(l.a,{schema:B,warnings:x,onSubmit:function(e){return R.apply(this,arguments)},children:[Object(v.jsx)(j.b,{className:f.a.validateTitle,uuid:"spa.onboarding.step4.text1"}),Object(v.jsxs)("div",{className:f.a.inputContainerPhone,children:[Object(v.jsx)(O.a,{allowLeadingZeros:!0,format:E,helper:N,id:"mobilePhoneCodeArea",label:w,name:"mobilePhoneCodeArea",start:Object(v.jsx)(h.Icon,{name:"message",size:"small",stroke:"gray-600"}),valueAsNumber:!1,onChange:A}),Object(v.jsx)(O.a,{allowLeadingZeros:!0,format:T,helper:P,id:"mobilePhoneNumber",label:S,name:"mobilePhoneNumber",start:Object(v.jsx)(h.Icon,{name:"message",size:"small",stroke:"gray-600"}),valueAsNumber:!1,onChange:A})]}),Object(v.jsx)(p.a,{label:{uuid:"spa.form.continue"},loading:n,type:"submit"})]})})});function A(){t(s.a.cleanWarnings())}function R(){return(R=Object(c.a)(Object(a.a)().mark((function e(n){var c,i,r,o;return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return c=n.mobilePhoneCodeArea,i=n.mobilePhoneNumber,r=c.toString().trim(),o=i.toString().trim(),e.next=5,t(s.b.sendPhone({exchangeToken:C,mobilePhoneCodeArea:r,mobilePhoneNumber:o}));case 5:t(s.a.setPhone({phoneCodeArea:r,phoneNumber:o}));case 6:case"end":return e.stop()}}),e)})))).apply(this,arguments)}}},356:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return v}));var a=n(0),c=n(5),i=(n(11),n(39)),r=n(8),o=n(149),s=n(187),u=n(270),b=n(488),l=n(489),d=n(38),j=n(82),p=n(147),O=n(494),h=n(535),g=n(99),m=n(428),x=n.n(m),f=n(10);function v(){var e=Object(d.c)().textGet,t=Object(r.b)(),n=Object(g.a)().getValueConfig,m=Object(r.c)(o.c.fetching),v=Object(r.c)(o.c.warning),y=Object(r.c)(p.c.exchangeToken),C=Object(r.c)(o.c.phoneCodeArea),k=Object(r.c)(o.c.phoneNumber),w=Object(h.a)(n),N=e({uuid:"spa.generic.field.error.required"}),S=e({uuid:"spa.onboarding.step5.code.label"}),P=i.e.object({validationCode:Object(s.d)(i.e.string.required(),N)});return m?Object(f.jsx)(u.a,{}):Object(f.jsx)(l.a,{"header-onBack":function(){t(o.a.cleanSetPhone())},"header-title":"spa.onboarding.step5.title",children:Object(f.jsx)("section",{children:Object(f.jsxs)(b.a,{schema:P,warnings:v,onSubmit:function(e){return T.apply(this,arguments)},children:[Object(f.jsx)(d.b,{className:x.a.validateTitle,uuid:"spa.onboarding.step5.text1"}),Object(f.jsx)("div",{className:x.a.inputContainerPhone,children:Object(f.jsx)(O.a,{label:S,maxLength:w,name:"validationCode",withSuggestions:!1,onChange:function(){t(o.a.cleanWarnings())}})}),Object(f.jsx)(j.a,{label:{uuid:"spa.form.continue"},loading:m,type:"submit"}),Object(f.jsxs)("div",{className:x.a.resendCode,children:[Object(f.jsx)(d.b,{tag:"span",uuid:"spa.onboarding.step5.text2"}),Object(f.jsx)(j.a,{kind:"plain",label:{uuid:"spa.onboarding.step5.button"},onClick:function(){return E.apply(this,arguments)}})]})]})})});function E(){return(E=Object(c.a)(Object(a.a)().mark((function e(){return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t(o.b.sendPhone({exchangeToken:y,mobilePhoneCodeArea:C,mobilePhoneNumber:k}));case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function T(){return(T=Object(c.a)(Object(a.a)().mark((function e(n){var c;return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return c=n.validationCode,e.next=3,t(o.b.sendCodePhone({exchangeToken:y,validationCode:c}));case 3:case"end":return e.stop()}}),e)})))).apply(this,arguments)}}},357:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return C}));var a=n(0),c=n(2),i=n(5),r=n(11),o=n(39),s=n(8),u=n(149),b=n(187),l=n(270),d=n(488),j=n(489),p=n(38),O=n(82),h=n(147),g=n(503),m=n(6),x=n(150),f=n(428),v=n.n(f),y=n(10);function C(){var e=Object(p.c)().textGet,t=Object(s.b)(),n=Object(s.c)(u.c.fetching),f=Object(s.c)(u.c.warning),C=Object(s.c)(h.c.exchangeToken),k=Object(s.c)(u.c.getRenaperData),w=null===k||void 0===k?void 0:k.names,N=null===k||void 0===k?void 0:k.countryBirth,S=Object(s.c)(u.c.countriesOptions),P=Object(s.c)(u.c.economicActivitiesOptions),E=Object(s.c)(u.c.maritalStatusOptions),T=e({uuid:"spa.generic.field.error.required"}),B=e({uuid:"spa.onboarding.step7.country.label"}),q=e({uuid:"spa.onboarding.step7.civilstatus.label"}),A=e({uuid:"spa.onboarding.step7.activity.label"}),R=o.e.object({countryBirth:Object(b.d)(o.e.string.required(),T),activity:Object(b.d)(o.e.string.required(),T),maritalStatus:Object(b.d)(o.e.string.required(),T)});if(r.b.useEffect((function(){C&&t(u.b.getPersonalData({exchangeToken:C}))}),[t,C]),n)return Object(y.jsx)(l.a,{});var D=void 0;return N&&(D=S.find((function(e){if(e.value===N)return e}))),Object(y.jsx)(j.a,{"header-onBack":function(){t(u.a.cleanRenaper())},"header-title":"spa.onboarding.step7.title",children:Object(y.jsx)("section",{children:Object(y.jsxs)(d.a,{schema:R,warnings:f,onSubmit:function(e){return L.apply(this,arguments)},children:[Object(y.jsxs)(p.b,{className:v.a.title,tag:"h6",children:[Object(y.jsx)("strong",{children:"".concat(w," ")}),Object(y.jsx)(p.b,{tag:"span",uuid:"spa.onboarding.step7.text1"})]}),Object(y.jsx)(p.b,{className:v.a.subtitle,uuid:"spa.onboarding.step7.text2"}),Object(y.jsxs)("div",{className:v.a.inputSelectContainer,children:[Object(y.jsx)(g.a,{defaultOption:D,label:B,name:"countryBirth",options:S}),Object(y.jsx)(g.a,{label:q,name:"maritalStatus",options:E}),Object(y.jsx)(g.a,{label:A,name:"activity",options:P})]}),Object(y.jsx)(O.a,{label:{uuid:"spa.form.continue"},loading:n,type:"submit"})]})})});function L(){return(L=Object(i.a)(Object(a.a)().mark((function e(n){return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n.countryBirth===m.Ob&&t(x.b.setRFCountry({RFCountry:n.countryBirth})),e.next=3,t(u.b.sendPersonalData(Object(c.a)(Object(c.a)({exchangeToken:C},n),{},{occupation:m.D})));case 3:case"end":return e.stop()}}),e)})))).apply(this,arguments)}}},358:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return k}));var a=n(0),c=n(2),i=n(5),r=n(16),o=n(11),s=n(39),u=n(8),b=n(149),l=n(187),d=n(270),j=n(488),p=n(489),O=n(38),h=n(82),g=n(147),m=n(503),x=n(6),f=n(150),v=n(428),y=n.n(v),C=n(10);function k(){var e=Object(O.c)().textGet,t=Object(u.b)(),n=Object(u.c)(b.c.fetching),v=Object(u.c)(b.c.warning),k=Object(u.c)(g.c.exchangeToken),w=Object(u.c)(b.c.getRenaperData),N=null===w||void 0===w?void 0:w.names,S=null===w||void 0===w?void 0:w.countryBirth,P=Object(u.c)(b.c.countriesOptions),E=Object(u.c)(b.c.economicActivitiesOptions),T=Object(u.c)(b.c.maritalStatusOptions),B=Object(u.c)(b.c.occupationsOptions),q=e({uuid:"spa.generic.field.error.required"}),A=e({uuid:"spa.onboarding.step7.country.label"}),R=e({uuid:"spa.onboarding.step7.civilstatus.label"}),D=e({uuid:"spa.onboarding.step7.activity.label"}),L=e({uuid:"spa.onboarding.step7.occupation.label"}),V=o.b.useState(!1),G=Object(r.a)(V,2),F=G[0],I=G[1],z=s.e.object({countryBirth:Object(l.d)(s.e.string.required(),q),maritalStatus:Object(l.d)(s.e.string.required(),q),occupation:Object(l.d)(s.e.string.required(),q),activity:Object(s.c)((function(e,t){var n,a=t.branch[x.Sb].occupation;return(null===(n=B.find((function(e){return e.value===a})))||void 0===n?void 0:n.activityId)===x.D?Object(l.d)(s.e.string.required(),q):s.e.any()}))});if(o.b.useEffect((function(){k&&t(b.b.getPersonalData({exchangeToken:k}))}),[t,k]),n)return Object(C.jsx)(d.a,{});var M=void 0;return S&&(M=P.find((function(e){if(e.value===S)return e}))),Object(C.jsx)(p.a,{"header-onBack":function(){t(b.a.cleanRenaper())},"header-title":"spa.onboarding.step7.title",children:Object(C.jsx)("section",{children:Object(C.jsxs)(j.a,{schema:z,warnings:v,onSubmit:function(e){return W.apply(this,arguments)},children:[Object(C.jsxs)(O.b,{className:y.a.title,tag:"h6",children:[Object(C.jsx)("strong",{children:"".concat(N," ")}),Object(C.jsx)(O.b,{tag:"span",uuid:"spa.onboarding.step7.text1"})]}),Object(C.jsx)(O.b,{className:y.a.subtitle,uuid:"spa.onboarding.step7.text2"}),Object(C.jsxs)("div",{className:y.a.inputSelectContainer,children:[Object(C.jsx)(m.a,{defaultOption:M,label:A,name:"countryBirth",options:P}),Object(C.jsx)(m.a,{label:R,name:"maritalStatus",options:T}),Object(C.jsx)(m.a,{label:L,name:"occupation",options:B,onSelectOption:function(e){var n=e.value,a=B.find((function(e){return e.value===n})),c=null===a||void 0===a?void 0:a.activityId;a&&c===x.D?(I(!0),t(b.a.setActivity(x.D))):(t(b.a.setActivity(String(c))),I(!1))}}),F&&Object(C.jsx)(m.a,{label:D,name:"activity",options:E})]}),Object(C.jsx)(h.a,{label:{uuid:"spa.form.continue"},loading:n,type:"submit"})]})})});function W(){return(W=Object(i.a)(Object(a.a)().mark((function e(n){return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n.countryBirth===x.Ob&&t(f.b.setRFCountry({RFCountry:n.countryBirth})),e.next=3,t(b.b.sendPersonalData(Object(c.a)({exchangeToken:k},n)));case 3:case"end":return e.stop()}}),e)})))).apply(this,arguments)}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=105.e66ccd9a.chunk.js.map