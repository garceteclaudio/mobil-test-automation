(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[101,293],{249:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return I}));var a=n(0),o=n(5),c=n(16),s=n(11),r=n(497),i=n(38),u=n(26),l=n(28),d="contacts";function b(e,t){return m.apply(this,arguments)}function m(){return(m=Object(o.a)(Object(a.a)().mark((function e(t,n){return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(u.c)();case 2:if(e.sent){e.next=5;break}throw u.a.CORDOVA_UNAVAILABLE;case 5:if(navigator.contacts){e.next=7;break}throw{code:u.a.PLUGIN_UNAVAILABLE,message:"Plugin unavailable"};case 7:return e.abrupt("return",new Promise((function(e,a){try{navigator.contacts.find(t,(function(t){e({code:l.a.SUCCESS,value:t})}),(function(e){a(new l.b(l.a.ERROR,d,e.message))}),n)}catch(o){a(new l.b(l.a.ERROR,d,l.c))}})));case 8:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function j(){return O.apply(this,arguments)}function O(){return(O=Object(o.a)(Object(a.a)().mark((function e(){return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(u.c)();case 2:if(e.sent){e.next=5;break}throw u.a.CORDOVA_UNAVAILABLE;case 5:if(navigator.contacts){e.next=7;break}throw{code:u.a.PLUGIN_UNAVAILABLE,message:"Plugin unavailable"};case 7:return e.abrupt("return",new Promise((function(e,t){try{navigator.contacts.find(["*"],(function(t){e({code:l.a.SUCCESS,value:t})}),(function(e){t(new l.b(l.a.ERROR,d,e.message))}))}catch(n){t(new l.b(l.a.ERROR,d,l.c))}})));case 8:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var f=n(82),p=n(50),h=n(494),v=n(488),E=n(518),_=n(39),x=n(6),N=n(8),g=n(117),y=n(33),M=n(270),S=n(74),P=n(99),T=n(136),A=n(490),C=n(80),R=n(51),w=n(271),D=n(470),k=n.n(D),B=n(10);function I(){var e=s.b.useState([]),t=Object(c.a)(e,2),n=t[0],u=t[1],l=s.b.useState(!1),d=Object(c.a)(l,2),m=d[0],O=d[1],D=s.b.useState(!1),I=Object(c.a)(D,2),L=I[0],F=I[1],U=s.b.useState(x.D),V=Object(c.a)(U,2),H=V[0],Y=V[1],G=s.b.useState(x.D),X=Object(c.a)(G,2),J=X[0],q=X[1],z=s.b.useState(void 0),K=Object(c.a)(z,2),Q=K[0],Z=K[1],W=s.b.useState(!1),$=Object(c.a)(W,2),ee=$[0],te=$[1],ne=Object(N.b)(),ae=Object(i.c)().textGet,oe=Object(C.g)(),ce=Object(R.sb)(R.H),se=Object(R.sb)(R.J),re=Object(R.sb)(R.q),ie=Object(P.a)().getValueConfig,ue=Object(R.sb)(R.C),le=Object(N.c)(y.e.token),de=Object(N.c)(g.c.fetching),be=Object(N.c)(g.c.validateContactSelect),me=Object(N.c)(g.c.debitAccountsList),je=Object(N.c)(g.c.hasFinishedModoOnboarding),Oe=Object(N.c)(g.c.hasFetchedDebitAccounts),fe=ae({uuid:"spa.modo.send.money.title"}),pe=ae({uuid:"spa.modo.send.money.error1"}),he=ae({uuid:"spa.modo.send.money.error2"}),ve=Object(S.a)(ie("modo.contactList.rowsPerPage")),Ee=s.b.useState(ve),_e=Object(c.a)(Ee,2),xe=_e[0],Ne=_e[1],ge=_.e.object({inputContact:_.e.string.orUndefined()}),ye=s.b.useCallback((function(){ne(g.a.cleanFetchedDebitAccounts())}),[ne]);return s.b.useEffect((function(){le&&(je?(ne(g.a.cleanSendMoneyRecieverInfo()),ne(g.a.cleanSendMoneyResponse()),ne(g.b.getDebitAccounts({token:le})),te(!0)):oe(ue,{replace:!0}))}),[ne,je,oe,le,ue]),s.b.useEffect((function(){return function(){return ye()}}),[ye]),s.b.useEffect((function(){de||void 0===me||(me.length!==x.Sb?ne(g.a.setMODOAccountList(me)):oe(se))}),[me,ne,de,oe,se]),s.b.useEffect((function(){Ne(ve),n.length===x.Sb&&Y(pe),n.length>x.Sb&&Y(x.D)}),[n,pe,ve]),s.b.useEffect((function(){if(be&&Q){if(be.contactHasMODO&&be.accountHasMODO)return ne(g.a.cleanValidateContactSelect()),ne(g.a.setSendMoneyRecieverInfo(Q)),void oe(ce);if(F(!0),be.contactHasMODO){var e=ae({uuid:"spa.modo.send.money.invite.contact.description2",replace:"".concat(Q.name)});q(e)}else{var t=ae({uuid:"spa.modo.send.money.invite.contact.description1",replace:"".concat(Q.name)});q(t)}}}),[ne,oe,Q,ae,ce,be]),!de&&Oe&&ee?Object(B.jsxs)(r.a,{withFooter:!0,className:k.a.chooseContacts,hasNotifications:!1,"header-onBack":function(){oe(Object(E.a)(re,x.Z.MODO),{replace:!0})},children:[Object(B.jsx)("header",{children:Object(B.jsxs)(p.Box,{flex:!0,align:"baseline",children:[Object(B.jsx)(i.b,{"aria-label":fe,tag:"h1",uuid:"spa.modo.send.money.title.short"}),Object(B.jsx)(T.a,{"aria-hidden":!0,alt:"modo",uuid:"logoModo"})]})}),Object(B.jsxs)("section",{children:[Object(B.jsx)(i.b,{color:"gray-dark",uuid:"spa.modo.send.money.subtitle1"}),Object(B.jsx)(i.b,{color:"gray-dark",uuid:"spa.modo.send.money.subtitle2"}),Object(B.jsxs)(v.a,{schema:ge,onSubmit:function(e){var t=e.inputContact;u([]),function(e){Me.apply(this,arguments)}(t)},children:[Object(B.jsx)(h.a,{id:"inputContact",label:ae({uuid:"spa.modo.send.money.input.label"}),name:"inputContact"}),Object(B.jsx)(f.a,{label:{uuid:"spa.modo.send.money.input.label"},type:"submit"})]}),m&&(H?Object(B.jsx)(i.b,{color:"gray-dark",children:H}):Object(B.jsx)(i.b,{color:"gray-dark",uuid:"spa.modo.send.money.subtitle3"})),n.slice(x.Sb,xe).map((function(e){var t,n,a,o=e.photos,c=e.phoneNumbers,s=e.name.formatted;if(!c||null===(t=c[0])||void 0===t||!t.value||!s)return null;var r=function(e){var t=x.D;return(t=(t=e.split(x.j).join(x.D)).split(x.C).join(x.D))[0]===x.mb&&(t=t.slice(x.fb)),t}(null===(n=c[0])||void 0===n?void 0:n.value),u=o?null===(a=o[0])||void 0===a?void 0:a.value:x.D;return Object(B.jsxs)(f.a,{className:k.a.contactBox,kind:"plain",label:s,onClick:function(){return e=r,t={name:s,profilePicture:u,phoneNumber:r},void(le&&(Z(t),ne(g.b.validateContactSelect({token:le,contactPhoneNumber:e}))));var e,t},children:[Object(B.jsxs)(p.Box,{as:"div",className:k.a.avatarNameBox,children:[Object(B.jsx)(p.Avatar,{alt:s||x.D,className:k.a.avatar,size:"medium",src:u}),Object(B.jsx)(i.b,{className:k.a.contactName,children:s})]}),Object(B.jsx)(i.b,{children:r})]},s)})),n.length>xe&&Object(B.jsx)(f.a,{className:k.a.buttonShowMore,label:{uuid:"spa.modo.show.more"},variant:"outlined",onClick:function(){Ne(Number(xe)+Number(ve))}})]}),Object(B.jsxs)(A.a,{className:k.a.modal,id:"spa.modo.send.money.inviteModal",open:L,title:"spa.modo.send.money.invite.contact.title",onClose:Pe,children:[Object(B.jsx)(A.a.Body,{children:Object(B.jsx)(i.b,{children:J})}),Object(B.jsx)(A.a.Footer,{children:Object(B.jsxs)("footer",{className:k.a.footer,children:[Object(B.jsx)(f.a,{id:"spa.modo.send.money.inviteButton",label:{uuid:"spa.modo.send.money.invite.contact.button"},onClick:function(){if(null===be||void 0===be||!be.invitationURI||!Q)return;var e=ae({uuid:be.contactHasMODO?"spa.modo.send.money.invite.message.account":"spa.modo.send.money.invite.message.contact",replace:"".concat(be.invitationURI)}),t=ae({uuid:"spa.modo.send.money.invite.subject",replace:"".concat(Q.name)}),n={message:e,subject:t};Object(w.b)({options:n}),Pe()}}),Object(B.jsx)(f.a,{id:"spa.modo.send.money.cancelButton",label:{uuid:"spa.form.cancel"},variant:"outlined",onClick:Pe})]})})]})]}):Object(B.jsx)(M.a,{});function Me(){return(Me=Object(o.a)(Object(a.a)().mark((function e(t){var n,o;return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(e.prev=0,n=["photos","displayName","phoneNumbers","name"],!t){e.next=8;break}return e.next=5,b(n,{filter:t,multiple:!0,desiredFields:n});case 5:e.t0=e.sent,e.next=11;break;case 8:return e.next=10,j();case 10:e.t0=e.sent;case 11:Se(o=e.t0)||u(o.value),Se(o)&&Y(he),e.next=19;break;case 16:e.prev=16,e.t1=e.catch(0),Y(he);case 19:O(!0);case 20:case"end":return e.stop()}}),e,null,[[0,16]])})))).apply(this,arguments)}function Se(e){return!!e.code}function Pe(){F(!1),ne(g.a.cleanValidateContactSelect()),Z(void 0)}}},470:function(e,t,n){e.exports={NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_FORM:"Form",TYPE_FORM:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_IMAGE:"Image",TYPE_IMAGE:"Element",chooseContacts:"_rules_chooseContacts__2jULY",buttonShowMore:"_rules_buttonShowMore__SlvEe",contactBox:"_rules_contactBox__3l3U0",avatarNameBox:"_rules_avatarNameBox__3Vm2V",avatar:"_rules_avatar__2DBcs",contactName:"_rules_contactName__3XQ1P",modal:"_rules_modal__n9XfP",footer:"_rules_footer__2ieel"}},494:function(e,t,n){"use strict";n.d(t,"a",(function(){return p}));var a=n(2),o=n(19),c=n(16),s=n(11),r=n(50),i=n(41),u=n(488),l=n(498),d=n.n(l),b=n(10),m=["id","name","methods","defaultValue","pattern","withSuggestions","onChange","onBlur"],j=d.a.NAME_INPUT_FIELD,O=d.a.TYPE_INPUT_FIELD,f=s.b.memo((function(e){var t,n=s.b.useState(!1),u=Object(c.a)(n,2),l=u[0],d=u[1],f=e.id,p=e.name,h=e.methods,v=e.defaultValue,E=e.pattern,_=e.withSuggestions,x=void 0===_||_,N=e.onChange,g=e.onBlur,y=Object(o.a)(e,m),M=h.register,S=h.formState,P=h.setValue,T=h.clearErrors,A=S.errors,C="".concat(p),R=A[p];return s.b.useEffect((function(){v&&P(C,v),v||P(C,void 0),x&&d(!0)}),[v,C,P,x,d]),Object(b.jsx)(i.a,{name:j,type:O,children:Object(b.jsx)(r.TextField,Object(a.a)(Object(a.a)(Object(a.a)(Object(a.a)(Object(a.a)({id:f||p},v&&{defaultValue:v}),R&&{error:null===(t=R.message)||void 0===t?void 0:t.toString()}),M(C,{onChange:function(e){N&&N(e);T([C])},onBlur:g})),y),{},{autoComplete:x?"on":"off",pattern:E,onKeyDown:function(e){e.target.value||l||d(!0)}}))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function p(e){var t=u.a.useContext();return Object(b.jsx)(f,Object(a.a)({methods:t},e))}p.displayName=j},498:function(e,t,n){e.exports={NAME_INPUT_FIELD:"InputField",TYPE_INPUT_FIELD:"Element"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=101.e1a58e00.chunk.js.map