(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[15,80,167,199],{488:function(e,t,n){"use strict";n.d(t,"a",(function(){return N}));var a=n(2),r=n(16),o=n(19),c=n(11),u=n(502),i=n(505),s=n(41),l=n(6),d=n(79),b=n(8),E=n(493),m=n.n(E),f=n(10),O=["ariaLabel","ariaLabelledby","schema","onSubmit","children","warnings","isRequiredToast","isResetForm"],j=m.a.NAME_FORM,T=m.a.TYPE_FORM;function N(e){var t=e,n=t.ariaLabel,E=t.ariaLabelledby,m=t.schema,N=t.onSubmit,h=t.children,_=t.warnings,p=t.isRequiredToast,S=t.isResetForm,M=Object(o.a)(t,O),g=Object(b.b)(),A=Object(u.e)({resolver:Object(i.a)(m)}),R=A.handleSubmit,v=A.setError,x=A.formState.errors,P=A.reset,C=Object.keys(x),L=c.b.useState(!1),y=Object(r.a)(L,2),I=y[0],F=y[1],D=c.b.useCallback((function(){p&&I&&g(d.a.set({kind:"ERROR",text:{uuid:"spa.form.field.generic.error"},duration:l.w})),F(!1)}),[g,p,I]),Y=c.b.useCallback((function(){P()}),[P]);return c.b.useEffect((function(){_&&Object.keys(_.data).map((function(e){var t=e.startsWith(l.Nb)?e.slice(l.fb):e;return v(t,{message:_.data[e]},{shouldFocus:!1}),null})),C.length>l.Sb&&D(),S&&Y()}),[C.length,S,Y,v,D,_]),Object(f.jsx)(u.b,Object(a.a)(Object(a.a)(Object(a.a)({},A),M),{},{children:Object(f.jsx)(s.a,{noValidate:!0,"aria-label":n,"aria-labelledby":E,name:j,tag:"form",type:T,onSubmit:R(N,(function(){return F(!I)})),children:h})}))}N.useContext=u.f,N.defaultProps={isRequiredToast:!0,isResetForm:!1,warnings:null}},489:function(e,t,n){"use strict";n.d(t,"a",(function(){return j}));var a=n(2),r=n(19),o=(n(11),n(41)),c=n(136),u=n(82),i=n(38),s=n(101),l=n(491),d=n.n(l),b={name:d.a.NAME_EXTERNAL_CONTAINER,type:d.a.TYPE_EXTERNAL_CONTAINER,showLogo:!1},E=n(492),m=n.n(E),f=n(10),O=["header-onBack","header-title","children","name","type","headerClassName","showLogo"];function j(e){var t=e,n=t["header-onBack"],l=t["header-title"],d=t.children,b=t.name,E=t.type,j=t.headerClassName,T=t.showLogo,N=Object(r.a)(t,O),h=Boolean(n||l),_=Object(o.c)(!l&&m.a.onlyRow,j),p=Object(o.c)(T&&m.a.step1Logo),S=Object(o.c)(T&&m.a.hasLogo);return Object(f.jsxs)(s.a,{children:[T&&Object(f.jsx)("div",{className:p,children:Object(f.jsx)(c.a,{alt:"logo",uuid:"logo150Login"})}),Object(f.jsx)(o.a,Object(a.a)(Object(a.a)({name:b,tag:"article",type:E},N),{},{children:Object(f.jsxs)("article",{className:S,children:[h&&Object(f.jsxs)("header",{className:_,children:[n&&Object(f.jsx)(u.a,{icon:"left",kind:"icon",label:{uuid:"spa.a11y.buttons.back"},size:"medium",variant:"text",onClick:n}),l&&Object(f.jsx)(i.b,{tag:"h5",uuid:l})]}),d]})}))]})}j.defaultProps=b},491:function(e,t,n){e.exports={NAME_EXTERNAL_CONTAINER:"ContainerExternal",TYPE_EXTERNAL_CONTAINER:"Container"}},492:function(e,t,n){e.exports={NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_LINK:"Link",TYPE_LINK:"Element",NAME_IMAGE:"Image",TYPE_IMAGE:"Element",NAME_XS:"xs",NAME_SM:"sm",NAME_MD:"md",NAME_LG:"lg",NAME_EXTERNAL_CONTAINER:"ContainerExternal",TYPE_EXTERNAL_CONTAINER:"Container",hasLogo:"_rules_hasLogo__AxHGK",onlyRow:"_rules_onlyRow__1im8h",step1Logo:"_rules_step1Logo__3LNq5"}},493:function(e,t,n){e.exports={NAME_FORM:"Form",TYPE_FORM:"Element"}},494:function(e,t,n){"use strict";n.d(t,"a",(function(){return j}));var a=n(2),r=n(19),o=n(16),c=n(11),u=n(50),i=n(41),s=n(488),l=n(498),d=n.n(l),b=n(10),E=["id","name","methods","defaultValue","pattern","withSuggestions","onChange","onBlur"],m=d.a.NAME_INPUT_FIELD,f=d.a.TYPE_INPUT_FIELD,O=c.b.memo((function(e){var t,n=c.b.useState(!1),s=Object(o.a)(n,2),l=s[0],d=s[1],O=e.id,j=e.name,T=e.methods,N=e.defaultValue,h=e.pattern,_=e.withSuggestions,p=void 0===_||_,S=e.onChange,M=e.onBlur,g=Object(r.a)(e,E),A=T.register,R=T.formState,v=T.setValue,x=T.clearErrors,P=R.errors,C="".concat(j),L=P[j];return c.b.useEffect((function(){N&&v(C,N),N||v(C,void 0),p&&d(!0)}),[N,C,v,p,d]),Object(b.jsx)(i.a,{name:m,type:f,children:Object(b.jsx)(u.TextField,Object(a.a)(Object(a.a)(Object(a.a)(Object(a.a)(Object(a.a)({id:O||j},N&&{defaultValue:N}),L&&{error:null===(t=L.message)||void 0===t?void 0:t.toString()}),A(C,{onChange:function(e){S&&S(e);x([C])},onBlur:M})),g),{},{autoComplete:p?"on":"off",pattern:h,onKeyDown:function(e){e.target.value||l||d(!0)}}))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function j(e){var t=s.a.useContext();return Object(b.jsx)(O,Object(a.a)({methods:t},e))}j.displayName=m},498:function(e,t,n){e.exports={NAME_INPUT_FIELD:"InputField",TYPE_INPUT_FIELD:"Element"}},503:function(e,t,n){"use strict";n.d(t,"a",(function(){return T}));var a=n(272),r=n(2),o=n(16),c=n(19),u=n(11),i=n(50),s=n(41),l=n(488),d=n(516),b=n.n(d),E=n(10),m=["id","name","methods","options","defaultOption","onSelectOption"],f=b.a.NAME_INPUT_SELECT,O=b.a.TYPE_INPUT_SELECT,j=u.b.memo((function(e){var t,n=e.id,a=e.name,l=e.methods,d=e.options,b=e.defaultOption,j=e.onSelectOption,T=Object(c.a)(e,m),N=l.register,h=l.formState,_=l.setValue,p=l.watch,S=h.errors,M="".concat(a),g=u.b.useState(b),A=Object(o.a)(g,2),R=A[0],v=A[1];p(M);var x=u.b.useRef(null),P=S[a];return u.b.useEffect((function(){null!==b&&void 0!==b&&b.value&&_(M,null===b||void 0===b?void 0:b.value,{shouldValidate:!0})}),[null===b||void 0===b?void 0:b.value,M,_]),u.b.useEffect((function(){x.current&&x.current.blur()}),[P]),u.b.useEffect((function(){R||v(b)}),[b,R]),Object(E.jsx)(s.a,{name:f,type:O,children:Object(E.jsx)(i.SelectField,Object(r.a)(Object(r.a)(Object(r.a)({defaultOption:R,id:n||a,options:d},N(M)),P&&{error:null===(t=P.message)||void 0===t?void 0:t.toString()}),{},{ref:x,onSelectOption:function(e){_(M,e.value,{shouldValidate:!0}),j&&j(e)}},T))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function T(e){var t=l.a.useContext(),n=e,o=Object.assign({},(Object(a.a)(n),n));return Object(E.jsx)(j,Object(r.a)({methods:t},o))}},516:function(e,t,n){e.exports={NAME_INPUT_SELECT:"InputSelect",TYPE_INPUT_SELECT:"Element"}},522:function(e,t,n){"use strict";n.d(t,"a",(function(){return a})),n.d(t,"c",(function(){return r})),n.d(t,"e",(function(){return o})),n.d(t,"d",(function(){return c})),n.d(t,"f",(function(){return u})),n.d(t,"b",(function(){return i}));var a="AR1B",r=15,o=function(e){return e===a},c=function(e){return"AR1C"===e},u=function(e){return"0005"===e},i={"0005":r,AR1C:11,AR1B:11}},608:function(e,t,n){"use strict";n.d(t,"b",(function(){return h})),n.d(t,"a",(function(){return p}));var a=n(2),r=n(16),o=n(11),c=n(41),u=n(39),i=n(187),s=n(6),l=n(38),d=n(503),b=n(494),E=n(488),m=n(522),f=n(820),O=n.n(f),j=n(10),T=O.a.NAME_DOCUMENT_SECTION,N=O.a.TYPE_DOCUMENT_SECTION,h=function(e){var t=e.textErrorCdi,n=e.textErrorCuit,a=e.textErrorPassport,r=e.textErrorRequired;return u.e.object({documentType:Object(i.d)(u.e.string.required(),r),documentNumber:Object(u.c)((function(e,o){var c=o.branch[0].documentType;if(e){if(Object(m.d)(c))return Object(i.d)(Object(i.b)(),t);if(Object(m.e)(c))return Object(i.d)(Object(i.c)(),n)}return Object(m.f)(c)?Object(i.d)(u.e.string.ofLength(s.fb,m.c),a):Object(i.d)(u.e.string.required(),r)}))})},_={documentNumberDefValue:s.D};function p(e){var t,n=Object(l.c)().textGet,u=e,i=u.documentTypeList,f=u.documentTypeDefValue,O=u.documentNumberDefValue,h=u.isCaptchaEnabled,_=o.b.useState(f),p=Object(r.a)(_,2),S=p[0],M=p[1],g=o.b.useState(void 0),A=Object(r.a)(g,2),R=A[0],v=A[1],x=n({uuid:"spa.documentSection.documentNumber"}),P=n({uuid:"spa.documentSection.documentType"}),C=E.a.useContext(),L=C.resetField,y=C.getValues,I=C.setValue,F=Object(m.f)(S),D=null===i||void 0===i?void 0:i.map((function(e){return{isDisabled:!1,label:n({uuid:"spa.documentType.".concat(e,".label")}),value:e,searchKey:s.D}}));return o.b.useEffect((function(){h&&I("captcha",R)}),[R,S,I,h]),Object(j.jsxs)(c.a,{name:T,tag:"section",type:N,children:[Object(j.jsx)(d.a,{defaultOption:(t=D,t.filter((function(e){if(e.value===S)return e}))[s.Sb]),hasSearchInput:!1,label:P,name:"documentType",options:D||[],onSelectOption:function(e){var t=e.value;h&&v(y().captcha);t!==S&&L("documentNumber");M(t)}}),Object(j.jsx)(b.a,Object(a.a)(Object(a.a)(Object(a.a)({withoutSpaces:!0,label:x,name:"documentNumber"},!F&&{regexPattern:s.tb}),S&&{maxLength:m.b[S]}),O&&{defaultValue:O}))]})}p.defaultProps=_,p.displayName=T},820:function(e,t,n){e.exports={NAME_DOCUMENT_SECTION:"DocumentSection",TYPE_DOCUMENT_SECTION:"Section"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=15.60fc1551.chunk.js.map