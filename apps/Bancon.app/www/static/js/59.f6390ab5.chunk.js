(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[59,272,274],{204:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return h}));var a=n(2),c=n(16),i=n(11),o=n(33),r=n(6),s=n(8),u=n(148),l=n(153),d=n(588),b=n(38),E=n(270),p=n(523),O=n(497),T=n(51),f=n(80),_=n(79),j=n(460),m=n.n(j),A=n(308),M=n(10);function h(){var e=Object(b.c)().textGet,t=Object(s.b)(),n=Object(f.g)(),j=i.b.useState(!1),h=Object(c.a)(j,2),N=h[0],P=h[1],R=Object(T.sb)(T.l),S=Object(T.sb)(T.i),x=Object(T.sb)(T.j),C=Object(T.sb)(T.n),v=Object(s.c)(o.e.token),L=Object(s.c)(u.c.productChannelSelected),g=Object(s.c)(u.c.currencyByProductSelected),D=Object(s.c)(u.c.depositAmountAccountData),F=Object(s.c)(l.c.transaction),w=Object(s.c)(l.c.transactionsFetching),y=Object(s.c)(u.c.hasRemoveAutomaticRenewal),I=Object(s.c)(u.c.idTransactionConstituteDeposit),U=Object(s.c)(u.c.idTransactionRemoveAutoRenewalDeposit),H=Object(s.c)(u.c.idTransactionPrecancelUVAHolding),k=Object(s.c)(u.c.error),B=I||U||H,Y=(null===F||void 0===F?void 0:F.idTransactionStatus)===r.ib,V=e({uuid:"spa.toast.success"});return i.b.useEffect((function(){k&&"API306E"===k.code&&n(C)}),[null===k||void 0===k?void 0:k.code,n,C,k]),i.b.useEffect((function(){v&&B&&!U&&t(l.b.readTransaction({accessToken:v,idTransaction:B}))}),[t,v,B,U]),i.b.useEffect((function(){y&&Y&&t(_.a.set({kind:"INFO",text:{uuid:"spa.deposits.edit.renewal.toast.info",replace:"<b>".concat(V,"</b><br>")},duration:r.v}))}),[t,y,Y,V]),i.b.useEffect((function(){return function(){t(u.a.cleanHasRemoveAutomaticRenewal()),k||t(_.a.clean())}}),[t,k]),w?Object(M.jsx)(E.a,{a11yMsg:e({uuid:"spa.a11y.loading"})}):Object(M.jsxs)(O.a,{withoutBox:!0,className:m.a.transaction,children:[Object(M.jsx)(p.a,{}),Object(M.jsx)(d.a,Object(a.a)({buttonLabelOnCancel:"spa.deposits.transaction.cancel.button",buttonLabelOnFinish:"spa.deposits.transaction.finish.button",className:m.a.transaction,handleOnFinish:function(){t(u.a.cleanIdTransactionRemoveAutomaticRenewal()),t(u.a.cleanIdTransactionPrecancelUVAHolding()),H&&t(u.a.setHoldingsToHistoric());n(U||H?x:S)},handleReceipt:function(){n(R)},idTransaction:B,transactionDescription:Y?"spa.deposits.transaction.signature.pending.description":void 0,transactionStatus:null===F||void 0===F?void 0:F.idTransactionStatus,transactionTitle:function(){if(Y&&U)return e({uuid:"spa.deposits.transaction.signature.pending.renewal"});if(Y&&H)return e({uuid:"spa.deposits.transaction.signature.pending.precancel"});if(!Y&&H)return e({uuid:"spa.deposits.transaction.signature.finished.precancel"});if(!L||!D)return;if(Y)return e({uuid:"spa.deposits.transaction.signature.pending"});var t=L.currencyId,n=L.productId,a=D.amount,c=n===r.q?"spa.deposits.productType.".concat(t,".").concat(n,".title"):"spa.deposits.productType.".concat(t,".title");return e({uuid:"spa.deposits.transaction.title",replace:[e({uuid:c}),g,String(a)]})}()},Y&&{handleOnCancel:function(){P(!N)}})),Object(M.jsx)(A.ModalCancel,{isFromTransacton:!0,handleAccept:function(){if(!v)return;t(l.b.cancelTransaction({accessToken:v,idTransaction:B}))},setShowModal:P,showModal:N})]})}},308:function(e,t,n){"use strict";n.r(t),n.d(t,"DEF_MODAL_PROPS",(function(){return T})),n.d(t,"ModalCancel",(function(){return f}));n(11);var a=n(50),c=n(8),i=n(148),o=n(69),r=n(79),s=n(6),u=n(82),l=n(490),d=n(38),b=n(51),E=n(435),p=n.n(E),O=n(10),T={isFromTransacton:!1};function f(e){var t=e,n=t.showModal,E=t.setShowModal,T=t.handleAccept,f=t.isFromTransacton,_=Object(c.b)(),j=Object(b.qb)(),m=Object(b.sb)(b.i),A="confirm-cancellation-button",M=Object(c.c)(o.c.isMobile),h=Object(c.c)(o.c.isWebMobile);return M||h?Object(O.jsxs)(a.BottomSheet,{className:p.a.bottomSheetCancel,initialFocusElementId:A,isVisible:n,onClose:S,children:[Object(O.jsx)(a.Separator,{className:p.a.separator}),Object(O.jsx)(d.b,{className:p.a.title,tag:"h4",uuid:N()}),Object(O.jsx)(d.b,{className:p.a.body,uuid:"spa.deposits.creation.modal.cancel.description"}),Object(O.jsx)(a.Separator,{className:p.a.separator}),P()]}):Object(O.jsxs)(l.a,{className:p.a.modalCancel,id:"cancel-deposit",initialFocusElementId:A,open:n,title:N(),onClose:S,children:[Object(O.jsx)(l.a.Body,{children:Object(O.jsx)(d.b,{uuid:"spa.deposits.creation.modal.cancel.description"})}),Object(O.jsx)(l.a.Footer,{children:P()})]});function N(){return f?"spa.deposits.transaction.cancel.modal.title":"spa.deposits.creation.modal.cancel.title"}function P(){var e=M||h?p.a.bottomSheetFooter:p.a.modalFooter;return Object(O.jsxs)(a.Box,{align:"end",className:e,children:[Object(O.jsx)(u.a,{inline:!0,label:{uuid:"spa.global.yes"},type:"button",variant:"outlined",onClick:R}),Object(O.jsx)(u.a,{inline:!0,"data-focus-id":A,label:{uuid:"spa.global.no"},type:"button",onClick:S})]})}function R(){E(!1),_(i.a.clean()),j(m),_(r.a.set({kind:"SUCCESS",text:{uuid:f?"spa.deposits.transaction.cancel.toast.title":"spa.deposits.creation.request.canceled"},duration:s.v})),T&&T()}function S(){E(!n)}}f.defaultProps=T},435:function(e,t,n){e.exports={NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_XS:"xs",NAME_SM:"sm",NAME_MD:"md",NAME_LG:"lg",modalCancel:"_rules_modalCancel__3p7fv",modalFooter:"_rules_modalFooter__diCuH",modalTermsAndConditions:"_rules_modalTermsAndConditions__1DLcO",modalBody:"_rules_modalBody__2xIYg",bottomSheetTermsAndConditions:"_rules_bottomSheetTermsAndConditions__2I7bt",title:"_rules_title__2HlRB",bottomSheetBody:"_rules_bottomSheetBody__TaT3s",bottomSheetFooter:"_rules_bottomSheetFooter__2HYeG",bottomSheetCancel:"_rules_bottomSheetCancel__1fOYL",body:"_rules_body__3yiYt",separator:"_rules_separator__3vejd"}},460:function(e,t,n){e.exports={NAME_XS:"xs",NAME_SM:"sm",NAME_MD:"md",NAME_LG:"lg",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",transaction:"_rules_transaction__1kdbo"}},499:function(e,t,n){"use strict";n.d(t,"a",(function(){return E}));var a=n(0),c=n(5);function i(e){var t=e.filename,n=e.path,a=e.flags;return new Promise((function(e,c){var i;function o(e){c(e)}(i=window.cordova.file[n],new Promise((function(e,t){window.resolveLocalFileSystemURL(i,(function(t){e(t)}),(function(e){t(e)}))}))).then((function(n){var c=n;c.getFile(t,a,(function(t){var n=new FileReader;t.createWriter((function(a){e({fileEntry:t,dirEntry:c,fileReader:n,fileWriter:a,fileWrite:function(e){return new Promise((function(t,n){a.onwriteend=function(){return t(a)},a.onerror=function(e){return n(e)},a.write(e)}))},fileRemove:function(){return new Promise((function(e,n){t.remove((function(){return e(!0)}),(function(e){return n(e)}))}))}})}),o)}),o)}))}))}var o=n(36),r=n(26),s=n(28);function u(){return l.apply(this,arguments)}function l(){return(l=Object(c.a)(Object(a.a)().mark((function e(){var t;return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(r.c)();case 2:if(e.sent&&cordova.plugins){e.next=5;break}throw r.a.CORDOVA_UNAVAILABLE;case 5:if(t=cordova.plugins.fileOpener2){e.next=8;break}throw r.a.PLUGIN_UNAVAILABLE;case 8:return e.abrupt("return",t);case 9:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function d(e){return b.apply(this,arguments)}function b(){return b=Object(c.a)(Object(a.a)().mark((function e(t){var n,c,i,o,l;return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.contentType,c=t.fileName,i=t.withDialog,e.next=3,Object(r.c)();case 3:if(e.sent){e.next=6;break}throw r.a.CORDOVA_UNAVAILABLE;case 6:return e.next=8,u();case 8:return o=e.sent,l=i?o.open:o.showOpenWithDialog,e.abrupt("return",new Promise((function(e,t){try{l(c,n,{success:function(){e({code:s.a.SUCCESS,value:!0})},error:function(e){function t(t){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}((function(e){t("boolean"===typeof e?new s.b(s.a.ERROR,o.open.name,s.c):new s.b(s.a.ERROR,o.open.name,e.message))}))})}catch(a){t(new s.b(s.a.ERROR_UNKNOWN,o.open.name,s.c))}})));case 11:case"end":return e.stop()}}),e)}))),b.apply(this,arguments)}function E(){var e=Object(o.i)(),t=e.isDesktop,n=e.isUnknown,r=e.platform;function s(e){var t=e.split(".").pop();return"png"===t||"jpg"===t||"gif"===t||"bmp"===t?"image/".concat(t):"pdf"===t?"application/".concat(t):"doc"===t||"docx"===t?"application/msword":"ppt"===t||"pptx"===t?"application/vnd.ms-powerpoint":"xls"===t||"xlsx"===t?"application/vnd.ms-excel":"xlsm"===t?"application/vnd.ms-excel.sheet.macroEnabled.12":"txt"===t?"text/plain":"zip"===t?"application/zip":void 0}return function(){var e=Object(c.a)(Object(a.a)().mark((function e(c,u){var l,b,E,p,O,T,f;return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(l=r===o.b.CORDOVA_ANDROID,!(b=s(c))){e.next=19;break}if(!t&&!n){e.next=9;break}return(E=document.createElement("a")).href=window.URL.createObjectURL(u),E.download=c,E.click(),e.abrupt("return");case 9:return e.next=11,i({filename:c,path:l?"externalApplicationStorageDirectory":"dataDirectory",flags:{create:!0,exclusive:!1}});case 11:return p=e.sent,O=p.fileWrite,T=p.fileEntry,e.next=16,O(u);case 16:return f={contentType:b,fileName:T.nativeURL,withDialog:!0},e.next=19,d(f);case 19:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}()}},501:function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var a=512,c=0;function i(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:a,i=window.atob(e),o=[],r=c;r<i.length;r+=n){for(var s=i.slice(r,r+n),u=new Array(s.length),l=c;l<s.length;l++)u[l]=s.charCodeAt(l);o.push(new Uint8Array(u))}return new Blob(o,{type:t})}},508:function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var a=n(6);function c(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"pdf";if("string"===typeof e&&e.trim()){var n=e.trim().toLowerCase().replace(/[^a-zA-Z0-9]/g,a.Nb);return"".concat(n,".").concat(t)}var c=new Date,i=c.getMonth()+a.fb,o=(i<a.Fb?a.Ub:a.D)+i,r=c.getDate(),s=(r<a.Fb?a.Ub:a.D)+r;return"".concat(c.getFullYear(),"_").concat(o,"_").concat(s,".").concat(t)}},523:function(e,t,n){"use strict";n.d(t,"a",(function(){return _}));var a=n(2),c=n(16),i=n(19),o=n(11),r=n(41),s=n(6),u=n(38),l=n(525),d=n.n(l),b=n(526),E=n.n(b),p=n(10),O=["a11yMessage","className"],T=E.a.NAME_ACCESSIBLE_LOADER_STATUS,f=E.a.TYPE_ACCESSIBLE_LOADER_STATUS;function _(e){var t=e,n=t.a11yMessage,l=t.className,b=Object(i.a)(t,O),E=Object(r.c)(l,d.a.fetchedIndicator),_=o.b.useState(!1),j=Object(c.a)(_,2),m=j[0],A=j[1];return o.b.useEffect((function(){var e=setTimeout((function(){A(!0)}),s.y);return function(){return clearTimeout(e)}}),[]),m?null:Object(p.jsx)(r.a,Object(a.a)(Object(a.a)({},b),{},{className:E,name:T,type:f,children:Object(p.jsx)(u.b,{"aria-live":"polite",role:"status",tag:"span",uuid:n})}))}_.defaultProps={a11yMessage:"spa.a11y.loaded"}},525:function(e,t,n){e.exports={NAME_ACCESSIBLE_LOADER_STATUS:"AccessibleLoaderStatus",TYPE_ACCESSIBLE_LOADER_STATUS:"Element",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",fetchedIndicator:"_rules_fetchedIndicator__2_ji8"}},526:function(e,t,n){e.exports={NAME_ACCESSIBLE_LOADER_STATUS:"AccessibleLoaderStatus",TYPE_ACCESSIBLE_LOADER_STATUS:"Element"}},588:function(e,t,n){"use strict";n.d(t,"a",(function(){return L}));var a=n(2),c=n(16),i=n(19),o=n(11),r=n(41),s=n(501),u=n(271),l=n(6),d=n(8),b=n(69),E=n(33),p=n(154),O=n(50),T=n(499),f=n(508),_=n(136),j=n(38),m=n(82),A=n(270),M=n(589),h=n.n(M),N=n(590),P=n.n(N),R=n(10),S=["transactionStatus","transactionTitle","transactionSubTitle","transactionDescription","idTransaction","isCenterDescription","buttonLabelOnFinish","buttonLabelOnCancel","handleOnFinish","handleOnCancel","handleReceipt"],x=P.a.NAME_TRANSACTION,C=P.a.TYPE_TRANSACTION,v={buttonLabelOnCancel:l.D,isCenterDescription:!1,transactionDescription:l.D,transactionSubTitle:l.D};function L(e){var t=e,n=t.transactionStatus,l=t.transactionTitle,M=t.transactionSubTitle,N=t.transactionDescription,P=t.idTransaction,v=t.isCenterDescription,L=t.buttonLabelOnFinish,g=t.buttonLabelOnCancel,D=t.handleOnFinish,F=t.handleOnCancel,w=t.handleReceipt,y=Object(i.a)(t,S),I=Object(d.c)(b.c.isDesktop),U=Object(d.b)(),H=Object(T.a)(),k=o.b.useState(!1),B=Object(c.a)(k,2),Y=B[0],V=B[1],G=o.b.useState(!1),W=Object(c.a)(G,2),X=W[0],z=W[1],q=Object(d.c)(E.e.token),J=Object(d.c)(p.c.fetching),Z=Object(d.c)(p.c.fetchedFile),K=Object(d.c)(p.c.filename),Q=Object(d.c)(p.c.content),$=Object(f.a)(K),ee=Object(r.c)(!I&&h.a.cover);o.b.useEffect((function(){U(p.a.clean())}),[U]),o.b.useEffect((function(){(X||Y)&&q&&(Z||K||Q?(K&&Q&&(Y&&(H($,Object(s.a)(Q)),V(!1)),X&&(Object(u.a)({options:{message:K,subject:K},files:[{fileName:$,base64File:Q}]}),z(!1))),U(p.a.setFetchedFile(!1))):U(p.b.generatePdf({token:q,idTransaction:P})))}),[Q,U,Y,Z,K,$,H,P,X,q]);var te={ACCEPTED:Object(R.jsx)(_.a,{uuid:"pending"}),CANCELLED:Object(R.jsx)(_.a,{uuid:"success"}),FINISHED:Object(R.jsx)(_.a,{uuid:"success"}),PENDING:Object(R.jsx)(_.a,{uuid:"signature"}),PROCESSING:Object(R.jsx)(_.a,{uuid:"pending"}),SCHEDULED:Object(R.jsx)(_.a,{uuid:"pending"}),RETURNED:Object(R.jsx)(_.a,{uuid:"pending"}),FAILED:Object(R.jsx)(_.a,{uuid:"error"})};return J?Object(R.jsx)(A.a,{}):Object(R.jsxs)(r.a,Object(a.a)(Object(a.a)({},y),{},{className:ee,name:x,type:C,children:[Object(R.jsxs)("section",{children:[te[n],Object(R.jsx)(j.b,{className:h.a.title,tag:"h1",children:l}),M&&Object(R.jsx)(j.b,{className:h.a.title,tag:"h1",children:M}),N&&Object(R.jsx)(j.b,{className:v?h.a.descriptionCentered:h.a.description,uuid:N})]}),Object(R.jsxs)("footer",{children:[Object(R.jsxs)("div",{className:h.a.actions,children:[Object(R.jsxs)(m.a,{kind:"plain",label:{uuid:ne()},onClick:function(){if(I)return void V(!0);z(!0)},children:[Object(R.jsx)(O.Icon,{name:I?"download":"share",size:"small"}),Object(R.jsx)(j.b,{uuid:ne()})]}),Object(R.jsxs)(m.a,{kind:"plain",label:{uuid:"spa.transaction.button.receipt"},onClick:w,children:[Object(R.jsx)(O.Icon,{name:"ticket",size:"small"}),Object(R.jsx)(j.b,{uuid:"spa.transaction.button.receipt"})]})]}),Object(R.jsx)(m.a,Object(a.a)(Object(a.a)({},I&&{inline:!0}),{},{label:{uuid:L},onClick:D})),F&&Object(R.jsx)(m.a,Object(a.a)(Object(a.a)({},I&&{inline:!0}),{},{label:{uuid:g},variant:"text",onClick:F}))]})]}));function ne(){return I?"spa.a11y.buttons.download":"spa.a11y.buttons.share"}}L.defaultProps=v},589:function(e,t,n){e.exports={NAME_TRANSACTION:"Transaction",TYPE_TRANSACTION:"Element",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_IMAGE:"Image",TYPE_IMAGE:"Element",NAME_XS:"xs",NAME_SM:"sm",NAME_MD:"md",NAME_LG:"lg",cover:"_rules_cover__2hqAT",title:"_rules_title__2VZkn",description:"_rules_description__1WWps",descriptionCentered:"_rules_descriptionCentered__6nC7N",actions:"_rules_actions__m4GPx"}},590:function(e,t,n){e.exports={NAME_TRANSACTION:"Transaction",TYPE_TRANSACTION:"Element"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=59.f6390ab5.chunk.js.map