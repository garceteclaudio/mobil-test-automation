(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[65],{208:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return P}));var c=n(16),a=n(11),i=n(80),o=n(8),r=n(151),s=n(157),u=n(33),l=n(524),b=n(497),j=n(6),d=n(20),O=n(600),f=n(331),m=n(332),p=n(383),E=n(376),T=n(377),h=n(334),x=n(434),_=n.n(x),N=n(10);function P(){var e,t=Object(o.b)(),n=Object(i.g)(),x=Object(o.c)(u.e.token),P=Object(i.j)(),A=null!==(e=Object(c.a)(P,1)[0].get("fromWidget"))&&void 0!==e&&e,S=Object(o.c)(r.c.fetchingOffer),v=Object(o.c)(r.c.offer),M=Object(o.c)(r.c.error),g=Object(o.c)(s.c.isOtpFormTokenVisible),C=a.b.useState(!1),F=Object(c.a)(C,2),R=F[0],k=F[1],D=!R&&A&&!v,I=!v&&!A;a.b.useEffect((function(){return function(){g&&t(s.a.setOtpFormTokenVisible(!1))}}),[g,t]),a.b.useEffect((function(){D&&x&&(t(r.a.clean()),t(r.b.getLoanOffer({token:x})),k(!0))}),[k,t,x,D]),a.b.useEffect((function(){I&&(t(r.a.clean()),n(j.c))}),[t,n,I]);var L=Object(o.c)(r.c.isStep1),y=Object(o.c)(r.c.isStep2),U=Object(o.c)(r.c.isStep3),V=Object(o.c)(r.c.isStep4),Y=Object(o.c)(r.c.isStep5Pre),H=Object(o.c)(r.c.isStep5);return Object(N.jsx)(b.a,{withoutBox:!0,className:_.a.internalContainer,"header-onBack":function(){L?A?n(d.m):t(r.a.cleanStep1()):y?t(r.a.cleanStep2()):U?t(r.a.cleanStep3()):V?(g&&t(s.a.setOtpFormTokenVisible(!1)),t(r.a.cleanStep4())):n(Y?A?d.m:d.s:M&&A?d.m:d.s)},children:!M||S||H||Y?Object(N.jsx)(l.b,{steps:{step1:{condition:L,component:f.default},step2:{condition:y,component:m.default},step3:{condition:U,component:p.default},step4:{condition:V,component:E.default},step5Pre:{condition:Y,component:h.default,props:{fromWidget:A}},step5:{condition:H,component:T.default,props:{fromWidget:A}}}}):Object(N.jsx)(O.a,{})})}},331:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return O}));n(11);var c=n(8),a=n(151),i=n(270),o=n(557),r=n(38),s=n(488),u=n(39),l=n(187),b=n(434),j=n.n(b),d=n(10);function O(){var e=Object(c.b)(),t=Object(r.c)().textGet,n=Object(c.c)(a.c.fetchingOffer),b=Object(c.c)(a.c.contracts),O=Object(c.c)(a.c.offer),f=t({uuid:"spa.generic.field.error.required"}),m=u.e.object({contract:Object(l.d)(u.e.string.required(),f)});return n||!O?Object(d.jsx)(i.a,{}):Object(d.jsx)(s.a,{schema:m,onSubmit:function(t){if(!b)return;var n=t.contract,c=null===b||void 0===b?void 0:b.filter((function(e){return e.contractId===n}))[0];e(a.a.setContractObject(c))},children:Object(d.jsx)(o.a,{buttonText:"spa.form.continue",className:j.a.list,name:"contract",options:b?b.map((function(e){var t=e.contractId,n=e.contractName;return{id:t,label:Object(d.jsx)("div",{children:Object(d.jsx)(r.b,{className:j.a.optionTitle,fallback:n,tag:"p",uuid:n})}),value:t}})):[],titleText:"spa.loan.simulate.step1.title"})})}},332:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return x}));var c=n(2),a=n(16),i=n(50),o=n(38),r=n(11),s=n(82),u=n(151),l=n(519),b=n(8),j=n(6),d=n(571),O=n(488),f=n(39),m=n(187),p=n(33),E=n(434),T=n.n(E),h=n(10);function x(){var e=Object(b.b)(),t=Object(b.c)(u.c.minAmount)||j.Sb,n=Object(b.c)(u.c.maxAmount)||j.Sb,E=Object(b.c)(u.c.offer),x=Object(b.c)(p.e.token),_=Object(b.c)(u.c.selectedContract),N=Object(o.c)().textGet,P=N({uuid:"spa.generic.field.error.required"}),A=r.b.useState(j.Sb),S=Object(a.a)(A,2),v=S[0],M=S[1],g=N({uuid:"spa.loan.simulate.step2.loan.min.amount.error",replace:"".concat(Object(l.a)(t,{minimumFractionDigits:j.Jb}))}),C=N({uuid:"spa.loan.simulate.step2.loan.max.amount.error",replace:"".concat(Object(l.a)(n,{minimumFractionDigits:j.Jb}))}),F=f.e.object({amount:Object(f.c)((function(e){return String(e)?Object(m.i)(f.e.string(),t,n,g,C):Object(m.d)(f.e.string(),P)}))});return r.b.useLayoutEffect((function(){M(n)}),[n]),Object(h.jsx)(i.Card,{className:T.a.cardAmount,children:Object(h.jsxs)(O.a,{schema:F,onSubmit:function(){if(!x||!_||!E)return;e(u.a.setLoanAmount(v)),e(u.b.searchLoanTerms(Object(c.a)({token:x,contractId:_.contractId,loanAmount:v},E)))},children:[Object(h.jsx)(o.b,{className:T.a.title,tag:"h1",uuid:"spa.loan.simulate.step2.title"}),Object(h.jsxs)("div",{className:T.a.oversizedAmountContainer,children:[Object(h.jsx)(d.a,{currency:j.b,decimalScale:j.Jb,defaultValue:v,label:N({uuid:"spa.loan.simulate.step2.title"}),name:"amount",onValueChange:function(e){if(null===e||void 0===e||!e.floatValue)return;var t=e.floatValue;M(t)}}),Object(h.jsxs)("div",{className:T.a.chipContainer,children:[Object(h.jsx)(i.Chip,{active:v===t,variant:"light",onClick:function(e){e.preventDefault(),M(t)},children:Object(h.jsx)(o.b,{replace:Object(l.a)(t,{minimumFractionDigits:j.Jb}),uuid:"spa.loan.simulate.amount.min"})}),Object(h.jsx)(i.Chip,{active:v===n,variant:"light",onClick:function(e){e.preventDefault(),M(n)},children:Object(h.jsx)(o.b,{replace:Object(l.a)(n,{minimumFractionDigits:j.Jb}),uuid:"spa.loan.simulate.amount.max"})})]})]}),Object(h.jsx)("div",{children:Object(h.jsx)(s.a,{className:T.a.submitButton,label:{uuid:"spa.form.continue"},type:"submit"})})]})})}},334:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return N}));var c=n(16),a=n(11),i=n(8),o=n(151),r=n(270),s=n(33),u=n(153),l=n(499),b=n(154),j=n(508),d=n(501),O=n(271),f=n(588),m=n(519),p=n(6),E=n(38),T=n(80),h=n(20),x=n(83),_=n(10);function N(e){var t,n=e.fromWidget,N=Object(i.b)(),P=Object(T.g)(),A=Object(E.c)().textGet,S=a.b.useState(!1),v=Object(c.a)(S,2),M=v[0],g=v[1],C=a.b.useState(!1),F=Object(c.a)(C,2),R=F[0],k=F[1],D=Object(i.c)(o.c.fetching),I=Object(i.c)(u.c.transactionsFetching),L=Object(i.c)(o.c.loanSimulation),y=Object(i.c)(o.c.offer),U=Object(i.c)(s.e.token),V=Object(i.c)(o.c.selectedLoanTerm),Y=Object(i.c)(s.e.token),H=Object(i.c)(o.c.idCreateLoanTransaction),B=Object(i.c)(b.c.filename),G=Object(i.c)(b.c.content),J=Object(i.c)(b.c.fetchedFile),W=Object(i.c)(o.c.loanAmount),w=Object(i.c)(u.c.transaction),z=Object(j.a)(B),X=D||I,q=Object(l.a)(),Q=A({uuid:"spa.loan.simulate.step5.title"});return a.b.useEffect((function(){return function(){N(u.a.clean())}}),[N]),a.b.useEffect((function(){Y&&H&&N(u.b.readTransaction({accessToken:Y,idTransaction:H}))}),[N,Y,H]),a.b.useEffect((function(){(R||M)&&U&&H&&(J||B||G?(B&&G&&(M&&(q(z,Object(d.a)(G)),g(!1)),R&&(Object(O.a)({options:{message:B,subject:B},files:[{fileName:z,base64File:G}]}),k(!1))),N(b.a.setFetchedFile(!1))):N(b.b.generatePdf({token:U,idTransaction:H})))}),[G,N,M,J,B,z,q,H,R,U]),L&&y&&V&&!X&&W?Object(_.jsx)(f.a,{isCenterDescription:!0,buttonLabelOnFinish:"spa.form.finish",handleOnFinish:function(){N(o.a.clean()),P(n?h.m:h.s)},handleReceipt:function(){N(o.a.setPreTicket(!0))},idTransaction:H,transactionDescription:"spa.loan.simulate.step5pre.description",transactionStatus:w?w.idTransactionStatus:x.e.STATUS_FAILED,transactionSubTitle:(t=W,Object(m.a)(t,{minimumFractionDigits:p.Jb,maximumFractionDigits:p.Jb})),transactionTitle:Q}):Object(_.jsx)(r.a,{})}},524:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return l}));var c=n(2),a=n(16),i=n(11),o=n(531),r=n.n(o),s=n(10),u=r.a.NAME_STEPPER;r.a.TYPE_STEPPER;function l(e){var t=e,n=t.steps,o=t.handleFallback,r=t.handleChangeStep,u=Object.entries(n).filter((function(e){return Boolean(e[1].condition)})).map((function(e){var t=Object(a.a)(e,2),n=t[0],i=t[1],o=i.component;return Object(s.jsx)(o,Object(c.a)({},i.props||{}),n)}),{}).shift(),l=i.b.useState(null===u||void 0===u?void 0:u.key),b=Object(a.a)(l,2),j=b[0],d=b[1];return i.b.useEffect((function(){!u&&o&&o()}),[o,u]),i.b.useEffect((function(){j!==(null===u||void 0===u?void 0:u.key)&&r&&r(),d(null===u||void 0===u?void 0:u.key)}),[j,r,null===u||void 0===u?void 0:u.key]),u||null}l.displayName=u,l.defaultProps={handleChangeStep:function(){},handleFallback:function(){}}},531:function(e,t,n){e.exports={NAME_STEPPER:"Stepper",TYPE_STEPPER:"Element"}},571:function(e,t,n){"use strict";n.d(t,"a",(function(){return p}));var c=n(2),a=n(19),i=n(11),o=n(50),r=n(41),s=n(488),u=n(572),l=n.n(u),b=n(10),j=["id","name","methods","defaultValue","onChange"],d=l.a.NAME_INPUT_AMOUNT,O=l.a.TYPE_INPUT_AMOUNT,f={id:d},m=i.b.memo((function(e){var t,n=e.id,s=e.name,u=e.methods,l=e.defaultValue,f=e.onChange,m=Object(a.a)(e,j),p=u.register,E=u.formState,T=u.setValue,h=u.clearErrors,x=E.errors,_="".concat(s),N=x[s];return i.b.useEffect((function(){l&&T(_,l,{shouldValidate:!0}),l||T(_,void 0)}),[l,_,T]),Object(b.jsx)(r.a,{name:d,type:O,children:Object(b.jsx)(o.OversizedAmountField,Object(c.a)(Object(c.a)(Object(c.a)(Object(c.a)({id:n||s},l&&{defaultValue:l}),N&&{error:null===(t=N.message)||void 0===t?void 0:t.toString()}),p(_,{onChange:function(e){f&&f(e);h([_])}})),m))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function p(e){var t=s.a.useContext();return Object(b.jsx)(m,Object(c.a)({methods:t},e))}p.displayName=d,p.defaultProps=f},572:function(e,t,n){e.exports={NAME_INPUT_AMOUNT:"InputAmount",TYPE_INPUT_AMOUNT:"Element"}},588:function(e,t,n){"use strict";n.d(t,"a",(function(){return F}));var c=n(2),a=n(16),i=n(19),o=n(11),r=n(41),s=n(501),u=n(271),l=n(6),b=n(8),j=n(69),d=n(33),O=n(154),f=n(50),m=n(499),p=n(508),E=n(136),T=n(38),h=n(82),x=n(270),_=n(589),N=n.n(_),P=n(590),A=n.n(P),S=n(10),v=["transactionStatus","transactionTitle","transactionSubTitle","transactionDescription","idTransaction","isCenterDescription","buttonLabelOnFinish","buttonLabelOnCancel","handleOnFinish","handleOnCancel","handleReceipt"],M=A.a.NAME_TRANSACTION,g=A.a.TYPE_TRANSACTION,C={buttonLabelOnCancel:l.D,isCenterDescription:!1,transactionDescription:l.D,transactionSubTitle:l.D};function F(e){var t=e,n=t.transactionStatus,l=t.transactionTitle,_=t.transactionSubTitle,P=t.transactionDescription,A=t.idTransaction,C=t.isCenterDescription,F=t.buttonLabelOnFinish,R=t.buttonLabelOnCancel,k=t.handleOnFinish,D=t.handleOnCancel,I=t.handleReceipt,L=Object(i.a)(t,v),y=Object(b.c)(j.c.isDesktop),U=Object(b.b)(),V=Object(m.a)(),Y=o.b.useState(!1),H=Object(a.a)(Y,2),B=H[0],G=H[1],J=o.b.useState(!1),W=Object(a.a)(J,2),w=W[0],z=W[1],X=Object(b.c)(d.e.token),q=Object(b.c)(O.c.fetching),Q=Object(b.c)(O.c.fetchedFile),Z=Object(b.c)(O.c.filename),K=Object(b.c)(O.c.content),$=Object(p.a)(Z),ee=Object(r.c)(!y&&N.a.cover);o.b.useEffect((function(){U(O.a.clean())}),[U]),o.b.useEffect((function(){(w||B)&&X&&(Q||Z||K?(Z&&K&&(B&&(V($,Object(s.a)(K)),G(!1)),w&&(Object(u.a)({options:{message:Z,subject:Z},files:[{fileName:$,base64File:K}]}),z(!1))),U(O.a.setFetchedFile(!1))):U(O.b.generatePdf({token:X,idTransaction:A})))}),[K,U,B,Q,Z,$,V,A,w,X]);var te={ACCEPTED:Object(S.jsx)(E.a,{uuid:"pending"}),CANCELLED:Object(S.jsx)(E.a,{uuid:"success"}),FINISHED:Object(S.jsx)(E.a,{uuid:"success"}),PENDING:Object(S.jsx)(E.a,{uuid:"signature"}),PROCESSING:Object(S.jsx)(E.a,{uuid:"pending"}),SCHEDULED:Object(S.jsx)(E.a,{uuid:"pending"}),RETURNED:Object(S.jsx)(E.a,{uuid:"pending"}),FAILED:Object(S.jsx)(E.a,{uuid:"error"})};return q?Object(S.jsx)(x.a,{}):Object(S.jsxs)(r.a,Object(c.a)(Object(c.a)({},L),{},{className:ee,name:M,type:g,children:[Object(S.jsxs)("section",{children:[te[n],Object(S.jsx)(T.b,{className:N.a.title,tag:"h1",children:l}),_&&Object(S.jsx)(T.b,{className:N.a.title,tag:"h1",children:_}),P&&Object(S.jsx)(T.b,{className:C?N.a.descriptionCentered:N.a.description,uuid:P})]}),Object(S.jsxs)("footer",{children:[Object(S.jsxs)("div",{className:N.a.actions,children:[Object(S.jsxs)(h.a,{kind:"plain",label:{uuid:ne()},onClick:function(){if(y)return void G(!0);z(!0)},children:[Object(S.jsx)(f.Icon,{name:y?"download":"share",size:"small"}),Object(S.jsx)(T.b,{uuid:ne()})]}),Object(S.jsxs)(h.a,{kind:"plain",label:{uuid:"spa.transaction.button.receipt"},onClick:I,children:[Object(S.jsx)(f.Icon,{name:"ticket",size:"small"}),Object(S.jsx)(T.b,{uuid:"spa.transaction.button.receipt"})]})]}),Object(S.jsx)(h.a,Object(c.a)(Object(c.a)({},y&&{inline:!0}),{},{label:{uuid:F},onClick:k})),D&&Object(S.jsx)(h.a,Object(c.a)(Object(c.a)({},y&&{inline:!0}),{},{label:{uuid:R},variant:"text",onClick:D}))]})]}));function ne(){return y?"spa.a11y.buttons.download":"spa.a11y.buttons.share"}}F.defaultProps=C},589:function(e,t,n){e.exports={NAME_TRANSACTION:"Transaction",TYPE_TRANSACTION:"Element",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_IMAGE:"Image",TYPE_IMAGE:"Element",NAME_XS:"xs",NAME_SM:"sm",NAME_MD:"md",NAME_LG:"lg",cover:"_rules_cover__2hqAT",title:"_rules_title__2VZkn",description:"_rules_description__1WWps",descriptionCentered:"_rules_descriptionCentered__6nC7N",actions:"_rules_actions__m4GPx"}},590:function(e,t,n){e.exports={NAME_TRANSACTION:"Transaction",TYPE_TRANSACTION:"Element"}},600:function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));var c=n(38),a=(n(11),n(50)),i=n(601),o=n.n(i),r=n(10);function s(){return Object(r.jsxs)("section",{className:o.a.ErrorRoute,children:[Object(r.jsx)(a.Icon,{name:"error",size:"xlarge",stroke:"gray-light"}),Object(r.jsxs)("div",{className:o.a.ErrorText,children:[Object(r.jsx)(c.b,{tag:"h6",uuid:"spa.error.route.title"}),Object(r.jsx)(c.b,{tag:"p",uuid:"spa.error.route.body"})]})]})}},601:function(e,t,n){e.exports={NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",ErrorRoute:"_rules_ErrorRoute__2xxFQ",ErrorText:"_rules_ErrorText__31F_8"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=65.1fc72530.chunk.js.map