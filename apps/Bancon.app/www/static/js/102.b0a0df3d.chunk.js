(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[102,276],{245:function(e,t,a){"use strict";a.r(t),a.d(t,"default",(function(){return S}));var i=a(2),n=a(16),s=a(11),c=a(501),l=a(80),o=a(41),r=a(271),d=a(8),b=a(6),p=a(69),u=a(148),j=a(33),m=a(153),O=a(50),f=a(499),T=a(82),g=a(621),_=a(136),h=a(38),E=a(523),x=a(591),D=a(594),A=a(270),M=a(497),N=a(100),y=a(500),C=a(504),R=a(51),P=a(508),v=a(731),I=a.n(v),H=a(10);function k(){var e=Object(h.c)().textGet,t=Object(d.b)(),a=Object(l.g)(),o=Object(f.a)(),g=Object(d.c)(p.c.isMobile),_=Object(d.c)(j.e.token),E=Object(d.c)(u.c.historicDeposits),x=Object(d.c)(u.c.deposits),D=Object(d.c)(u.c.holdingsTypeActive),A=Object(d.c)(j.e.isCorporateEnvironment),M=Object(d.c)(u.c.retentionCertificate),v=Object(R.sb)(R.j),k=s.b.useState(!1),F=Object(n.a)(k,2),U=F[0],S=F[1],L=s.b.useState(!1),B=Object(n.a)(L,2),w=B[0],Y=B[1],G=Object(d.c)(u.c.PDF),J=Object(d.c)(u.c.fileName),K=Object(P.a)(J),V=[{label:"spa.deposits.holding.option.detail",onOptionClick:X},{label:"spa.deposits.holding.option.share.receipt",onOptionClick:function(e){if(!_)return;var a={fixedTermDepositURI:e.fixedTermDepositURI,status:e.statusId,rol:e.currencyId,balance:e.capitalAmount};t(u.b.getHoldingDetails(Object(i.a)(Object(i.a)({},a),{},{token:_}))),g?W():q()}},A&&{label:"spa.deposits.holding.option.withholding.certificate",onOptionClick:function(e){if(!_)return;t(u.b.getRetentionCertificate({fixedTermDepositURI:e.fixedTermDepositURI,certificateAgreementId:e.agreementId,certificateCode:e.certificateCode,branchId:e.branchOfficeId,token:_})),g?W():q()}}],z=Object(H.jsx)(T.a,{ariaLabel:{uuid:"spa.a11y.buttons.options"},kind:"plain",label:{uuid:"spa.a11y.buttons.options"},children:Object(H.jsx)(O.Icon,{name:"verticalKebab",size:"small"})});return s.b.useEffect((function(){M&&(U&&(o(M.filename,Object(c.a)(M.PDF)),S(!1)),w&&(Object(r.a)({options:{message:M.filename,subject:M.filename},files:[{fileName:M.filename,base64File:M.PDF}]}),Y(!1)),t(u.a.cleanCertificate()))}),[M,t,U,o,w]),s.b.useEffect((function(){return J&&G&&(U&&(o(K,Object(c.a)(G)),S(!1)),w&&(Object(r.a)({options:{message:J,subject:J},files:[{fileName:K,base64File:G}]}),Y(!1))),function(){t(u.a.cleanHoldingDetails())}}),[t,U,K,o,w,G,J]),Object(H.jsxs)(O.Table,{"aria-label":e({uuid:"spa.deposits.holdins.aria.label"}),className:I.a.holdingsTable,children:[Object(H.jsx)(O.Table.Head,{className:I.a.tableHead,children:Object(H.jsxs)(O.Table.Row,{children:[[{id:"productAlias",numeric:!1,label:"spa.deposits.holding.fixed.term"},{id:"openDate",numeric:!0,label:"spa.deposits.holding.validity"},{id:"balance",numeric:!0,label:"spa.deposits.holding.invested.amount"}].map((function(t){return Object(H.jsx)(O.Table.Cell,{align:t.numeric?"right":"left",colSpan:t.numeric?b.Jb:b.Ab,children:e({uuid:t.label})},t.id)})),Object(H.jsx)(O.Table.Cell,{})]})}),Object(H.jsx)(O.Table.Body,{children:D?x.map((function(e){return Object(H.jsxs)(O.Table.Row,{onClick:function(){return function(e){var i={fixedTermDepositURI:e.fixedTermDepositURI,status:e.status,rol:e.role,balance:e.balance};t(m.a.clean()),t(u.a.cleanHoldingDetails()),t(u.a.cleanRequestHoldingDetails()),t(u.a.setHoldingDetails(i)),a(v)}(e)},children:[Object(H.jsxs)(O.Table.Cell,{align:"left",colSpan:b.Ab,children:[e.description&&Object(H.jsx)(h.b,{className:I.a.operationTag,color:"gray-dark",children:e.description}),Object(H.jsx)(h.b,{className:e.description?I.a.title:I.a.operationTag,color:"gray-dark",children:e.label})]}),Object(H.jsx)(O.Table.Cell,{align:"right",colSpan:b.Jb,children:Object(H.jsx)(C.a,{date:new Date(e.openDate.split("T")[b.Sb]),formatParams:{format:N.a.SHORT}})}),Object(H.jsx)(O.Table.Cell,{colSpan:b.Jb,children:Object(H.jsx)(h.b,{align:"right",tag:"span",children:Object(H.jsx)(y.a,{amount:e.balance})})})]},e.idProduct)})):E.map((function(e){return Object(H.jsxs)(O.Table.Row,{children:[Object(H.jsxs)("div",{className:I.a.cellContainer,onClick:function(){return X(e)},children:[Object(H.jsx)(O.Table.Cell,{align:"left",colSpan:b.Ab,children:Object(H.jsx)(h.b,{className:I.a.operationTag,color:"gray-dark",children:e.productDescription})}),Object(H.jsx)(O.Table.Cell,{align:"right",colSpan:b.Jb,children:Object(H.jsx)(C.a,{date:new Date(e.validityStart.split("T")[b.Sb]),formatParams:{format:N.a.SHORT}})}),Object(H.jsx)(O.Table.Cell,{colSpan:b.Jb,children:Object(H.jsx)(h.b,{align:"right",tag:"span",children:Object(H.jsx)(y.a,{amount:e.capitalAmount})})})]}),Object(H.jsx)(O.Table.Cell,{align:"right",className:I.a.optionsCell,colSpan:b.fb,children:Object(H.jsx)(O.Dropdown,{className:I.a.dropdown,label:z,children:Z(e)})})]},e.currencyId)}))})]});function X(e){var i={fixedTermDepositURI:"",status:e.statusId,rol:"",balance:e.capitalAmount};t(m.a.clean()),t(u.a.cleanHoldingDetails()),t(u.a.cleanRequestHoldingDetails()),t(u.a.setHoldingDetails(i)),a(v)}function q(){S(!0)}function W(){Y(!0)}function Z(e){return V.map((function(t){if(t){var a=t.label,i=t.onOptionClick;return Object(H.jsx)(O.Dropdown.Item,{children:Object(H.jsx)(T.a,{className:I.a.dropdownItem,kind:"plain",label:{uuid:a},onClick:function(){return i(e)}})},a)}}))}}var F=a(461),U=a.n(F);function S(){var e=Object(h.c)().textGet,t=Object(d.b)(),a=Object(l.g)(),N=Object(f.a)(),y=Object(d.c)(p.c.isDesktop),C=Object(d.c)(j.e.token),v=Object(d.c)(u.c.deposits),I=Object(d.c)(u.c.historicDeposits),F=Object(d.c)(u.c.fetchedActiveDeposits),S=Object(d.c)(u.c.fetchedHistoricDeposits),L=Object(d.c)(u.c.fetchedDepositDisplayType),B=Object(d.c)(j.e.isCorporateEnvironment),w=Object(d.c)(u.c.holdingsTypeActive),Y=Object(d.c)(u.c.displayType),G=Object(d.c)(u.c.retentionCertificate),J=Object(d.c)(u.c.PDF),K=Object(d.c)(u.c.fileName),V=Object(P.a)(K),z=Object(R.sb)(R.j),X=Object(R.sb)(R.g),q=s.b.useState(Y),W=Object(n.a)(q,2),Z=W[0],Q=W[1],$=s.b.useState(!1),ee=Object(n.a)($,2),te=ee[0],ae=ee[1],ie=s.b.useState(!1),ne=Object(n.a)(ie,2),se=ne[0],ce=ne[1],le=b.p.ACTIVE,oe=b.p.RECORD,re=v.length>b.Sb,de=I.length>b.Sb,be=w?le:oe,pe=Z===b.P.CARD,ue=Z===b.P.TABLE,je=Object(o.c)((pe||!y)&&U.a.tabsBody);return s.b.useEffect((function(){C&&(t(u.a.cleanFetched()),t(u.b.listDeposits({token:C})),t(u.b.listHistoricHoldings({token:C})))}),[t,C]),s.b.useEffect((function(){C&&!L&&t(u.b.depositListReadDisplayType({token:C}))}),[t,L,C]),s.b.useEffect((function(){Q(Y)}),[Y]),s.b.useEffect((function(){G&&(te&&(N(G.filename,Object(c.a)(G.PDF)),ae(!1)),se&&(Object(r.a)({options:{message:G.filename,subject:G.filename},files:[{fileName:G.filename,base64File:G.PDF}]}),ce(!1)),t(u.a.cleanCertificate()))}),[G,t,te,N,ce,se]),s.b.useEffect((function(){return K&&J&&(te&&(N(V,Object(c.a)(J)),ae(!1)),se&&(Object(r.a)({options:{message:K,subject:K},files:[{fileName:V,base64File:J}]}),ce(!1))),function(){t(u.a.cleanHoldingDetails())}}),[t,te,V,N,se,J,K]),Object(H.jsxs)(M.a,{withoutBox:!0,className:U.a.holdings,"header-onBack":function(){a(l.a)},children:[y?Object(H.jsxs)("div",{className:U.a.createDepositCard,children:[Object(H.jsx)(_.a,{uuid:"deposits"}),Object(H.jsx)(h.b,{className:U.a.createDepositCardTitle,uuid:"spa.deposits.start.title"}),Object(H.jsx)(h.b,{uuid:"spa.deposits.start.description"}),Object(H.jsx)(T.a,{inline:!0,label:{uuid:"spa.deposits.start.button"},onClick:me})]}):Object(H.jsx)(T.a,{className:U.a.floatingButton,icon:"plus",kind:"icon",label:{uuid:"spa.a11y.deposits.start.button"},variant:"solid",onClick:me}),Object(H.jsxs)("div",{className:U.a.header,children:[Object(H.jsx)(h.b,{className:U.a.title,id:"deposits.title",tag:"h1",uuid:"spa.deposits.holding.title"}),y&&Object(H.jsxs)("div",{children:[Object(H.jsx)(T.a,{ariaLabel:{uuid:"spa.deposits.holding.table.display.card"},className:U.a.icons,kind:"plain",label:{uuid:"spa.deposits.holding.table.display.card"},onClick:function(){Q(b.P.CARD),t(u.a.setHoldingsDisplayType(b.P.CARD))},children:Object(H.jsx)(O.Icon,{name:"menu",size:"small",stroke:pe?"primary":"gray-light"})}),Object(H.jsx)(T.a,{ariaLabel:{uuid:"spa.deposits.holding.table.display.item"},className:U.a.icons,kind:"plain",label:{uuid:"spa.deposits.holding.table.display.item"},onClick:function(){Q(b.P.TABLE),t(u.a.setHoldingsDisplayType(b.P.TABLE))},children:Object(H.jsx)(O.Icon,{name:"bullet",size:"small",stroke:ue?"primary":"gray-light"})})]})]}),Object(H.jsx)("div",{className:U.a.tabs,children:Object(H.jsxs)(x.a,{hasFixedWidth:!0,className:U.a.tabsHeader,defaultActiveKey:be,children:[Object(H.jsx)(D.a,{className:U.a.tab,eventKey:le,label:e({uuid:"spa.deposits.holding.active"}),onClick:function(){t(u.a.setHoldingsToActive())},children:F?function(){if(!re)return ge();if(!w)return;if(pe||!y)return Object(H.jsxs)("div",{className:je,children:[Object(H.jsx)(E.a,{}),v.map((function(e){var i=e.productAlias,n=e.productType,s=e.label,c=e.fixedTermDepositURI,l=e.balance,o=e.openDate,r=e.number,d="".concat(n," ").concat(b.b," ").concat(r);return Object(H.jsx)(g.a,{amount:l,amountText:"spa.deposits.holding.invested.amount",avatarName:"saving",cardLabel:s,date:o,dateText:"spa.deposits.holding.validity",operationTag:i,title:d,onClick:function(){return function(e){var i={fixedTermDepositURI:e.fixedTermDepositURI,status:e.status,rol:e.role,balance:e.balance};t(m.a.clean()),t(u.a.cleanHoldingDetails()),t(u.a.cleanRequestHoldingDetails()),t(u.a.setHoldingDetails(i)),a(z)}(e)}},c)}))]});return Object(H.jsxs)(s.b.Fragment,{children:[Object(H.jsx)(E.a,{}),Object(H.jsx)(k,{})]})}():Object(H.jsx)(A.a,{a11yMsg:e({uuid:"spa.deposits.a11y.active.loading"})})}),Object(H.jsx)(D.a,{className:U.a.tab,eventKey:oe,label:e({uuid:"spa.deposits.holding.record"}),onClick:function(){t(u.a.setHoldingsToHistoric())},children:S?function(){if(!de)return ge();if(w)return;if(pe||!y)return Object(H.jsxs)("div",{className:je,children:[Object(H.jsx)(E.a,{}),I.map((function(e){var a=[{label:"spa.deposits.holding.option.detail",onOptionClick:function(){return Te(e)}},{label:y?"spa.deposits.holding.option.download.receipt":"spa.deposits.holding.option.share.receipt",onOptionClick:function(){return function(e){if(!C)return;var a={fixedTermDepositURI:e.fixedTermDepositURI,status:e.statusId,rol:e.currencyId,balance:e.capitalAmount};t(u.b.getHoldingDetails(Object(i.a)(Object(i.a)({},a),{},{token:C}))),y?Oe():fe()}(e)}},Object(i.a)({},B&&{label:"spa.deposits.holding.option.withholding.certificate",onOptionClick:function(){return function(e){if(!C)return;t(u.b.getRetentionCertificate({fixedTermDepositURI:e.fixedTermDepositURI,certificateAgreementId:e.agreementId,certificateCode:e.certificateCode,branchId:e.branchOfficeId,token:C})),y?Oe():fe()}(e)}})];return Object(H.jsx)(g.a,{amount:e.capitalAmount,amountText:"spa.deposits.holding.invested.amount",cardLabel:e.productDescription,date:e.validityStart,dateText:"spa.deposits.holding.validity",hasAvatar:!1,operationOptions:a,operationTag:e.productDescription,title:e.productDescription,onClick:function(){return Te(e)}},e.fixedTermDepositURI)}))]});return Object(H.jsxs)(s.b.Fragment,{children:[Object(H.jsx)(E.a,{}),Object(H.jsx)(k,{})]})}():Object(H.jsx)(A.a,{a11yMsg:e({uuid:"spa.deposits.a11y.record.loading"})})})]})})]});function me(){t(u.a.cleanDepositCreation()),a(X)}function Oe(){ae(!0)}function fe(){ce(!0)}function Te(e){var i={fixedTermDepositURI:e.fixedTermDepositURI,status:e.statusId,rol:b.D,balance:e.capitalAmount};t(m.a.clean()),t(u.a.cleanHoldingDetails()),t(u.a.cleanRequestHoldingDetails()),t(u.a.setHoldingDetails(i)),a(z)}function ge(){return Object(H.jsxs)("div",{className:U.a.emptyData,children:[Object(H.jsx)(_.a,{className:U.a.emptyDataMarginBottom,uuid:"depositsEmpty"}),w?Object(H.jsxs)(s.b.Fragment,{children:[Object(H.jsx)(h.b,{align:"center",className:U.a.emptyTitle,tag:"p",uuid:"spa.deposits.holding.empty.title"}),Object(H.jsx)(h.b,{align:"center",tag:"p",uuid:"spa.deposits.holding.empty.description"}),Object(H.jsx)(T.a,{inline:!0,className:U.a.emptyDataMarginTop,label:{uuid:"spa.deposits.start.button"},type:"button",onClick:me})]}):Object(H.jsx)(h.b,{align:"center",tag:"p",uuid:"spa.deposits.holding.empty.record"})]})}}},461:function(e,t,a){e.exports={NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_IMAGE:"Image",TYPE_IMAGE:"Element",NAME_LOADING:"Loading",TYPE_LOADING:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_XS:"xs",NAME_SM:"sm",NAME_MD:"md",NAME_LG:"lg",holdings:"_rules_holdings__3zFn5",floatingButton:"_rules_floatingButton__1ktcb",createDepositCard:"_rules_createDepositCard__27Znc",createDepositCardTitle:"_rules_createDepositCardTitle__Y4Hrv",title:"_rules_title__32MlD",header:"_rules_header__2jSQO",icons:"_rules_icons__2g5wH",tabs:"_rules_tabs__WyVRa",tab:"_rules_tab__WmO-C",tabsBody:"_rules_tabsBody__3YZs5",emptyDataMarginBottom:"_rules_emptyDataMarginBottom__83D--",emptyData:"_rules_emptyData__1P1iY",emptyTitle:"_rules_emptyTitle__RY5it",emptyDataMarginTop:"_rules_emptyDataMarginTop__31etN",tabsHeader:"_rules_tabsHeader__km3D7"}},508:function(e,t,a){"use strict";a.d(t,"a",(function(){return n}));var i=a(6);function n(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"pdf";if("string"===typeof e&&e.trim()){var a=e.trim().toLowerCase().replace(/[^a-zA-Z0-9]/g,i.Nb);return"".concat(a,".").concat(t)}var n=new Date,s=n.getMonth()+i.fb,c=(s<i.Fb?i.Ub:i.D)+s,l=n.getDate(),o=(l<i.Fb?i.Ub:i.D)+l;return"".concat(n.getFullYear(),"_").concat(c,"_").concat(o,".").concat(t)}},731:function(e,t,a){e.exports={NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_DATETIME:"DateTime",TYPE_DATETIME:"Element",NAME_AMOUNT_FORMATTER:"AmountFormatter",TYPE_AMOUNT_FORMATTER:"Element",holdingsTable:"_rules_holdingsTable__2IxEl",tableHead:"_rules_tableHead__KolHK",optionsCell:"_rules_optionsCell__8iJal",dropdown:"_rules_dropdown__3samD",operationTag:"_rules_operationTag__1GpM2",title:"_rules_title__3KDm-",dropdownItem:"_rules_dropdownItem__1o3Q_"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=102.b0a0df3d.chunk.js.map