(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[231],{121:function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var a=n(0),r=n(5),c=n(1),i=n(76),u=n(60),o=Object(c.c)(u.b,{saveDevice:function(t){return Object(r.a)(Object(a.a)().mark((function e(){var n,r;return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.deviceModel,e.next=3,Object(i.d)({deviceModel:n});case 3:if(r=e.sent,!Object(i.e)(r)){e.next=6;break}return e.abrupt("return",null);case 6:return e.abrupt("return",r);case 7:case"end":return e.stop()}}),e)})))()}})},150:function(t,e,n){"use strict";n.d(e,"a",(function(){return i})),n.d(e,"b",(function(){return D})),n.d(e,"d",(function(){return P})),n.d(e,"c",(function(){return y})),n.d(e,"e",(function(){return A}));var a=n(9),r=n(6),c="affidavit",i=function(t){return t.PEP_NO="ADVANCE_STATUS_DDJJ1_PEP_NO",t.PEP_YES="ADVANCE_STATUS_DDJJ1_PEP_YES",t.PEP_FINISHED="ADVANCE_STATUS_DDJJ1_PEP_FINISHED",t.SO_NO="ADVANCE_STATUS_DDJJ2_SO_NO",t.SO_YES="ADVANCE_STATUS_DDJJ2_SO_YES",t.SO_FINISHED="ADVANCE_STATUS_DDJJ2_SO_FINISHED",t.RF_YES="ADVANCE_STATUS_DDJJ3_RF_YES",t.RF_FINISHED="ADVANCE_STATUS_DDJJ3_RF_FINISHED",t.RF_NO="ADVANCE_STATUS_DDJJ3_RF_NO",t}({}),u=function(t){return t[t.PEP=0]="PEP",t[t.PEP_DATA=1]="PEP_DATA",t[t.SO=2]="SO",t[t.SO_DATA=3]="SO_DATA",t[t.RF=4]="RF",t[t.RF_DATA=5]="RF_DATA",t[t.FINISHED=6]="FINISHED",t}({}),o={fetching:!1,error:void 0,affidavitState:u.PEP,isPep:!1,declaration:r.D,declarationBT:r.D,publicFunctionary:r.D,publicPosition:r.D,entitiesPEP:[],isSubject:!1,subjectType:r.D,hasRF:!1,RFCountry:r.D,hasNIF:r.D,NIF:r.D,status:void 0,clientAdditionalDataFunctionaryPublicDateStart:r.D,clientAdditionalDataFunctionaryPublicChargeEntity:r.D,clientAdditionalDataFunctionaryPublicChargeEntityOther:r.D},s=n(2),f=n(12),l=n(1),b=n(0),d=n(19),p=n(5),O=n(116),S=["exchangeToken"],j=["exchangeToken"],y=Object(l.c)(c,{updateStatus:function(t,e){return Object(p.a)(Object(b.a)().mark((function n(){var a,r,c,i;return Object(b.a)().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return a=e.rejectWithValue,r=t.exchangeToken,c=Object(d.a)(t,S),n.next=4,Object(O.c)(Object(s.a)({_exchangeToken:r},c));case 4:if(i=n.sent){n.next=7;break}return n.abrupt("return",null);case 7:if(!Object(O.d)(i)){n.next=9;break}return n.abrupt("return",a(Object(s.a)(Object(s.a)({},i),O.a[i.code])));case 9:return n.abrupt("return",i);case 10:case"end":return n.stop()}}),n)})))()},getEntitiesPEP:function(t,e){return Object(p.a)(Object(b.a)().mark((function n(){var a,r,c,i;return Object(b.a)().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return a=e.rejectWithValue,r=t.exchangeToken,c=Object(d.a)(t,j),n.next=4,Object(O.b)(Object(s.a)({_exchangeToken:r},c));case 4:if(i=n.sent){n.next=7;break}return n.abrupt("return",null);case 7:if(!Object(O.d)(i)){n.next=9;break}return n.abrupt("return",a(Object(s.a)(Object(s.a)({},i),O.a[i.code])));case 9:return n.abrupt("return",i);case 10:case"end":return n.stop()}}),n)})))()}}),D=Object(l.b)(c,["clean","pepDeclaration","pepDeclarationBT","setIsPep","setIsSubject","setSubjectType","setHasRF","setRFCountry","cleanPepDeclaration","cleanSubjectType","cleanRFCountry","cleanRFCountryUSCase"]),F=Object(l.d)(o,(function(t){var e=t.addCase,n=t.addMatcher;e(D.clean,(function(){return Object(s.a)({},o)})),e(D.pepDeclaration,(function(t,e){var n=e.payload;t.declaration=n.declaration,t.publicFunctionary=n.publicFunctionary,t.publicPosition=n.publicPosition,t.affidavitState=u.SO})),e(D.pepDeclarationBT,(function(t,e){var n=e.payload;t.declarationBT=n.declarationBT,t.publicFunctionary=n.publicFunctionary,t.publicPosition=n.publicPosition,t.clientAdditionalDataFunctionaryPublicChargeEntity=n.clientAdditionalDataFunctionaryPublicChargeEntity,t.clientAdditionalDataFunctionaryPublicChargeEntityOther=n.clientAdditionalDataFunctionaryPublicChargeEntityOther,t.clientAdditionalDataFunctionaryPublicDateStart=n.clientAdditionalDataFunctionaryPublicDateStart,t.affidavitState=u.SO})),e(y.getEntitiesPEP.fulfilled,(function(t,e){var n=e.payload;if(t.fetching=!1,t.error=o.error,n){var a=n.data.entitiesPEP;t.entitiesPEP=a}})),e(D.setIsPep,(function(t,e){var n=e.payload;t.affidavitState=n?u.PEP_DATA:u.SO,t.isPep=n})),e(D.setIsSubject,(function(t,e){var n=e.payload;t.isSubject=n;var a=t.RFCountry?u.RF_DATA:u.RF;t.affidavitState=n?u.SO_DATA:a})),e(D.setSubjectType,(function(t,e){var n=e.payload;t.subjectType=n.subjectType,t.affidavitState=t.RFCountry?u.RF_DATA:u.RF})),e(D.setHasRF,(function(t,e){var n=e.payload;t.hasRF=n,t.affidavitState=n?u.RF_DATA:u.FINISHED})),e(D.setRFCountry,(function(t,e){var n=e.payload;t.RFCountry=n.RFCountry,n.hasNIF&&(t.hasNIF=n.hasNIF,t.NIF=n.NIF,t.affidavitState=u.FINISHED)})),e(D.cleanPepDeclaration,(function(t){t.affidavitState=u.PEP})),e(D.cleanSubjectType,(function(t){t.affidavitState=u.SO,t.RFCountry=r.D})),e(D.cleanRFCountry,(function(t){t.affidavitState=u.RF,t.RFCountry=r.D})),e(D.cleanRFCountryUSCase,(function(t){t.affidavitState=u.RF_DATA})),e(y.updateStatus.fulfilled,(function(t,e){var n=e.meta;t.status=n.arg.status,t.fetching=!1,t.error=o.error})),n((function(t){return Object(f.b)(t,c)}),(function(t){t.fetching=!0,t.error=o.error})),n((function(t){return Object(f.c)(t,c)}),(function(t,e){var n=e.payload;t.fetching=!1,t.error=n}))}));function P(t){return t[c]}P.isStep1=Object(l.e)(P,(function(t){return t.affidavitState===u.PEP})),P.isStep1Pep=Object(l.e)(P,(function(t){return t.affidavitState===u.PEP_DATA})),P.isStep2=Object(l.e)(P,(function(t){return t.affidavitState===u.SO})),P.isStep2SO=Object(l.e)(P,(function(t){return t.affidavitState===u.SO_DATA})),P.isStep3=Object(l.e)(P,(function(t){return t.affidavitState===u.RF})),P.isStep3RF=Object(l.e)(P,(function(t){return t.affidavitState===u.RF_DATA})),P.isAffidavit=Object(l.e)(P,(function(t){return t.affidavitState!==u.FINISHED})),P.isPep=Object(l.e)(P,(function(t){return t.isPep})),P.isSubject=Object(l.e)(P,(function(t){return t.isSubject})),P.hasNIF=Object(l.e)(P,(function(t){return t.hasNIF})),P.hasRF=Object(l.e)(P,(function(t){return t.hasRF})),P.subjectType=Object(l.e)(P,(function(t){return t.subjectType})),P.publicPositionDeclaration=Object(l.e)(P,(function(t){return t.declaration})),P.publicPositionDeclarationBT=Object(l.e)(P,(function(t){return t.declarationBT})),P.publicChargeEntity=Object(l.e)(P,(function(t){return t.clientAdditionalDataFunctionaryPublicChargeEntity})),P.publicChargeDateStart=Object(l.e)(P,(function(t){return t.clientAdditionalDataFunctionaryPublicDateStart})),P.publicChargeEntityOther=Object(l.e)(P,(function(t){return t.clientAdditionalDataFunctionaryPublicChargeEntityOther})),P.publicPositionType=Object(l.e)(P,(function(t){return t.publicFunctionary})),P.publicPosition=Object(l.e)(P,(function(t){return t.publicPosition})),P.countryRFId=Object(l.e)(P,(function(t){return t.RFCountry})),P.exteriorIdentification=Object(l.e)(P,(function(t){return t.NIF})),P.fetching=Object(l.e)(P,(function(t){return t.fetching})),P.error=Object(l.e)(P,(function(t){return t.error})),P.finalStatus=Object(l.e)(P,(function(t){return i.RF_NO===t.status||i.RF_FINISHED===t.status})),P.entitiesPEP=Object(l.e)(P,(function(t){return t.entitiesPEP.map((function(t){var e=t.id,n=t.name;return{label:n,value:e,searchKey:n}}))}));var A=Object(a.a)({},c,F)},162:function(t,e,n){"use strict";n.d(e,"a",(function(){return p})),n.d(e,"c",(function(){return j})),n.d(e,"b",(function(){return b})),n.d(e,"d",(function(){return y}));var a=n(9),r="account",c={fetching:!1,accounts:void 0,familyTypes:[],hasFavoriteAccounts:!1,ignorePersonalization:!1,onlyInternal:[],error:void 0},i=n(2),u=n(1),o=n(12),s=n(0),f=n(5),l=n(96),b=Object(u.c)(r,{listAccounts:function(t,e){return Object(f.a)(Object(s.a)().mark((function n(){var a,r,c,u;return Object(s.a)().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(a=e.rejectWithValue,r=t.token){n.next=4;break}return n.abrupt("return",null);case 4:return n.next=6,Object(l.b)({token:r});case 6:if(c=n.sent){n.next=9;break}return n.abrupt("return",null);case 9:if(!Object(l.c)(c)){n.next=11;break}return n.abrupt("return",a(Object(i.a)(Object(i.a)({},c),l.a[c.code])));case 11:return u=d(c),n.abrupt("return",u);case 13:case"end":return n.stop()}}),n)})))()}});function d(t){var e=t.code,n=t.idTransaction,a=t.message,r=t.data,c=r.accounts,i=r.familyTypes,u=r.hasFavoriteAccounts,o=r.onlyInternal,s=r.ignorePersonalization;return{code:e,data:{accounts:null===c||void 0===c?void 0:c.map((function(t){return{idProduct:t.idProduct,balance:t.balance,productAlias:t.productAlias,productType:t.productType,family:t.family,overdraftLine:t.overdraftLine,currency:t.currency,actualBalance:t.actualBalance,shortLabel:t.shortLabel,ordinal:t.ordinal}})),familyTypes:i,hasFavoriteAccounts:u,onlyInternal:o,ignorePersonalization:s},idTransaction:n,message:a}}var p=Object(u.b)(r,["clean"]),O=Object(u.d)(c,(function(t){var e=t.addCase,n=t.addMatcher;e(p.clean,(function(){return Object(i.a)({},c)})),e(b.listAccounts.fulfilled,(function(t,e){var n=e.payload;if(t.fetching=!1,n){var a=n.data,r=a.accounts,c=a.familyTypes,i=a.hasFavoriteAccounts,u=a.onlyInternal,o=a.ignorePersonalization;t.accounts=r,t.familyTypes=c,t.onlyInternal=u,t.ignorePersonalization=o,t.hasFavoriteAccounts=i}})),n((function(t){return Object(o.b)(t,r)}),(function(t){t.fetching=!0,t.error=c.error})),n((function(t){return Object(o.c)(t,r)}),(function(t,e){var n=e.payload;t.fetching=!1,t.error=n}))})),S=n(6);function j(t){return t[r]}j.accounts=Object(u.e)(j,(function(t){return t.accounts})),j.hasAccounts=Object(u.e)(j,(function(t){return(t.accounts||[]).length>S.Sb})),j.hasFavoriteAccounts=Object(u.e)(j,(function(t){return t.hasFavoriteAccounts})),j.familyTypes=Object(u.e)(j,(function(t){return t.familyTypes})),j.onlyInternal=Object(u.e)(j,(function(t){return t.onlyInternal})),j.isIgnorePersonalization=Object(u.e)(j,(function(t){return t.ignorePersonalization})),j.fetching=Object(u.e)(j,(function(t){return t.fetching})),j.error=Object(u.e)(j,(function(t){return t.error}));var y=Object(a.a)({},r,O)},35:function(t,e,n){"use strict";n.d(e,"a",(function(){return c}));var a=n(1),r=n(60),c=Object(a.b)(r.b,["setBiometryPreferencesRequested","setBiometrySessionRequested","setBiometrySessionConfigured","setBiometryDeviceSaved","setAvailability","setJustLoggedOut","setIsFingerButtonClicked","setLockoutDate","setPermanentLockout"])}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=main~61a1ca38.a98fd32b.chunk.js.map