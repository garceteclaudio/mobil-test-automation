(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[174],{334:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return N}));var c=n(16),a=n(11),i=n(8),r=n(151),o=n(270),s=n(33),u=n(153),l=n(499),b=n(154),f=n(508),O=n(501),p=n(271),d=n(588),j=n(519),m=n(6),E=n(38),T=n(80),h=n(20),x=n(83),A=n(10);function N(e){var t,n=e.fromWidget,N=Object(i.b)(),_=Object(T.g)(),g=Object(E.c)().textGet,v=a.b.useState(!1),D=Object(c.a)(v,2),w=D[0],R=D[1],S=a.b.useState(!1),C=Object(c.a)(S,2),F=C[0],P=C[1],L=Object(i.c)(r.c.fetching),M=Object(i.c)(u.c.transactionsFetching),k=Object(i.c)(r.c.loanSimulation),y=Object(i.c)(r.c.offer),I=Object(i.c)(s.e.token),U=Object(i.c)(r.c.selectedLoanTerm),Y=Object(i.c)(s.e.token),V=Object(i.c)(r.c.idCreateLoanTransaction),W=Object(i.c)(b.c.filename),B=Object(i.c)(b.c.content),G=Object(i.c)(b.c.fetchedFile),H=Object(i.c)(r.c.loanAmount),z=Object(i.c)(u.c.transaction),J=Object(f.a)(W),X=L||M,Z=Object(l.a)(),q=g({uuid:"spa.loan.simulate.step5.title"});return a.b.useEffect((function(){return function(){N(u.a.clean())}}),[N]),a.b.useEffect((function(){Y&&V&&N(u.b.readTransaction({accessToken:Y,idTransaction:V}))}),[N,Y,V]),a.b.useEffect((function(){(F||w)&&I&&V&&(G||W||B?(W&&B&&(w&&(Z(J,Object(O.a)(B)),R(!1)),F&&(Object(p.a)({options:{message:W,subject:W},files:[{fileName:J,base64File:B}]}),P(!1))),N(b.a.setFetchedFile(!1))):N(b.b.generatePdf({token:I,idTransaction:V})))}),[B,N,w,G,W,J,Z,V,F,I]),k&&y&&U&&!X&&H?Object(A.jsx)(d.a,{isCenterDescription:!0,buttonLabelOnFinish:"spa.form.finish",handleOnFinish:function(){N(r.a.clean()),_(n?h.m:h.s)},handleReceipt:function(){N(r.a.setPreTicket(!0))},idTransaction:V,transactionDescription:"spa.loan.simulate.step5pre.description",transactionStatus:z?z.idTransactionStatus:x.e.STATUS_FAILED,transactionSubTitle:(t=H,Object(j.a)(t,{minimumFractionDigits:m.Jb,maximumFractionDigits:m.Jb})),transactionTitle:q}):Object(A.jsx)(o.a,{})}},499:function(e,t,n){"use strict";n.d(t,"a",(function(){return O}));var c=n(0),a=n(5);function i(e){var t=e.filename,n=e.path,c=e.flags;return new Promise((function(e,a){var i;function r(e){a(e)}(i=window.cordova.file[n],new Promise((function(e,t){window.resolveLocalFileSystemURL(i,(function(t){e(t)}),(function(e){t(e)}))}))).then((function(n){var a=n;a.getFile(t,c,(function(t){var n=new FileReader;t.createWriter((function(c){e({fileEntry:t,dirEntry:a,fileReader:n,fileWriter:c,fileWrite:function(e){return new Promise((function(t,n){c.onwriteend=function(){return t(c)},c.onerror=function(e){return n(e)},c.write(e)}))},fileRemove:function(){return new Promise((function(e,n){t.remove((function(){return e(!0)}),(function(e){return n(e)}))}))}})}),r)}),r)}))}))}var r=n(36),o=n(26),s=n(28);function u(){return l.apply(this,arguments)}function l(){return(l=Object(a.a)(Object(c.a)().mark((function e(){var t;return Object(c.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(o.c)();case 2:if(e.sent&&cordova.plugins){e.next=5;break}throw o.a.CORDOVA_UNAVAILABLE;case 5:if(t=cordova.plugins.fileOpener2){e.next=8;break}throw o.a.PLUGIN_UNAVAILABLE;case 8:return e.abrupt("return",t);case 9:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function b(e){return f.apply(this,arguments)}function f(){return f=Object(a.a)(Object(c.a)().mark((function e(t){var n,a,i,r,l;return Object(c.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.contentType,a=t.fileName,i=t.withDialog,e.next=3,Object(o.c)();case 3:if(e.sent){e.next=6;break}throw o.a.CORDOVA_UNAVAILABLE;case 6:return e.next=8,u();case 8:return r=e.sent,l=i?r.open:r.showOpenWithDialog,e.abrupt("return",new Promise((function(e,t){try{l(a,n,{success:function(){e({code:s.a.SUCCESS,value:!0})},error:function(e){function t(t){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}((function(e){t("boolean"===typeof e?new s.b(s.a.ERROR,r.open.name,s.c):new s.b(s.a.ERROR,r.open.name,e.message))}))})}catch(c){t(new s.b(s.a.ERROR_UNKNOWN,r.open.name,s.c))}})));case 11:case"end":return e.stop()}}),e)}))),f.apply(this,arguments)}function O(){var e=Object(r.i)(),t=e.isDesktop,n=e.isUnknown,o=e.platform;function s(e){var t=e.split(".").pop();return"png"===t||"jpg"===t||"gif"===t||"bmp"===t?"image/".concat(t):"pdf"===t?"application/".concat(t):"doc"===t||"docx"===t?"application/msword":"ppt"===t||"pptx"===t?"application/vnd.ms-powerpoint":"xls"===t||"xlsx"===t?"application/vnd.ms-excel":"xlsm"===t?"application/vnd.ms-excel.sheet.macroEnabled.12":"txt"===t?"text/plain":"zip"===t?"application/zip":void 0}return function(){var e=Object(a.a)(Object(c.a)().mark((function e(a,u){var l,f,O,p,d,j,m;return Object(c.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(l=o===r.b.CORDOVA_ANDROID,!(f=s(a))){e.next=19;break}if(!t&&!n){e.next=9;break}return(O=document.createElement("a")).href=window.URL.createObjectURL(u),O.download=a,O.click(),e.abrupt("return");case 9:return e.next=11,i({filename:a,path:l?"externalApplicationStorageDirectory":"dataDirectory",flags:{create:!0,exclusive:!1}});case 11:return p=e.sent,d=p.fileWrite,j=p.fileEntry,e.next=16,d(u);case 16:return m={contentType:f,fileName:j.nativeURL,withDialog:!0},e.next=19,b(m);case 19:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}()}},501:function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var c=512,a=0;function i(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:c,i=window.atob(e),r=[],o=a;o<i.length;o+=n){for(var s=i.slice(o,o+n),u=new Array(s.length),l=a;l<s.length;l++)u[l]=s.charCodeAt(l);r.push(new Uint8Array(u))}return new Blob(r,{type:t})}},508:function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));var c=n(6);function a(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"pdf";if("string"===typeof e&&e.trim()){var n=e.trim().toLowerCase().replace(/[^a-zA-Z0-9]/g,c.Nb);return"".concat(n,".").concat(t)}var a=new Date,i=a.getMonth()+c.fb,r=(i<c.Fb?c.Ub:c.D)+i,o=a.getDate(),s=(o<c.Fb?c.Ub:c.D)+o;return"".concat(a.getFullYear(),"_").concat(r,"_").concat(s,".").concat(t)}},519:function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var c=n(2),a=n(6),i={locales:a.X.ES_AR,currencySymbol:a.b,minimumFractionDigits:a.Sb,maximumFractionDigits:a.Jb,suffix:a.D};function r(e,t){var n=Object(c.a)(Object(c.a)({},i),t),r=n.locales,o=n.currencySymbol,s=n.minimumFractionDigits,u=n.maximumFractionDigits,l=n.options,b=n.suffix,f=Object(c.a)({minimumFractionDigits:s,maximumFractionDigits:u},l),O=new Intl.NumberFormat(r,f);return(e||e===a.Sb)&&O?"".concat(o,"\xa0").concat(O.format(e)).concat(b):a.D}},588:function(e,t,n){"use strict";n.d(t,"a",(function(){return C}));var c=n(2),a=n(16),i=n(19),r=n(11),o=n(41),s=n(501),u=n(271),l=n(6),b=n(8),f=n(69),O=n(33),p=n(154),d=n(50),j=n(499),m=n(508),E=n(136),T=n(38),h=n(82),x=n(270),A=n(589),N=n.n(A),_=n(590),g=n.n(_),v=n(10),D=["transactionStatus","transactionTitle","transactionSubTitle","transactionDescription","idTransaction","isCenterDescription","buttonLabelOnFinish","buttonLabelOnCancel","handleOnFinish","handleOnCancel","handleReceipt"],w=g.a.NAME_TRANSACTION,R=g.a.TYPE_TRANSACTION,S={buttonLabelOnCancel:l.D,isCenterDescription:!1,transactionDescription:l.D,transactionSubTitle:l.D};function C(e){var t=e,n=t.transactionStatus,l=t.transactionTitle,A=t.transactionSubTitle,_=t.transactionDescription,g=t.idTransaction,S=t.isCenterDescription,C=t.buttonLabelOnFinish,F=t.buttonLabelOnCancel,P=t.handleOnFinish,L=t.handleOnCancel,M=t.handleReceipt,k=Object(i.a)(t,D),y=Object(b.c)(f.c.isDesktop),I=Object(b.b)(),U=Object(j.a)(),Y=r.b.useState(!1),V=Object(a.a)(Y,2),W=V[0],B=V[1],G=r.b.useState(!1),H=Object(a.a)(G,2),z=H[0],J=H[1],X=Object(b.c)(O.e.token),Z=Object(b.c)(p.c.fetching),q=Object(b.c)(p.c.fetchedFile),K=Object(b.c)(p.c.filename),Q=Object(b.c)(p.c.content),$=Object(m.a)(K),ee=Object(o.c)(!y&&N.a.cover);r.b.useEffect((function(){I(p.a.clean())}),[I]),r.b.useEffect((function(){(z||W)&&X&&(q||K||Q?(K&&Q&&(W&&(U($,Object(s.a)(Q)),B(!1)),z&&(Object(u.a)({options:{message:K,subject:K},files:[{fileName:$,base64File:Q}]}),J(!1))),I(p.a.setFetchedFile(!1))):I(p.b.generatePdf({token:X,idTransaction:g})))}),[Q,I,W,q,K,$,U,g,z,X]);var te={ACCEPTED:Object(v.jsx)(E.a,{uuid:"pending"}),CANCELLED:Object(v.jsx)(E.a,{uuid:"success"}),FINISHED:Object(v.jsx)(E.a,{uuid:"success"}),PENDING:Object(v.jsx)(E.a,{uuid:"signature"}),PROCESSING:Object(v.jsx)(E.a,{uuid:"pending"}),SCHEDULED:Object(v.jsx)(E.a,{uuid:"pending"}),RETURNED:Object(v.jsx)(E.a,{uuid:"pending"}),FAILED:Object(v.jsx)(E.a,{uuid:"error"})};return Z?Object(v.jsx)(x.a,{}):Object(v.jsxs)(o.a,Object(c.a)(Object(c.a)({},k),{},{className:ee,name:w,type:R,children:[Object(v.jsxs)("section",{children:[te[n],Object(v.jsx)(T.b,{className:N.a.title,tag:"h1",children:l}),A&&Object(v.jsx)(T.b,{className:N.a.title,tag:"h1",children:A}),_&&Object(v.jsx)(T.b,{className:S?N.a.descriptionCentered:N.a.description,uuid:_})]}),Object(v.jsxs)("footer",{children:[Object(v.jsxs)("div",{className:N.a.actions,children:[Object(v.jsxs)(h.a,{kind:"plain",label:{uuid:ne()},onClick:function(){if(y)return void B(!0);J(!0)},children:[Object(v.jsx)(d.Icon,{name:y?"download":"share",size:"small"}),Object(v.jsx)(T.b,{uuid:ne()})]}),Object(v.jsxs)(h.a,{kind:"plain",label:{uuid:"spa.transaction.button.receipt"},onClick:M,children:[Object(v.jsx)(d.Icon,{name:"ticket",size:"small"}),Object(v.jsx)(T.b,{uuid:"spa.transaction.button.receipt"})]})]}),Object(v.jsx)(h.a,Object(c.a)(Object(c.a)({},y&&{inline:!0}),{},{label:{uuid:C},onClick:P})),L&&Object(v.jsx)(h.a,Object(c.a)(Object(c.a)({},y&&{inline:!0}),{},{label:{uuid:F},variant:"text",onClick:L}))]})]}));function ne(){return y?"spa.a11y.buttons.download":"spa.a11y.buttons.share"}}C.defaultProps=S},589:function(e,t,n){e.exports={NAME_TRANSACTION:"Transaction",TYPE_TRANSACTION:"Element",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_IMAGE:"Image",TYPE_IMAGE:"Element",NAME_XS:"xs",NAME_SM:"sm",NAME_MD:"md",NAME_LG:"lg",cover:"_rules_cover__2hqAT",title:"_rules_title__2VZkn",description:"_rules_description__1WWps",descriptionCentered:"_rules_descriptionCentered__6nC7N",actions:"_rules_actions__m4GPx"}},590:function(e,t,n){e.exports={NAME_TRANSACTION:"Transaction",TYPE_TRANSACTION:"Element"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=174.328c89da.chunk.js.map