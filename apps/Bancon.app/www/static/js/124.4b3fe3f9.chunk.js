(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[124,80,167,199,309],{338:function(e,t,a){"use strict";a.r(t),a.d(t,"default",(function(){return R}));var n=a(2),r=a(16),o=a(11),i=a(38),c=a(82),u=a(489),l=a(488),d=a(503),s=a(507),b=a(494),m=a(566),E=a(270),j=a(187),O=a(39),f=a(99),T=a(506),p=a(8),_=a(150),h=a(147),P=a(6),N=a(431),g=a.n(N),A=a(10);function R(){var e=Object(p.b)(),t=Object(i.c)().textGet,a=Object(f.a)().getValueConfig,N=o.b.useState(!1),R=Object(r.a)(N,2),M=R[0],v=R[1],x=Object(p.c)(h.c.exchangeToken),S=Object(p.c)(_.d.fetching),C=Object(p.c)(_.d.publicPositionDeclarationBT),F=Object(p.c)(_.d.publicPositionType),I=Object(p.c)(_.d.publicPosition),y=Object(p.c)(_.d.entitiesPEP),D=Object(p.c)(_.d.publicChargeEntity),L=Object(p.c)(_.d.publicChargeDateStart),Y=Object(p.c)(_.d.publicChargeEntityOther),U=P.Gb,w=P.Sb,V="Otro",B=new Date,H=new Date((new Date).setFullYear((new Date).getFullYear()-P.Cb)),k=t({uuid:"spa.generic.field.error.required"}),X=t({uuid:"spa.onboarding.error.exceeds.maximum.allowed",replace:"".concat(U)}),G=t({uuid:"spa.onboarding.ddjj.pep.form.label.1"}),q=t(M?{uuid:"spa.onboarding.ddjj.pep.form.label.3.family"}:{uuid:"spa.onboarding.ddjj.pep.form.label.3.pep"}),K=t({uuid:"spa.onboarding.ddjj.pep.form.label.4.pep"}),J=t({uuid:"spa.onboarding.ddjj.pep.form.label.5.pep"}),z=t({uuid:"spa.onboarding.ddjj.pep.form.label.6.pep"}),W=o.b.useState(!1),Z=Object(r.a)(W,2),Q=Z[0],$=Z[1];o.b.useEffect((function(){x&&e(_.c.getEntitiesPEP({exchangeToken:x}))}),[e,x]);var ee=O.e.object({declarationBT:Object(j.d)(O.e.string.required(),k),publicFunctionary:Object(j.d)(O.e.string.required(),k),publicPosition:Object(O.c)((function(e){return String(e)&&e?String(e).trim()?Object(j.d)(O.e.string.ofLength(w,U),X):Object(j.d)(Object(j.l)(),k):Object(j.d)(O.e.string.required(),k)})),clientAdditionalDataFunctionaryPublicDateStart:Object(j.d)(O.e.date(),k),clientAdditionalDataFunctionaryPublicChargeEntity:Object(j.d)(O.e.string.required(),k),clientAdditionalDataFunctionaryPublicChargeEntityOther:Object(O.c)((function(e,t){var a,n=t.branch[P.Sb].clientAdditionalDataFunctionaryPublicChargeEntity;if((null===(a=y.find((function(e){return e.value===n})))||void 0===a?void 0:a.value)===V){if(!String(e)||!e)return Object(j.d)(O.e.string.required(),k);if(!String(e).trim())return Object(j.d)(Object(j.l)(),k)}return O.e.any()}))}),te=function(){var e=t({uuid:"spa.onboarding.ddjj.pep.form.combo.1"}),a=t({uuid:"spa.onboarding.ddjj.pep.form.combo.2"}),n=t({uuid:"spa.onboarding.ddjj.pep.form.combo.3"});return[{id:P.hb,value:e},{id:P.Kb,value:a},{id:P.Ib,value:n}].map((function(e){var t=e.id,a=e.value;return{isDisabled:!1,value:t,label:a,searchKey:a}}))}(),ae=te.find((function(e){return e.value===C})),ne=y.find((function(e){return e.value===D}));return S?Object(A.jsx)(E.a,{}):Object(A.jsx)(u.a,{"header-onBack":function(){e(_.b.cleanPepDeclaration())},children:Object(A.jsx)("section",{children:Object(A.jsxs)(l.a,{schema:ee,onSubmit:function(t){if(!x)return;var a=t.clientAdditionalDataFunctionaryPublicDateStart.toString(),r=Object(n.a)(Object(n.a)({},t),{},{clientAdditionalDataFunctionaryPublicDateStart:a});e(_.c.updateStatus({status:_.a.PEP_FINISHED,exchangeToken:x})),e(_.b.pepDeclarationBT(r))},children:[Object(A.jsx)("header",{children:Object(A.jsx)(i.b,{tag:"h1",uuid:"spa.onboarding.ddjj.pep.form.title"})}),Object(A.jsx)("div",{className:g.a.formContainer,children:Object(A.jsx)(d.a,{defaultOption:ae,label:G,name:"declarationBT",options:te,onSelectOption:function(e){var t=e.value,a=t===P.Kb||t===P.Ib;v(a)}})}),Object(A.jsxs)("div",{className:g.a.formContainer,children:[Object(A.jsx)(i.b,{tag:"p",uuid:M?"spa.onboarding.ddjj.pep.form.label.2.family":"spa.onboarding.ddjj.pep.form.label.2.pep"}),Object(A.jsx)(T.a,{name:"publicFunctionary",value:F,children:"".concat(a("onboarding.ddjj.pep.form.label.2.types")).split(P.lb).map((function(e){var a=t({uuid:"spa.onboarding.ddjj.pep.form.label.2.type.".concat(e)});return Object(A.jsx)(s.a,{id:"publicFunctionary-".concat(a),label:a,name:"publicFunctionary",value:e},a)}))})]}),Object(A.jsx)("div",{className:g.a.formContainer,children:Object(A.jsx)(b.a,{defaultValue:I,label:q,name:"publicPosition"})}),Object(A.jsx)("div",{className:g.a.formContainer,children:Object(A.jsx)(m.a,{hasMonthYearDropDown:!0,defaultValue:L,label:K,maxDate:B,minDate:H,name:"clientAdditionalDataFunctionaryPublicDateStart"})}),Object(A.jsx)("div",{className:g.a.formContainer,children:Object(A.jsx)(d.a,{defaultOption:ne,label:J,name:"clientAdditionalDataFunctionaryPublicChargeEntity",options:y.map((function(e){var t=e.label,a=e.value;return{value:a,label:t,searchKey:a}})),onSelectOption:function(e){if(e.value===V)return void $(!0);$(!1)}})}),Q&&Object(A.jsx)("div",{className:g.a.formContainer,children:Object(A.jsx)(b.a,{defaultValue:Y,label:z,name:"clientAdditionalDataFunctionaryPublicChargeEntityOther"})}),Object(A.jsx)(c.a,{label:{uuid:"spa.onboarding.ddjj.form.continue"},type:"submit"})]})})})}},431:function(e,t,a){e.exports={NAME_EXTERNAL_CONTAINER:"ContainerExternal",TYPE_EXTERNAL_CONTAINER:"Container",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",infoContainer:"_rules_infoContainer__NsT2B",formContainer:"_rules_formContainer__3oZ9K",title:"_rules_title__13-ed",importantText:"_rules_importantText__1NiIU",downloadText:"_rules_downloadText__3FDkn"}},488:function(e,t,a){"use strict";a.d(t,"a",(function(){return p}));var n=a(2),r=a(16),o=a(19),i=a(11),c=a(502),u=a(505),l=a(41),d=a(6),s=a(79),b=a(8),m=a(493),E=a.n(m),j=a(10),O=["ariaLabel","ariaLabelledby","schema","onSubmit","children","warnings","isRequiredToast","isResetForm"],f=E.a.NAME_FORM,T=E.a.TYPE_FORM;function p(e){var t=e,a=t.ariaLabel,m=t.ariaLabelledby,E=t.schema,p=t.onSubmit,_=t.children,h=t.warnings,P=t.isRequiredToast,N=t.isResetForm,g=Object(o.a)(t,O),A=Object(b.b)(),R=Object(c.e)({resolver:Object(u.a)(E)}),M=R.handleSubmit,v=R.setError,x=R.formState.errors,S=R.reset,C=Object.keys(x),F=i.b.useState(!1),I=Object(r.a)(F,2),y=I[0],D=I[1],L=i.b.useCallback((function(){P&&y&&A(s.a.set({kind:"ERROR",text:{uuid:"spa.form.field.generic.error"},duration:d.w})),D(!1)}),[A,P,y]),Y=i.b.useCallback((function(){S()}),[S]);return i.b.useEffect((function(){h&&Object.keys(h.data).map((function(e){var t=e.startsWith(d.Nb)?e.slice(d.fb):e;return v(t,{message:h.data[e]},{shouldFocus:!1}),null})),C.length>d.Sb&&L(),N&&Y()}),[C.length,N,Y,v,L,h]),Object(j.jsx)(c.b,Object(n.a)(Object(n.a)(Object(n.a)({},R),g),{},{children:Object(j.jsx)(l.a,{noValidate:!0,"aria-label":a,"aria-labelledby":m,name:f,tag:"form",type:T,onSubmit:M(p,(function(){return D(!y)})),children:_})}))}p.useContext=c.f,p.defaultProps={isRequiredToast:!0,isResetForm:!1,warnings:null}},489:function(e,t,a){"use strict";a.d(t,"a",(function(){return f}));var n=a(2),r=a(19),o=(a(11),a(41)),i=a(136),c=a(82),u=a(38),l=a(101),d=a(491),s=a.n(d),b={name:s.a.NAME_EXTERNAL_CONTAINER,type:s.a.TYPE_EXTERNAL_CONTAINER,showLogo:!1},m=a(492),E=a.n(m),j=a(10),O=["header-onBack","header-title","children","name","type","headerClassName","showLogo"];function f(e){var t=e,a=t["header-onBack"],d=t["header-title"],s=t.children,b=t.name,m=t.type,f=t.headerClassName,T=t.showLogo,p=Object(r.a)(t,O),_=Boolean(a||d),h=Object(o.c)(!d&&E.a.onlyRow,f),P=Object(o.c)(T&&E.a.step1Logo),N=Object(o.c)(T&&E.a.hasLogo);return Object(j.jsxs)(l.a,{children:[T&&Object(j.jsx)("div",{className:P,children:Object(j.jsx)(i.a,{alt:"logo",uuid:"logo150Login"})}),Object(j.jsx)(o.a,Object(n.a)(Object(n.a)({name:b,tag:"article",type:m},p),{},{children:Object(j.jsxs)("article",{className:N,children:[_&&Object(j.jsxs)("header",{className:h,children:[a&&Object(j.jsx)(c.a,{icon:"left",kind:"icon",label:{uuid:"spa.a11y.buttons.back"},size:"medium",variant:"text",onClick:a}),d&&Object(j.jsx)(u.b,{tag:"h5",uuid:d})]}),s]})}))]})}f.defaultProps=b},491:function(e,t,a){e.exports={NAME_EXTERNAL_CONTAINER:"ContainerExternal",TYPE_EXTERNAL_CONTAINER:"Container"}},492:function(e,t,a){e.exports={NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_LINK:"Link",TYPE_LINK:"Element",NAME_IMAGE:"Image",TYPE_IMAGE:"Element",NAME_XS:"xs",NAME_SM:"sm",NAME_MD:"md",NAME_LG:"lg",NAME_EXTERNAL_CONTAINER:"ContainerExternal",TYPE_EXTERNAL_CONTAINER:"Container",hasLogo:"_rules_hasLogo__AxHGK",onlyRow:"_rules_onlyRow__1im8h",step1Logo:"_rules_step1Logo__3LNq5"}},493:function(e,t,a){e.exports={NAME_FORM:"Form",TYPE_FORM:"Element"}},494:function(e,t,a){"use strict";a.d(t,"a",(function(){return f}));var n=a(2),r=a(19),o=a(16),i=a(11),c=a(50),u=a(41),l=a(488),d=a(498),s=a.n(d),b=a(10),m=["id","name","methods","defaultValue","pattern","withSuggestions","onChange","onBlur"],E=s.a.NAME_INPUT_FIELD,j=s.a.TYPE_INPUT_FIELD,O=i.b.memo((function(e){var t,a=i.b.useState(!1),l=Object(o.a)(a,2),d=l[0],s=l[1],O=e.id,f=e.name,T=e.methods,p=e.defaultValue,_=e.pattern,h=e.withSuggestions,P=void 0===h||h,N=e.onChange,g=e.onBlur,A=Object(r.a)(e,m),R=T.register,M=T.formState,v=T.setValue,x=T.clearErrors,S=M.errors,C="".concat(f),F=S[f];return i.b.useEffect((function(){p&&v(C,p),p||v(C,void 0),P&&s(!0)}),[p,C,v,P,s]),Object(b.jsx)(u.a,{name:E,type:j,children:Object(b.jsx)(c.TextField,Object(n.a)(Object(n.a)(Object(n.a)(Object(n.a)(Object(n.a)({id:O||f},p&&{defaultValue:p}),F&&{error:null===(t=F.message)||void 0===t?void 0:t.toString()}),R(C,{onChange:function(e){N&&N(e);x([C])},onBlur:g})),A),{},{autoComplete:P?"on":"off",pattern:_,onKeyDown:function(e){e.target.value||d||s(!0)}}))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function f(e){var t=l.a.useContext();return Object(b.jsx)(O,Object(n.a)({methods:t},e))}f.displayName=E},498:function(e,t,a){e.exports={NAME_INPUT_FIELD:"InputField",TYPE_INPUT_FIELD:"Element"}},503:function(e,t,a){"use strict";a.d(t,"a",(function(){return T}));var n=a(272),r=a(2),o=a(16),i=a(19),c=a(11),u=a(50),l=a(41),d=a(488),s=a(516),b=a.n(s),m=a(10),E=["id","name","methods","options","defaultOption","onSelectOption"],j=b.a.NAME_INPUT_SELECT,O=b.a.TYPE_INPUT_SELECT,f=c.b.memo((function(e){var t,a=e.id,n=e.name,d=e.methods,s=e.options,b=e.defaultOption,f=e.onSelectOption,T=Object(i.a)(e,E),p=d.register,_=d.formState,h=d.setValue,P=d.watch,N=_.errors,g="".concat(n),A=c.b.useState(b),R=Object(o.a)(A,2),M=R[0],v=R[1];P(g);var x=c.b.useRef(null),S=N[n];return c.b.useEffect((function(){null!==b&&void 0!==b&&b.value&&h(g,null===b||void 0===b?void 0:b.value,{shouldValidate:!0})}),[null===b||void 0===b?void 0:b.value,g,h]),c.b.useEffect((function(){x.current&&x.current.blur()}),[S]),c.b.useEffect((function(){M||v(b)}),[b,M]),Object(m.jsx)(l.a,{name:j,type:O,children:Object(m.jsx)(u.SelectField,Object(r.a)(Object(r.a)(Object(r.a)({defaultOption:M,id:a||n,options:s},p(g)),S&&{error:null===(t=S.message)||void 0===t?void 0:t.toString()}),{},{ref:x,onSelectOption:function(e){h(g,e.value,{shouldValidate:!0}),f&&f(e)}},T))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function T(e){var t=d.a.useContext(),a=e,o=Object.assign({},(Object(n.a)(a),a));return Object(m.jsx)(f,Object(r.a)({methods:t},o))}},506:function(e,t,a){"use strict";a.d(t,"a",(function(){return f}));var n=a(2),r=a(19),o=a(11),i=a(50),c=a(41),u=a(488),l=a(509),d=a.n(l),s=a(10),b=["id","name","children","methods","value","onChange"],m=d.a.NAME_RADIO_GROUP,E=d.a.TYPE_RADIO_GROUP,j={id:m},O=o.b.memo((function(e){var t=e.id,a=e.name,u=e.children,l=e.methods,d=e.value,j=e.onChange,O=Object(r.a)(e,b),f=l.formState,T=l.setValue,p=f.errors[a];return o.b.useEffect((function(){d&&T(a,d,{shouldValidate:!0})}),[d,a,T]),Object(s.jsx)(c.a,{name:m,type:E,children:Object(s.jsx)(i.RadioGroup,Object(n.a)(Object(n.a)(Object(n.a)({id:t,name:a,value:d,onChange:function(e){T(a,e.target.value),j&&j(e)}},p&&{error:String(p.message)}),O),{},{children:u}))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function f(e){var t=u.a.useContext();return Object(s.jsx)(O,Object(n.a)({methods:t},e))}f.defaultProps=j},507:function(e,t,a){"use strict";a.d(t,"a",(function(){return f}));var n=a(2),r=a(19),o=a(11),i=a(50),c=a(41),u=a(488),l=a(510),d=a.n(l),s=(a(511),a(10)),b=["id","name","methods","onChange"],m=d.a.NAME_INPUT_RADIO,E=d.a.TYPE_INPUT_RADIO,j={id:m},O=o.b.memo((function(e){var t=e.id,a=e.name,o=e.methods,u=e.onChange,l=Object(r.a)(e,b),d=o.register,j=o.formState,O=o.clearErrors,f=j.errors,T="".concat(a),p=f[a];return Object(s.jsx)(c.a,{name:m,type:E,children:Object(s.jsx)(i.Radio,Object(n.a)(Object(n.a)(Object(n.a)({id:t},p&&{error:String(p.message)}),d(T)),{},{name:a,onChange:function(e){u&&u(e),O([T])}},l))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function f(e){var t=u.a.useContext();return Object(s.jsx)(O,Object(n.a)({methods:t},e))}f.defaultProps=j},509:function(e,t,a){e.exports={NAME_RADIO_GROUP:"RadioGroup",TYPE_RADIO_GROUP:"Element"}},510:function(e,t,a){e.exports={NAME_INPUT_RADIO:"InputRadio",TYPE_INPUT_RADIO:"Element"}},511:function(e,t,a){e.exports={NAME_INPUT_RADIO:"InputRadio",TYPE_INPUT_RADIO:"Element",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider"}},516:function(e,t,a){e.exports={NAME_INPUT_SELECT:"InputSelect",TYPE_INPUT_SELECT:"Element"}},566:function(e,t,a){"use strict";a.d(t,"a",(function(){return O}));var n=a(2),r=a(19),o=a(11),i=a(50),c=a(41),u=a(488),l=a(567),d=a.n(l),s=a(10),b=["id","name","methods","onChange","defaultValue"],m=d.a.NAME_INPUT_DATE_FIELD,E=d.a.TYPE_INPUT_DATE_FIELD,j=o.b.memo((function(e){var t=e.id,a=e.name,u=e.methods,l=e.onChange,d=e.defaultValue,j=Object(r.a)(e,b),O=u.register,f=u.formState,T=u.setValue,p=u.clearErrors,_=f.errors,h="".concat(a),P=_[a];return o.b.useEffect((function(){T(h,d||void 0)}),[d,h,T]),Object(s.jsx)(c.a,{name:m,type:E,children:Object(s.jsx)(i.DateField,Object(n.a)(Object(n.a)(Object(n.a)({id:t||a},P&&{error:String(P.message)}),O(h)),{},{onChange:function(e){T(h,e),p([h]),l&&l(e)}},j))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function O(e){var t=u.a.useContext();return Object(s.jsx)(j,Object(n.a)({methods:t},e))}O.displayName=m},567:function(e,t,a){e.exports={NAME_INPUT_DATE_FIELD:"InputDateField",TYPE_INPUT_DATE_FIELD:"Element"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=124.4b3fe3f9.chunk.js.map