(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[141,95,288],{192:function(e,t,n){"use strict";n.r(t),n.d(t,"SPA_MODO_PAYMENTS_QR",(function(){return x})),n.d(t,"default",(function(){return M}));var a=n(16),c=n(11),r=n(562),o=n(38),s=n(270),i=n(82),l=n(504),u=n(8),b=n(33),O=n(117),d=n(65),j=n(497),_=n(51),p=n(500),E=n(6),f=n(518),T=n(442),m=n.n(T),h=n(10),x="spa.modo.payments.qr";function M(){var e=Object(_.qb)(),t=Object(u.b)(),n=Object(_.sb)(_.E),T=Object(_.sb)(_.C),M=Object(_.sb)(_.q),P=Object(u.c)(b.e.token),A=Object(u.c)(O.c.fetching),g=Object(u.c)(O.c.warning),N=Object(u.c)(O.c.qrPayments),R=Object(u.c)(O.c.qrPaymentsTotalRows),S=Object(u.c)(O.c.qrPaymentsRowsPerPage),D=Object(u.c)(O.c.hasFinishedModoOnboarding),v=c.b.useState(!1),C=Object(a.a)(v,2),w=C[0],k=C[1],I=c.b.useState([]),y=Object(a.a)(I,2),L=y[0],F=y[1],Y=c.b.useState(E.Sb),U=Object(a.a)(Y,2),B=U[0],H=U[1],Q=c.b.useState(!1),z=Object(a.a)(Q,2),V=z[0],q=z[1],G=c.b.useState(!0),K=Object(a.a)(G,2),W=K[0],X=K[1],J=N.length>E.Sb;return c.b.useEffect((function(){P&&(D?(t(O.b.getQrPayments({token:P})),q(!0)):e(T,{replace:!0}))}),[t,D,e,P,T]),c.b.useEffect((function(){if(N.length){var e=N.slice(E.Sb,S);F(e)}}),[N,S]),c.b.useEffect((function(){A&&X(!1)}),[A]),c.b.useEffect((function(){R&&S&&(k(S<R),H(S))}),[S,R]),c.b.useEffect((function(){g&&t(d.a.add({message:g.message,id:g.code}))}),[g,t]),W?null:A||!V||J&&L.length===E.Sb?Object(h.jsx)(s.a,{}):Object(h.jsxs)(j.a,{withFooter:!0,className:m.a.paymentsQr,hasNotifications:!1,"header-onBack":function(){e(Object(f.a)(M,E.Z.MODO))},children:[Object(h.jsx)("header",{children:Object(h.jsx)(o.b,{tag:"h1",uuid:"".concat(x,".title")})}),J?Object(h.jsxs)(c.b.Fragment,{children:[Object(h.jsx)("section",{children:L.map((function(a){return Object(h.jsx)(i.a,{kind:"plain",label:{uuid:a.name},onClick:function(){return function(a){t(O.a.setQrPaymentsDetail({item:a})),e(n)}(a)},children:Object(h.jsx)(r.a,{children:Z(a)})},a.paymentReference)}))}),w&&Object(h.jsx)("footer",{children:Object(h.jsx)(i.a,{kind:"plain",label:{uuid:"spa.modo.show.more"},onClick:function(){var e=B+S,t=e<N.length-E.fb,n=N.slice(B,e),a=L.concat(n);H(e),F(a),k(t)}})})]},"paymentsSection"):Object(h.jsx)("section",{children:Object(h.jsx)(o.b,{tag:"p",uuid:"".concat(x,".not.found")})},"notFoundSection")]});function Z(e){var t=e.name,n=e.state,a=e.card,c=e.amount,r=e.labelCard,s=e.instalment,i=e.date,u=e.reasonRejection,b=e.labelAccount,O=n===E.Ib;return Object(h.jsxs)("ul",{children:[Object(h.jsxs)("li",{children:[Object(h.jsx)(o.b,{tag:"span",children:t}),c&&Object(h.jsx)(o.b,{tag:"span",children:Object(h.jsx)(p.a,{amount:c.quantity})})]}),a||b?$(a,r,s,O,b):Object(h.jsx)(o.b,{tag:"span",uuid:"".concat(x,".no.payment.found")}),Object(h.jsxs)("li",{children:[Object(h.jsx)(o.b,{tag:"span",uuid:"".concat(x,".label.state")}),Object(h.jsx)(o.b,{tag:"span",uuid:"".concat(x,".state.").concat(n)})]}),Object(h.jsxs)("li",{children:[Object(h.jsx)(o.b,{tag:"span",uuid:"".concat(x,".label.date")}),Object(h.jsx)(l.a,{date:i})]}),O&&Object(h.jsxs)("li",{children:[Object(h.jsx)(o.b,{tag:"span",uuid:"".concat(x,".label.reason")}),Object(h.jsx)(o.b,{tag:"span",uuid:"".concat(x,".rejected.").concat(u)})]})]})}function $(e,t,n,a,r){return e?Object(h.jsxs)(c.b.Fragment,{children:[Object(h.jsxs)("li",{children:[Object(h.jsx)(o.b,{tag:"span",uuid:"".concat(x,".label.card")}),Object(h.jsx)(o.b,{tag:"span",children:t})]}),!a&&Boolean(n)&&Object(h.jsxs)("li",{children:[Object(h.jsx)(o.b,{tag:"span",uuid:"".concat(x,".label.instalments")}),Object(h.jsx)(o.b,{tag:"span",children:n})]})]}):Object(h.jsxs)("li",{children:[Object(h.jsx)(o.b,{tag:"span",uuid:"".concat(x,".label.account")}),Object(h.jsx)(o.b,{tag:"span",children:r})]})}}},391:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return m}));var a=n(11),c=n(80),r=n(38),o=n(504),s=n(270),i=n(497),l=n(51),u=n(117),b=n(8),O=n(532),d=n(6),j=n(500),_=n(83),p=n(192),E=n(442),f=n.n(E),T=n(10);function m(){var e=Object(c.g)(),t=Object(b.b)(),n=Object(l.sb)(l.D),E=Object(b.c)(u.c.qrPaymentsDetail);if(!E)return Object(T.jsx)(s.a,{});var m=E.name,h=E.state,x=E.card,M=E.instalment,P=E.labelCard,A=E.amount,g=E.date,N=E.reasonRejection,R=E.labelAccount,S=h===d.Ib,D=S?"".concat(p.SPA_MODO_PAYMENTS_QR,".rejected.").concat(N):d.D,v=function(){switch(h){case d.hb:return{status:_.e.STATUS_FINISHED,title:"".concat(p.SPA_MODO_PAYMENTS_QR,".ticket.title.approve")};case d.Kb:return{status:_.e.STATUS_PROCESSING,title:"".concat(p.SPA_MODO_PAYMENTS_QR,".ticket.title.processing")};case d.Ib:return{status:_.e.STATUS_FAILED,title:"".concat(p.SPA_MODO_PAYMENTS_QR,".ticket.title.rejected")};case d.N:return{status:_.e.STATUS_ANNULED,title:"".concat(p.SPA_MODO_PAYMENTS_QR,".ticket.title.annuled")};case d.K:return{status:_.e.STATUS_RETURNED,title:"".concat(p.SPA_MODO_PAYMENTS_QR,".ticket.title.returned")};case d.Db:return{status:_.e.STATUS_PENDING,title:"".concat(p.SPA_MODO_PAYMENTS_QR,".ticket.title.pending")};default:return{status:_.e.STATUS_FINISHED,title:"".concat(p.SPA_MODO_PAYMENTS_QR,".ticket.title.approve")}}}();return Object(T.jsx)(i.a,{className:f.a.paymentDetail,hasNotifications:!1,"header-onBack":C,children:Object(T.jsx)(O.a,{hasModoLogo:!0,buttonText:"spa.form.back",handleButton:C,responseDescription:D,responseTitle:v.title,titleText:"".concat(p.SPA_MODO_PAYMENTS_QR,".ticket.title"),transactionStatus:v.status,children:Object(T.jsxs)("ul",{children:[Object(T.jsxs)("li",{children:[Object(T.jsx)(r.b,{tag:"span",uuid:"".concat(p.SPA_MODO_PAYMENTS_QR,".label.date.execution")}),Object(T.jsx)(o.a,{date:g})]}),Object(T.jsxs)("li",{children:[Object(T.jsx)(r.b,{tag:"span",uuid:"".concat(p.SPA_MODO_PAYMENTS_QR,".card.commerce")}),Object(T.jsx)(r.b,{tag:"span",children:m})]}),x||R?x?Object(T.jsxs)(a.b.Fragment,{children:[Object(T.jsxs)("li",{children:[Object(T.jsx)(r.b,{tag:"span",uuid:"".concat(p.SPA_MODO_PAYMENTS_QR,".label.card")}),Object(T.jsx)(r.b,{tag:"span",children:P})]}),!S&&Boolean(M)&&Object(T.jsxs)("li",{children:[Object(T.jsx)(r.b,{tag:"span",uuid:"".concat(p.SPA_MODO_PAYMENTS_QR,".label.instalments")}),Object(T.jsx)(r.b,{tag:"span",children:M})]})]}):Object(T.jsxs)("li",{children:[Object(T.jsx)(r.b,{tag:"span",uuid:"".concat(p.SPA_MODO_PAYMENTS_QR,".label.account")}),Object(T.jsx)(r.b,{tag:"span",children:R})]}):Object(T.jsx)(r.b,{tag:"span",uuid:"".concat(p.SPA_MODO_PAYMENTS_QR,".no.payment.found")}),Object(T.jsxs)("li",{children:[Object(T.jsx)(r.b,{tag:"span",uuid:"".concat(p.SPA_MODO_PAYMENTS_QR,".card.amount")}),A&&Object(T.jsx)(r.b,{tag:"span",children:Object(T.jsx)(j.a,{amount:A.quantity})})]})]})})});function C(){t(u.a.cleanQrPaymentsDetail()),e(n)}}},442:function(e,t,n){e.exports={NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_DATETIME:"DateTime",TYPE_DATETIME:"Element",paymentsQr:"_rules_paymentsQr__XNzhH",paymentDetail:"_rules_paymentDetail__2bDu3"}},499:function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var a=n(0),c=n(5);function r(e){var t=e.filename,n=e.path,a=e.flags;return new Promise((function(e,c){var r;function o(e){c(e)}(r=window.cordova.file[n],new Promise((function(e,t){window.resolveLocalFileSystemURL(r,(function(t){e(t)}),(function(e){t(e)}))}))).then((function(n){var c=n;c.getFile(t,a,(function(t){var n=new FileReader;t.createWriter((function(a){e({fileEntry:t,dirEntry:c,fileReader:n,fileWriter:a,fileWrite:function(e){return new Promise((function(t,n){a.onwriteend=function(){return t(a)},a.onerror=function(e){return n(e)},a.write(e)}))},fileRemove:function(){return new Promise((function(e,n){t.remove((function(){return e(!0)}),(function(e){return n(e)}))}))}})}),o)}),o)}))}))}var o=n(36),s=n(26),i=n(28);function l(){return u.apply(this,arguments)}function u(){return(u=Object(c.a)(Object(a.a)().mark((function e(){var t;return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(s.c)();case 2:if(e.sent&&cordova.plugins){e.next=5;break}throw s.a.CORDOVA_UNAVAILABLE;case 5:if(t=cordova.plugins.fileOpener2){e.next=8;break}throw s.a.PLUGIN_UNAVAILABLE;case 8:return e.abrupt("return",t);case 9:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function b(e){return O.apply(this,arguments)}function O(){return O=Object(c.a)(Object(a.a)().mark((function e(t){var n,c,r,o,u;return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.contentType,c=t.fileName,r=t.withDialog,e.next=3,Object(s.c)();case 3:if(e.sent){e.next=6;break}throw s.a.CORDOVA_UNAVAILABLE;case 6:return e.next=8,l();case 8:return o=e.sent,u=r?o.open:o.showOpenWithDialog,e.abrupt("return",new Promise((function(e,t){try{u(c,n,{success:function(){e({code:i.a.SUCCESS,value:!0})},error:function(e){function t(t){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}((function(e){t("boolean"===typeof e?new i.b(i.a.ERROR,o.open.name,i.c):new i.b(i.a.ERROR,o.open.name,e.message))}))})}catch(a){t(new i.b(i.a.ERROR_UNKNOWN,o.open.name,i.c))}})));case 11:case"end":return e.stop()}}),e)}))),O.apply(this,arguments)}function d(){var e=Object(o.i)(),t=e.isDesktop,n=e.isUnknown,s=e.platform;function i(e){var t=e.split(".").pop();return"png"===t||"jpg"===t||"gif"===t||"bmp"===t?"image/".concat(t):"pdf"===t?"application/".concat(t):"doc"===t||"docx"===t?"application/msword":"ppt"===t||"pptx"===t?"application/vnd.ms-powerpoint":"xls"===t||"xlsx"===t?"application/vnd.ms-excel":"xlsm"===t?"application/vnd.ms-excel.sheet.macroEnabled.12":"txt"===t?"text/plain":"zip"===t?"application/zip":void 0}return function(){var e=Object(c.a)(Object(a.a)().mark((function e(c,l){var u,O,d,j,_,p,E;return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(u=s===o.b.CORDOVA_ANDROID,!(O=i(c))){e.next=19;break}if(!t&&!n){e.next=9;break}return(d=document.createElement("a")).href=window.URL.createObjectURL(l),d.download=c,d.click(),e.abrupt("return");case 9:return e.next=11,r({filename:c,path:u?"externalApplicationStorageDirectory":"dataDirectory",flags:{create:!0,exclusive:!1}});case 11:return j=e.sent,_=j.fileWrite,p=j.fileEntry,e.next=16,_(l);case 16:return E={contentType:O,fileName:p.nativeURL,withDialog:!0},e.next=19,b(E);case 19:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}()}},501:function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var a=512,c=0;function r(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:a,r=window.atob(e),o=[],s=c;s<r.length;s+=n){for(var i=r.slice(s,s+n),l=new Array(i.length),u=c;u<i.length;u++)l[u]=i.charCodeAt(u);o.push(new Uint8Array(l))}return new Blob(o,{type:t})}},508:function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var a=n(6);function c(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"pdf";if("string"===typeof e&&e.trim()){var n=e.trim().toLowerCase().replace(/[^a-zA-Z0-9]/g,a.Nb);return"".concat(n,".").concat(t)}var c=new Date,r=c.getMonth()+a.fb,o=(r<a.Fb?a.Ub:a.D)+r,s=c.getDate(),i=(s<a.Fb?a.Ub:a.D)+s;return"".concat(c.getFullYear(),"_").concat(o,"_").concat(i,".").concat(t)}},532:function(e,t,n){"use strict";n.d(t,"a",(function(){return N}));var a=n(16),c=n(11),r=n(41),o=n(36),s=n(50),i=n(6),l=n(8),u=n(33),b=n(271),O=n(501),d=n(154),j=n(499),_=n(38),p=n(82),E=n(533),f=n.n(E),T=n(534),m=n.n(T),h=n(508),x=n(270),M=n(10),P=m.a.NAME_TICKET,A=m.a.TYPE_TICKET,g={hasModoLogo:!1,isDownloadable:!1,isShareable:!1,navigateButton:{},responseDescription:i.D};function N(e){var t=e,n=t.idTransaction,i=t.buttonText,E=t.children,T=t.className,m=t.transactionStatus,g=t.responseTitle,N=t.responseDescription,R=t.navigateButton,S=t.hasModoLogo,D=t.titleText,v=t.handleButton,C=t.isDownloadable,w=t.isShareable,k=Object(l.b)(),I=Object(j.a)(),y=Object(o.i)().isDesktop,L=c.b.useState(!1),F=Object(a.a)(L,2),Y=F[0],U=F[1],B=c.b.useState(!1),H=Object(a.a)(B,2),Q=H[0],z=H[1],V=Object(l.c)(u.e.token),q=Object(l.c)(d.c.fetching),G=Object(l.c)(d.c.fetchedFile),K=Object(l.c)(d.c.filename),W=Object(l.c)(d.c.content),X=C||w,J=Object(h.a)(K),Z="string"===typeof D;c.b.useEffect((function(){k(d.a.clean())}),[k]),c.b.useEffect((function(){(Q||Y)&&V&&(G||K||W?(K&&W&&(Y&&(I(J,Object(O.a)(W)),U(!1)),Q&&(Object(b.a)({options:{message:K,subject:K},files:[{fileName:J,base64File:W}]}),z(!1))),k(d.a.setFetchedFile(!1))):k(d.b.generatePdf({token:V,idTransaction:n})))}),[W,k,Y,G,K,J,I,n,Q,V]);var $={FINISHED:Object(M.jsx)(s.Icon,{name:"success",size:"large",stroke:"success"}),PROCESSING:Object(M.jsx)(s.Icon,{name:"clock",size:"large",stroke:"info"}),PENDING:Object(M.jsx)(s.Icon,{name:"clock",size:"large",stroke:"info"}),FAILED:Object(M.jsx)(s.Icon,{name:"error",size:"large",stroke:"error"}),ANNULED:Object(M.jsx)(s.Icon,{name:"warning",size:"large",stroke:"warning"}),RETURNED:Object(M.jsx)(s.Icon,{name:"warning",size:"large",stroke:"warning"})};return q?Object(M.jsx)(x.a,{}):Object(M.jsxs)(r.a,{className:T,name:P,tag:"section",type:A,children:[Object(M.jsx)("header",{children:Z?Object(M.jsx)(_.b,{className:f.a.title,fallback:D,tag:"h1",uuid:D}):D}),Object(M.jsxs)("section",{children:[X&&Object(M.jsxs)("div",{className:f.a.actions,children:[w&&!y&&Object(M.jsx)(p.a,{icon:"share",kind:"icon",label:{uuid:"spa.a11y.buttons.share"},size:"small",variant:"text",onClick:function(){z(!0)}}),C&&Object(M.jsx)(p.a,{icon:"download",kind:"icon",label:{uuid:"spa.a11y.buttons.download"},size:"small",variant:"text",onClick:function(){U(!0)}})]}),Object(M.jsx)("div",{className:f.a.responseIcon,children:$[m]}),Object(M.jsx)(_.b,{className:f.a.responseTitle,fallback:g,tag:"h2",uuid:g}),N&&Object(M.jsx)(_.b,{className:f.a.responseDescription,tag:"h3",uuid:N}),(null===R||void 0===R?void 0:R.label)&&(null===R||void 0===R?void 0:R.handleClick)&&Object(M.jsx)(p.a,{className:f.a.navigateButton,kind:"plain",label:R.label,type:"button",onClick:R.handleClick}),E,S&&Object(M.jsx)("div",{className:f.a.responseIcon,children:Object(M.jsx)(s.Icon,{name:"modo"})})]}),Object(M.jsx)("footer",{children:Object(M.jsx)(p.a,{label:{uuid:i},onClick:v})})]})}N.defaultProps=g},533:function(e,t,n){e.exports={NAME_TICKET:"Ticket",TYPE_TICKET:"Section",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_IMAGE:"Image",TYPE_IMAGE:"Element",title:"_rules_title__1SNPA",actions:"_rules_actions__30efJ",responseIcon:"_rules_responseIcon__1McyH",responseTitle:"_rules_responseTitle__3H3Id",responseDescription:"_rules_responseDescription__1NvkT",navigateButton:"_rules_navigateButton__Dlve9"}},534:function(e,t,n){e.exports={NAME_TICKET:"Ticket",TYPE_TICKET:"Section"}},562:function(e,t,n){"use strict";n.d(t,"a",(function(){return _}));var a=n(2),c=n(19),r=(n(11),n(50)),o=n(563),s=n.n(o),i=n(564),l=n.n(i),u=n(559),b=n(10),O=["children","cardColor"],d=l.a.NAME_MODOCARD,j=l.a.TYPE_MODOCARD;function _(e){var t=e,n=t.children,o=t.cardColor,i=Object(c.a)(t,O);return Object(b.jsx)(r.Card,Object(a.a)(Object(a.a)({"data-name":d,"data-type":j},i),{},{children:Object(b.jsxs)("div",{className:s.a.container,children:[Object(b.jsx)(r.Separator,{className:s.a[u.c[o]],type:"vertical"}),Object(b.jsx)("section",{className:s.a.content,children:n})]})}))}_.defaultProps={cardColor:"LC"}},563:function(e,t,n){e.exports={NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_MODOCARD:"ModoCard",TYPE_MODOCARD:"Element",container:"_rules_container__38l4C",content:"_rules_content__2hZJ9",cardColor_1:"_rules_cardColor_1__2RwjH",cardColor_2:"_rules_cardColor_2__3EECs",cardColor_3:"_rules_cardColor_3__3iegv",cardColor_4:"_rules_cardColor_4__1Ewid",cardColor_5:"_rules_cardColor_5__asLI4",cardColor_6:"_rules_cardColor_6__3G0vB",cardColor_7:"_rules_cardColor_7__2-RuC",cardColor_8:"_rules_cardColor_8__31h6l",cardColor_9:"_rules_cardColor_9__1LDGZ",cardColor_10:"_rules_cardColor_10__1M1_O",cardColor_11:"_rules_cardColor_11__3bwOm",cardColor_12:"_rules_cardColor_12__2L3Na"}},564:function(e,t,n){e.exports={NAME_MODOCARD:"ModoCard",TYPE_MODOCARD:"Element"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=141.b323f02a.chunk.js.map