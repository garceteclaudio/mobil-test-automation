(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[9],{684:function(e,t,n){"use strict";n.d(t,"a",(function(){return g}));var i=n(0),a=n(5),c=n(2),r=n(16),o=n(19),s=n(11),u=n(22),l=n(41),b=n(50),f=n(158),d=n(6),m=n(8),p=n(33),O=n(62),j=n(38),E=n(82),x=n(643),N=n(687),h=n.n(N),_=n(688),v=n.n(_),T=n(10),k=["handleNotificationsPanel","hasNotificationsPanel","notificationsPage"],A=v.a.NAME_NOTIFICATIONSPANEL,P=v.a.TYPE_NOTIFICATIONSPANEL;function g(e){var t=e,n=t.handleNotificationsPanel,N=t.hasNotificationsPanel,_=t.notificationsPage,v=Object(o.a)(t,k),g=s.b.useState(),y=Object(r.a)(g,2),I=y[0],w=y[1],M=s.b.useRef(null),S=Object(m.c)(f.c.communicationsList),C=Object(m.c)(f.c.communicationsUnreadCount),L=Object(m.c)(f.c.communicationsFetching),R=Object(m.c)(p.e.token),B=Object(m.b)(),F=Object(u.j)(),H=Object(j.c)().textGet,D=Boolean(S&&S.length>d.Sb),Y=Object(l.c)(h.a.notificationsList,N?d.D:h.a.notificationsListHidden),U=Object(l.c)(N?h.a.notificationsMask:h.a.notificationsMaskHidden);return s.b.useEffect((function(){return document.body.style.overflow=N?"hidden":"",function(){document.body.style.overflow=""}}),[N]),s.b.useEffect((function(){N?w(document.activeElement):null===I||void 0===I||I.focus()}),[N,I]),s.b.useEffect((function(){var e=function(e){var t;if(e.key===d.Q.TAB&&M){var n=null===(t=M.current)||void 0===t?void 0:t.querySelectorAll(d.L);if(n){var i=n[d.Sb],a=n[n.length-d.fb];e.shiftKey?document.activeElement===i&&(null===a||void 0===a||a.focus(),e.preventDefault()):document.activeElement===a&&(null===i||void 0===i||i.focus(),e.preventDefault())}}};return window.addEventListener("keydown",e),function(){window.removeEventListener("keydown",e)}}),[]),Object(T.jsxs)(l.a,Object(c.a)(Object(c.a)({"aria-modal":!0,"aria-label":H({uuid:"spa.widget.notifications.title"}),name:A,role:"dialog",tag:"section",type:P},v),{},{children:[Object(T.jsx)("div",{className:U,onClick:n}),Object(T.jsx)("div",{ref:M,className:Y,children:Object(T.jsxs)(b.Card,{"aria-labelledby":"notificationsPanel",children:[Object(T.jsxs)("header",{children:[Object(T.jsx)(j.b,{tag:"h3",uuid:"spa.widget.notifications.title"}),Object(T.jsx)(j.b,{className:h.a.notificationsPanelAriaContent,id:"notificationsPanel",tag:"span",uuid:"spa.a11y.notifications.close.panel"}),C?Object(T.jsx)(b.Badge,{"aria-label":H({uuid:"spa.a11y.notifications.count",replace:"".concat(C)}),content:String(C),size:"small"}):null]}),Object(T.jsx)("section",{children:L?Object(T.jsx)("div",{className:h.a.notificationSpinner,children:Object(T.jsx)(b.Lottie,{loop:!0,play:!0,"aria-atomic":"true","aria-live":"assertive",name:"spinner",size:"xlarge",title:H({uuid:"spa.a11y.notification.loading.unread"})})}):function(){if(D)return Object(T.jsx)("ul",{children:z().map((function(e,t){return Object(T.jsx)("li",{children:e},"notification-".concat(t+d.fb))}))});return Object(T.jsxs)("div",{className:h.a.notificationsEmpty,children:[Object(T.jsx)(b.Icon,{name:"bell",size:"xlarge",stroke:"gray-600"}),Object(T.jsx)(j.b,{uuid:"spa.widget.notifications.none"})]})}()}),Object(T.jsx)("footer",{children:Object(T.jsx)(E.a,{ariaLabel:{uuid:"spa.a11y.notifications.go.to.page"},kind:"plain",label:{uuid:"spa.widget.notifications.seeall"},onClick:function(){B(f.a.clean()),F(_)}})})]})})]}));function V(){return(V=Object(a.a)(Object(i.a)().mark((function e(t,n){return Object(i.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t.stopPropagation(),R){e.next=3;break}return e.abrupt("return");case 3:return e.next=5,B(f.b.markAsReadCommunication({accessToken:R,idCommunication:n}));case 5:B(f.b.getNotifications({accessToken:R})),B(f.b.getNotificationsUnreadCount({accessToken:R}));case 7:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function J(){return(J=Object(a.a)(Object(i.a)().mark((function e(t){return Object(i.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,B(f.b.readCommunication({accessToken:R,idCommunication:t}));case 2:B(f.a.cleanNotificationsList()),B(f.a.setNotificationsActive(O.f.all)),F(_);case 5:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function z(){var e=[];return null!==S&&void 0!==S&&S.length&&S.forEach((function(t){var n=t.idCommunication,i=t.body,a=t.sentDate,c=t.subject,r=t.userRead;return e.push(Object(T.jsx)(x.a,{body:i,buttonOnClick:function(e){return function(e,t){return V.apply(this,arguments)}(e,n)},buttonText:"spa.widgets.notifications.communications.hide",date:a,isUnRead:!r,title:c,onClick:function(){return function(e){return J.apply(this,arguments)}(n)}},n))})),e}}},687:function(e,t,n){e.exports={NAME_NOTIFICATIONSPANEL:"NotificationsPanel",TYPE_NOTIFICATIONSPANEL:"Section",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_XS:"xs",NAME_SM:"sm",NAME_MD:"md",NAME_LG:"lg",notificationsPanelAriaContent:"_rules_notificationsPanelAriaContent__1FoVg",notificationsMask:"_rules_notificationsMask__1JP5P",notificationsMaskHidden:"_rules_notificationsMaskHidden__1a_ic",notificationsList:"_rules_notificationsList__iif1F",fadeIn:"_rules_fadeIn__3EmVP",notificationsListHidden:"_rules_notificationsListHidden__2nZyd",fadeOut:"_rules_fadeOut__14PKx",notificationSpinner:"_rules_notificationSpinner__ys-WN",notificationsEmpty:"_rules_notificationsEmpty__1Yf2M"}},688:function(e,t,n){e.exports={NAME_NOTIFICATIONSPANEL:"NotificationsPanel",TYPE_NOTIFICATIONSPANEL:"Section"}},695:function(e,t,n){e.exports={NAME_BASEINTERNAL_CONTAINER:"BaseInternalContainer",TYPE_BASEINTERNAL_CONTAINER:"Container"}},847:function(e,t,n){"use strict";n.d(t,"a",(function(){return L}));var i=n(2),a=n(0),c=n(5),r=n(16),o=n(19),s=n(11),u=n(22),l=n(99),b=n(8),f=n(33),d=n(88),m=n(273),p=n(573),O=n(6),j=n(41),E=n(79),x=n(117),N=n(38),h=n(490),_=n(82),v=n(101),T=n(683),k=n(691),A=n(845),P=n(695),g=n.n(P),y=g.a.NAME_BASEINTERNAL_CONTAINER,I=g.a.TYPE_BASEINTERNAL_CONTAINER,w={Header:T.a,Footer:k.a,Menu:A.a},M={name:y,type:I},S=n(10),C=["children","session-redirect","name","type","isHomeActive"];function L(e){var t=e,n=t.children,T=t["session-redirect"],k=t.name,A=t.type,P=t.isHomeActive,g=Object(o.a)(t,C),y=Object(u.j)(),I=Object(b.b)(),M=Object(N.c)().textGet,L=Object(l.a)().getValueConfig,R=Object(f.i)(),B=Object(b.c)(f.e.token),F=Object(b.c)(d.e.maskProduct),H=Object(b.c)(x.c.deepLinkPath),D=Object(b.c)(x.c.deepLinkData),Y=Object(b.c)(f.e.timerInBackground),U=Object(b.c)(f.e.secondsToExpire),V=M({uuid:"spa.extendSession.title"}),J="modal-description",z=M({uuid:"spa.extendSession.text.seconds",replace:[V,String(U/O.xb)]}),G=Object(m.a)("".concat(L("session.timeBeforeTimeoutNotification"))),X=U-G,K=s.b.useState(null),q=Object(r.a)(K,2),Q=q[0],W=q[1],Z=s.b.useRef(null),$=Boolean(B)&&Boolean(Q),ee=s.b.useCallback((function(){if(Z.current){var e=Z.current;e.throttle&&clearTimeout(e.throttle),e.throttle=setTimeout((function(){e.timer=Number(U),W(O.Sb)}),Number(O.xb/O.Jb))}}),[U]),te=s.b.useCallback(Object(c.a)(Object(a.a)().mark((function e(){return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,ie();case 2:e.sent&&ee();case 4:case"end":return e.stop()}}),e)}))),[ee]);return s.b.useEffect((function(){var e=function(){var e=Object(c.a)(Object(a.a)().mark((function e(){return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(B){e.next=2;break}return e.abrupt("return");case 2:return e.next=4,Object(p.a)(F,B);case 4:b.a.dispatch(E.a.set({kind:"ERROR",text:{uuid:"spa.sessionExpired.message"},duration:O.kb}));case 5:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();if(I(f.a.setTimerInBackground(void 0)),R||$||!B||I(f.b.extendSession(null)),R){if(Y){var t=(new Date).getTime()-Y;if(!((t=Math.round(t/Number(O.xb))*Number(O.xb))<X)){if(t<U&&t>=X){if(!B)return;return Z.current&&ne(),W((U-t+Number(O.xb))/Number(O.xb)),void(Z.current={throttle:null,timer:U-t,interval:setInterval(Object(c.a)(Object(a.a)().mark((function e(){return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(Z.current){e.next=2;break}return e.abrupt("return");case 2:if(!(Z.current.timer<O.fb)){e.next=7;break}return e.next=5,Object(p.a)(F,B);case 5:return b.a.dispatch(E.a.set({kind:"ERROR",text:{uuid:"spa.sessionExpired.message"},duration:O.kb})),e.abrupt("return");case 7:Z.current.timer<=Number(G)&&W(Z.current.timer/Number(O.xb)),Z.current.timer-=Number(O.xb);case 9:case"end":return e.stop()}}),e)}))),Number(O.xb))})}t>=U&&e()}}}else I(f.a.setTimerInBackground((new Date).getTime()))}),[I,R,F,B]),s.b.useEffect((function(){B?I(f.b.checkSessionStatus(null)):y(T)}),[B,y,T,I]),s.b.useEffect((function(){H&&(y(H),D&&I(x.a.setDeepLinkData({params:D.params,path:void 0})))}),[D,H,I,y]),s.b.useEffect((function(){return!B||Z.current||(Z.current={throttle:null,timer:U,interval:setInterval(Object(c.a)(Object(a.a)().mark((function e(){return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(Z.current){e.next=2;break}return e.abrupt("return");case 2:if(!(Z.current.timer<O.fb)){e.next=7;break}return e.next=5,Object(p.a)(F,B);case 5:return b.a.dispatch(E.a.set({kind:"ERROR",text:{uuid:"spa.sessionExpired.message"},duration:O.kb})),e.abrupt("return");case 7:te(),Z.current.timer<=Number(G)&&W(Z.current.timer/Number(O.xb)),Z.current.timer-=Number(O.xb);case 10:case"end":return e.stop()}}),e)}))),Number(O.xb))}),ne}),[B,I,G,F,te,U]),s.b.useEffect((function(){if(!$){var e=["load","mousemove","mousedown","click","scroll","keypress"];return e.forEach((function(e){return window.addEventListener(e,ee)})),function(){return e.forEach((function(e){return window.removeEventListener(e,ee)}))}}}),[ee,$]),Object(S.jsxs)(v.a,{isHomeActive:P,children:[Object(S.jsx)(j.a,Object(i.a)(Object(i.a)({name:k,tag:"article",type:A},g),{},{children:n(w)})),Object(S.jsxs)(h.a,{"aria-describedby":J,"aria-label":z,closeOnBgTap:!1,hasCloseIcon:!1,open:$,title:Object(S.jsx)(N.b,{tag:"h4",children:"".concat(V," ").concat(Q)}),children:[Object(S.jsx)(h.a.Body,{children:Object(S.jsx)(N.b,{id:J,uuid:"spa.extendSession.text"})}),Object(S.jsx)(h.a.Footer,{children:Object(S.jsx)(_.a,{label:{uuid:"spa.extendSession.button"},onClick:function(){ee(),I(f.b.extendSession(null))}})})]})]});function ne(){Z.current&&(document.onmousemove=null,document.ontouchend=null,clearInterval(Z.current.interval),Z.current=null,W(null))}function ie(){return ae.apply(this,arguments)}function ae(){return(ae=Object(c.a)(Object(a.a)().mark((function e(){var t,n,i,c;return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=!1,document.getElementById("SPA_IFRAME")){e.next=3;break}return e.abrupt("return",n);case 3:return i=new Promise((function(e,t){try{window.Evolutive.checkUserActivity((function(t){t&&e(n=!0)}))}catch(i){t(new Error("Error"))}})),e.next=6,i;case 6:if(e.t1=t=e.sent,e.t0=null!==e.t1,!e.t0){e.next=10;break}e.t0=void 0!==t;case 10:if(!e.t0){e.next=14;break}e.t2=t,e.next=15;break;case 14:e.t2=n;case 15:return c=e.t2,e.abrupt("return",c);case 17:case"end":return e.stop()}}),e)})))).apply(this,arguments)}}L.defaultProps=M}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=9.4f2e3595.chunk.js.map