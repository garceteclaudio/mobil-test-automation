(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[229],{138:function(e,r,n){"use strict";n.d(r,"a",(function(){return f})),n.d(r,"c",(function(){return v})),n.d(r,"b",(function(){return O})),n.d(r,"d",(function(){return x}));var t=n(9),a=n(6),c="recoverPassword",o="CODE",i={fetching:!1,exchangeToken:a.D,error:void 0,warning:void 0,recoverData:null,documentTypes:[],hasPin:!1,mobileNumber:null,verificationCode:a.D,recoverBy:null,isValidationCodeEntered:!1,isVerificationComplete:!1,isPasswordRecovered:!1,isValidationCodeSent:!1},u=n(2),b=n(1),s=n(12),d=n(3),f=Object(b.b)(c,["cleanExchangeToken","setRecoverData","cleanRecoverBy","cleanIsValidationCodeSent","cleanMobileNumber","cleanIsValidationCodeEntered","setVerificationCode","clean","cleanWarnings"]),l=n(0),p=n(5),j=n(37),O=Object(b.c)(c,{pre:function(e,r){return Object(p.a)(Object(l.a)().mark((function n(){var t,a,c;return Object(l.a)().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return t=r.rejectWithValue,a=e.exchangeToken,n.next=4,Object(j.h)({exchangeToken:a});case 4:if(c=n.sent){n.next=7;break}return n.abrupt("return",null);case 7:if(!Object(j.k)(c)){n.next=9;break}return n.abrupt("return",t(Object(u.a)(Object(u.a)({},c),j.a[c.code])));case 9:return n.abrupt("return",c);case 10:case"end":return n.stop()}}),n)})))()},step1:function(e,r){return Object(p.a)(Object(l.a)().mark((function n(){var t,a,c,o;return Object(l.a)().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return t=r.rejectWithValue,a=e.exchangeToken,c=e.recoverData,n.next=4,Object(j.j)({exchangeToken:a,recoverData:c});case 4:if(o=n.sent){n.next=7;break}return n.abrupt("return",null);case 7:if(!Object(j.k)(o)){n.next=9;break}return n.abrupt("return",t(Object(u.a)(Object(u.a)({},o),j.a[o.code])));case 9:return n.abrupt("return",o);case 10:case"end":return n.stop()}}),n)})))()},byCode:function(e,r){return Object(p.a)(Object(l.a)().mark((function n(){var t,a,c;return Object(l.a)().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return t=r.rejectWithValue,a=e.exchangeToken,n.next=4,Object(j.b)({exchangeToken:a});case 4:if(c=n.sent){n.next=7;break}return n.abrupt("return",null);case 7:if(!Object(j.k)(c)){n.next=9;break}return n.abrupt("return",t(Object(u.a)(Object(u.a)({},c),j.a[c.code])));case 9:return n.abrupt("return",c);case 10:case"end":return n.stop()}}),n)})))()},byCodeStep1:function(e,r){return Object(p.a)(Object(l.a)().mark((function n(){var t,a,c,o;return Object(l.a)().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return t=r.rejectWithValue,a=e.exchangeToken,c=e.validationCode,n.next=4,Object(j.c)({exchangeToken:a,validationCode:c});case 4:if(o=n.sent){n.next=7;break}return n.abrupt("return",null);case 7:if(!Object(j.k)(o)){n.next=9;break}return n.abrupt("return",t(Object(u.a)(Object(u.a)({},o),j.a[o.code])));case 9:return n.abrupt("return",o);case 10:case"end":return n.stop()}}),n)})))()},resendCode:function(e,r){return Object(p.a)(Object(l.a)().mark((function n(){var t,a,c,o;return Object(l.a)().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return t=r.rejectWithValue,a=e.exchangeToken,c=e.resendChannel,n.next=4,Object(j.i)({exchangeToken:a,resendChannel:c});case 4:if(o=n.sent){n.next=7;break}return n.abrupt("return",null);case 7:if(!Object(j.k)(o)){n.next=9;break}return n.abrupt("return",t(Object(u.a)(Object(u.a)({},o),j.a[o.code])));case 9:return n.abrupt("return",o);case 10:case"end":return n.stop()}}),n)})))()},byCodeStep2:function(e,r){return Object(p.a)(Object(l.a)().mark((function n(){var t,a,c,o;return Object(l.a)().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return t=r.rejectWithValue,a=e.exchangeToken,c=e.verificationCode,n.next=4,Object(j.d)({exchangeToken:a,verificationCode:c});case 4:if(o=n.sent){n.next=7;break}return n.abrupt("return",null);case 7:if(!Object(j.k)(o)){n.next=9;break}return n.abrupt("return",t(Object(u.a)(Object(u.a)({},o),j.a[o.code])));case 9:return n.abrupt("return",o);case 10:case"end":return n.stop()}}),n)})))()},byPin:function(e,r){return Object(p.a)(Object(l.a)().mark((function n(){var t,a,c;return Object(l.a)().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return t=r.rejectWithValue,a=e.exchangeToken,n.next=4,Object(j.e)({exchangeToken:a});case 4:if(c=n.sent){n.next=7;break}return n.abrupt("return",null);case 7:if(!Object(j.k)(c)){n.next=9;break}return n.abrupt("return",t(Object(u.a)(Object(u.a)({},c),j.a[c.code])));case 9:return n.abrupt("return",c);case 10:case"end":return n.stop()}}),n)})))()},byPinStep1:function(e,r){return Object(p.a)(Object(l.a)().mark((function n(){var t,a,c,o,i;return Object(l.a)().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return t=r.rejectWithValue,a=e.exchangeToken,c=e.debitCardLastFour,o=e.pinCode,n.next=4,Object(j.f)({exchangeToken:a,debitCardLastFour:c,pinCode:o});case 4:if(i=n.sent){n.next=7;break}return n.abrupt("return",null);case 7:if(!Object(j.k)(i)){n.next=9;break}return n.abrupt("return",t(Object(u.a)(Object(u.a)({},i),j.a[i.code])));case 9:return n.abrupt("return",i);case 10:case"end":return n.stop()}}),n)})))()},finish:function(e,r){return Object(p.a)(Object(l.a)().mark((function n(){var t,a,c,o,i;return Object(l.a)().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return t=r.rejectWithValue,a=e.exchangeToken,c=e.password,o=e.verificationCode,n.next=4,Object(j.g)({exchangeToken:a,password:c,verificationCode:o});case 4:if(i=n.sent){n.next=7;break}return n.abrupt("return",null);case 7:if(!Object(j.k)(i)){n.next=9;break}return n.abrupt("return",t(Object(u.a)(Object(u.a)({},i),j.a[i.code])));case 9:return n.abrupt("return",i);case 10:case"end":return n.stop()}}),n)})))()}}),h=Object(b.d)(i,(function(e){var r=e.addCase,n=e.addMatcher;r(f.clean,(function(){return Object(u.a)({},i)})),r(O.pre.fulfilled,(function(e,r){var n=r.payload;if(e.fetching=!1,e.error=i.error,n){var t=n.data,a=t.documentTypes,c=t.recoverData;e.documentTypes=a,e.recoverData=c||null}})),r(O.step1.fulfilled,(function(e,r){var n=r.payload;if(e.fetching=!1,n){var t=n.data,a=t.hasPin,c=t._exchangeToken;e.hasPin=a,e.exchangeToken=c}})),r(O.byCode.fulfilled,(function(e,r){var n=r.payload;e.fetching=!1,e.error=i.error,n&&(e.recoverBy=o,e.isValidationCodeSent=!0)})),r(O.byCodeStep1.fulfilled,(function(e,r){var n=r.payload;e.fetching=!1,e.error=i.error,n&&(e.mobileNumber=n.data.mobileNumber,e.isValidationCodeEntered=!0)})),r(O.resendCode.fulfilled,(function(e,r){var n=r.payload;e.fetching=!1,e.isValidationCodeSent=!0,n&&(e.mobileNumber=n.data.mobileNumber||null)})),r(O.byCodeStep2.fulfilled,(function(e,r){var n=r.payload;e.fetching=!1,e.error=i.error,n&&(e.isVerificationComplete=!0)})),r(O.byPin.fulfilled,(function(e,r){var n=r.payload;e.fetching=!1,e.error=i.error,n&&(e.recoverBy="PIN")})),r(O.byPinStep1.fulfilled,(function(e,r){var n=r.payload;e.fetching=!1,e.error=i.error,n&&(e.isVerificationComplete=!0)})),r(O.finish.fulfilled,(function(e,r){var n=r.payload;e.fetching=!1,e.error=i.error,n&&(e.isPasswordRecovered=!0)})),r(f.setRecoverData,(function(e,r){var n=r.payload;e.recoverData=n})),r(f.setVerificationCode,(function(e,r){var n=r.payload;e.verificationCode=n})),r(f.cleanIsValidationCodeSent,(function(e){e.isValidationCodeSent=i.isValidationCodeSent})),r(f.cleanRecoverBy,(function(e){e.recoverBy=i.recoverBy})),r(f.cleanMobileNumber,(function(e){e.mobileNumber=i.mobileNumber})),r(f.cleanIsValidationCodeEntered,(function(e){e.isValidationCodeEntered=i.isValidationCodeEntered})),r(f.cleanExchangeToken,(function(e){e.exchangeToken=i.exchangeToken})),r(f.cleanWarnings,(function(e){e.warning=i.warning})),n((function(e){return Object(s.b)(e,c)}),(function(e){e.fetching=!0,e.error=i.error,e.warning=i.warning})),n((function(e){return Object(s.c)(e,c)}),(function(e,r){var n=r.payload;e.fetching=!1,Object(d.x)(j.a,n.code)?e.warning=n:e.error=n}))}));function v(e){return e[c]}v.fetching=Object(b.e)(v,(function(e){return e.fetching})),v.documentTypes=Object(b.e)(v,(function(e){return e.documentTypes})),v.recoverData=Object(b.e)(v,(function(e){return e.recoverData})),v.hasPin=Object(b.e)(v,(function(e){return e.hasPin})),v.mobileNumber=Object(b.e)(v,(function(e){return e.mobileNumber})),v.exchangeToken=Object(b.e)(v,(function(e){return e.exchangeToken})),v.verificationCode=Object(b.e)(v,(function(e){return e.verificationCode})),v.error=Object(b.e)(v,(function(e){return e.error})),v.warning=Object(b.e)(v,(function(e){return e.warning})),v.isStep1=Object(b.e)(v,(function(e){return!e.exchangeToken})),v.isStep2=Object(b.e)(v,(function(e){return Boolean(e.exchangeToken)&&!e.recoverBy})),v.isStep3ByCodeStep1=Object(b.e)(v,(function(e){return Boolean(e.exchangeToken)&&e.recoverBy===o&&!e.isValidationCodeEntered&&!e.isPasswordRecovered})),v.isStep3ByCodeStep2=Object(b.e)(v,(function(e){return Boolean(e.exchangeToken)&&e.recoverBy===o&&e.isValidationCodeEntered&&!e.isVerificationComplete&&!e.isPasswordRecovered})),v.isStep3ByPinStep1=Object(b.e)(v,(function(e){return Boolean(e.exchangeToken)&&!e.isVerificationComplete&&"PIN"===e.recoverBy})),v.isStep4PasswordData=Object(b.e)(v,(function(e){return Boolean(e.exchangeToken)&&e.isVerificationComplete&&!e.isPasswordRecovered})),v.isStepFinished=Object(b.e)(v,(function(e){return Boolean(e.exchangeToken)&&e.isPasswordRecovered})),v.isValidationCodeSent=Object(b.e)(v,(function(e){return e.isValidationCodeSent})),v.isValidationCodeEntered=Object(b.e)(v,(function(e){return e.isValidationCodeEntered}));var x=Object(t.a)({},c,h)},163:function(e,r,n){"use strict";n.d(r,"a",(function(){return p})),n.d(r,"c",(function(){return h})),n.d(r,"b",(function(){return l})),n.d(r,"d",(function(){return v}));var t=n(9),a=n(6),c="recoverUser",o={fetching:!1,documentTypes:[],defaultDocumentType:a.D,error:void 0,warning:void 0,hasRecoveredUser:!1},i=n(2),u=n(1),b=n(12),s=n(0),d=n(5),f=n(98),l=Object(u.c)(c,{getDocumentType:function(e,r){return Object(d.a)(Object(s.a)().mark((function e(){var n,t;return Object(s.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=r.rejectWithValue,e.next=3,Object(f.b)();case 3:if(t=e.sent){e.next=6;break}return e.abrupt("return",null);case 6:if(!Object(f.d)(t)){e.next=8;break}return e.abrupt("return",n(Object(i.a)(Object(i.a)({},t),f.a[t.code])));case 8:return e.abrupt("return",t);case 9:case"end":return e.stop()}}),e)})))()},recoverUser:function(e,r){return Object(d.a)(Object(s.a)().mark((function n(){var t,a,c,o,u;return Object(s.a)().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return t=r.rejectWithValue,a=e.documentNumber,c=e.documentType,o=e.email,n.next=4,Object(f.c)({docType:c,docNumber:a,email:o});case 4:if(u=n.sent){n.next=7;break}return n.abrupt("return",null);case 7:if(!Object(f.d)(u)){n.next=9;break}return n.abrupt("return",t(Object(i.a)(Object(i.a)({},u),f.a[u.code])));case 9:return n.abrupt("return",u);case 10:case"end":return n.stop()}}),n)})))()}}),p=Object(u.b)(c,["clean"]),j=n(3),O=Object(u.d)(o,(function(e){var r=e.addCase,n=e.addMatcher;r(p.clean,(function(){return Object(i.a)({},o)})),r(l.getDocumentType.fulfilled,(function(e,r){var n=r.payload;e.fetching=!1,e.error=o.error,n&&(e.documentTypes=n.data.documentTypes)})),r(l.recoverUser.fulfilled,(function(e){e.fetching=!1,e.error=o.error,e.hasRecoveredUser=!0})),n((function(e){return Object(b.b)(e,c)}),(function(e){e.fetching=!0,e.error=o.error})),n((function(e){return Object(b.c)(e,c)}),(function(e,r){var n=r.payload;e.fetching=!1,Object(j.x)(f.a,n.code)?e.warning=n:e.error=n}))}));function h(e){return e[c]}h.getDocumentTypes=Object(u.e)(h,(function(e){return e.documentTypes})),h.error=Object(u.e)(h,(function(e){return e.error})),h.warning=Object(u.e)(h,(function(e){return e.warning})),h.fetching=Object(u.e)(h,(function(e){return e.fetching})),h.isStep1=Object(u.e)(h,(function(e){return!e.hasRecoveredUser})),h.isStep2=Object(u.e)(h,(function(e){return e.hasRecoveredUser}));var v=Object(t.a)({},c,O)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=main~46925dbc.69ecc7ac.chunk.js.map