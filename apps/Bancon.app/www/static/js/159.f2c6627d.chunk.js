(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[159,265],{385:function(e,t,n){"use strict";n.r(t),n.d(t,"NAME_NOTIFICATIONS",(function(){return T})),n.d(t,"TYPE_NOTIFICATIONS",(function(){return d})),n.d(t,"DEF_NOTIFICATIONS",(function(){return b})),n.d(t,"default",(function(){return N}));var i=n(2),r=n(16),a=n(11),c=n(80),o=n(497),u=n(158),s=n(8),l=n(642),f=n(51),O=n(446),E=n.n(O),p=n(10),T=E.a.NAME_NOTIFICATIONS,d=E.a.TYPE_NOTIFICATIONS,b={};function N(e){var t=Object(c.g)(),n=Object(s.b)(),O=a.b.useState(!1),E=Object(r.a)(O,2),T=E[0],d=E[1],b=Object(f.sb)(f.o);return a.b.useEffect((function(){d(!0)}),[]),Object(p.jsx)(o.a,{withFooter:!0,hasNotifications:!1,"header-onBack":function(){n(u.a.cleanNotificationSelected()),t(b,{replace:!0})},children:T&&Object(p.jsx)(l.a,Object(i.a)({},e))})}N.displayName=T,N.defaultProps=b},446:function(e,t,n){e.exports={NAME_NOTIFICATIONS:"Notifications",TYPE_NOTIFICATIONS:"Section"}},499:function(e,t,n){"use strict";n.d(t,"a",(function(){return E}));var i=n(0),r=n(5);function a(e){var t=e.filename,n=e.path,i=e.flags;return new Promise((function(e,r){var a;function c(e){r(e)}(a=window.cordova.file[n],new Promise((function(e,t){window.resolveLocalFileSystemURL(a,(function(t){e(t)}),(function(e){t(e)}))}))).then((function(n){var r=n;r.getFile(t,i,(function(t){var n=new FileReader;t.createWriter((function(i){e({fileEntry:t,dirEntry:r,fileReader:n,fileWriter:i,fileWrite:function(e){return new Promise((function(t,n){i.onwriteend=function(){return t(i)},i.onerror=function(e){return n(e)},i.write(e)}))},fileRemove:function(){return new Promise((function(e,n){t.remove((function(){return e(!0)}),(function(e){return n(e)}))}))}})}),c)}),c)}))}))}var c=n(36),o=n(26),u=n(28);function s(){return l.apply(this,arguments)}function l(){return(l=Object(r.a)(Object(i.a)().mark((function e(){var t;return Object(i.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(o.c)();case 2:if(e.sent&&cordova.plugins){e.next=5;break}throw o.a.CORDOVA_UNAVAILABLE;case 5:if(t=cordova.plugins.fileOpener2){e.next=8;break}throw o.a.PLUGIN_UNAVAILABLE;case 8:return e.abrupt("return",t);case 9:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function f(e){return O.apply(this,arguments)}function O(){return O=Object(r.a)(Object(i.a)().mark((function e(t){var n,r,a,c,l;return Object(i.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.contentType,r=t.fileName,a=t.withDialog,e.next=3,Object(o.c)();case 3:if(e.sent){e.next=6;break}throw o.a.CORDOVA_UNAVAILABLE;case 6:return e.next=8,s();case 8:return c=e.sent,l=a?c.open:c.showOpenWithDialog,e.abrupt("return",new Promise((function(e,t){try{l(r,n,{success:function(){e({code:u.a.SUCCESS,value:!0})},error:function(e){function t(t){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}((function(e){t("boolean"===typeof e?new u.b(u.a.ERROR,c.open.name,u.c):new u.b(u.a.ERROR,c.open.name,e.message))}))})}catch(i){t(new u.b(u.a.ERROR_UNKNOWN,c.open.name,u.c))}})));case 11:case"end":return e.stop()}}),e)}))),O.apply(this,arguments)}function E(){var e=Object(c.i)(),t=e.isDesktop,n=e.isUnknown,o=e.platform;function u(e){var t=e.split(".").pop();return"png"===t||"jpg"===t||"gif"===t||"bmp"===t?"image/".concat(t):"pdf"===t?"application/".concat(t):"doc"===t||"docx"===t?"application/msword":"ppt"===t||"pptx"===t?"application/vnd.ms-powerpoint":"xls"===t||"xlsx"===t?"application/vnd.ms-excel":"xlsm"===t?"application/vnd.ms-excel.sheet.macroEnabled.12":"txt"===t?"text/plain":"zip"===t?"application/zip":void 0}return function(){var e=Object(r.a)(Object(i.a)().mark((function e(r,s){var l,O,E,p,T,d,b;return Object(i.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(l=o===c.b.CORDOVA_ANDROID,!(O=u(r))){e.next=19;break}if(!t&&!n){e.next=9;break}return(E=document.createElement("a")).href=window.URL.createObjectURL(s),E.download=r,E.click(),e.abrupt("return");case 9:return e.next=11,a({filename:r,path:l?"externalApplicationStorageDirectory":"dataDirectory",flags:{create:!0,exclusive:!1}});case 11:return p=e.sent,T=p.fileWrite,d=p.fileEntry,e.next=16,T(s);case 16:return b={contentType:O,fileName:d.nativeURL,withDialog:!0},e.next=19,f(b);case 19:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}()}},624:function(e,t,n){e.exports={NAME_NOTIFICATION_DETAILS:"NotificationDetails",TYPE_NOTIFICATION_DETAILS:"Section"}},625:function(e,t,n){e.exports={NAME_NOTIFICATION_DETAILS:"NotificationDetails",TYPE_NOTIFICATION_DETAILS:"Section",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_LINK:"Link",TYPE_LINK:"Element",NAME_XS:"xs",NAME_SM:"sm",NAME_MD:"md",NAME_LG:"lg",notificationSpinner:"_rules_notificationSpinner__13Rh6",notificationTitle:"_rules_notificationTitle__omaAq",notificationDate:"_rules_notificationDate__sf2zd"}},626:function(e,t,n){e.exports={NAME_DOWNLOAD_FILE:"DownloadFile",TYPE_DOWNLOAD_FILE:"Section"}},627:function(e,t,n){e.exports={NAME_DOWNLOAD_FILE:"DownloadFile",TYPE_DOWNLOAD_FILE:"Section",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",linkfile:"_rules_linkfile__3r2gH"}},642:function(e,t,n){"use strict";n.d(t,"a",(function(){return w}));var i=n(2),r=n(11),a=n(50),c=n(41),o=n(8),u=n(158),s=n(6),l=n(100),f=n(624),O=n.n(f),E=n(625),p=n.n(E),T=n(504),d=n(38),b=n(0),N=n(5),_=n(4),m=n(33),A=n(82),j=n(626),I=n.n(j),x=n(627),h=n.n(x),M=n(499),P=n(10),v=I.a.NAME_DOWNLOAD_FILE,R=I.a.TYPE_DOWNLOAD_FILE;function L(e){var t=Object(o.c)(m.e.token),n="".concat(_.d.BANCOR_FRONTEND,"/files/download"),i=e,r=i.nameFile,u=i.idFile,s=Object(M.a)();function l(){return(l=Object(N.a)(Object(b.a)().mark((function e(){var i;return Object(b.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(_.b)({method:_.c.POST,url:n,token:t,body:{idFile:u}});case 2:if(i=e.sent){e.next=5;break}return e.abrupt("return");case 5:if(r){e.next=7;break}return e.abrupt("return");case 7:s(r,i);case 8:case"end":return e.stop()}}),e)})))).apply(this,arguments)}return Object(P.jsxs)(c.a,{name:v,tag:"section",type:R,children:[" ",Object(P.jsxs)(A.a,{className:h.a.linkfile,kind:"plain",label:r,onClick:function(){return l.apply(this,arguments)},children:[Object(P.jsx)(a.Icon,{name:"clip",size:"small",stroke:"gray-600"}),Object(P.jsx)(d.b,{tag:"span",children:r})]},u)]})}var F=O.a.NAME_NOTIFICATION_DETAILS,D=O.a.TYPE_NOTIFICATION_DETAILS;function w(e){var t=Object(d.c)().textGet,n=Object(o.c)(u.c.communicationSelected),f=Object(o.c)(u.c.communicationReadFetching),O=r.b.useRef(null);r.b.useEffect((function(){O&&O.current&&O.current.focus()}),[n]);var E=null===n||void 0===n?void 0:n.communication.sentDate;return Object(P.jsx)(c.a,Object(i.a)(Object(i.a)({ref:O,name:F,tabIndex:s.Sb,tag:"section",type:D},e),{},{children:f?Object(P.jsx)("div",{className:p.a.notificationSpinner,children:Object(P.jsx)(a.Lottie,{loop:!0,play:!0,"aria-atomic":"true","aria-live":"assertive",name:"spinner",size:"xlarge",title:t({uuid:"spa.a11y.notification.loading.detail"})})}):Object(P.jsxs)(r.b.Fragment,{children:[Object(P.jsxs)("header",{children:[Object(P.jsx)(d.b,{className:p.a.notificationTitle,tag:"h2",children:null===n||void 0===n?void 0:n.communication.subject}),E&&Object(P.jsx)(T.a,{className:p.a.notificationDate,date:E,formatParams:{format:l.a.SHORT}})]}),Object(P.jsx)("section",{children:Object(P.jsx)(d.b,{children:Object(P.jsx)("span",{dangerouslySetInnerHTML:{__html:(null===n||void 0===n?void 0:n.communication.body)||s.D}})})}),Object(P.jsx)("footer",{children:((null===n||void 0===n?void 0:n.attachments)||[]).map((function(e){var t=e.idFile,n=e.fileName;return Object(P.jsx)(L,{idFile:t,nameFile:n},t)}))})]})}))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=159.f2c6627d.chunk.js.map