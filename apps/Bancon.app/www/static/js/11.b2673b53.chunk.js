(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[11],{497:function(e,t,n){"use strict";n.d(t,"a",(function(){return oe}));var c=n(2),a=n(0),r=n(5),i=n(16),s=n(19),o=n(11),u=n(41),l=n(36),b=n(8),j=n(33),O=n(847),m=n(270),f=n(89),d=n(117),p=n(51),h=n(148),g=n(87),v=n(164),x=n(189),N=n(6),E=n(79),A=n(45),M=n(696),T=n(573),k=n(88),y=n(65),C=n(120),_=n(30),R=n(80),S=n(99),w=n(50),L=n(518),I=n(127),P=n(82),F=n(38),B=n(644),D=n(100),H=n(74),U=n(645),V=n(700),Y=n.n(V),G=n(646),W=n(701),z=n(702),q=n(703),J=n(704),X=n(10),Q=["menu","isMenuActive","refMenu","handleMenuActive"];function Z(e){var t,n,i=e,O=i.menu,d=i.isMenuActive,g=i.refMenu,v=i.handleMenuActive,x=Object(s.a)(i,Q),E=Object(R.g)(),A=Object(S.a)().getValueConfig,M=Object(l.i)(),y=M.isMobile,C=M.isDesktop,V=Object(F.c)().textGet,Z=Object(b.c)(j.e.fetchingEnvironment),K=Object(b.c)(f.e.featureGroups),$=Object(b.c)(f.e.legacyFeatures),ee=Object(b.c)(j.e.lastLogin),te=Object(b.c)(j.e.userFirstName),ne=Object(b.c)(j.e.isCorporateEnvironment),ce=Object(b.c)(j.e.securitySeal),ae=Object(b.c)(k.e.maskProduct),re=Object(b.c)(h.c.displayType),ie=Object(p.sb)(p.r),se=Object(p.sb)(p.O),oe=Object(p.sb)(p.n),ue=Object(p.sb)(p.q),le=Object(p.sb)(p.eb),be="legacy.spa.customerSupport.external.atms",je="legacy.spa.customerSupport.external.online.turn",Oe=Object(L.a)(ie,"legacy.spa.feature.section.claims.list"),me=Object(L.a)(ie,(null===(t=$[be])||void 0===t?void 0:t.url)||be),fe=Object(L.a)(ie,(null===(n=$[je])||void 0===n?void 0:n.url)||je),de=Object(p.pb)(),pe=V({uuid:"spa.session.previousLogin.details.date.time.hs"}),he=Object(j.h)("legacy.menu.products.item.accounts.lists"),ge=Object(j.h)("legacy.menu.products.item.cards.list"),ve=ee?'<time dateTime="'.concat(ee,'" title="').concat(Object(D.e)(ee,D.b.FULL),'">\n        ').concat(Object(D.c)(new Date(ee),{defaultResult:N.j,format:D.a.DAY})," ").concat(Object(D.c)(new Date(ee),{defaultResult:N.j,format:D.a.TIME})," ").concat(pe,"</time>"):N.j,xe=Object(H.a)(A("spa.productDropOut.link")),Ne=Object(H.a)(A("backend.spa.deposits.bantotal.flag")),Ee=Object(H.a)(A("loanbt.enable")),Ae=Object(u.c)(x.className,Y.a.Menu),Me=Object(u.c)(Y.a.buttonDefault,Y.a.navContainer),Te=Object(b.c)(j.e.token),ke={isMenuActive:d,lastLogin:{uuid:"spa.menu.lastConnection.label",replace:ve},productDropOutLink:xe,signOffHandler:Le,isCorporate:ne};return Object(X.jsx)(O,Object(c.a)(Object(c.a)(Object(c.a)({},x),ke),{},{ref:g,className:Ae,children:function(e){return Z?Object(X.jsx)(m.a,{}):function(e,t){var n=e.Nav,a=e.List,r=e.Grid,i=C?me:le,s=ne?[{href:"#menu.customerSupport.item.chat",text:"menu.customerSupport.item.chat",icon:"message",modal:!0},{href:i,text:"menu.customerSupport.item.atmsAndBranches",icon:"pin"}]:[{href:"#menu.customerSupport.item.chat",text:"menu.customerSupport.item.chat",icon:"message",modal:!0},{href:fe,text:"menu.customerSupport.item.shifts",icon:"calendar"},{href:i,text:"menu.customerSupport.item.atmsAndBranches",icon:"pin"},{href:Oe,text:"menu.customerSupport.item.claims",icon:"support"}],u=t.find((function(e){return e.group===I.a.TRANSFERS})),l=G.a,b=ne?z.a:Re(t,I.a.TRANSACTIONS),j=Re(t,I.a.DOCUMENTS),O=Re(t,I.a.BENEFITS),m=Re(t,I.a.ADMINISTRATION),f=W.a;return Object(X.jsxs)(o.b.Fragment,{children:[l&&Object(X.jsx)(ye,{item:l}),Object(X.jsx)(n,{className:Me,items:[{href:oe,icon:"home",text:"menu.home",active:Be(oe)}],onClickMenuItem:C?function(){return null}:v}),u&&Object(X.jsx)(n,{className:Me,items:[Object(c.a)(Object(c.a)({},Pe(u)),{},{icon:"transfer"})],onClickMenuItem:C?function(){return null}:v}),Object(X.jsxs)("section",{className:Y.a.logoutButton,children:[Object(X.jsxs)(P.a,{kind:"plain",label:{uuid:"menu.signOff"},onClick:Le,children:[Object(X.jsx)(w.Icon,{name:"logOut",size:"small",stroke:"gray-600"}),Object(X.jsx)(F.b,{tag:"span",uuid:"menu.signOff"})]}),Object(X.jsx)(F.b,Object(c.a)({tag:"span"},ke.lastLogin))]}),Ce(a),we("spa.menu.section.transactions",b,a),we("spa.menu.section.security",f,a,!0),Object(X.jsx)(w.Separator,{}),Object(X.jsx)(r,{items:s,title:"menu.section.customerSupport"}),we("menu.section.documents",j,a),we("menu.section.benefits",O,a),C&&we("menu.section.administration",m,a),Object(X.jsx)(w.Separator,{})]})}(e,K)}}));function ye(e){var t=Fe(e.item).href;return Object(X.jsx)(u.a,{className:Y.a.profileNav,name:B.a,tag:"section",type:B.c,children:Object(X.jsxs)(R.b,{className:Y.a.alignIconPrimary,to:t,onClick:C?function(){return null}:v,children:[Object(X.jsxs)(w.Box,{as:"div",className:Y.a.pictureName,children:[Object(X.jsx)(w.Avatar,{alt:V({uuid:"login.step2.imageAlt"}),className:Y.a.avatar,size:"small",src:ce}),Object(X.jsx)(F.b,{children:te})]}),Object(X.jsx)("div",{className:Y.a.alignIconSecondary,children:Object(X.jsx)(w.Icon,{name:"right",size:"small",stroke:"gray-light"})})]})})}function Ce(e){var t=function(e,t){return[].concat(Object(_.a)(e),Object(_.a)(t))}(function(){if(Ne&&Ee)return ne?q.b:J.b;return ne?q.a:J.a}(),y&&!ne?function(e,t){return e.filter((function(e){return e.id===t}))}(U.b,U.a.MODO):[]);return ne&&(t=_e(t,U.a.ACCOUNTS_CORPORATE,he?"legacy.menu.products.item.accounts.lists":"legacy.menu.products.item.accounts.needsPermissions"),t=_e(t,U.a.CARDS_CORPORATE,ge?"legacy.menu.products.item.cards.list":"legacy.menu.products.item.cards.credit.list")),we("menu.section.products",t,e)}function _e(e,t,n){return e.map((function(e){return e.id===t?Object(c.a)(Object(c.a)({},e),{},{legacy:n}):e}))}function Re(e,t){return e.filter((function(e){var n;return e.group===t&&e.permission&&(null===(n=e.isAvailable)||void 0===n||n)}))}function Se(e){var t=e.hasLegacy,n=e.sections;return!1===t&&Array.isArray(n)&&(null===n||void 0===n?void 0:n.length)===N.Sb}function we(e,t,n){var c=arguments.length>3&&void 0!==arguments[3]&&arguments[3],a=t.filter((function(e){return!function(e){var t=e;return!t.legacy&&Se(t)}(e)||K.some((function(t){return e.id===t.id&&t.permission}))})).map((function(e){return function(e){var t=e,n=t.legacy,c=t.hasLegacy;return!!n&&(void 0===c||c)}(e)?Pe(e):c?function(e){return{href:e.url,text:e.name,active:Be(e.url)}}(e):Fe(e)}));return a.length?Object(X.jsxs)(o.b.Fragment,{children:[Object(X.jsx)(w.Separator,{}),Object(X.jsx)(n,{items:a,title:e,onClickMenuItem:C?function(){return null}:v})]}):null}function Le(){return Ie.apply(this,arguments)}function Ie(){return(Ie=Object(r.a)(Object(a.a)().mark((function e(){return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(Te){e.next=2;break}return e.abrupt("return");case 2:return e.next=4,Object(T.b)(re,Te);case 4:return e.next=6,Object(T.a)(ae,Te);case 6:E(se);case 7:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Pe(e){var t,n,c=null!==(t=$[e.legacy])&&void 0!==t&&t.url.includes("https")?null===(n=$[e.legacy])||void 0===n?void 0:n.url:e.legacy,a=Object(L.a)(ie,c);return{href:a,text:e.name,active:Be(a)}}function Fe(e){var t=e.id,n=e.name,c=e.url,a=Se(e)?c:ue.replace(p.c,t);return{href:a,text:n,active:Be(a)}}function Be(e){return de.pathname.includes(e)}}Z.defaultProps={};var K=n(848),$=n(849),ee=n(727),te=n.n(ee),ne=te.a.NAME_CONTAINER_INTERNAL,ce=te.a.TYPE_CONTAINER_INTERNAL,ae={name:ne,title:N.D,type:ce,withHeaderWidget:!1,withFooter:!1,withHeader:!0,hasNotifications:!0,withoutBox:!1,changeBackButton:!1},re=n(728),ie=n.n(re),se=["children","withHeaderWidget","hasNotifications","withHeader","withFooter","header-onBack","className","withoutBox","changeBackButton"];function oe(e){var t=e,n=t.children,_=t.withHeaderWidget,R=t.hasNotifications,S=t.withHeader,w=t.withFooter,L=t["header-onBack"],I=t.className,P=t.withoutBox,F=t.changeBackButton,B=Object(s.a)(t,se),D=Object(b.b)(),H=Object(p.sb)(p.O),U=Object(l.i)(),V=U.isDesktop,Y=U.isUnknown,G=Object(p.qb)(),W=Object(p.pb)(),z=Object(p.sb)(p.n),q=o.b.createRef(),J=Object(b.c)(y.b),Q=Object(b.c)(j.e.token),ee=Object(b.c)(k.e.maskProduct),te=Object(b.c)(j.e.isSigningOff),ne=Object(b.c)(j.e.showLogoutConfirmation),ce=Object(b.c)(g.c.deviceModel),ae=Object(b.c)(j.e.environment),re=Object(b.c)(j.e.isCorporateEnvironment),oe=Object(b.c)(j.e.fetchingEnvironment),ue=Object(b.c)(f.e.fetching),le=Object(b.c)(d.c.hasValidateModoUser),be=Object(b.c)(f.e.legacyFeatures),je=Object(b.c)(C.c.features),Oe=Object(b.c)(j.e.isHomeModalActive),me=ue||oe,fe=Object(b.c)(h.c.displayType),de=o.b.useState(!1),pe=Object(i.a)(de,2),he=pe[0],ge=pe[1],ve=o.b.useState(ae),xe=Object(i.a)(ve,2),Ne=xe[0],Ee=xe[1],Ae=W.pathname===z,Me=Object(u.c)(he&&ie.a.menuActive,w&&ie.a.withFooter),Te=Object(u.c)(I,!P&&ie.a.internalContainer),ke=o.b.useCallback((function(){Oe||(Ae?D(j.a.showLogoutConfirmation(!0)):(F&&L&&L(),he||F||G(p.a),V||he&&ge(!1)))}),[Oe,Ae,F,L,he,G,V,D]),ye=o.b.useCallback(Object(r.a)(Object(a.a)().mark((function e(){return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,D(f.b.getLegacyInfo({accessToken:Q}));case 2:case"end":return e.stop()}}),e)}))),[D,Q]);return o.b.useEffect((function(){return document.addEventListener("backbutton",ke),function(){return document.removeEventListener("backbutton",ke)}}),[ke]),o.b.useEffect((function(){if(he)return document.body.style.overflow="hidden",function(){document.body.style.overflow="scroll"}}),[he]),o.b.useEffect((function(){!Q||V||Y||re||le||D(d.b.validateUser({token:Q}))}),[D,le,re,V,Y,Q]),o.b.useEffect((function(){Q&&(J.length||me||(Object.keys(be).length===N.Sb&&ye(),Object.keys(je).length===N.Sb&&D(C.b.getClientFeatures({idActivityList:N.Qb}))))}),[D,J.length,je,ye,me,be,Q]),o.b.useEffect((function(){Object(r.a)(Object(a.a)().mark((function e(){var t,n;return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(ae&&Q){e.next=2;break}return e.abrupt("return");case 2:if(Ee(ae),Ne!==ae){e.next=5;break}return e.abrupt("return");case 5:return e.next=7,Object(A.b)(N.U);case 7:return t=e.sent,n=t.value,e.next=11,D(j.b.changeEnvironment({idEnvironmentToChange:ae,setAsDefault:!0,accessToken:Q,seedUser:String(n),deviceModel:ce}));case 11:D(E.a.clean()),D(f.a.clean()),D(v.a.clean()),G(z);case 15:case"end":return e.stop()}}),e)})))()}),[ce,Ne,D,ae,G,Q,z]),oe||te?Object(X.jsx)(m.a,{}):Object(X.jsx)(O.a,Object(c.a)(Object(c.a)({},B),{},{className:Me,isHomeActive:Ae,"session-redirect":H,onClick:function(e){if(e.stopPropagation(),!he)return;var t=q.current;if(null!==t&&void 0!==t&&t.contains(e.target))return;ge(!1)},children:function(e){var t=e.Footer,c=e.Header,a=e.Menu;return Object(X.jsxs)(o.b.Fragment,{children:[Object(X.jsx)(Z,{handleMenuActive:Se,isMenuActive:he,menu:a,refMenu:q}),S&&Object(X.jsx)(K.a,{hasNotifications:R,header:c,"header-onBack":L,withHeaderWidget:_}),Object(X.jsx)("article",{className:Te,children:n}),w&&Object(X.jsx)($.a,{footer:t,handleMenuActive:Se}),Object(X.jsx)(x.default,{}),Object(X.jsx)(M.a,{handleOnClose:Re,isVisible:ne,onClick:Ce})]})}}));function Ce(){return _e.apply(this,arguments)}function _e(){return(_e=Object(r.a)(Object(a.a)().mark((function e(){return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(Q){e.next=2;break}return e.abrupt("return");case 2:return e.next=4,Object(T.b)(fe,Q);case 4:return e.next=6,Object(T.a)(ee,Q);case 6:G(H);case 7:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Re(){D(j.a.showLogoutConfirmation(!1))}function Se(){ge(!he)}}oe.defaultProps=ae},727:function(e,t,n){e.exports={NAME_CONTAINER_INTERNAL:"ContainerInternal",TYPE_CONTAINER_INTERNAL:"Container"}},728:function(e,t,n){e.exports={NAME_CONTAINER_INTERNAL:"ContainerInternal",TYPE_CONTAINER_INTERNAL:"Container",NAME_XS:"xs",NAME_SM:"sm",NAME_MD:"md",NAME_LG:"lg",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",menuActive:"_rules_menuActive__1wNcb",withFooter:"_rules_withFooter__2LX0V",internalContainer:"_rules_internalContainer__1VD5Z"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=11.b2673b53.chunk.js.map