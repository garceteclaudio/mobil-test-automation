(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[53],{232:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return x}));var a=n(11),c=n(524),i=n(8),o=n(118),r=n(65),s=n(79),l=n(3),u=n(6),d=n(362),b=n(363),j=n(364),p=n(310),O=n(311),f=n(312),h=n(313),m=n(365),C=n(10);function x(){var e=Object(i.b)(),t=Object(i.c)(o.c.error),n=t&&(null===t||void 0===t?void 0:t.type)===l.g.CRITICAL;a.b.useEffect((function(){if(n){var a={id:"_custom".concat(c.a),message:"".concat(t.message,"(").concat(t.code,")"),infoMessage:u.D,showDefaultInfo:!1};e(r.a.add(a)),e(o.a.clean())}}),[e,n,t]);var x=Object(i.c)(o.c.isStep2),E=Object(i.c)(o.c.isStep4Associate),v=Object(i.c)(o.c.isStep3ByPin),T=Object(i.c)(o.c.isStep3ByCodeStep1),g=Object(i.c)(o.c.isStep3ByCodeStep2),N=Object(i.c)(o.c.isStep3ByCodeStep3),_=Object(i.c)(o.c.isStep4),y=Object(i.c)(o.c.isStep5),S=Boolean(Object(i.c)(o.c.sentData)),P=Object(i.c)(s.b.get),M={step1:{condition:x,component:d.default},step2:{condition:v,component:b.default},step3:{condition:T,component:j.default},step4:{condition:g,component:p.default},step5:{condition:N,component:O.default},step8:{condition:E,component:m.default},step6:{condition:_,component:f.default},step7:{condition:y,component:h.default}};return Object(C.jsx)(c.b,{handleChangeStep:function(){g||N&&S||!P.length||e(s.a.clean())},handleFallback:function(){e(r.a.add({id:c.a,message:"ERROR ".concat(c.a," - NO TARGET STEP"),name:"ERROR ".concat(c.a),stack:"ERROR ".concat(c.a)}))},steps:M})}},310:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return g}));var a=n(0),c=n(5),i=n(16),o=n(11),r=n(39),s=n(80),l=n(8),u=n(118),d=n(79),b=n(187),j=n(147),p=n(82),O=n(38),f=n(494),h=n(488),m=n(489),C=n(6),x=n(51),E=n(429),v=n.n(E),T=n(10);function g(){var e=Object(l.b)(),t=Object(O.c)().textGet,n=Object(s.g)(),E=Object(x.sb)(x.R),g=Object(l.c)(u.c.fetching),N=Object(l.c)(u.c.warning),_=Object(l.c)(j.c.exchangeToken),y=Object(l.c)(u.c.sentData),S=Object(l.c)(u.c.sentChannelInvitationCode),P=Object(l.c)(u.c.isCorporate),M=Object(l.c)(u.c.haveCode),A=o.b.useState(!1),k=Object(i.a)(A,2),I=k[0],R=k[1],B=!P&&!M,D=t({uuid:"spa.enrollment.byCode.step2.invitationCode.input.label"}),L=t({uuid:"spa.generic.field.error.required"}),w=r.e.object({invitationCode:Object(b.d)(r.e.string.required(),L)}),F=o.b.useCallback((function(){e(d.a.set({kind:"SUCCESS",text:{uuid:"spa.enrollment.byCode.step2.invitationCode.alert.text",replace:"<b>".concat(y,"</b>")},duration:C.v}))}),[e,y]);return o.b.useEffect((function(){(y||I)&&(F(),R(!1))}),[y,F,I]),Object(T.jsx)(m.a,{"header-onBack":function(){P?(e(u.a.clean()),e(j.a.clean()),e(d.a.clean()),n(E)):(e(u.a.notSendedInvitation()),e(u.a.cleanSentData()))},"header-title":"spa.signup.title",children:Object(T.jsx)("section",{children:Object(T.jsxs)(h.a,{schema:w,warnings:N,onSubmit:function(e){return Y.apply(this,arguments)},children:[Object(T.jsx)(O.b,{className:v.a.byCodeInvitationCode,uuid:"spa.enrollment.byCode.step2.subtitle"}),Object(T.jsx)(f.a,{withoutSpaces:!0,label:D,maxLength:C.Bb,name:"invitationCode",onChange:function(){e(u.a.cleanWarnings())}}),Object(T.jsx)(p.a,{className:v.a.submitButton,label:{uuid:"spa.form.continue"},loading:g,type:"submit"}),B&&Object(T.jsxs)("div",{className:v.a.alignInvitationCode,children:[Object(T.jsx)(O.b,{tag:"span",uuid:"spa.enrollment.byCode.notReceive.text"}),Object(T.jsx)(p.a,{className:v.a.haveCode,kind:"plain",label:{uuid:"spa.enrollment.byCode.resend.link"},onClick:function(){return H.apply(this,arguments)}})]})]})})});function Y(){return(Y=Object(c.a)(Object(a.a)().mark((function t(n){var c;return Object(a.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return c=n.invitationCode,t.next=3,e(u.b.byCodeStep2({exchangeToken:_,invitationCode:c}));case 3:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function H(){return(H=Object(c.a)(Object(a.a)().mark((function t(){return Object(a.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e(u.b.reSendInvitationCode({exchangeToken:_,resendChannel:S}));case 2:R(!0);case 3:case"end":return t.stop()}}),t)})))).apply(this,arguments)}}},311:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return v}));var a=n(0),c=n(5),i=n(16),o=n(11),r=n(39),s=n(8),l=n(118),u=n(187),d=n(6),b=n(79),j=n(147),p=n(38),O=n(488),f=n(82),h=n(494),m=n(489),C=n(429),x=n.n(C),E=n(10);function v(){var e=Object(s.b)(),t=Object(p.c)().textGet,n=Object(s.c)(j.c.exchangeToken),C=Object(s.c)(l.c.fetching),v=Object(s.c)(l.c.warning),T=Object(s.c)(l.c.sentData),g=T.replace(T,"<b>".concat(T,"</b>")),N=Object(s.c)(l.c.sentChannelVerificationCode),_=Object(s.c)(l.c.invitationCode),y=t({uuid:"spa.generic.field.error.required"}),S=o.b.useState(!1),P=Object(i.a)(S,2),M=P[0],A=P[1],k=t({uuid:"spa.enrollment.byCode.step3.verificationCode.input.label"}),I=r.e.object({verificationCode:Object(u.d)(r.e.string.required(),y)}),R=o.b.useCallback((function(){e(b.a.clean()),e(b.a.set({kind:"SUCCESS",text:{uuid:"spa.enrollment.byCode.step3.verificationCode.alert.text",replace:g},duration:d.v}))}),[e,g]);return o.b.useEffect((function(){(T||M)&&(R(),A(!1))}),[R,T,M]),Object(E.jsx)(m.a,{"header-onBack":function(){e(l.a.setInvitationCode(d.D)),e(l.a.cleanSentData()),e(b.a.clean())},"header-title":"spa.signup.title",children:Object(E.jsx)("section",{children:Object(E.jsxs)(O.a,{schema:I,warnings:v,onSubmit:function(e){return B.apply(this,arguments)},children:[Object(E.jsx)(p.b,{className:x.a.byCodeInvitationCode,uuid:"spa.enrollment.byCode.step3.subtitle"}),Object(E.jsx)(h.a,{withoutSpaces:!0,id:"verification",label:k,maxLength:d.Bb,name:"verificationCode",onChange:function(){e(l.a.cleanWarnings())}}),Object(E.jsx)(f.a,{className:x.a.submitButton,label:{uuid:"spa.form.continue"},loading:C,type:"submit"}),Object(E.jsxs)("div",{className:x.a.alignInvitationCode,children:[Object(E.jsx)(p.b,{tag:"span",uuid:"spa.enrollment.byCode.notReceive.text"}),Object(E.jsx)(f.a,{className:x.a.haveCode,kind:"plain",label:{uuid:"spa.enrollment.byCode.resend.link"},onClick:function(){return D.apply(this,arguments)}})]})]})})});function B(){return(B=Object(c.a)(Object(a.a)().mark((function t(c){var i;return Object(a.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return i=c.verificationCode,e(l.a.setVerificationCode(i)),t.next=4,e(l.b.byCodeStep3({exchangeToken:n,invitationCode:_,verificationCode:i}));case 4:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function D(){return(D=Object(c.a)(Object(a.a)().mark((function t(){return Object(a.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e(l.b.reSendInvitationCode({exchangeToken:n,resendChannel:N,invitationCode:_}));case 2:A(!0);case 3:case"end":return t.stop()}}),t)})))).apply(this,arguments)}}},362:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return O}));var a=n(0),c=n(5),i=(n(11),n(80)),o=n(8),r=n(118),s=n(6),l=n(147),u=n(270),d=n(576),b=n(489),j=n(51),p=n(10);function O(){var e=Object(o.b)(),t=Object(i.g)(),n=Object(j.sb)(j.R),O=Object(o.c)(r.c.fetching),f=Object(o.c)(r.c.hasPin),h=Object(o.c)(l.c.exchangeToken);return O?Object(p.jsx)(u.a,{}):Object(p.jsx)(b.a,{"header-onBack":function(){e(r.a.clean()),e(l.a.clean()),t(n)},"header-title":"spa.enrollment.title",children:Object(p.jsx)(d.a,{handleByCode:function(){return m.apply(this,arguments)},handleByPin:function(){return C.apply(this,arguments)},hasPin:f,textSubtitle:"spa.enrollment.contact.subtitle"})});function m(){return(m=Object(c.a)(Object(a.a)().mark((function t(){return Object(a.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e(r.b.byCode({exchangeToken:h}));case 2:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function C(){return(C=Object(c.a)(Object(a.a)().mark((function t(){return Object(a.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e(r.b.byPin({exchangeToken:h}));case 2:e(r.a.setVerificationCode(s.D));case 3:case"end":return t.stop()}}),t)})))).apply(this,arguments)}}},364:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return m}));var a=n(0),c=n(5),i=n(11),o=n(8),r=n(118),s=n(147),l=n(270),u=n(82),d=n(38),b=n(79),j=n(489),p=n(6),O=n(429),f=n.n(O),h=n(10);function m(){var e=Object(o.b)(),t=Object(o.c)(r.c.fetching),n=Object(o.c)(s.c.exchangeToken),O=Object(o.c)(r.c.isCodeExpired),m=i.b.useCallback((function(){e(b.a.set({kind:"ERROR",text:{uuid:"spa.enrollment.invitationCode.expired"},duration:p.v}))}),[e]);return i.b.useEffect((function(){O&&m()}),[m,O]),t?Object(h.jsx)(l.a,{}):Object(h.jsx)(j.a,{"header-onBack":function(){e(r.a.cancelCodePath()),e(b.a.clean())},"header-title":"spa.enrollment.title",children:Object(h.jsxs)("section",{children:[Object(h.jsx)(d.b,{className:f.a.byCodeTitle,uuid:"spa.enrollment.byCode.step1.title"}),Object(h.jsx)(d.b,{className:f.a.byCodeSubtitle,uuid:"spa.enrollment.byCode.step1.subtitle"}),Object(h.jsx)(u.a,{label:{uuid:"spa.enrollment.byCode.step1.request"},type:"button",onClick:function(){return C.apply(this,arguments)}}),Object(h.jsx)(u.a,{className:f.a.haveCode,kind:"plain",label:{className:f.a.haveCodeSubtitle,uuid:"spa.enrollment.byCode.step1.haveCode"},onClick:function(){e(r.a.haveCode())}})]})});function C(){return(C=Object(c.a)(Object(a.a)().mark((function t(){return Object(a.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e(r.b.sendInvitationCode({exchangeToken:n}));case 2:case"end":return t.stop()}}),t)})))).apply(this,arguments)}}},490:function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var a=n(2),c=n(19),i=n(11),o=n(41),r=n(50),s=n(495),l=n.n(s),u=(n(496),n(38)),d=n(82),b=n(10),j=["ariaLabelledBy","id","children","title","onClose","hasCloseIcon"],p=l.a.TYPE_MODAL,O=l.a.NAME_MODAL;function f(e){var t=e,n=t.ariaLabelledBy,s=t.id,l=t.children,f=t.title,h=t.onClose,m=t.hasCloseIcon,C=Object(c.a)(t,j),x="modal-header-".concat(s||""),E="string"===typeof f?x:n,v="string"===typeof f?Object(b.jsx)(u.b,{id:x,tag:"h4",uuid:f}):f;return Object(b.jsx)(o.a,{name:O,tag:"div",type:p,children:Object(b.jsxs)(r.Modal,Object(a.a)(Object(a.a)({ariaLabelledBy:E,onClose:h},C),{},{children:[Object(b.jsx)(r.Modal.Header,{children:f&&Object(b.jsxs)(i.b.Fragment,{children:[v,m&&Object(b.jsx)(d.a,{icon:"close",kind:"icon",label:{uuid:"spa.a11y.buttons.close.modal"},onClick:h})]})}),l]}))})}f.defaultProps={ariaLabelledBy:"",closeOnBgTap:!0,hasCloseIcon:!0,initialFocusElementId:"",title:""},f.Body=function(e){var t=e.children;return Object(b.jsx)(r.Modal.Body,{children:t})},f.Footer=function(e){var t=e.children,n=e.className;return Object(b.jsx)(r.Modal.Footer,{className:n,children:t})}},495:function(e,t,n){e.exports={NAME_MODAL:"Modal",TYPE_MODAL:"Element"}},496:function(e,t,n){e.exports={NAME_MODAL:"Modal",TYPE_MODAL:"Element"}},512:function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var a=n(2),c=n(19),i=n(11),o=n(50),r=n(41),s=n(488),l=n(514),u=n.n(l),d=n(10),b=["id","name","methods","defaultValue","onChange","valueAsNumber"],j=u.a.NAME_INPUT_NUMBER,p=u.a.TYPE_INPUT_NUMBER,O={id:j,valueAsNumber:!0},f=i.b.memo((function(e){var t,n=e.id,s=e.name,l=e.methods,u=e.defaultValue,O=e.onChange,f=e.valueAsNumber,h=Object(c.a)(e,b),m=l.register,C=l.formState,x=l.getValues,E=l.setValue,v=l.clearErrors,T=C.errors,g="".concat(s),N=x()[g],_=T[s];return i.b.useEffect((function(){u&&E(g,u,{shouldValidate:!0}),u||E(g,void 0)}),[u,g,E]),Object(d.jsx)(r.a,{name:j,type:p,children:Object(d.jsx)(o.NumberField,Object(a.a)(Object(a.a)(Object(a.a)(Object(a.a)({},u&&{defaultValue:u}),{},{id:n||s},_&&{error:null===(t=_.message)||void 0===t?void 0:t.toString()}),m(g,{onChange:function(e){O&&O(e);v([g])},valueAsNumber:f})),{},{value:N},h))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function h(e){var t=s.a.useContext();return Object(d.jsx)(f,Object(a.a)({methods:t},e))}h.displayName=j,h.defaultProps=O},514:function(e,t,n){e.exports={NAME_INPUT_NUMBER:"InputNumber",TYPE_INPUT_NUMBER:"Element"}},524:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return u}));var a=n(2),c=n(16),i=n(11),o=n(531),r=n.n(o),s=n(10),l=r.a.NAME_STEPPER;r.a.TYPE_STEPPER;function u(e){var t=e,n=t.steps,o=t.handleFallback,r=t.handleChangeStep,l=Object.entries(n).filter((function(e){return Boolean(e[1].condition)})).map((function(e){var t=Object(c.a)(e,2),n=t[0],i=t[1],o=i.component;return Object(s.jsx)(o,Object(a.a)({},i.props||{}),n)}),{}).shift(),u=i.b.useState(null===l||void 0===l?void 0:l.key),d=Object(c.a)(u,2),b=d[0],j=d[1];return i.b.useEffect((function(){!l&&o&&o()}),[o,l]),i.b.useEffect((function(){b!==(null===l||void 0===l?void 0:l.key)&&r&&r(),j(null===l||void 0===l?void 0:l.key)}),[b,r,null===l||void 0===l?void 0:l.key]),l||null}u.displayName=l,u.defaultProps={handleChangeStep:function(){},handleFallback:function(){}}},531:function(e,t,n){e.exports={NAME_STEPPER:"Stepper",TYPE_STEPPER:"Element"}},576:function(e,t,n){"use strict";n.d(t,"a",(function(){return p}));n(11);var a=n(50),c=n(41),i=n(38),o=n(82),r=n(577),s=n.n(r),l=n(578),u=n.n(l),d=n(10),b=u.a.NAME_CONTACT_METHODS,j=u.a.TYPE_CONTACT_METHODS;function p(e){var t=e,n=t.hasPin,r=t.handleByCode,l=t.handleByPin,u=t.textSubtitle;return Object(d.jsxs)(c.a,{name:b,tag:"section",type:j,children:[Object(d.jsx)("div",{className:s.a.textSubtitle,children:Object(d.jsx)(i.b,{uuid:u})}),Object(d.jsxs)(o.a,{className:s.a.contactMethodButton,disabled:!n,kind:"plain",label:{uuid:"spa.method.debitCardAndPin.button"},onClick:l,children:[Object(d.jsxs)("div",{className:s.a.alignIconPrimary,children:[Object(d.jsx)(a.Icon,{name:"card",size:"small",stroke:"gray-light"}),Object(d.jsx)(i.b,{tag:"span",uuid:"spa.method.debitCardAndPin.button"})]}),Object(d.jsx)("div",{className:s.a.alignIconSecondary,children:Object(d.jsx)(a.Icon,{name:"right",size:"xsmall",stroke:"gray-600"})})]}),Object(d.jsxs)(o.a,{className:s.a.contactMethodButton,kind:"plain",label:{uuid:"spa.method.smsAndMail.button"},onClick:r,children:[Object(d.jsxs)("div",{className:s.a.alignIconPrimary,children:[Object(d.jsx)(a.Icon,{name:"mail",size:"small",stroke:"gray-light"}),Object(d.jsx)(i.b,{tag:"span",uuid:"spa.method.smsAndMail.button"})]}),Object(d.jsx)("div",{className:s.a.alignIconSecondary,children:Object(d.jsx)(a.Icon,{name:"right",size:"xsmall",stroke:"gray-600"})})]})]})}p.defaultProps={}},577:function(e,t,n){e.exports={NAME_EXTERNAL_CONTAINER:"ContainerExternal",TYPE_EXTERNAL_CONTAINER:"Container",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_CONTACT_METHODS:"ContactMethods",TYPE_CONTACT_METHODS:"Section",textSubtitle:"_rules_textSubtitle__2Rry5",contactMethodButton:"_rules_contactMethodButton__3-wEs",alignIconPrimary:"_rules_alignIconPrimary__3EXbD",alignIconSecondary:"_rules_alignIconSecondary__3FHXW"}},578:function(e,t,n){e.exports={NAME_CONTACT_METHODS:"ContactMethods",TYPE_CONTACT_METHODS:"Section"}},579:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return C}));var a=n(2),c=n(19),i=n(6),o=n(187),r=(n(11),n(41)),s=n(39),l=n(517),u=n(38),d=n(580),b=n.n(d),j=n(512),p=n(10),O=["onChange","onBlur"],f=b.a.NAME_DEBIT_CARD_AND_PIN_SECTION,h=b.a.TYPE_DEBIT_CARD_AND_PIN_SECTION,m=function(e){return s.e.object({debitCardLastFour:Object(o.g)(e),pinCode:Object(o.n)(e)})};function C(e){var t=e,n=t.onChange,o=t.onBlur,s=Object(c.a)(t,O),d=Object(u.c)().textGet,b=d({uuid:"spa.byPin.debitCardLastFour.input.label"}),m=d({uuid:"spa.byPin.pin.input.label"});return Object(p.jsxs)(r.a,Object(a.a)(Object(a.a)({name:f,tag:"section",type:h},s),{},{children:[Object(p.jsx)(j.a,{allowLeadingZeros:!0,label:b,maxLength:i.M,name:"debitCardLastFour",regexPattern:/\d/g,valueAsNumber:!1,onBlur:o,onChange:n}),Object(p.jsx)(l.a,{label:m,maxLength:i.M,name:"pinCode",regexPattern:/\d/g,onChange:n})]}))}C.defaultProps={}},580:function(e,t,n){e.exports={NAME_DEBIT_CARD_AND_PIN_SECTION:"DebitCardAndPinSection",TYPE_DEBIT_CARD_AND_PIN_SECTION:"Section"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=53.42358ee9.chunk.js.map