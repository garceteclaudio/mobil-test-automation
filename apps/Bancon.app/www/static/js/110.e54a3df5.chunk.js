(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[110,305],{190:function(e,t,c){"use strict";c.r(t),c.d(t,"default",(function(){return M}));var i=c(0),n=c(5),r=c(16),a=c(11),s=c(99),u=c(8),o=c(635),b=c(38),l=c(166),d=c(270),j=c(69),p=c(33),O=c(87),f=c(6),_=c(82),m=c(50),v=c(108),x=c(36),h=c(79),E=c(45),g=c(120),y=c(74),N=c(452),k=c.n(N),S=c(10),w="spa.security.biometricSecurity";function M(){var e=Object(u.b)(),t=Object(x.i)().isMobile,c=Object(b.c)().textGet,N=Object(s.a)().getValueConfig,M=Object(u.c)(O.c.deviceModel),R=Object(u.c)(p.e.token),T=Object(u.c)(l.c.fetching),A=Object(u.c)(v.f.fetching),P=Object(u.c)(j.c.uniqueDeviceID),I=Object(u.c)(l.c.devices),D=Object(u.c)(v.f.userIsNotEnrolled),F=Object(u.c)(v.f.isHardwareUnavailable),C=Object(u.c)(l.c.deviceWithFingerprint),L=Object(u.c)(l.c.deviceRegistered),U=a.b.useState(!1),H=Object(r.a)(U,2),V=H[0],B=H[1],z=Object(v.h)(!0,(function(t){var c=t.userIsNotEnrolled;D&&!c&&V&&(e(h.a.set({kind:"INFO",text:{uuid:"spa.security.biometricSecurity.info.msg"},duration:f.z})),B(!1))})).install,G=Object(v.i)(),q=Object(y.a)(N("vu.fraud.check.fingerprint.enable")),Y=Object(y.a)(N("backend.vu.fraud.api.fingerprint.url")),X=Object(y.a)(N("backend.vu.fraud.api.fingerprint.timeout")),J=Object(g.e)(f.G.PREFERENCES_BIOMETRY_FINGERPRINT),W=A||T||void 0===J||void 0===I,K=a.b.useCallback((function(){R&&void 0===I&&J&&e(l.b.biometricSecurityPre({accessToken:R,uniqueDeviceId:P}))}),[e,R,P,I,J]);Object(v.g)({onRegisterPreference:function(){e(h.a.set({kind:"INFO",text:{uuid:"spa.security.biometricSecurity.deviceRegistered"},duration:f.z})),e(l.a.cleanDevices())},textCancel:c({uuid:"spa.biometryshow.cancel"}),textError:"Error",textHeader:c({uuid:"spa.biometryshow.header"}),textTitle:c({uuid:"spa.biometryshow.title"}),textGet:c,isVUFingerprintEnabled:q,url:Y,timeout:X}),a.b.useEffect(K,[K]);var Q=!C&&!L;return W?Object(S.jsx)(d.a,{}):Object(S.jsxs)("div",{className:k.a.biometricSection,children:[Object(S.jsx)(b.b,{className:k.a.title,tag:"h4",uuid:"spa.security.biometricSecurity.title"}),t&&J&&function(){if(F)return Object(S.jsx)("div",{children:Object(S.jsx)(b.b,{uuid:"spa.security.biometricSecurity.notSupported"})});var e=D?"activate":"configurate";return Object(S.jsxs)("div",{children:[Object(S.jsx)(m.Alert,{variant:"warning",children:Object(S.jsxs)("div",{className:k.a.warningSection,children:[Object(S.jsx)(m.Icon,{className:k.a.warningIcon,name:"warning",stroke:"warning"}),Object(S.jsx)(b.b,{uuid:"spa.userInfo.preferences.fingerprint.warningMessage"})]})}),Q&&Object(S.jsxs)("div",{className:k.a.linkDeviceSection,children:[Object(S.jsx)(b.b,{className:k.a.paragraph,uuid:"".concat(w,".").concat(e,".text")}),Object(S.jsx)(b.b,{className:k.a.paragraph,uuid:"".concat(w,".").concat(e,".question")}),D?Object(S.jsx)(_.a,{label:{uuid:"spa.security.biometricSecurity.configurate.button"},onClick:$}):Object(S.jsx)(_.a,{disabled:G,label:{uuid:"spa.security.biometricSecurity.link.button"},onClick:Z})]})]})}(),Object(S.jsx)("section",{className:k.a.linkedDevices,children:J?Object(S.jsxs)(a.b.Fragment,{children:[Object(S.jsx)(b.b,{className:k.a.subtitle,tag:"h5",uuid:"spa.security.biometricSecurity.linkedDevices.title"}),Object(S.jsx)("section",{children:null!==I&&void 0!==I&&I.length?Object(S.jsx)("ul",{children:I.map(te)}):Object(S.jsx)(b.b,{className:k.a.subtitle,uuid:"spa.security.biometricSecurity.linkedDevices.noDevices"})})]}):Object(S.jsx)(b.b,{className:k.a.subtitle,uuid:"activity.unavailable"})})]});function Z(){e(v.a.setBiometryPreferencesRequested(!0))}function $(){return ee.apply(this,arguments)}function ee(){return(ee=Object(n.a)(Object(i.a)().mark((function e(){return Object(i.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return B(!0),e.next=3,Object(o.a)("settings");case 3:z();case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function te(c){var r=c.idSession,a=c.deviceModel;return Object(S.jsx)("li",{children:Object(S.jsxs)("div",{className:k.a.row,children:[a&&Object(S.jsx)(b.b,{className:k.a.label,fallback:a,uuid:"spa.devices.apple.identifier.".concat(a)}),Object(S.jsx)(_.a,{className:k.a.action,label:{uuid:"spa.security.biometricSecurity.unlink.button"},size:"small",variant:"outlined",onClick:function(){return s.apply(this,arguments)}})]})},r);function s(){return(s=Object(n.a)(Object(i.a)().mark((function c(){return Object(i.a)().wrap((function(c){for(;;)switch(c.prev=c.next){case 0:if(R){c.next=2;break}return c.abrupt("return");case 2:return c.next=4,e(l.b.biometricSecurityDelete({token:R,idSession:r}));case 4:if(Q){c.next=10;break}if(!t){c.next=10;break}if(M!==a){c.next=10;break}return e(v.a.setBiometrySessionConfigured(!1)),c.next=10,Object(E.a)(v.c);case 10:case"end":return c.stop()}}),c)})))).apply(this,arguments)}}}},452:function(e,t,c){e.exports={NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_XS:"xs",NAME_SM:"sm",NAME_MD:"md",NAME_LG:"lg",biometricSection:"_rules_biometricSection__4y9a_",title:"_rules_title__4Fsqc",subtitle:"_rules_subtitle__3UzsW",warningSection:"_rules_warningSection__2LozB",warningIcon:"_rules_warningIcon__2dij3",row:"_rules_row__2g4mp",label:"_rules_label__19rJz",action:"_rules_action__2He4N",linkDeviceSection:"_rules_linkDeviceSection__1FIXd",paragraph:"_rules_paragraph__2y_ya",linkedDevices:"_rules_linkedDevices__1xFSs"}},635:function(e,t,c){"use strict";c.d(t,"a",(function(){return o}));var i=c(0),n=c(5),r=c(26),a=c(28);function s(){return u.apply(this,arguments)}function u(){return(u=Object(n.a)(Object(i.a)().mark((function e(){var t;return Object(i.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(r.c)();case 2:if(e.sent&&cordova.plugins){e.next=5;break}throw r.a.CORDOVA_UNAVAILABLE;case 5:if(t=cordova.plugins.settings){e.next=8;break}throw r.a.PLUGIN_UNAVAILABLE;case 8:return e.abrupt("return",t);case 9:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function o(e){return b.apply(this,arguments)}function b(){return(b=Object(n.a)(Object(i.a)().mark((function e(t){var c;return Object(i.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(r.c)();case 2:if(e.sent){e.next=5;break}throw r.a.CORDOVA_UNAVAILABLE;case 5:return e.next=7,s();case 7:return c=e.sent,e.abrupt("return",new Promise((function(e,i){try{c.open(t,(function(t){e({code:a.a.SUCCESS,value:t})}),(function(e){i(new a.b(a.a.ERROR,c.open.name,e))}))}catch(n){i(new a.b(a.a.ERROR_UNKNOWN,c.open.name,a.c))}})));case 9:case"end":return e.stop()}}),e)})))).apply(this,arguments)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=110.e54a3df5.chunk.js.map