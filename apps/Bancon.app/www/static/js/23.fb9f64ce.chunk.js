(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[23,303],{194:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return v}));var c=n(0),a=n(9),s=n(2),i=n(5),o=n(16),r=n(11),u=n(39),b=n(8),l=n(33),d=n(6),f=n(87),j=n(168),O=n(488),p=n(38),m=n(82),E=n(515),_=n(270),h=n(99),T=n(565),N=n(74),x=n(490),P=n(79),C=n(476),M=n.n(C),g=n(10),S={MESSAGE:"message",NEW_PRODUCT:"newProduct",ACCEPTED:"accepted",REJECTED:"rejected",PENDING:"pending",DEBIT_CARD_DELIVERY:"debitCardDelivery"};function v(){var e=Object(b.b)(),t=Object(p.c)().textGet,n=Object(h.a)().getValueConfig,C=Object(P.d)().showSuccessToast,v=r.b.useState(!1),D=Object(o.a)(v,2),A=D[0],k=D[1],I=r.b.useState(!1),L=Object(o.a)(I,2),y=L[0],F=L[1],R=Object(b.c)(l.e.token),U=Object(b.c)(f.c.fetchingNotificationsConfiguration),B=Object(b.c)(f.c.warning),w=Object(b.c)(f.c.communicationConfigurations),Y=Object(N.a)(n("safeway.otps.soft.length")),H=t({uuid:"spa.generic.field.error.required"}),V=t({uuid:"spa.modal.otp.error",replace:String(Y)}),X=Object(b.c)(j.c.listUserDevices),K=Object(b.c)(j.c.fetchingPushNotifications),G=Object(b.c)(f.c.isModifiedNotificationsConfiguration),J=Object(u.a)(u.e.object(w.reduce((function(e,t){return Object(s.a)(Object(s.a)({},e),Object.entries(t).reduce((function(e,n){var c=Object(o.a)(n,2),i=c[0];if("string"===typeof c[1])return{};var r=i.replace("subscribed","").toUpperCase();return Object(s.a)(Object(s.a)({},e),{},Object(a.a)({},"".concat(t.communicationType,"-").concat(r),u.e.boolean.orUndefined()))}),{}))}),{})),Object(T.b)(Y,V,H)),W=X.length!==d.Sb;return r.b.useEffect((function(){R&&(e(f.b.getNotificationsConfiguration({accessToken:R})),e(j.b.listUserDevices({accessToken:R})))}),[e,R]),r.b.useEffect((function(){G&&(k(!A),C("spa.preferences.global.confirmationMessage"),e(f.a.setIsModifiedNotificationsConfiguration(!1)),e(f.a.cleanModalOTP()))}),[G,C,e,A]),r.b.useEffect((function(){e(f.a.cleanModalOTP())}),[e]),U||w.length===d.Sb?Object(g.jsx)(_.a,{}):Object(g.jsxs)("div",{className:M.a.notificationsSection,children:[Object(g.jsxs)(O.a,{schema:J,warnings:B,onSubmit:function(e){return $.apply(this,arguments)},children:[Object(g.jsx)(p.b,{className:M.a.title,tag:"h1",uuid:"spa.preferences.notifications.title"}),w.map((function(e){var n=e.subscribedDefault,c=e.subscribedFacebook,a=e.subscribedMail,s=e.subscribedPush,i=e.subscribedSMS,o=e.subscribedTwitter,r=e.communicationType,u="newProduct"!==r,b="message"===r,l="debitCardDelivery"===r;return Object(g.jsxs)("section",{className:M.a.checkboxContainer,children:[Object(g.jsx)(p.b,{className:M.a.subtitle,tag:"h2",uuid:"spa.preferences.notifications.".concat(r)}),Object(g.jsxs)("div",{className:M.a.checkbox,children:[Object(g.jsx)(E.a,{isChecked:i,isDisabled:l,label:t({uuid:"spa.preferences.item.message"}),name:"".concat(r,"-SMS")}),Object(g.jsx)(E.a,{isChecked:a,isDisabled:l,label:t({uuid:"spa.preferences.item.email"}),name:"".concat(r,"-MAIL")}),Object(g.jsx)(E.a,{isChecked:n,isDisabled:b,label:t({uuid:"spa.preferences.item.web"}),name:"".concat(r,"-DEFAULT")}),Object(g.jsx)(E.a,{isChecked:c,isDisabled:u,label:t({uuid:"spa.preferences.item.facebook"}),name:"".concat(r,"-FACEBOOK")}),Object(g.jsx)(E.a,{isChecked:o,isDisabled:u,label:t({uuid:"spa.preferences.item.twitter"}),name:"".concat(r,"-TWITTER")}),Object(g.jsx)(E.a,{isChecked:s,label:t({uuid:"spa.preferences.item.push"}),name:"".concat(r,"-PUSH")})]})]},r)})),W&&Object(g.jsxs)("div",{className:M.a.pushNotifications,children:[Object(g.jsx)(p.b,{className:M.a.pushTitle,tag:"h2",uuid:"spa.preferences.pushNotifications.title"}),Object(g.jsx)("div",{className:M.a.pushNotificationsDescription,children:Object(g.jsx)(m.a,{className:M.a.pushSubtitle,kind:"plain",label:{uuid:"spa.preferences.pushNotifications.manage.devices"},onClick:z})})]}),Object(g.jsx)(T.a,{handleModal:q,isModalVisible:A}),Object(g.jsx)(m.a,{inline:!0,className:M.a.saveButton,label:{uuid:"spa.form.save"},onClick:q})]}),Object(g.jsx)(x.a,{open:y,title:"spa.preferences.pushNotifications.manage.modal.title",onClose:z,children:Object(g.jsx)(x.a.Body,{children:K?Object(g.jsx)(_.a,{}):W?X.map((function(e){var t=e.model,n=e.manufacturer,c=e.serial,a=e.idDevice;return Object(g.jsxs)("div",{className:M.a.pushNotificationsDevices,children:[Object(g.jsxs)(p.b,{children:[n,Object(g.jsx)(p.b,{tag:"span",children:t})]}),Object(g.jsx)(m.a,{icon:"trash",kind:"icon",label:{uuid:"spa.a11y.buttons.trash"},size:"small",variant:"outlined",onClick:function(){return function(e){return Q.apply(this,arguments)}(a)}})]},c)})):Object(g.jsx)(p.b,{className:M.a.pushNotificationsEmpty,uuid:"spa.preferences.pushNotifications.manage.modal.empty"})})})]});function q(){k(!A)}function z(){F(!y)}function Q(){return(Q=Object(i.a)(Object(c.a)().mark((function t(n){return Object(c.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(R){t.next=2;break}return t.abrupt("return");case 2:return t.next=4,e(j.b.deleteUserDevice({accessToken:R,idDevice:n}));case 4:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function Z(e,t){return Object.entries(e).filter((function(e){var n=Object(o.a)(e,2),c=n[0],a=n[1];if(c.includes(t)&&a)return c})).map((function(e){return Object(o.a)(e,1)[0].split(d.j)[d.fb]}))}function $(){return($=Object(i.a)(Object(c.a)().mark((function t(n){return Object(c.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(R){t.next=2;break}return t.abrupt("return");case 2:return t.next=4,e(f.b.modifyNotificationsConfiguration({accessToken:R,otp:String(n.otp),message:Z(n,S.MESSAGE),newProduct:Z(n,S.NEW_PRODUCT),accepted:Z(n,S.ACCEPTED),rejected:Z(n,S.REJECTED),pending:Z(n,S.PENDING),debitCardDelivery:Z(n,S.DEBIT_CARD_DELIVERY)}));case 4:case"end":return t.stop()}}),t)})))).apply(this,arguments)}}},476:function(e,t,n){e.exports={NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_XS:"xs",NAME_SM:"sm",NAME_MD:"md",NAME_LG:"lg",NAME_INPUT_CHECKBOX:"InputCheckbox",TYPE_INPUT_CHECKBOX:"Element",notificationsSection:"_rules_notificationsSection__17Wod",title:"_rules_title__jc2JT",subtitle:"_rules_subtitle__2A0hz",checkboxContainer:"_rules_checkboxContainer__2Pw18",checkbox:"_rules_checkbox__7vw9K",saveButton:"_rules_saveButton__1qk67",pushNotifications:"_rules_pushNotifications__u9T3c",pushTitle:"_rules_pushTitle__1n80A",pushNotificationsDescription:"_rules_pushNotificationsDescription__1S06I",pushSubtitle:"_rules_pushSubtitle__ELiCI",pushNotificationsEmpty:"_rules_pushNotificationsEmpty__tPX4I",pushNotificationsDevices:"_rules_pushNotificationsDevices__35XTg"}},494:function(e,t,n){"use strict";n.d(t,"a",(function(){return m}));var c=n(2),a=n(19),s=n(16),i=n(11),o=n(50),r=n(41),u=n(488),b=n(498),l=n.n(b),d=n(10),f=["id","name","methods","defaultValue","pattern","withSuggestions","onChange","onBlur"],j=l.a.NAME_INPUT_FIELD,O=l.a.TYPE_INPUT_FIELD,p=i.b.memo((function(e){var t,n=i.b.useState(!1),u=Object(s.a)(n,2),b=u[0],l=u[1],p=e.id,m=e.name,E=e.methods,_=e.defaultValue,h=e.pattern,T=e.withSuggestions,N=void 0===T||T,x=e.onChange,P=e.onBlur,C=Object(a.a)(e,f),M=E.register,g=E.formState,S=E.setValue,v=E.clearErrors,D=g.errors,A="".concat(m),k=D[m];return i.b.useEffect((function(){_&&S(A,_),_||S(A,void 0),N&&l(!0)}),[_,A,S,N,l]),Object(d.jsx)(r.a,{name:j,type:O,children:Object(d.jsx)(o.TextField,Object(c.a)(Object(c.a)(Object(c.a)(Object(c.a)(Object(c.a)({id:p||m},_&&{defaultValue:_}),k&&{error:null===(t=k.message)||void 0===t?void 0:t.toString()}),M(A,{onChange:function(e){x&&x(e);v([A])},onBlur:P})),C),{},{autoComplete:N?"on":"off",pattern:h,onKeyDown:function(e){e.target.value||b||l(!0)}}))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function m(e){var t=u.a.useContext();return Object(d.jsx)(p,Object(c.a)({methods:t},e))}m.displayName=j},498:function(e,t,n){e.exports={NAME_INPUT_FIELD:"InputField",TYPE_INPUT_FIELD:"Element"}},515:function(e,t,n){"use strict";n.d(t,"a",(function(){return m}));var c=n(2),a=n(16),s=n(19),i=n(11),o=n(50),r=n(41),u=n(488),b=n(520),l=n.n(b),d=n(10),f=["id","name","methods","onChange","isChecked"],j=l.a.NAME_INPUT_CHECKBOX,O=l.a.TYPE_INPUT_CHECKBOX,p=i.b.memo((function(e){var t,n=e.id,u=e.name,b=e.methods,l=e.onChange,p=e.isChecked,m=Object(s.a)(e,f),E=i.b.useState(p),_=Object(a.a)(E,2),h=_[0],T=_[1],N=b.register,x=b.formState,P=b.setValue,C=b.clearErrors,M=x.errors,g="".concat(u);i.b.useEffect((function(){void 0!==p&&(T(p),P(g,p,{shouldValidate:!0}))}),[p,g,P]);var S=M[u];return Object(d.jsx)(r.a,{name:j,type:O,children:Object(d.jsx)(o.Checkbox,Object(c.a)(Object(c.a)(Object(c.a)({id:n||u},S&&{error:null===(t=S.message)||void 0===t?void 0:t.toString()}),N(g)),{},{isChecked:h,onChange:function(e){var t=!h;T(t),P(g,t),l&&l(e),C([g])}},m))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function m(e){var t=u.a.useContext();return Object(d.jsx)(p,Object(c.a)({methods:t},e))}m.displayName=j},520:function(e,t,n){e.exports={NAME_INPUT_CHECKBOX:"InputCheckbox",TYPE_INPUT_CHECKBOX:"Element"}},565:function(e,t,n){"use strict";n.d(t,"c",(function(){return A})),n.d(t,"b",(function(){return k})),n.d(t,"a",(function(){return I}));var c=n(16),a=n(11),s=n(41),i=n(99),o=n(39),r=n(87),u=n(187),b=n(50),l=n(38),d=n(82),f=n(490),j=n(74),O=n(33),p=n(8),m=n(36),E=n(6),_=n(494),h=n(79),T=n(80),N=n(51),x=n(270),P=n(574),C=n.n(P),M=n(575),g=n.n(M),S=n(10),v=g.a.NAME_MODAL_OTP,D=g.a.TYPE_MODAL_OTP,A=function(e,t,n){return Object(o.c)((function(c){return c?Object(u.d)(Object(u.m)(e),t):Object(u.d)(o.e.string.required(),n)}))},k=function(e,t,n){return o.e.object({otp:A(e,t,n)})};function I(e){var t=e,n=t.isModalVisible,o=t.handleModal,u=t.children,P=t.titleText,M=t.isLoading,g=Object(m.i)().isMobile,A=Object(p.b)(),k=Object(T.g)(),I=Object(N.sb)(N.kb),L=E.yb.SOFT_TOKEN,y=Object(p.c)(O.e.token),F=Object(p.c)(r.c.otpType),R=Object(p.c)(r.c.countSendOtpSMS),U=Object(p.c)(r.c.fetching)||M,B=Object(l.c)().textGet,w=Object(i.a)().getValueConfig,Y=Object(r.e)(),H=Y.isSeedPresent,V=Y.softToken,X=Object(h.d)().showSuccessToast,K=Object(j.a)(w("safeway.otps.soft.length")),G=a.b.useState(E.D),J=Object(c.a)(G,2),W=J[0],q=J[1],z=F===E.Lb,Q=a.b.useState(!1),Z=Object(c.a)(Q,2),$=Z[0],ee=Z[1],te=R>E.Sb?"spa.modal.otp.button.resendCode":"spa.modal.otp.button.sendCode",ne=a.b.useCallback((function(){if(!g||!z||!H)return q(E.D),void ee(!1);q(V),ee(!0)}),[g,z,V,H]);return a.b.useEffect((function(){ne()}),[ne]),a.b.useEffect((function(){R>E.Sb&&X("spa.modal.otp.success.sendCode")}),[R,X]),Object(S.jsx)(s.a,{name:v,tag:"section",type:D,children:Object(S.jsxs)(f.a,{open:n,title:"spa.modal.otp.title",onClose:o,children:[!U&&Object(S.jsxs)(a.b.Fragment,{children:[Object(S.jsxs)(f.a.Body,{children:[P&&Object(S.jsx)(l.b,{uuid:P}),F?Object(S.jsxs)(a.b.Fragment,{children:[u,!z&&Object(S.jsx)(l.b,{uuid:"spa.modal.otp.text.sendCode"}),Object(S.jsx)("div",{className:$?C.a.hiddenInput:E.D,children:Object(S.jsx)(_.a,{defaultValue:W,label:B({uuid:"spa.modal.otp.label"}),maxLength:K,name:"otp",start:Object(S.jsx)(b.Icon,{name:"tokenPadlock"})})})]}):Object(S.jsx)(l.b,{uuid:"spa.otp.not.assign"})]}),Object(S.jsx)(f.a.Footer,{children:Object(S.jsxs)("div",{className:C.a.footer,children:[F?Object(S.jsxs)(a.b.Fragment,{children:[!z&&Object(S.jsx)(d.a,{label:{uuid:te},onClick:function(){if(!y)return;A(r.b.sendOtpOverSms({accessToken:y}))}}),Object(S.jsx)(d.a,{disabled:!z&&R===E.Sb,label:{uuid:"spa.modal.otp.accept.button"},type:"submit"})]}):Object(S.jsx)(d.a,{label:{uuid:"spa.otp.not.assign.button"},onClick:function(){o(),k(I.replace(N.c,L))}}),Object(S.jsx)(d.a,{label:{uuid:"spa.modal.otp.cancel.button"},variant:"outlined",onClick:o})]})})]}),U&&Object(S.jsx)(x.a,{})]})})}I.defaultProps={isLoading:!1}},574:function(e,t,n){e.exports={NAME_MODAL_OTP:"ModalOTP",TYPE_MODAL_OTP:"Section",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_INPUT_FIELD:"InputField",TYPE_INPUT_FIELD:"Element",hiddenInput:"_rules_hiddenInput__2xfdH",footer:"_rules_footer__OXIXm"}},575:function(e,t,n){e.exports={NAME_MODAL_OTP:"ModalOTP",TYPE_MODAL_OTP:"Section"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvcHJlZmVyZW5jZXMvTm90aWZpY2F0aW9ucy9Ob3RpZmljYXRpb25zU2VjdGlvbi9pbmRleC50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzL3ByZWZlcmVuY2VzL05vdGlmaWNhdGlvbnMvTm90aWZpY2F0aW9uc1NlY3Rpb24vX3J1bGVzLm1vZHVsZS5zY3NzIiwid2VicGFjazovLy8uLi9iYW5jb3ItY29tcG9uZW50cy9FbGVtZW50L0Zvcm0vSW5wdXQvaW5kZXgudHN4Iiwid2VicGFjazovLy8uLi9iYW5jb3ItY29tcG9uZW50cy9FbGVtZW50L0Zvcm0vSW5wdXQvX2luZGV4LnNjc3MiLCJ3ZWJwYWNrOi8vLy4uL2JhbmNvci1jb21wb25lbnRzL0VsZW1lbnQvRm9ybS9JbnB1dENoZWNrYm94L2luZGV4LnRzeCIsIndlYnBhY2s6Ly8vLi4vYmFuY29yLWNvbXBvbmVudHMvRWxlbWVudC9Gb3JtL0lucHV0Q2hlY2tib3gvX2luZGV4LnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlY3Rpb25zL01vZGFsT1RQL2luZGV4LnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvc2VjdGlvbnMvTW9kYWxPVFAvX3J1bGVzLm1vZHVsZS5zY3NzIiwid2VicGFjazovLy8uL3NyYy9zZWN0aW9ucy9Nb2RhbE9UUC9faW5kZXguc2NzcyJdLCJuYW1lcyI6WyJDT05GSUdVUkFUSU9OX1RZUEUiLCJNRVNTQUdFIiwiTkVXX1BST0RVQ1QiLCJBQ0NFUFRFRCIsIlJFSkVDVEVEIiwiUEVORElORyIsIkRFQklUX0NBUkRfREVMSVZFUlkiLCJOb3RpZmljYXRpb25zU2VjdGlvbiIsImRpc3BhdGNoIiwidXNlRGlzcGF0Y2giLCJ0ZXh0R2V0IiwidXNlVGV4dCIsImdldFZhbHVlQ29uZmlnIiwidXNlUGVyc2lzdG9yIiwic2hvd1N1Y2Nlc3NUb2FzdCIsInVzZVNob3dUb2FzdCIsIl9SZWFjdCR1c2VTdGF0ZSIsIlJlYWN0IiwidXNlU3RhdGUiLCJfUmVhY3QkdXNlU3RhdGUyIiwiX3NsaWNlZFRvQXJyYXkiLCJzaG93TW9kYWxPVFAiLCJzZXRTaG93TW9kYWxPVFAiLCJfUmVhY3QkdXNlU3RhdGUzIiwiX1JlYWN0JHVzZVN0YXRlNCIsInNob3dNb2RhbCIsInNldFNob3dNb2RhbCIsImFjY2Vzc1Rva2VuIiwidXNlU2VsZWN0b3IiLCJTZWxlY3RvclNsaWNlU2Vzc2lvbiIsInRva2VuIiwiZmV0Y2hpbmdOb3RpZmljYXRpb25zQ29uZmlndXJhdGlvbiIsIlNlbGVjdG9yU2xpY2VQcmVmZXJlbmNlcyIsIndhcm5pbmdzIiwid2FybmluZyIsImNvbW11bmljYXRpb25Db25maWd1cmF0aW9ucyIsIm90cExlbmd0aCIsInBhcnNlQ29uZmlnIiwidGV4dEVycm9yUmVxdWlyZWQiLCJ1dWlkIiwidGV4dEVycm9yT1RQIiwicmVwbGFjZSIsIlN0cmluZyIsImxpc3RVc2VyRGV2aWNlcyIsIlNlbGVjdG9yU2xpY2VQdXNoTm90aWZpY2F0aW9ucyIsImZldGNoaW5nUHVzaE5vdGlmaWNhdGlvbnMiLCJpc01vZGlmaWVkTm90aWZpY2F0aW9uc0NvbmZpZ3VyYXRpb24iLCJzY2hlbWEiLCJBc3NpZ24iLCJUeXBlIiwib2JqZWN0IiwicmVkdWNlIiwiYWNjIiwiaXRlbSIsIl9vYmplY3RTcHJlYWQiLCJPYmplY3QiLCJlbnRyaWVzIiwiYWNjYyIsIl9yZWYyIiwiX3JlZjMiLCJrZXkiLCJlc2NoZW1hS2V5IiwidG9VcHBlckNhc2UiLCJfZGVmaW5lUHJvcGVydHkiLCJjb25jYXQiLCJjb21tdW5pY2F0aW9uVHlwZSIsImJvb2xlYW4iLCJvclVuZGVmaW5lZCIsIm90cFNjaGVtYSIsImhhc0xpbmtlZERldmljZXNQdXNoTm90aWZpY2F0aW9ucyIsImxlbmd0aCIsIlpFUk8iLCJ1c2VFZmZlY3QiLCJGZXRjaGVyU2xpY2VQcmVmZXJlbmNlcyIsImdldE5vdGlmaWNhdGlvbnNDb25maWd1cmF0aW9uIiwiRmV0Y2hlclNsaWNlUHVzaE5vdGlmaWNhdGlvbnMiLCJBY3Rpb25TbGljZVByZWZlcmVuY2VzIiwic2V0SXNNb2RpZmllZE5vdGlmaWNhdGlvbnNDb25maWd1cmF0aW9uIiwiY2xlYW5Nb2RhbE9UUCIsIl9qc3giLCJMb2FkaW5nIiwiX2pzeHMiLCJjbGFzc05hbWUiLCJSdWxlcyIsIm5vdGlmaWNhdGlvbnNTZWN0aW9uIiwiY2hpbGRyZW4iLCJGb3JtIiwib25TdWJtaXQiLCJfeDIiLCJfaGFuZGxlU3VibWl0IiwiYXBwbHkiLCJhcmd1bWVudHMiLCJUZXh0IiwidGl0bGUiLCJ0YWciLCJtYXAiLCJjb25maWciLCJzdWJzY3JpYmVkRGVmYXVsdCIsInN1YnNjcmliZWRGYWNlYm9vayIsInN1YnNjcmliZWRNYWlsIiwic3Vic2NyaWJlZFB1c2giLCJzdWJzY3JpYmVkU01TIiwic3Vic2NyaWJlZFR3aXR0ZXIiLCJpc1NvY2lhbE1lZGlhRW5hYmxlZCIsImlzV2ViRGlzYWJsZWQiLCJpc01lc3NhZ2VzRGlzYWJsZWQiLCJjaGVja2JveENvbnRhaW5lciIsInN1YnRpdGxlIiwiY2hlY2tib3giLCJJbnB1dENoZWNrYm94IiwiaXNDaGVja2VkIiwiaXNEaXNhYmxlZCIsImxhYmVsIiwibmFtZSIsInB1c2hOb3RpZmljYXRpb25zIiwicHVzaFRpdGxlIiwicHVzaE5vdGlmaWNhdGlvbnNEZXNjcmlwdGlvbiIsIkJ1dHRvbiIsInB1c2hTdWJ0aXRsZSIsImtpbmQiLCJvbkNsaWNrIiwiaGFuZGxlTW9kYWwiLCJNb2RhbE9UUCIsImhhbmRsZU1vZGFsT1RQIiwiaXNNb2RhbFZpc2libGUiLCJpbmxpbmUiLCJzYXZlQnV0dG9uIiwiTW9kYWwiLCJvcGVuIiwib25DbG9zZSIsIkJvZHkiLCJfcmVmIiwibW9kZWwiLCJtYW51ZmFjdHVyZXIiLCJzZXJpYWwiLCJpZERldmljZSIsInB1c2hOb3RpZmljYXRpb25zRGV2aWNlcyIsImljb24iLCJzaXplIiwidmFyaWFudCIsIl94IiwiX2RlbGV0ZVB1c2hOb3RpZmljYXRpb25zRGV2aWNlIiwiZGVsZXRlUHVzaE5vdGlmaWNhdGlvbnNEZXZpY2UiLCJwdXNoTm90aWZpY2F0aW9uc0VtcHR5IiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJfcmVnZW5lcmF0b3JSdW50aW1lIiwibWFyayIsIl9jYWxsZWUiLCJ3cmFwIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsImFicnVwdCIsImRlbGV0ZVVzZXJEZXZpY2UiLCJzdG9wIiwiZ2V0TW9kaWZpZWRDb25maWd1cmF0aW9uIiwiZGF0YSIsImNvbmZpZ3VyYXRpb25UeXBlIiwiZmlsdGVyIiwiX3JlZjQiLCJfcmVmNSIsInZhbHVlIiwiaW5jbHVkZXMiLCJfcmVmNiIsInNwbGl0IiwiREFTSCIsIk9ORSIsIl9jYWxsZWUyIiwiX2NvbnRleHQyIiwibW9kaWZ5Tm90aWZpY2F0aW9uc0NvbmZpZ3VyYXRpb24iLCJvdHAiLCJtZXNzYWdlIiwibmV3UHJvZHVjdCIsImFjY2VwdGVkIiwicmVqZWN0ZWQiLCJwZW5kaW5nIiwiZGViaXRDYXJkRGVsaXZlcnkiLCJtb2R1bGUiLCJleHBvcnRzIiwiTkFNRV9JTlBVVF9GSUVMRCIsIk5hbWVzcGFjZSIsIlRZUEVfSU5QVVRfRklFTEQiLCJJbnB1dEZpZWxkTWVtb2l6ZWQiLCJtZW1vIiwicHJvcHMiLCJfaW5wdXRFcnJvciRtZXNzYWdlIiwiaGFzU3VnZ2VzdGlvbnMiLCJzZXRoYXNTdWdnZXN0aW9ucyIsImlkIiwibWV0aG9kcyIsImRlZmF1bHRWYWx1ZSIsInBhdHRlcm4iLCJfcHJvcHMkd2l0aFN1Z2dlc3Rpb24iLCJ3aXRoU3VnZ2VzdGlvbnMiLCJvbkNoYW5nZSIsIm9uQmx1ciIsInJlc3QiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJfZXhjbHVkZWQiLCJyZWdpc3RlciIsImZvcm1TdGF0ZSIsInNldFZhbHVlIiwiY2xlYXJFcnJvcnMiLCJlcnJvcnMiLCJyZWdpc3Rlck5hbWUiLCJpbnB1dEVycm9yIiwidW5kZWZpbmVkIiwiQ29tcG9uZW50IiwidHlwZSIsIlRleHRGaWVsZCIsImVycm9yIiwidG9TdHJpbmciLCJldmVudCIsImF1dG9Db21wbGV0ZSIsIm9uS2V5RG93biIsInRhcmdldCIsInByZXZQcm9wcyIsIm5leHRQcm9wcyIsImRpcnR5RmllbGRzIiwiSW5wdXRGaWVsZCIsInVzZUNvbnRleHQiLCJkaXNwbGF5TmFtZSIsIk5BTUVfSU5QVVRfQ0hFQ0tCT1giLCJUWVBFX0lOUFVUX0NIRUNLQk9YIiwiSW5wdXRDaGVja2JveE1lbW9pemVkIiwiY2hlY2tlZCIsInNldENoZWNrZWQiLCJzaG91bGRWYWxpZGF0ZSIsIkNoZWNrYm94IiwiZSIsImNoZWNrIiwiTkFNRV9NT0RBTF9PVFAiLCJUWVBFX01PREFMX09UUCIsIm90cFZhbGlkYXRvciIsInRleHRFcnJvckN2diIsIkR5bmFtaWMiLCJDdXN0b21FcnJvciIsIk90cCIsInN0cmluZyIsInJlcXVpcmVkIiwidGl0bGVUZXh0IiwiaXNMb2FkaW5nIiwiaXNNb2JpbGUiLCJ1c2VQbGF0Zm9ybSIsIm5hdmlnYXRlIiwidXNlTmF2aWdhdGUiLCJ1cmxTZWN1cml0eSIsInVzZVBhdGgiLCJST1VURV9TRUNVUklUWV9TRUxGTUFOQUdFTUVOVCIsIlNPRlRfVE9LRU4iLCJTRUNVUklUWV9FVkVOVF9LRVlTIiwidG9rZW5UeXBlIiwib3RwVHlwZSIsImNvdW50U2VuZE90cFNNUyIsImZldGNoaW5nIiwiX3VzZU90cCIsInVzZU90cCIsImlzU2VlZFByZXNlbnQiLCJzb2Z0VG9rZW4iLCJFTVBUWV9TVFJJTkciLCJzZXRUb2tlbiIsImlzVG9rZW5UeXBlT1RQIiwiVFlQRV9PVFAiLCJoaWRkZW5JbnB1dCIsInNldEhpZGRlbklucHV0IiwidGV4dEJ1dHRvblNlbmRPdHBTTVMiLCJnZXRUb2tlbiIsInVzZUNhbGxiYWNrIiwiRnJhZ21lbnQiLCJtYXhMZW5ndGgiLCJzdGFydCIsIkljb24iLCJGb290ZXIiLCJmb290ZXIiLCJzZW5kT3RwT3ZlclNtcyIsImRpc2FibGVkIiwiUk9VVEVfUEFSQU1fSUQiLCJkZWZhdWx0UHJvcHMiXSwibWFwcGluZ3MiOiJvWEErQk1BLEVBQXFCLENBQ3ZC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RSxLQUFNa08sSUFDZmpKLFFBc0M1QyxXQUNJLElBQUs3RixFQUFhLE9BRWxCbkIsRUFDSWlFLElBQXdCeU0sZUFBZSxDQUNuQ3ZQLGdCQUdaLElBM0NvQ29ELGNBQUNzQyxJQUFNLENBQ0g4SixVQTZDaENkLEdBQ0dSLElBQW9CdEwsS0E3Q1N5QyxNQUFPLENBQ0h6RSxLQUFNLCtCQUVWeUssS0FBSyxjQUliakksY0FBQ3NDLElBQU0sQ0FDSEwsTUFBTyxDQUFFekUsS0FBTSw2QkFDZmlGLFFBbUJwQyxXQUNJQyxJQUNBMkgsRUFBU0UsRUFBWTdNLFFBQVEyTyxJQUFnQjNCLEdBQ2pELElBbEI0QjFLLGNBQUNzQyxJQUFNLENBQ0hMLE1BQU8sQ0FBRXpFLEtBQU0sK0JBQ2ZvRyxRQUFRLFdBQ1JuQixRQUFTQyxZQU81QnFJLEdBQVkvSyxjQUFDQyxJQUFPLFFBd0JyQyxDQUVBMEMsRUFBUzJKLGFBbkpnRCxDQUNyRHBDLFdBQVcsRSxzQkNyRGZoRSxFQUFPQyxRQUFVLENBQUMsZUFBaUIsV0FBVyxlQUFpQixVQUFVLG1CQUFxQixnQkFBZ0IsbUJBQXFCLFNBQVMsNEJBQThCLHdCQUF3Qiw0QkFBOEIsVUFBVSw0QkFBOEIsd0JBQXdCLDRCQUE4QixXQUFXLFVBQVksT0FBTyxVQUFZLFVBQVUsWUFBYyxTQUFTLFlBQWMsVUFBVSxpQkFBbUIsYUFBYSxpQkFBbUIsVUFBVSxZQUFjLDRCQUE0QixPQUFTLHVCLHNCQ0FqaEJELEVBQU9DLFFBQVUsQ0FBQyxlQUFpQixXQUFXLGVBQWlCLFUiLCJmaWxlIjoic3RhdGljL2pzLzIzLmZiOWY2NGNlLmNodW5rLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJAcGtnL3JlYWN0XCI7XG5pbXBvcnQgeyBUeXBlLCBBc3NpZ24gfSBmcm9tIFwiQHBrZy91dGlscy9zY2hlbWFcIjtcbmltcG9ydCB0eXBlIHsgSW5mZXIgfSBmcm9tIFwiQHBrZy91dGlscy9zY2hlbWFcIjtcblxuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIHVzZVNlbGVjdG9yIH0gZnJvbSBcIkBhcHAvYmFuY29uLWRhdGFcIjtcbmltcG9ydCB7IFNlbGVjdG9yU2xpY2VTZXNzaW9uIH0gZnJvbSBcIkBhcHAvYmFuY29uLWRhdGEvc2xpY2VzL3Nlc3Npb25cIjtcbmltcG9ydCB7IERBU0gsIE9ORSwgWkVSTyB9IGZyb20gXCJAYXBwL2JhbmNvbi1kYXRhL2NvbnN0YW50c1wiO1xuaW1wb3J0IHtcbiAgICBBY3Rpb25TbGljZVByZWZlcmVuY2VzLFxuICAgIEZldGNoZXJTbGljZVByZWZlcmVuY2VzLFxuICAgIFNlbGVjdG9yU2xpY2VQcmVmZXJlbmNlcyxcbn0gZnJvbSBcIkBhcHAvYmFuY29uLWRhdGEvc2xpY2VzL3ByZWZlcmVuY2VzXCI7XG5pbXBvcnQge1xuICAgIEZldGNoZXJTbGljZVB1c2hOb3RpZmljYXRpb25zLFxuICAgIFNlbGVjdG9yU2xpY2VQdXNoTm90aWZpY2F0aW9ucyxcbn0gZnJvbSBcIkBhcHAvYmFuY29uLWRhdGEvc2xpY2VzL3ByZWZlcmVuY2VzL1B1c2hOb3RpZmljYXRpb25zXCI7XG5cbmltcG9ydCB7IEZvcm0gfSBmcm9tIFwiQGFwcC9iYW5jb3ItY29tcG9uZW50cy9FbGVtZW50L0Zvcm1cIjtcbmltcG9ydCB7IFRleHQsIHVzZVRleHQgfSBmcm9tIFwiQGFwcC9iYW5jb3ItY29tcG9uZW50cy9FbGVtZW50L1RleHRcIjtcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gXCJAYXBwL2JhbmNvci1jb21wb25lbnRzL0VsZW1lbnQvQnV0dG9uXCI7XG5pbXBvcnQgeyBJbnB1dENoZWNrYm94IH0gZnJvbSBcIkBhcHAvYmFuY29yLWNvbXBvbmVudHMvRWxlbWVudC9Gb3JtL0lucHV0Q2hlY2tib3hcIjtcbmltcG9ydCB7IExvYWRpbmcgfSBmcm9tIFwiQGFwcC9iYW5jb3ItY29tcG9uZW50cy9FbGVtZW50L0xvYWRpbmdcIjtcbmltcG9ydCB7IHVzZVBlcnNpc3RvciB9IGZyb20gXCJAcGtnL3JlYWN0LXN0b3J5Ym9vay9Db21wb25lbnQvUGVyc2lzdG9yXCI7XG5pbXBvcnQgeyBNb2RhbE9UUCwgb3RwU2NoZW1hIH0gZnJvbSBcIn4vc2VjdGlvbnMvTW9kYWxPVFBcIjtcblxuaW1wb3J0IHsgcGFyc2VDb25maWcgfSBmcm9tIFwifi91dGlscy9jb25maWdVdGlsc1wiO1xuXG5pbXBvcnQgeyBNb2RhbCB9IGZyb20gXCJAYXBwL2JhbmNvci1jb21wb25lbnRzL0VsZW1lbnQvTW9kYWxcIjtcbmltcG9ydCB7IHVzZVNob3dUb2FzdCB9IGZyb20gXCJAYXBwL2JhbmNvbi1kYXRhL3NsaWNlcy90b2FzdFwiO1xuaW1wb3J0IFJ1bGVzIGZyb20gXCIuL19ydWxlcy5tb2R1bGUuc2Nzc1wiO1xuXG5jb25zdCBDT05GSUdVUkFUSU9OX1RZUEUgPSB7XG4gICAgTUVTU0FHRTogXCJtZXNzYWdlXCIsXG4gICAgTkVXX1BST0RVQ1Q6IFwibmV3UHJvZHVjdFwiLFxuICAgIEFDQ0VQVEVEOiBcImFjY2VwdGVkXCIsXG4gICAgUkVKRUNURUQ6IFwicmVqZWN0ZWRcIixcbiAgICBQRU5ESU5HOiBcInBlbmRpbmdcIixcbiAgICBERUJJVF9DQVJEX0RFTElWRVJZOiBcImRlYml0Q2FyZERlbGl2ZXJ5XCIsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBOb3RpZmljYXRpb25zU2VjdGlvbigpIHtcbiAgICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gICAgY29uc3QgeyB0ZXh0R2V0IH0gPSB1c2VUZXh0KCk7XG4gICAgY29uc3QgeyBnZXRWYWx1ZUNvbmZpZyB9ID0gdXNlUGVyc2lzdG9yKCk7XG4gICAgY29uc3QgeyBzaG93U3VjY2Vzc1RvYXN0IH0gPSB1c2VTaG93VG9hc3QoKTtcblxuICAgIGNvbnN0IFtzaG93TW9kYWxPVFAsIHNldFNob3dNb2RhbE9UUF0gPSBSZWFjdC51c2VTdGF0ZTxib29sZWFuPihmYWxzZSk7XG4gICAgY29uc3QgW3Nob3dNb2RhbCwgc2V0U2hvd01vZGFsXSA9IFJlYWN0LnVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcblxuICAgIGNvbnN0IGFjY2Vzc1Rva2VuID0gdXNlU2VsZWN0b3IoU2VsZWN0b3JTbGljZVNlc3Npb24udG9rZW4pO1xuICAgIGNvbnN0IGZldGNoaW5nTm90aWZpY2F0aW9uc0NvbmZpZ3VyYXRpb24gPSB1c2VTZWxlY3RvcihcbiAgICAgICAgU2VsZWN0b3JTbGljZVByZWZlcmVuY2VzLmZldGNoaW5nTm90aWZpY2F0aW9uc0NvbmZpZ3VyYXRpb24sXG4gICAgKTtcbiAgICBjb25zdCB3YXJuaW5ncyA9IHVzZVNlbGVjdG9yKFNlbGVjdG9yU2xpY2VQcmVmZXJlbmNlcy53YXJuaW5nKTtcbiAgICBjb25zdCBjb21tdW5pY2F0aW9uQ29uZmlndXJhdGlvbnMgPSB1c2VTZWxlY3RvcihcbiAgICAgICAgU2VsZWN0b3JTbGljZVByZWZlcmVuY2VzLmNvbW11bmljYXRpb25Db25maWd1cmF0aW9ucyxcbiAgICApO1xuICAgIGNvbnN0IG90cExlbmd0aCA9IHBhcnNlQ29uZmlnPG51bWJlcj4oZ2V0VmFsdWVDb25maWcoXCJzYWZld2F5Lm90cHMuc29mdC5sZW5ndGhcIikpO1xuICAgIGNvbnN0IHRleHRFcnJvclJlcXVpcmVkID0gdGV4dEdldCh7IHV1aWQ6IFwic3BhLmdlbmVyaWMuZmllbGQuZXJyb3IucmVxdWlyZWRcIiB9KTtcbiAgICBjb25zdCB0ZXh0RXJyb3JPVFAgPSB0ZXh0R2V0KHsgdXVpZDogXCJzcGEubW9kYWwub3RwLmVycm9yXCIsIHJlcGxhY2U6IFN0cmluZyhvdHBMZW5ndGgpIH0pO1xuICAgIGNvbnN0IGxpc3RVc2VyRGV2aWNlcyA9IHVzZVNlbGVjdG9yKFNlbGVjdG9yU2xpY2VQdXNoTm90aWZpY2F0aW9ucy5saXN0VXNlckRldmljZXMpO1xuICAgIGNvbnN0IGZldGNoaW5nUHVzaE5vdGlmaWNhdGlvbnMgPSB1c2VTZWxlY3RvcihcbiAgICAgICAgU2VsZWN0b3JTbGljZVB1c2hOb3RpZmljYXRpb25zLmZldGNoaW5nUHVzaE5vdGlmaWNhdGlvbnMsXG4gICAgKTtcbiAgICBjb25zdCBpc01vZGlmaWVkTm90aWZpY2F0aW9uc0NvbmZpZ3VyYXRpb24gPSB1c2VTZWxlY3RvcihcbiAgICAgICAgU2VsZWN0b3JTbGljZVByZWZlcmVuY2VzLmlzTW9kaWZpZWROb3RpZmljYXRpb25zQ29uZmlndXJhdGlvbixcbiAgICApO1xuXG4gICAgY29uc3Qgc2NoZW1hID0gQXNzaWduKFxuICAgICAgICBUeXBlLm9iamVjdChnZW5lcmF0ZVNjaGVtYU9iamVjdCgpKSxcbiAgICAgICAgb3RwU2NoZW1hKG90cExlbmd0aCwgdGV4dEVycm9yT1RQLCB0ZXh0RXJyb3JSZXF1aXJlZCksXG4gICAgKTtcbiAgICBjb25zdCBoYXNMaW5rZWREZXZpY2VzUHVzaE5vdGlmaWNhdGlvbnMgPSBsaXN0VXNlckRldmljZXMubGVuZ3RoICE9PSBaRVJPO1xuXG4gICAgLyoqIEdldCBjb21tdW5pY2F0aW9ucyBjb25maWcgKi9cbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIWFjY2Vzc1Rva2VuKSByZXR1cm47XG4gICAgICAgIGRpc3BhdGNoKEZldGNoZXJTbGljZVByZWZlcmVuY2VzLmdldE5vdGlmaWNhdGlvbnNDb25maWd1cmF0aW9uKHsgYWNjZXNzVG9rZW4gfSkpO1xuICAgICAgICBkaXNwYXRjaChGZXRjaGVyU2xpY2VQdXNoTm90aWZpY2F0aW9ucy5saXN0VXNlckRldmljZXMoeyBhY2Nlc3NUb2tlbiB9KSk7XG4gICAgfSwgW2Rpc3BhdGNoLCBhY2Nlc3NUb2tlbl0pO1xuXG4gICAgLyoqIFNob3cgc3VjY2VzcyB0b2FzdCAqL1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmICghaXNNb2RpZmllZE5vdGlmaWNhdGlvbnNDb25maWd1cmF0aW9uKSByZXR1cm47XG4gICAgICAgIHNldFNob3dNb2RhbE9UUCghc2hvd01vZGFsT1RQKTtcbiAgICAgICAgc2hvd1N1Y2Nlc3NUb2FzdChcInNwYS5wcmVmZXJlbmNlcy5nbG9iYWwuY29uZmlybWF0aW9uTWVzc2FnZVwiKTtcbiAgICAgICAgZGlzcGF0Y2goQWN0aW9uU2xpY2VQcmVmZXJlbmNlcy5zZXRJc01vZGlmaWVkTm90aWZpY2F0aW9uc0NvbmZpZ3VyYXRpb24oZmFsc2UpKTtcbiAgICAgICAgZGlzcGF0Y2goQWN0aW9uU2xpY2VQcmVmZXJlbmNlcy5jbGVhbk1vZGFsT1RQKCkpO1xuICAgIH0sIFtpc01vZGlmaWVkTm90aWZpY2F0aW9uc0NvbmZpZ3VyYXRpb24sIHNob3dTdWNjZXNzVG9hc3QsIGRpc3BhdGNoLCBzaG93TW9kYWxPVFBdKTtcblxuICAgIC8qKiBDbGVhbiBtb2RhbCBPVFAgKi9cbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBkaXNwYXRjaChBY3Rpb25TbGljZVByZWZlcmVuY2VzLmNsZWFuTW9kYWxPVFAoKSk7XG4gICAgfSwgW2Rpc3BhdGNoXSk7XG5cbiAgICBpZiAoZmV0Y2hpbmdOb3RpZmljYXRpb25zQ29uZmlndXJhdGlvbiB8fCBjb21tdW5pY2F0aW9uQ29uZmlndXJhdGlvbnMubGVuZ3RoID09PSBaRVJPKVxuICAgICAgICByZXR1cm4gPExvYWRpbmcgLz47XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17UnVsZXMubm90aWZpY2F0aW9uc1NlY3Rpb259PlxuICAgICAgICAgICAgPEZvcm0gc2NoZW1hPXtzY2hlbWF9IHdhcm5pbmdzPXt3YXJuaW5nc30gb25TdWJtaXQ9e2hhbmRsZVN1Ym1pdH0+XG4gICAgICAgICAgICAgICAgPFRleHQgY2xhc3NOYW1lPXtSdWxlcy50aXRsZX0gdGFnPVwiaDFcIiB1dWlkPVwic3BhLnByZWZlcmVuY2VzLm5vdGlmaWNhdGlvbnMudGl0bGVcIiAvPlxuXG4gICAgICAgICAgICAgICAge2NvbW11bmljYXRpb25Db25maWd1cmF0aW9ucy5tYXAoKGNvbmZpZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVkRGVmYXVsdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZWRGYWNlYm9vayxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZWRNYWlsLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlZFB1c2gsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVkU01TLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlZFR3aXR0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21tdW5pY2F0aW9uVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgfSA9IGNvbmZpZztcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpc1NvY2lhbE1lZGlhRW5hYmxlZCA9IGNvbW11bmljYXRpb25UeXBlICE9PSBcIm5ld1Byb2R1Y3RcIjtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNXZWJEaXNhYmxlZCA9IGNvbW11bmljYXRpb25UeXBlID09PSBcIm1lc3NhZ2VcIjtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNNZXNzYWdlc0Rpc2FibGVkID0gY29tbXVuaWNhdGlvblR5cGUgPT09IFwiZGViaXRDYXJkRGVsaXZlcnlcIjtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNlY3Rpb24ga2V5PXtjb21tdW5pY2F0aW9uVHlwZX0gY2xhc3NOYW1lPXtSdWxlcy5jaGVja2JveENvbnRhaW5lcn0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtSdWxlcy5zdWJ0aXRsZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFnPVwiaDJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dWlkPXtgc3BhLnByZWZlcmVuY2VzLm5vdGlmaWNhdGlvbnMuJHtjb21tdW5pY2F0aW9uVHlwZX1gfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17UnVsZXMuY2hlY2tib3h9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXRDaGVja2JveFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNDaGVja2VkPXtzdWJzY3JpYmVkU01TfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNEaXNhYmxlZD17aXNNZXNzYWdlc0Rpc2FibGVkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9e3RleHRHZXQoeyB1dWlkOiBcInNwYS5wcmVmZXJlbmNlcy5pdGVtLm1lc3NhZ2VcIiB9KX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9e2Ake2NvbW11bmljYXRpb25UeXBlfS1TTVNgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXRDaGVja2JveFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNDaGVja2VkPXtzdWJzY3JpYmVkTWFpbH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzRGlzYWJsZWQ9e2lzTWVzc2FnZXNEaXNhYmxlZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXt0ZXh0R2V0KHsgdXVpZDogXCJzcGEucHJlZmVyZW5jZXMuaXRlbS5lbWFpbFwiIH0pfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT17YCR7Y29tbXVuaWNhdGlvblR5cGV9LU1BSUxgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXRDaGVja2JveFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNDaGVja2VkPXtzdWJzY3JpYmVkRGVmYXVsdH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzRGlzYWJsZWQ9e2lzV2ViRGlzYWJsZWR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17dGV4dEdldCh7IHV1aWQ6IFwic3BhLnByZWZlcmVuY2VzLml0ZW0ud2ViXCIgfSl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPXtgJHtjb21tdW5pY2F0aW9uVHlwZX0tREVGQVVMVGB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dENoZWNrYm94XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0NoZWNrZWQ9e3N1YnNjcmliZWRGYWNlYm9va31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzRGlzYWJsZWQ9e2lzU29jaWFsTWVkaWFFbmFibGVkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9e3RleHRHZXQoeyB1dWlkOiBcInNwYS5wcmVmZXJlbmNlcy5pdGVtLmZhY2Vib29rXCIgfSl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPXtgJHtjb21tdW5pY2F0aW9uVHlwZX0tRkFDRUJPT0tgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXRDaGVja2JveFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNDaGVja2VkPXtzdWJzY3JpYmVkVHdpdHRlcn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzRGlzYWJsZWQ9e2lzU29jaWFsTWVkaWFFbmFibGVkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9e3RleHRHZXQoeyB1dWlkOiBcInNwYS5wcmVmZXJlbmNlcy5pdGVtLnR3aXR0ZXJcIiB9KX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9e2Ake2NvbW11bmljYXRpb25UeXBlfS1UV0lUVEVSYH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPElucHV0Q2hlY2tib3hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzQ2hlY2tlZD17c3Vic2NyaWJlZFB1c2h9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17dGV4dEdldCh7IHV1aWQ6IFwic3BhLnByZWZlcmVuY2VzLml0ZW0ucHVzaFwiIH0pfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT17YCR7Y29tbXVuaWNhdGlvblR5cGV9LVBVU0hgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0pfVxuXG4gICAgICAgICAgICAgICAge2hhc0xpbmtlZERldmljZXNQdXNoTm90aWZpY2F0aW9ucyAmJiAoXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtSdWxlcy5wdXNoTm90aWZpY2F0aW9uc30+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17UnVsZXMucHVzaFRpdGxlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhZz1cImgyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dWlkPVwic3BhLnByZWZlcmVuY2VzLnB1c2hOb3RpZmljYXRpb25zLnRpdGxlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17UnVsZXMucHVzaE5vdGlmaWNhdGlvbnNEZXNjcmlwdGlvbn0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e1J1bGVzLnB1c2hTdWJ0aXRsZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2luZD1cInBsYWluXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV1aWQ6IFwic3BhLnByZWZlcmVuY2VzLnB1c2hOb3RpZmljYXRpb25zLm1hbmFnZS5kZXZpY2VzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZU1vZGFsfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgKX1cblxuICAgICAgICAgICAgICAgIDxNb2RhbE9UUCBoYW5kbGVNb2RhbD17aGFuZGxlTW9kYWxPVFB9IGlzTW9kYWxWaXNpYmxlPXtzaG93TW9kYWxPVFB9IC8+XG5cbiAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIGlubGluZVxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e1J1bGVzLnNhdmVCdXR0b259XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsPXt7IHV1aWQ6IFwic3BhLmZvcm0uc2F2ZVwiIH19XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZU1vZGFsT1RQfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0Zvcm0+XG5cbiAgICAgICAgICAgIDxNb2RhbFxuICAgICAgICAgICAgICAgIG9wZW49e3Nob3dNb2RhbH1cbiAgICAgICAgICAgICAgICB0aXRsZT1cInNwYS5wcmVmZXJlbmNlcy5wdXNoTm90aWZpY2F0aW9ucy5tYW5hZ2UubW9kYWwudGl0bGVcIlxuICAgICAgICAgICAgICAgIG9uQ2xvc2U9e2hhbmRsZU1vZGFsfT5cbiAgICAgICAgICAgICAgICA8TW9kYWwuQm9keT57ZmV0Y2hpbmdQdXNoTm90aWZpY2F0aW9ucyA/IDxMb2FkaW5nIC8+IDogZ2V0TW9kYWxCb2R5KCl9PC9Nb2RhbC5Cb2R5PlxuICAgICAgICAgICAgPC9Nb2RhbD5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcblxuICAgIGZ1bmN0aW9uIGhhbmRsZU1vZGFsT1RQKCkge1xuICAgICAgICBzZXRTaG93TW9kYWxPVFAoIXNob3dNb2RhbE9UUCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlTW9kYWwoKSB7XG4gICAgICAgIHNldFNob3dNb2RhbCghc2hvd01vZGFsKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRNb2RhbEJvZHkoKSB7XG4gICAgICAgIHJldHVybiBoYXNMaW5rZWREZXZpY2VzUHVzaE5vdGlmaWNhdGlvbnMgPyAoXG4gICAgICAgICAgICBsaXN0VXNlckRldmljZXMubWFwKCh7IG1vZGVsLCBtYW51ZmFjdHVyZXIsIHNlcmlhbCwgaWREZXZpY2UgfSkgPT4gKFxuICAgICAgICAgICAgICAgIDxkaXYga2V5PXtzZXJpYWx9IGNsYXNzTmFtZT17UnVsZXMucHVzaE5vdGlmaWNhdGlvbnNEZXZpY2VzfT5cbiAgICAgICAgICAgICAgICAgICAgPFRleHQ+XG4gICAgICAgICAgICAgICAgICAgICAgICB7bWFudWZhY3R1cmVyfVxuICAgICAgICAgICAgICAgICAgICAgICAgPFRleHQgdGFnPVwic3BhblwiPnttb2RlbH08L1RleHQ+XG4gICAgICAgICAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbj1cInRyYXNoXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtpbmQ9XCJpY29uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXt7IHV1aWQ6IFwic3BhLmExMXkuYnV0dG9ucy50cmFzaFwiIH19XG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplPVwic21hbGxcIlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudD1cIm91dGxpbmVkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGRlbGV0ZVB1c2hOb3RpZmljYXRpb25zRGV2aWNlKGlkRGV2aWNlKX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICkpXG4gICAgICAgICkgOiAoXG4gICAgICAgICAgICA8VGV4dFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17UnVsZXMucHVzaE5vdGlmaWNhdGlvbnNFbXB0eX1cbiAgICAgICAgICAgICAgICB1dWlkPVwic3BhLnByZWZlcmVuY2VzLnB1c2hOb3RpZmljYXRpb25zLm1hbmFnZS5tb2RhbC5lbXB0eVwiXG4gICAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgIH1cblxuICAgIGFzeW5jIGZ1bmN0aW9uIGRlbGV0ZVB1c2hOb3RpZmljYXRpb25zRGV2aWNlKGlkRGV2aWNlOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKCFhY2Nlc3NUb2tlbikgcmV0dXJuO1xuICAgICAgICBhd2FpdCBkaXNwYXRjaChGZXRjaGVyU2xpY2VQdXNoTm90aWZpY2F0aW9ucy5kZWxldGVVc2VyRGV2aWNlKHsgYWNjZXNzVG9rZW4sIGlkRGV2aWNlIH0pKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5lcmF0ZVNjaGVtYU9iamVjdCgpIHtcbiAgICAgICAgcmV0dXJuIGNvbW11bmljYXRpb25Db25maWd1cmF0aW9ucy5yZWR1Y2UoXG4gICAgICAgICAgICAoYWNjLCBpdGVtKSA9PiAoe1xuICAgICAgICAgICAgICAgIC4uLmFjYyxcbiAgICAgICAgICAgICAgICAuLi5PYmplY3QuZW50cmllcyhpdGVtKS5yZWR1Y2UoKGFjY2MsIFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSByZXR1cm4ge307XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVzY2hlbWFLZXkgPSBrZXkucmVwbGFjZShcInN1YnNjcmliZWRcIiwgXCJcIikudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmFjY2MsXG4gICAgICAgICAgICAgICAgICAgICAgICBbYCR7aXRlbS5jb21tdW5pY2F0aW9uVHlwZX0tJHtlc2NoZW1hS2V5fWBdOiBUeXBlLmJvb2xlYW4ub3JVbmRlZmluZWQoKSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9LCB7fSksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHt9LFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldE1vZGlmaWVkQ29uZmlndXJhdGlvbihkYXRhOiBJbmZlcjx0eXBlb2Ygc2NoZW1hPiwgY29uZmlndXJhdGlvblR5cGU6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmVudHJpZXMoZGF0YSlcbiAgICAgICAgICAgIC5maWx0ZXIoKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICgha2V5LmluY2x1ZGVzKGNvbmZpZ3VyYXRpb25UeXBlKSB8fCAhdmFsdWUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAubWFwKChba2V5XSkgPT4ga2V5LnNwbGl0KERBU0gpW09ORV0pO1xuICAgIH1cblxuICAgIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZVN1Ym1pdChkYXRhOiBJbmZlcjx0eXBlb2Ygc2NoZW1hPikge1xuICAgICAgICBpZiAoIWFjY2Vzc1Rva2VuKSByZXR1cm47XG4gICAgICAgIGF3YWl0IGRpc3BhdGNoKFxuICAgICAgICAgICAgRmV0Y2hlclNsaWNlUHJlZmVyZW5jZXMubW9kaWZ5Tm90aWZpY2F0aW9uc0NvbmZpZ3VyYXRpb24oe1xuICAgICAgICAgICAgICAgIGFjY2Vzc1Rva2VuLFxuICAgICAgICAgICAgICAgIG90cDogU3RyaW5nKGRhdGEub3RwKSxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBnZXRNb2RpZmllZENvbmZpZ3VyYXRpb24oZGF0YSwgQ09ORklHVVJBVElPTl9UWVBFLk1FU1NBR0UpLFxuICAgICAgICAgICAgICAgIG5ld1Byb2R1Y3Q6IGdldE1vZGlmaWVkQ29uZmlndXJhdGlvbihkYXRhLCBDT05GSUdVUkFUSU9OX1RZUEUuTkVXX1BST0RVQ1QpLFxuICAgICAgICAgICAgICAgIGFjY2VwdGVkOiBnZXRNb2RpZmllZENvbmZpZ3VyYXRpb24oZGF0YSwgQ09ORklHVVJBVElPTl9UWVBFLkFDQ0VQVEVEKSxcbiAgICAgICAgICAgICAgICByZWplY3RlZDogZ2V0TW9kaWZpZWRDb25maWd1cmF0aW9uKGRhdGEsIENPTkZJR1VSQVRJT05fVFlQRS5SRUpFQ1RFRCksXG4gICAgICAgICAgICAgICAgcGVuZGluZzogZ2V0TW9kaWZpZWRDb25maWd1cmF0aW9uKGRhdGEsIENPTkZJR1VSQVRJT05fVFlQRS5QRU5ESU5HKSxcbiAgICAgICAgICAgICAgICBkZWJpdENhcmREZWxpdmVyeTogZ2V0TW9kaWZpZWRDb25maWd1cmF0aW9uKFxuICAgICAgICAgICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgICAgICAgICBDT05GSUdVUkFUSU9OX1RZUEUuREVCSVRfQ0FSRF9ERUxJVkVSWSxcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICk7XG4gICAgfVxufVxuIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcIk5BTUVfVEhFTUVQTEFURk9STVwiOlwiVGhlbWVQbGF0Zm9ybVwiLFwiVFlQRV9USEVNRVBMQVRGT1JNXCI6XCJCdW5kbGVcIixcIk5BTUVfQ09OU1VNRVJfVEhFTUVQTEFURk9STVwiOlwiVGhlbWVQbGF0Zm9ybUNvbnN1bWVyXCIsXCJUWVBFX0NPTlNVTUVSX1RIRU1FUExBVEZPUk1cIjpcIkVsZW1lbnRcIixcIk5BTUVfUFJPVklERVJfVEhFTUVQTEFURk9STVwiOlwiVGhlbWVQbGF0Zm9ybVByb3ZpZGVyXCIsXCJUWVBFX1BST1ZJREVSX1RIRU1FUExBVEZPUk1cIjpcIlByb3ZpZGVyXCIsXCJOQU1FX1RFWFRcIjpcIlRleHRcIixcIlRZUEVfVEVYVFwiOlwiRWxlbWVudFwiLFwiTkFNRV9CVVRUT05cIjpcIkJ1dHRvblwiLFwiVFlQRV9CVVRUT05cIjpcIkVsZW1lbnRcIixcIk5BTUVfWFNcIjpcInhzXCIsXCJOQU1FX1NNXCI6XCJzbVwiLFwiTkFNRV9NRFwiOlwibWRcIixcIk5BTUVfTEdcIjpcImxnXCIsXCJOQU1FX0lOUFVUX0NIRUNLQk9YXCI6XCJJbnB1dENoZWNrYm94XCIsXCJUWVBFX0lOUFVUX0NIRUNLQk9YXCI6XCJFbGVtZW50XCIsXCJub3RpZmljYXRpb25zU2VjdGlvblwiOlwiX3J1bGVzX25vdGlmaWNhdGlvbnNTZWN0aW9uX18xN1dvZFwiLFwidGl0bGVcIjpcIl9ydWxlc190aXRsZV9famMySlRcIixcInN1YnRpdGxlXCI6XCJfcnVsZXNfc3VidGl0bGVfXzJBMGh6XCIsXCJjaGVja2JveENvbnRhaW5lclwiOlwiX3J1bGVzX2NoZWNrYm94Q29udGFpbmVyX18yUHcxOFwiLFwiY2hlY2tib3hcIjpcIl9ydWxlc19jaGVja2JveF9fN3Z3OUtcIixcInNhdmVCdXR0b25cIjpcIl9ydWxlc19zYXZlQnV0dG9uX18xcWs2N1wiLFwicHVzaE5vdGlmaWNhdGlvbnNcIjpcIl9ydWxlc19wdXNoTm90aWZpY2F0aW9uc19fdTlUM2NcIixcInB1c2hUaXRsZVwiOlwiX3J1bGVzX3B1c2hUaXRsZV9fMW44MEFcIixcInB1c2hOb3RpZmljYXRpb25zRGVzY3JpcHRpb25cIjpcIl9ydWxlc19wdXNoTm90aWZpY2F0aW9uc0Rlc2NyaXB0aW9uX18xUzA2SVwiLFwicHVzaFN1YnRpdGxlXCI6XCJfcnVsZXNfcHVzaFN1YnRpdGxlX19FTGlDSVwiLFwicHVzaE5vdGlmaWNhdGlvbnNFbXB0eVwiOlwiX3J1bGVzX3B1c2hOb3RpZmljYXRpb25zRW1wdHlfX3RQWDRJXCIsXCJwdXNoTm90aWZpY2F0aW9uc0RldmljZXNcIjpcIl9ydWxlc19wdXNoTm90aWZpY2F0aW9uc0RldmljZXNfXzM1WFRnXCJ9OyIsImltcG9ydCBSZWFjdCBmcm9tIFwiQHBrZy9yZWFjdFwiO1xuaW1wb3J0IHsgVGV4dEZpZWxkIH0gZnJvbSBcIkBhcHAvYmFuY29uLXVpXCI7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tIFwiQHBrZy9yZWFjdC1zdG9yeWJvb2svQ29tcG9uZW50XCI7XG5pbXBvcnQgdHlwZSB7IFVzZUZvcm1SZXR1cm4gfSBmcm9tIFwicmVhY3QtaG9vay1mb3JtXCI7XG5pbXBvcnQgdHlwZSB7IFByb3BEZWZhdWx0cywgUHJvcFR5cGVzIH0gZnJvbSBcIkBwa2cvcmVhY3Qtc3Rvcnlib29rL0NvbXBvbmVudFwiO1xuaW1wb3J0IHR5cGUgeyBQcm9wcyBhcyBUZXh0RmllbGRQcm9wcyB9IGZyb20gXCJAYXBwL2JhbmNvbi11aS9kaXN0L2NvbXBvbmVudHMvVGV4dEZpZWxkXCI7XG5pbXBvcnQgdHlwZSB7IE9taXRQcm9wSUQsIFByb3BEUyB9IGZyb20gXCIuLlwiO1xuaW1wb3J0IHsgRm9ybSB9IGZyb20gXCIuLlwiO1xuaW1wb3J0IE5hbWVzcGFjZSBmcm9tIFwiLi9faW5kZXguc2Nzc1wiO1xuXG5leHBvcnQgY29uc3QgeyBOQU1FX0lOUFVUX0ZJRUxELCBUWVBFX0lOUFVUX0ZJRUxEIH0gPSBOYW1lc3BhY2U7XG5cbmV4cG9ydCB0eXBlIE9uT2ZmVHlwZSA9IFwib25cIiB8IFwib2ZmXCI7XG5cbmV4cG9ydCB0eXBlIFByb3BJbnB1dEZpZWxkID0gUHJvcERTPFRleHRGaWVsZFByb3BzPiAmIHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgaWQ/OiBzdHJpbmc7XG4gICAgZGVmYXVsdFZhbHVlPzogc3RyaW5nO1xuICAgIG1heExlbmd0aD86IG51bWJlcjtcbiAgICBwYXR0ZXJuPzogc3RyaW5nO1xuICAgIG9uQ2hhbmdlPzogUmVhY3QuQ2hhbmdlRXZlbnRIYW5kbGVyPEhUTUxJbnB1dEVsZW1lbnQ+O1xuICAgIG9uRm9jdXM/OiAoZTogUmVhY3QuRm9jdXNFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4gdm9pZDtcbiAgICBvbkJsdXI/OiAoZTogUmVhY3QuRm9jdXNFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4gdm9pZDtcbiAgICB3aXRoU3VnZ2VzdGlvbnM/OiBib29sZWFuO1xuICAgIGRpc2FibGVkPzogYm9vbGVhbjtcbiAgICBhdXRvQ29tcGxldGU/OiBPbk9mZlR5cGU7XG4gICAgYXV0b0NhcGl0YWxpemU/OiBPbk9mZlR5cGU7XG4gICAgYXV0b0NvcnJlY3Q/OiBPbk9mZlR5cGU7XG4gICAgc3BlbGxDaGVjaz86IGJvb2xlYW47XG4gICAgY2xhc3NOYW1lPzogc3RyaW5nO1xufTtcblxuZXhwb3J0IGNvbnN0IERFRl9JTlBVVF9GSUVMRDogUHJvcERlZmF1bHRzPFxuICAgIFByb3BJbnB1dEZpZWxkLFxuICAgIE9taXRQcm9wSUQ8UHJvcElucHV0RmllbGQ+IHwga2V5b2YgUHJvcERTPFRleHRGaWVsZFByb3BzPlxuPiA9IHsgaWQ6IE5BTUVfSU5QVVRfRklFTEQgfTtcblxudHlwZSBQcm9wSW5wdXRGaWVsZE1lbW9pemVkID0gUHJvcElucHV0RmllbGQgJiB7XG4gICAgbWV0aG9kczogVXNlRm9ybVJldHVybjtcbn07XG5cbmNvbnN0IElucHV0RmllbGRNZW1vaXplZCA9IFJlYWN0Lm1lbW8oXG4gICAgKHByb3BzOiBQcm9wSW5wdXRGaWVsZE1lbW9pemVkKSA9PiB7XG4gICAgICAgIGNvbnN0IFtoYXNTdWdnZXN0aW9ucywgc2V0aGFzU3VnZ2VzdGlvbnNdID0gUmVhY3QudXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBpZCxcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBtZXRob2RzLFxuICAgICAgICAgICAgZGVmYXVsdFZhbHVlLFxuICAgICAgICAgICAgcGF0dGVybixcbiAgICAgICAgICAgIHdpdGhTdWdnZXN0aW9ucyA9IHRydWUsXG4gICAgICAgICAgICBvbkNoYW5nZSxcbiAgICAgICAgICAgIG9uQmx1cixcbiAgICAgICAgICAgIC4uLnJlc3RcbiAgICAgICAgfSA9IHByb3BzO1xuICAgICAgICBjb25zdCB7IHJlZ2lzdGVyLCBmb3JtU3RhdGUsIHNldFZhbHVlLCBjbGVhckVycm9ycyB9ID0gbWV0aG9kcztcbiAgICAgICAgY29uc3QgeyBlcnJvcnMgfSA9IGZvcm1TdGF0ZTtcblxuICAgICAgICBjb25zdCByZWdpc3Rlck5hbWUgPSBgJHtuYW1lfWAgYXMgY29uc3Q7XG4gICAgICAgIGNvbnN0IGlucHV0RXJyb3IgPSBlcnJvcnNbbmFtZV07XG4gICAgICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoZGVmYXVsdFZhbHVlKSBzZXRWYWx1ZShyZWdpc3Rlck5hbWUsIGRlZmF1bHRWYWx1ZSk7XG4gICAgICAgICAgICBpZiAoIWRlZmF1bHRWYWx1ZSkgc2V0VmFsdWUocmVnaXN0ZXJOYW1lLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgaWYgKHdpdGhTdWdnZXN0aW9ucykgc2V0aGFzU3VnZ2VzdGlvbnModHJ1ZSk7XG4gICAgICAgIH0sIFtkZWZhdWx0VmFsdWUsIHJlZ2lzdGVyTmFtZSwgc2V0VmFsdWUsIHdpdGhTdWdnZXN0aW9ucywgc2V0aGFzU3VnZ2VzdGlvbnNdKTtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPENvbXBvbmVudCBuYW1lPXtOQU1FX0lOUFVUX0ZJRUxEfSB0eXBlPXtUWVBFX0lOUFVUX0ZJRUxEfT5cbiAgICAgICAgICAgICAgICA8VGV4dEZpZWxkXG4gICAgICAgICAgICAgICAgICAgIGlkPXtpZCB8fCBuYW1lfVxuICAgICAgICAgICAgICAgICAgICB7Li4uKGRlZmF1bHRWYWx1ZSAmJiB7IGRlZmF1bHRWYWx1ZSB9KX1cbiAgICAgICAgICAgICAgICAgICAgey4uLihpbnB1dEVycm9yICYmIHsgZXJyb3I6IGlucHV0RXJyb3IubWVzc2FnZT8udG9TdHJpbmcoKSB9KX1cbiAgICAgICAgICAgICAgICAgICAgey4uLnJlZ2lzdGVyKHJlZ2lzdGVyTmFtZSwgeyBvbkNoYW5nZTogcmVzZXRFcnJvcnMsIG9uQmx1ciB9KX1cbiAgICAgICAgICAgICAgICAgICAgey4uLnJlc3R9XG4gICAgICAgICAgICAgICAgICAgIGF1dG9Db21wbGV0ZT17d2l0aFN1Z2dlc3Rpb25zID8gXCJvblwiIDogXCJvZmZcIn1cbiAgICAgICAgICAgICAgICAgICAgcGF0dGVybj17cGF0dGVybn1cbiAgICAgICAgICAgICAgICAgICAgb25LZXlEb3duPXtoaWRlU3VnZ2VzdGlvbnN9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvQ29tcG9uZW50PlxuICAgICAgICApO1xuXG4gICAgICAgIGZ1bmN0aW9uIHJlc2V0RXJyb3JzKGV2ZW50OiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50Pikge1xuICAgICAgICAgICAgaWYgKG9uQ2hhbmdlKSBvbkNoYW5nZShldmVudCk7XG4gICAgICAgICAgICBjbGVhckVycm9ycyhbcmVnaXN0ZXJOYW1lXSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBoaWRlU3VnZ2VzdGlvbnMoZXZlbnQ6IFJlYWN0LkZvcm1FdmVudDxIVE1MSW5wdXRFbGVtZW50Pik6IHZvaWQge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGV2ZW50LnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICAgICAgICAgICAgY29uc3QgeyB2YWx1ZSB9ID0gZWxlbWVudDtcbiAgICAgICAgICAgIGlmICghdmFsdWUgJiYgIWhhc1N1Z2dlc3Rpb25zKSBzZXRoYXNTdWdnZXN0aW9ucyh0cnVlKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgKHByZXZQcm9wcywgbmV4dFByb3BzKSA9PlxuICAgICAgICBwcmV2UHJvcHMubWV0aG9kcy5mb3JtU3RhdGUuZXJyb3JzID09PSBuZXh0UHJvcHMubWV0aG9kcy5mb3JtU3RhdGUuZXJyb3JzICYmXG4gICAgICAgIHByZXZQcm9wcy5tZXRob2RzLmZvcm1TdGF0ZS5kaXJ0eUZpZWxkc1twcmV2UHJvcHMubmFtZV0gIT09XG4gICAgICAgICAgICBuZXh0UHJvcHMubWV0aG9kcy5mb3JtU3RhdGUuZGlydHlGaWVsZHNbbmV4dFByb3BzLm5hbWVdLFxuKTtcbmV4cG9ydCBmdW5jdGlvbiBJbnB1dEZpZWxkKHByb3BzOiBQcm9wVHlwZXM8UHJvcElucHV0RmllbGQsIHR5cGVvZiBERUZfSU5QVVRfRklFTEQ+KSB7XG4gICAgY29uc3QgbWV0aG9kcyA9IEZvcm0udXNlQ29udGV4dCgpO1xuXG4gICAgcmV0dXJuIDxJbnB1dEZpZWxkTWVtb2l6ZWQgbWV0aG9kcz17bWV0aG9kc30gey4uLnByb3BzfSAvPjtcbn1cblxuSW5wdXRGaWVsZC5kaXNwbGF5TmFtZSA9IE5BTUVfSU5QVVRfRklFTEQ7XG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wiTkFNRV9JTlBVVF9GSUVMRFwiOlwiSW5wdXRGaWVsZFwiLFwiVFlQRV9JTlBVVF9GSUVMRFwiOlwiRWxlbWVudFwifTsiLCJpbXBvcnQgUmVhY3QgZnJvbSBcIkBwa2cvcmVhY3RcIjtcbmltcG9ydCB7IENoZWNrYm94IH0gZnJvbSBcIkBhcHAvYmFuY29uLXVpXCI7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tIFwiQHBrZy9yZWFjdC1zdG9yeWJvb2svQ29tcG9uZW50XCI7XG5pbXBvcnQgdHlwZSB7IFByb3BEZWZhdWx0cywgUHJvcFR5cGVzIH0gZnJvbSBcIkBwa2cvcmVhY3Qtc3Rvcnlib29rL0NvbXBvbmVudFwiO1xuaW1wb3J0IHR5cGUgeyBQcm9wcyBhcyBDaGVja2JveFByb3BzIH0gZnJvbSBcIkBhcHAvYmFuY29uLXVpL2Rpc3QvY29tcG9uZW50cy9DaGVja2JveFwiO1xuaW1wb3J0IHR5cGUgeyBVc2VGb3JtUmV0dXJuIH0gZnJvbSBcInJlYWN0LWhvb2stZm9ybVwiO1xuaW1wb3J0IHR5cGUgeyBPbWl0UHJvcElELCBQcm9wRFMgfSBmcm9tIFwiLi5cIjtcbmltcG9ydCB7IEZvcm0gfSBmcm9tIFwiLi5cIjtcbmltcG9ydCBOYW1lc3BhY2UgZnJvbSBcIi4vX2luZGV4LnNjc3NcIjtcblxuZXhwb3J0IGNvbnN0IHsgTkFNRV9JTlBVVF9DSEVDS0JPWCwgVFlQRV9JTlBVVF9DSEVDS0JPWCB9ID0gTmFtZXNwYWNlO1xuXG5leHBvcnQgdHlwZSBQcm9wSW5wdXRDaGVja2JveCA9IFByb3BEUzxDaGVja2JveFByb3BzPiAmIHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgaWQ/OiBzdHJpbmc7XG4gICAgb25DaGFuZ2U/OiAoKGV2ZW50OiBSZWFjdC5Gb3JtRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHZvaWQpIHwgdW5kZWZpbmVkO1xufTtcblxuZXhwb3J0IGNvbnN0IERFRl9JTlBVVF9DSEVDS0JPWDogUHJvcERlZmF1bHRzPFxuICAgIFByb3BJbnB1dENoZWNrYm94LFxuICAgIE9taXRQcm9wSUQ8UHJvcElucHV0Q2hlY2tib3g+IHwga2V5b2YgUHJvcERTPENoZWNrYm94UHJvcHM+XG4+ID0geyBpZDogTkFNRV9JTlBVVF9DSEVDS0JPWCwgaXNDaGVja2VkOiBmYWxzZSB9O1xuXG50eXBlIFByb3BJbnB1dENoZWNrYm94TWVtb2l6ZWQgPSBQcm9wSW5wdXRDaGVja2JveCAmIHtcbiAgICBtZXRob2RzOiBVc2VGb3JtUmV0dXJuO1xufTtcblxuY29uc3QgSW5wdXRDaGVja2JveE1lbW9pemVkID0gUmVhY3QubWVtbyhcbiAgICAocHJvcHM6IFByb3BJbnB1dENoZWNrYm94TWVtb2l6ZWQpID0+IHtcbiAgICAgICAgY29uc3QgeyBpZCwgbmFtZSwgbWV0aG9kcywgb25DaGFuZ2UsIGlzQ2hlY2tlZCwgLi4ucmVzdCB9ID0gcHJvcHM7XG4gICAgICAgIGNvbnN0IFtjaGVja2VkLCBzZXRDaGVja2VkXSA9IFJlYWN0LnVzZVN0YXRlKGlzQ2hlY2tlZCk7XG4gICAgICAgIGNvbnN0IHsgcmVnaXN0ZXIsIGZvcm1TdGF0ZSwgc2V0VmFsdWUsIGNsZWFyRXJyb3JzIH0gPSBtZXRob2RzO1xuICAgICAgICBjb25zdCB7IGVycm9ycyB9ID0gZm9ybVN0YXRlO1xuXG4gICAgICAgIGNvbnN0IHJlZ2lzdGVyTmFtZSA9IGAke25hbWV9YCBhcyBjb25zdDtcblxuICAgICAgICAvLyB1cGRhdGUgY2hlY2tlZCBzdGF0ZSB3aGVuIGlzQ2hlY2tlZCBwcm9wIGNoYW5nZVxuICAgICAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGlzQ2hlY2tlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgc2V0Q2hlY2tlZChpc0NoZWNrZWQpO1xuICAgICAgICAgICAgICAgIHNldFZhbHVlKHJlZ2lzdGVyTmFtZSwgaXNDaGVja2VkLCB7IHNob3VsZFZhbGlkYXRlOiB0cnVlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBbaXNDaGVja2VkLCByZWdpc3Rlck5hbWUsIHNldFZhbHVlXSk7XG5cbiAgICAgICAgY29uc3QgaW5wdXRFcnJvciA9IGVycm9yc1tuYW1lXTtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPENvbXBvbmVudCBuYW1lPXtOQU1FX0lOUFVUX0NIRUNLQk9YfSB0eXBlPXtUWVBFX0lOUFVUX0NIRUNLQk9YfT5cbiAgICAgICAgICAgICAgICA8Q2hlY2tib3hcbiAgICAgICAgICAgICAgICAgICAgaWQ9e2lkIHx8IG5hbWV9XG4gICAgICAgICAgICAgICAgICAgIHsuLi4oaW5wdXRFcnJvciAmJiB7IGVycm9yOiBpbnB1dEVycm9yLm1lc3NhZ2U/LnRvU3RyaW5nKCkgfSl9XG4gICAgICAgICAgICAgICAgICAgIHsuLi5yZWdpc3RlcihyZWdpc3Rlck5hbWUpfVxuICAgICAgICAgICAgICAgICAgICBpc0NoZWNrZWQ9e2NoZWNrZWR9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hlY2sgPSAhY2hlY2tlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldENoZWNrZWQoY2hlY2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VmFsdWUocmVnaXN0ZXJOYW1lLCBjaGVjayk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob25DaGFuZ2UpIG9uQ2hhbmdlKGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJFcnJvcnMoW3JlZ2lzdGVyTmFtZV0pO1xuICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICB7Li4ucmVzdH1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9Db21wb25lbnQ+XG4gICAgICAgICk7XG4gICAgfSxcbiAgICAocHJldlByb3BzLCBuZXh0UHJvcHMpID0+XG4gICAgICAgIHByZXZQcm9wcy5tZXRob2RzLmZvcm1TdGF0ZS5lcnJvcnMgPT09IG5leHRQcm9wcy5tZXRob2RzLmZvcm1TdGF0ZS5lcnJvcnMgJiZcbiAgICAgICAgcHJldlByb3BzLm1ldGhvZHMuZm9ybVN0YXRlLmRpcnR5RmllbGRzW3ByZXZQcm9wcy5uYW1lXSAhPT1cbiAgICAgICAgICAgIG5leHRQcm9wcy5tZXRob2RzLmZvcm1TdGF0ZS5kaXJ0eUZpZWxkc1tuZXh0UHJvcHMubmFtZV0sXG4pO1xuXG5leHBvcnQgZnVuY3Rpb24gSW5wdXRDaGVja2JveChwcm9wczogUHJvcFR5cGVzPFByb3BJbnB1dENoZWNrYm94LCB0eXBlb2YgREVGX0lOUFVUX0NIRUNLQk9YPikge1xuICAgIGNvbnN0IG1ldGhvZHMgPSBGb3JtLnVzZUNvbnRleHQoKTtcblxuICAgIHJldHVybiA8SW5wdXRDaGVja2JveE1lbW9pemVkIG1ldGhvZHM9e21ldGhvZHN9IHsuLi5wcm9wc30gLz47XG59XG5cbklucHV0Q2hlY2tib3guZGlzcGxheU5hbWUgPSBOQU1FX0lOUFVUX0NIRUNLQk9YO1xuIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcIk5BTUVfSU5QVVRfQ0hFQ0tCT1hcIjpcIklucHV0Q2hlY2tib3hcIixcIlRZUEVfSU5QVVRfQ0hFQ0tCT1hcIjpcIkVsZW1lbnRcIn07IiwiaW1wb3J0IFJlYWN0IGZyb20gXCJAcGtnL3JlYWN0XCI7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tIFwiQHBrZy9yZWFjdC1zdG9yeWJvb2svQ29tcG9uZW50XCI7XG5pbXBvcnQgdHlwZSB7IFByb3BEZWZhdWx0cywgUHJvcEVsZW1lbnQsIFByb3BUeXBlcyB9IGZyb20gXCJAcGtnL3JlYWN0LXN0b3J5Ym9vay9Db21wb25lbnRcIjtcbmltcG9ydCB7IHVzZVBlcnNpc3RvciB9IGZyb20gXCJAcGtnL3JlYWN0LXN0b3J5Ym9vay9Db21wb25lbnQvUGVyc2lzdG9yXCI7XG5pbXBvcnQgeyBEeW5hbWljLCBUeXBlIH0gZnJvbSBcIkBwa2cvdXRpbHMvc2NoZW1hXCI7XG5cbmltcG9ydCB7XG4gICAgRmV0Y2hlclNsaWNlUHJlZmVyZW5jZXMsXG4gICAgU2VsZWN0b3JTbGljZVByZWZlcmVuY2VzLFxuICAgIHVzZU90cCxcbn0gZnJvbSBcIkBhcHAvYmFuY29uLWRhdGEvc2xpY2VzL3ByZWZlcmVuY2VzXCI7XG5pbXBvcnQgeyBDdXN0b21FcnJvciwgT3RwIH0gZnJvbSBcIkBhcHAvYmFuY29uLWRhdGEvdmFsaWRhdGlvbnNcIjtcbmltcG9ydCB7IEljb24gfSBmcm9tIFwiQGFwcC9iYW5jb24tdWlcIjtcblxuaW1wb3J0IHsgVGV4dCwgdXNlVGV4dCB9IGZyb20gXCJAYXBwL2JhbmNvci1jb21wb25lbnRzL0VsZW1lbnQvVGV4dFwiO1xuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSBcIkBhcHAvYmFuY29yLWNvbXBvbmVudHMvRWxlbWVudC9CdXR0b25cIjtcbmltcG9ydCB7IE1vZGFsIH0gZnJvbSBcIkBhcHAvYmFuY29yLWNvbXBvbmVudHMvRWxlbWVudC9Nb2RhbFwiO1xuXG5pbXBvcnQgeyBwYXJzZUNvbmZpZyB9IGZyb20gXCJ+L3V0aWxzL2NvbmZpZ1V0aWxzXCI7XG5cbmltcG9ydCB7IFNlbGVjdG9yU2xpY2VTZXNzaW9uIH0gZnJvbSBcIkBhcHAvYmFuY29uLWRhdGEvc2xpY2VzL3Nlc3Npb25cIjtcbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTZWxlY3RvciB9IGZyb20gXCJAYXBwL2JhbmNvbi1kYXRhXCI7XG5pbXBvcnQgeyB1c2VQbGF0Zm9ybSB9IGZyb20gXCJAcGtnL3V0aWxzLWNvcmRvdmEtcGx1Z2luLXRzL2luZm9cIjtcblxuaW1wb3J0IHsgRU1QVFlfU1RSSU5HLCBTRUNVUklUWV9FVkVOVF9LRVlTLCBUWVBFX09UUCwgWkVSTyB9IGZyb20gXCJAYXBwL2JhbmNvbi1kYXRhL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgSW5wdXRGaWVsZCB9IGZyb20gXCJAYXBwL2JhbmNvci1jb21wb25lbnRzL0VsZW1lbnQvRm9ybS9JbnB1dFwiO1xuaW1wb3J0IHsgdXNlU2hvd1RvYXN0IH0gZnJvbSBcIkBhcHAvYmFuY29uLWRhdGEvc2xpY2VzL3RvYXN0XCI7XG5pbXBvcnQgeyB1c2VOYXZpZ2F0ZSB9IGZyb20gXCJAcGtnL3JlYWN0LXN0b3J5Ym9vay9Db21wb25lbnQvUm91dGVyXCI7XG5pbXBvcnQgeyBST1VURV9QQVJBTV9JRCwgUk9VVEVfU0VDVVJJVFlfU0VMRk1BTkFHRU1FTlQsIHVzZVBhdGggfSBmcm9tIFwifi9yb3V0ZXNcIjtcbmltcG9ydCB7IExvYWRpbmcgfSBmcm9tIFwiQGFwcC9iYW5jb3ItY29tcG9uZW50cy9FbGVtZW50L0xvYWRpbmdcIjtcbmltcG9ydCBSdWxlcyBmcm9tIFwiLi9fcnVsZXMubW9kdWxlLnNjc3NcIjtcbmltcG9ydCBOYW1lc3BhY2UgZnJvbSBcIi4vX2luZGV4LnNjc3NcIjtcblxuZXhwb3J0IGNvbnN0IHsgTkFNRV9NT0RBTF9PVFAsIFRZUEVfTU9EQUxfT1RQIH0gPSBOYW1lc3BhY2U7XG5cbmV4cG9ydCBjb25zdCBvdHBWYWxpZGF0b3IgPSAob3RwTGVuZ3RoOiBudW1iZXIsIHRleHRFcnJvckN2djogc3RyaW5nLCB0ZXh0RXJyb3JSZXF1aXJlZDogc3RyaW5nKSA9PlxuICAgIER5bmFtaWMoKHZhbHVlKSA9PiB7XG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBDdXN0b21FcnJvcihUeXBlLnN0cmluZy5yZXF1aXJlZCgpLCB0ZXh0RXJyb3JSZXF1aXJlZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEN1c3RvbUVycm9yKE90cChvdHBMZW5ndGgpLCB0ZXh0RXJyb3JDdnYpO1xuICAgIH0pO1xuXG5leHBvcnQgY29uc3Qgb3RwU2NoZW1hID0gKG90cExlbmd0aDogbnVtYmVyLCB0ZXh0RXJyb3JDdnY6IHN0cmluZywgdGV4dEVycm9yUmVxdWlyZWQ6IHN0cmluZykgPT5cbiAgICBUeXBlLm9iamVjdCh7IG90cDogb3RwVmFsaWRhdG9yKG90cExlbmd0aCwgdGV4dEVycm9yQ3Z2LCB0ZXh0RXJyb3JSZXF1aXJlZCkgfSk7XG5cbmV4cG9ydCB0eXBlIFByb3BNb2RhbE9UUCA9IFByb3BFbGVtZW50ICYge1xuICAgIGhhbmRsZU1vZGFsOiAoKSA9PiB2b2lkO1xuICAgIGlzTW9kYWxWaXNpYmxlOiBib29sZWFuO1xuICAgIHRpdGxlVGV4dDogc3RyaW5nO1xuICAgIGlzTG9hZGluZz86IGJvb2xlYW47XG59O1xuXG5leHBvcnQgY29uc3QgREVGX01PREFMX09UUDogUHJvcERlZmF1bHRzPFByb3BNb2RhbE9UUD4gPSB7XG4gICAgaXNMb2FkaW5nOiBmYWxzZSxcbn07XG5cbmV4cG9ydCB0eXBlIFByb3BUeXBlc01vZGFsT1RQID0gUHJvcFR5cGVzPFByb3BNb2RhbE9UUCwgdHlwZW9mIERFRl9NT0RBTF9PVFA+O1xuXG5leHBvcnQgZnVuY3Rpb24gTW9kYWxPVFAocHJvcHM6IFByb3BNb2RhbE9UUCkge1xuICAgIGNvbnN0IHsgaXNNb2RhbFZpc2libGUsIGhhbmRsZU1vZGFsLCBjaGlsZHJlbiwgdGl0bGVUZXh0LCBpc0xvYWRpbmcgfSA9XG4gICAgICAgIHByb3BzIGFzIFByb3BUeXBlc01vZGFsT1RQO1xuXG4gICAgY29uc3QgeyBpc01vYmlsZSB9ID0gdXNlUGxhdGZvcm0oKTtcbiAgICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gICAgY29uc3QgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuICAgIGNvbnN0IHVybFNlY3VyaXR5ID0gdXNlUGF0aChST1VURV9TRUNVUklUWV9TRUxGTUFOQUdFTUVOVCk7XG4gICAgY29uc3QgeyBTT0ZUX1RPS0VOIH0gPSBTRUNVUklUWV9FVkVOVF9LRVlTO1xuXG4gICAgY29uc3QgYWNjZXNzVG9rZW4gPSB1c2VTZWxlY3RvcihTZWxlY3RvclNsaWNlU2Vzc2lvbi50b2tlbik7XG4gICAgY29uc3QgdG9rZW5UeXBlID0gdXNlU2VsZWN0b3IoU2VsZWN0b3JTbGljZVByZWZlcmVuY2VzLm90cFR5cGUpO1xuICAgIGNvbnN0IGNvdW50U2VuZE90cFNNUyA9IHVzZVNlbGVjdG9yKFNlbGVjdG9yU2xpY2VQcmVmZXJlbmNlcy5jb3VudFNlbmRPdHBTTVMpO1xuICAgIGNvbnN0IGZldGNoaW5nID0gdXNlU2VsZWN0b3IoU2VsZWN0b3JTbGljZVByZWZlcmVuY2VzLmZldGNoaW5nKSB8fCBpc0xvYWRpbmc7XG5cbiAgICBjb25zdCB7IHRleHRHZXQgfSA9IHVzZVRleHQoKTtcbiAgICBjb25zdCB7IGdldFZhbHVlQ29uZmlnIH0gPSB1c2VQZXJzaXN0b3IoKTtcbiAgICBjb25zdCB7IGlzU2VlZFByZXNlbnQsIHNvZnRUb2tlbiB9ID0gdXNlT3RwKCk7XG4gICAgY29uc3QgeyBzaG93U3VjY2Vzc1RvYXN0IH0gPSB1c2VTaG93VG9hc3QoKTtcblxuICAgIGNvbnN0IG90cExlbmd0aCA9IHBhcnNlQ29uZmlnPG51bWJlcj4oZ2V0VmFsdWVDb25maWcoXCJzYWZld2F5Lm90cHMuc29mdC5sZW5ndGhcIikpO1xuXG4gICAgY29uc3QgW3Rva2VuLCBzZXRUb2tlbl0gPSBSZWFjdC51c2VTdGF0ZTxzdHJpbmc+KEVNUFRZX1NUUklORyk7XG5cbiAgICBjb25zdCBpc1Rva2VuVHlwZU9UUCA9IHRva2VuVHlwZSA9PT0gVFlQRV9PVFA7XG4gICAgY29uc3QgW2hpZGRlbklucHV0LCBzZXRIaWRkZW5JbnB1dF0gPSBSZWFjdC51c2VTdGF0ZTxib29sZWFuPihmYWxzZSk7XG4gICAgY29uc3QgdGV4dEJ1dHRvblNlbmRPdHBTTVMgPVxuICAgICAgICBjb3VudFNlbmRPdHBTTVMgPiBaRVJPXG4gICAgICAgICAgICA/IFwic3BhLm1vZGFsLm90cC5idXR0b24ucmVzZW5kQ29kZVwiXG4gICAgICAgICAgICA6IFwic3BhLm1vZGFsLm90cC5idXR0b24uc2VuZENvZGVcIjtcblxuICAgIGNvbnN0IGdldFRva2VuID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICBpZiAoIWlzTW9iaWxlIHx8ICFpc1Rva2VuVHlwZU9UUCB8fCAhaXNTZWVkUHJlc2VudCkge1xuICAgICAgICAgICAgc2V0VG9rZW4oRU1QVFlfU1RSSU5HKTtcbiAgICAgICAgICAgIHNldEhpZGRlbklucHV0KGZhbHNlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldFRva2VuKHNvZnRUb2tlbik7XG4gICAgICAgIHNldEhpZGRlbklucHV0KHRydWUpO1xuICAgIH0sIFtpc01vYmlsZSwgaXNUb2tlblR5cGVPVFAsIHNvZnRUb2tlbiwgaXNTZWVkUHJlc2VudF0pO1xuXG4gICAgLyoqIFZhbGlkIGlmIHRoZSBjb25kaXRpb25zIG9mIHNvZnRUb2tlbiAqL1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGdldFRva2VuKCk7XG4gICAgfSwgW2dldFRva2VuXSk7XG5cbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoY291bnRTZW5kT3RwU01TID4gWkVSTykgc2hvd1N1Y2Nlc3NUb2FzdChcInNwYS5tb2RhbC5vdHAuc3VjY2Vzcy5zZW5kQ29kZVwiKTtcbiAgICB9LCBbY291bnRTZW5kT3RwU01TLCBzaG93U3VjY2Vzc1RvYXN0XSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8Q29tcG9uZW50IG5hbWU9e05BTUVfTU9EQUxfT1RQfSB0YWc9XCJzZWN0aW9uXCIgdHlwZT17VFlQRV9NT0RBTF9PVFB9PlxuICAgICAgICAgICAgPE1vZGFsIG9wZW49e2lzTW9kYWxWaXNpYmxlfSB0aXRsZT1cInNwYS5tb2RhbC5vdHAudGl0bGVcIiBvbkNsb3NlPXtoYW5kbGVNb2RhbH0+XG4gICAgICAgICAgICAgICAgeyFmZXRjaGluZyAmJiAoXG4gICAgICAgICAgICAgICAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxNb2RhbC5Cb2R5PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt0aXRsZVRleHQgJiYgPFRleHQgdXVpZD17dGl0bGVUZXh0fSAvPn1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt0b2tlblR5cGUgPyAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjaGlsZHJlbn1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyFpc1Rva2VuVHlwZU9UUCAmJiA8VGV4dCB1dWlkPVwic3BhLm1vZGFsLm90cC50ZXh0LnNlbmRDb2RlXCIgLz59XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtoaWRkZW5JbnB1dCA/IFJ1bGVzLmhpZGRlbklucHV0IDogRU1QVFlfU1RSSU5HfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXRGaWVsZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU9e3Rva2VufVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17dGV4dEdldCh7IHV1aWQ6IFwic3BhLm1vZGFsLm90cC5sYWJlbFwiIH0pfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhMZW5ndGg9e290cExlbmd0aH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cIm90cFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0PXs8SWNvbiBuYW1lPVwidG9rZW5QYWRsb2NrXCIgLz59XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0IHV1aWQ9XCJzcGEub3RwLm5vdC5hc3NpZ25cIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L01vZGFsLkJvZHk+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxNb2RhbC5Gb290ZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e1J1bGVzLmZvb3Rlcn0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt0b2tlblR5cGUgPyAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyFpc1Rva2VuVHlwZU9UUCAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXt7IHV1aWQ6IHRleHRCdXR0b25TZW5kT3RwU01TIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVTZW5kT3RwU21zfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17aGFuZGxlQnV0dG9uQWNjZXB0RGlzYWJsZWQoKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV1aWQ6IFwic3BhLm1vZGFsLm90cC5hY2NlcHQuYnV0dG9uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJzdWJtaXRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXt7IHV1aWQ6IFwic3BhLm90cC5ub3QuYXNzaWduLmJ1dHRvblwiIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlTmF2aWdhdGVPdHBDb25maWd1cmF0aW9ufVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKX1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17eyB1dWlkOiBcInNwYS5tb2RhbC5vdHAuY2FuY2VsLmJ1dHRvblwiIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYW50PVwib3V0bGluZWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlTW9kYWx9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L01vZGFsLkZvb3Rlcj5cbiAgICAgICAgICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgICAgICApfVxuXG4gICAgICAgICAgICAgICAge2ZldGNoaW5nICYmIDxMb2FkaW5nIC8+fVxuICAgICAgICAgICAgPC9Nb2RhbD5cbiAgICAgICAgPC9Db21wb25lbnQ+XG4gICAgKTtcblxuICAgIGZ1bmN0aW9uIGhhbmRsZU5hdmlnYXRlT3RwQ29uZmlndXJhdGlvbigpIHtcbiAgICAgICAgaGFuZGxlTW9kYWwoKTtcbiAgICAgICAgbmF2aWdhdGUodXJsU2VjdXJpdHkucmVwbGFjZShST1VURV9QQVJBTV9JRCwgU09GVF9UT0tFTikpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZVNlbmRPdHBTbXMoKSB7XG4gICAgICAgIGlmICghYWNjZXNzVG9rZW4pIHJldHVybjtcblxuICAgICAgICBkaXNwYXRjaChcbiAgICAgICAgICAgIEZldGNoZXJTbGljZVByZWZlcmVuY2VzLnNlbmRPdHBPdmVyU21zKHtcbiAgICAgICAgICAgICAgICBhY2Nlc3NUb2tlbixcbiAgICAgICAgICAgIH0pLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZUJ1dHRvbkFjY2VwdERpc2FibGVkKCkge1xuICAgICAgICBpZiAoaXNUb2tlblR5cGVPVFApIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIGNvdW50U2VuZE90cFNNUyA9PT0gWkVSTztcbiAgICB9XG59XG5cbk1vZGFsT1RQLmRlZmF1bHRQcm9wcyA9IERFRl9NT0RBTF9PVFA7XG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wiTkFNRV9NT0RBTF9PVFBcIjpcIk1vZGFsT1RQXCIsXCJUWVBFX01PREFMX09UUFwiOlwiU2VjdGlvblwiLFwiTkFNRV9USEVNRVBMQVRGT1JNXCI6XCJUaGVtZVBsYXRmb3JtXCIsXCJUWVBFX1RIRU1FUExBVEZPUk1cIjpcIkJ1bmRsZVwiLFwiTkFNRV9DT05TVU1FUl9USEVNRVBMQVRGT1JNXCI6XCJUaGVtZVBsYXRmb3JtQ29uc3VtZXJcIixcIlRZUEVfQ09OU1VNRVJfVEhFTUVQTEFURk9STVwiOlwiRWxlbWVudFwiLFwiTkFNRV9QUk9WSURFUl9USEVNRVBMQVRGT1JNXCI6XCJUaGVtZVBsYXRmb3JtUHJvdmlkZXJcIixcIlRZUEVfUFJPVklERVJfVEhFTUVQTEFURk9STVwiOlwiUHJvdmlkZXJcIixcIk5BTUVfVEVYVFwiOlwiVGV4dFwiLFwiVFlQRV9URVhUXCI6XCJFbGVtZW50XCIsXCJOQU1FX0JVVFRPTlwiOlwiQnV0dG9uXCIsXCJUWVBFX0JVVFRPTlwiOlwiRWxlbWVudFwiLFwiTkFNRV9JTlBVVF9GSUVMRFwiOlwiSW5wdXRGaWVsZFwiLFwiVFlQRV9JTlBVVF9GSUVMRFwiOlwiRWxlbWVudFwiLFwiaGlkZGVuSW5wdXRcIjpcIl9ydWxlc19oaWRkZW5JbnB1dF9fMnhmZEhcIixcImZvb3RlclwiOlwiX3J1bGVzX2Zvb3Rlcl9fT1hJWG1cIn07IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcIk5BTUVfTU9EQUxfT1RQXCI6XCJNb2RhbE9UUFwiLFwiVFlQRV9NT0RBTF9PVFBcIjpcIlNlY3Rpb25cIn07Il0sInNvdXJjZVJvb3QiOiIifQ==
//# sourceMappingURL=23.fb9f64ce.chunk.js.map