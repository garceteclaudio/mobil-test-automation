(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[26,304],{195:function(e,t,a){"use strict";a.r(t),a.d(t,"default",(function(){return D}));var n=a(16),c=a(11),s=a(8),i=a(38),o=a(270),r=a(87),l=a(33),d=a(50),b=a(504),u=a(82),j=a(490),m=a(494),O=a(488),f=a(39),p=a(74),E=a(99),_=a(554),x=a(79),T=a(6),h=a(187),N=a(565),M=a(120),S=a(100),v=a(477),g=a.n(v),P=a(10);function D(){var e=c.b.useState(!1),t=Object(n.a)(e,2),a=t[0],v=t[1],D=c.b.useState(!1),C=Object(n.a)(D,2),A=C[0],L=C[1],y=c.b.useState(T.D),F=Object(n.a)(y,2),I=F[0],k=F[1],w=c.b.useState(T.D),R=Object(n.a)(w,2),U=R[0],Y=R[1],B=c.b.useState(T.D),V=Object(n.a)(B,2),H=V[0],q=V[1],X=c.b.useState(!1),z=Object(n.a)(X,2),G=z[0],K=z[1],J=Object(s.b)(),Q=Object(i.c)().textGet,Z=Object(E.a)().getValueConfig,W=Object(s.c)(l.e.isCorporateEnvironment),$=Object(s.c)(l.e.token),ee=Object(s.c)(r.c.fetching),te=Object(s.c)(r.c.personalData),ae=Object(s.c)(r.c.obscureMail),ne=Object(s.c)(r.c.obscurePhoneNumber),ce=Object(s.c)(r.c.warning),se=Object(s.c)(r.c.isEmailChangeTokenSent),ie=Object(s.c)(r.c.isEmailChangeTokenConfirmed),oe=Object(s.c)(r.c.isDataModified),re=c.b.useCallback((function(){J(r.a.cleanIsEmailChangeTokenSent()),J(r.a.cleanIsEmailChangeTokenConfirmed())}),[J]);c.b.useEffect((function(){return re(),re}),[re]),c.b.useEffect((function(){$&&J(r.b.modifyUserDataPre({accessToken:$}))}),[J,$]),c.b.useEffect((function(){se&&!ie&&(J(x.a.set({kind:"SUCCESS",text:{uuid:"spa.modo.register.sent.code"},duration:T.v})),Me(),L(!0))}),[J,se,re,ie]),c.b.useEffect((function(){ie&&se&&(J(x.a.set({kind:"SUCCESS",text:{uuid:"spa.preferences.modifyDataSection.email.modal.token.validated"},duration:T.v})),q(U),L(!1))}),[J,ie,se,U]),c.b.useEffect((function(){oe&&(J(x.a.set({kind:"SUCCESS",text:{uuid:"spa.preferences.modifyDataSection.modified.toast"},duration:T.v})),$&&(J(r.b.modifyUserDataPre({accessToken:$})),re(),J(r.a.cleanIsDataModified())))}),[$,J,oe,re]);var le=Object(p.a)(Z("safeway.otps.soft.length")),de=Q({uuid:"spa.modal.otp.error",replace:String(le)}),be=Q({uuid:"spa.generic.field.error.required"}),ue=Q({uuid:"spa.generic.mail.format.invalid"}),je=Object(p.a)(Z("core.email.maxLength")),me=Q({uuid:"spa.email.error.tooBig",replace:"".concat(je)}),Oe=Object(p.a)(Z("spa.email.validationFormat")),fe=new RegExp(Oe),pe=Object(M.e)(T.G.MODIFY_USER_DATA),Ee=f.e.object({mail:Object(_.a)({textErrorRequired:be,textErrorEmail:ue,textErrorMaxLength:me,emailMaxLength:je,emailValidationRegex:fe})}),_e=Object(N.b)(le,de,be),xe=f.e.object({newCode:Object(h.d)(f.e.string.required(),be)}),Te=!W&&pe,he=Te?g.a.column:g.a.row,Ne=Te?g.a.bigLabel:g.a.label;return!ee||a||A||oe?Object(P.jsxs)("div",{className:g.a.passwordSection,children:[Object(P.jsx)(i.b,{className:g.a.title,tag:"h4",uuid:"spa.preferences.modifyDataSection.title"}),Object(P.jsx)("div",{className:g.a.securitySealContainer,children:Object(P.jsx)(d.Alert,{variant:"info",children:Object(P.jsxs)("div",{className:g.a.alert,children:[Object(P.jsx)(d.Icon,{className:g.a.alertIcon,name:"info",stroke:"info"}),Object(P.jsx)(i.b,{uuid:"spa.preferences.modifyDataSection.info"})]})})}),Object(P.jsxs)("div",{children:[Object(P.jsxs)("div",{className:g.a.row,children:[Object(P.jsx)(i.b,{className:g.a.label,uuid:"spa.preferences.modifyDataSection.label.name"}),Object(P.jsx)(i.b,{className:g.a.info,children:null===te||void 0===te?void 0:te.name})]}),Object(P.jsxs)("div",{className:g.a.row,children:[Object(P.jsx)(i.b,{className:g.a.label,uuid:"spa.preferences.modifyDataSection.label.LastName"}),Object(P.jsx)(i.b,{className:g.a.info,children:null===te||void 0===te?void 0:te.lastName})]}),te&&Object(P.jsxs)("div",{className:g.a.row,children:[Object(P.jsx)(i.b,{className:g.a.label,uuid:"spa.preferences.modifyDataSection.label.birthdate"}),Object(P.jsx)(b.a,{className:g.a.info,date:te.birthday,formatParams:{format:S.a.SHORT}})]}),Object(P.jsxs)("div",{className:g.a.row,children:[Object(P.jsx)(i.b,{className:g.a.label,uuid:"spa.preferences.modifyDataSection.label.locale"}),(null===te||void 0===te?void 0:te.locationName)&&Object(P.jsx)(i.b,{className:g.a.info,children:te.locationName})]}),Object(P.jsxs)("div",{className:g.a.row,children:[Object(P.jsx)(i.b,{className:g.a.label,uuid:"spa.preferences.modifyDataSection.label.province"}),(null===te||void 0===te?void 0:te.provinceName)&&Object(P.jsx)(i.b,{className:g.a.info,children:te.provinceName})]}),Object(P.jsxs)("div",{className:g.a.row,children:[Object(P.jsx)(i.b,{className:g.a.label,uuid:"spa.preferences.modifyDataSection.label.address"}),Object(P.jsx)(i.b,{className:g.a.info,children:"".concat(null!==te&&void 0!==te&&te.addressStreet?te.addressStreet:T.D," ").concat(null!==te&&void 0!==te&&te.addressNumber?te.addressNumber:T.D)})]}),Object(P.jsxs)("div",{className:he,children:[Object(P.jsx)(i.b,{className:Ne,uuid:"spa.preferences.modifyDataSection.label.nail"}),Te?Object(P.jsxs)("div",{className:g.a.row,id:"email",children:[Object(P.jsx)(i.b,{className:g.a.emailLabel,children:ie?I:ae}),Object(P.jsx)(u.a,{icon:"edit",kind:"icon",label:{uuid:"spa.a11y.buttons.edit"},size:"small",onClick:function(){v(!0),window.scrollTo({top:T.Sb,left:T.Sb,behavior:"smooth"})}})]}):Object(P.jsx)(i.b,{className:g.a.info,children:ae})]}),Object(P.jsxs)("div",{className:he,children:[Object(P.jsx)(i.b,{className:Ne,uuid:"spa.preferences.modifyDataSection.label.phone"}),Te?Object(P.jsx)("div",{className:g.a.row,children:Object(P.jsx)(i.b,{className:g.a.label,children:ne})}):Object(P.jsx)(i.b,{className:g.a.info,children:ne})]}),ie&&Object(P.jsxs)(O.a,{schema:_e,warnings:ce,onSubmit:function(e){if(!$||!te)return;J(r.b.updateUserData({accessToken:$,mailCode:H,mail:te.mail,mailNew:I,otp:String(e.otp)})),ge()},children:[Object(P.jsx)(N.a,{handleModal:ge,isModalVisible:G}),Object(P.jsx)(u.a,{className:g.a.saveButton,label:{uuid:"spa.form.save"},onClick:ge})]})]}),Object(P.jsxs)(j.a,{open:a,title:"spa.preferences.modifyDataSection.email.modal.title",onClose:Me,children:[Object(P.jsx)(j.a.Body,{children:Object(P.jsx)(O.a,{schema:Ee,warnings:ce,onSubmit:function(e){if(!$)return;re();var t=e.mail;J(r.b.updateMailActivity({accessToken:$,mail:t})),k(t)},children:Object(P.jsx)(Se,{})})}),Object(P.jsx)(j.a.Footer,{})]}),Object(P.jsxs)(j.a,{open:A,title:"spa.preferences.modifyDataSection.email.modal.title",onClose:function(){L(!1)},children:[Object(P.jsx)(j.a.Body,{children:Object(P.jsx)(O.a,{schema:xe,warnings:ce,onSubmit:function(e){var t=e.newCode;if(!$||!te)return;J(r.b.validateEmailToken({accessToken:$,newCode:t,mail:I})),Y(t)},children:Object(P.jsx)(ve,{})})}),Object(P.jsx)(j.a.Footer,{})]})]}):Object(P.jsx)(o.a,{});function Me(){v(!1)}function Se(){var e=O.a.useContext().reset;return c.b.useEffect((function(){e()}),[e]),Object(P.jsxs)(c.b.Fragment,{children:[Object(P.jsx)(m.a,{id:"mail",label:Q({uuid:"spa.modo.register.mail"}),name:"mail",start:Object(P.jsx)(d.Icon,{name:"mail",size:"small",stroke:"gray-600"})}),Object(P.jsx)(i.b,{uuid:"spa.preferences.modifyDataSection.email.modal.info"}),Object(P.jsx)(u.a,{label:{uuid:"spa.modo.register.send.code"},type:"submit"})]})}function ve(){var e=O.a.useContext().reset;return c.b.useEffect((function(){e()}),[e]),Object(P.jsxs)(c.b.Fragment,{children:[Object(P.jsx)(m.a,{id:"newCode",label:Q({uuid:"spa.preferences.modifyDataSection.email.modal.token.label"}),name:"newCode",start:Object(P.jsx)(d.Icon,{name:"tokenPadlock",size:"small",stroke:"gray-600"})}),Object(P.jsx)(i.b,{uuid:"spa.preferences.modifyDataSection.code.modal.info"}),Object(P.jsx)(u.a,{label:{uuid:"spa.form.continue"},type:"submit"})]})}function ge(){K(!G)}}},477:function(e,t,a){e.exports={NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_INPUT_FIELD:"InputField",TYPE_INPUT_FIELD:"Element",NAME_FORM:"Form",TYPE_FORM:"Element",NAME_XS:"xs",NAME_SM:"sm",NAME_MD:"md",NAME_LG:"lg",passwordSection:"_rules_passwordSection__3xZoy",title:"_rules_title__3kcs9",alert:"_rules_alert__3CRFb",alertIcon:"_rules_alertIcon__3e7zv",row:"_rules_row__2bd-K",column:"_rules_column__1-Aht",label:"_rules_label__3zVqE",emailLabel:"_rules_emailLabel__398tj",info:"_rules_info__2eTy6",bigLabel:"_rules_bigLabel__2kmh2",saveButton:"_rules_saveButton__3x2MC",alignInputs:"_rules_alignInputs__2wQmz"}},494:function(e,t,a){"use strict";a.d(t,"a",(function(){return p}));var n=a(2),c=a(19),s=a(16),i=a(11),o=a(50),r=a(41),l=a(488),d=a(498),b=a.n(d),u=a(10),j=["id","name","methods","defaultValue","pattern","withSuggestions","onChange","onBlur"],m=b.a.NAME_INPUT_FIELD,O=b.a.TYPE_INPUT_FIELD,f=i.b.memo((function(e){var t,a=i.b.useState(!1),l=Object(s.a)(a,2),d=l[0],b=l[1],f=e.id,p=e.name,E=e.methods,_=e.defaultValue,x=e.pattern,T=e.withSuggestions,h=void 0===T||T,N=e.onChange,M=e.onBlur,S=Object(c.a)(e,j),v=E.register,g=E.formState,P=E.setValue,D=E.clearErrors,C=g.errors,A="".concat(p),L=C[p];return i.b.useEffect((function(){_&&P(A,_),_||P(A,void 0),h&&b(!0)}),[_,A,P,h,b]),Object(u.jsx)(r.a,{name:m,type:O,children:Object(u.jsx)(o.TextField,Object(n.a)(Object(n.a)(Object(n.a)(Object(n.a)(Object(n.a)({id:f||p},_&&{defaultValue:_}),L&&{error:null===(t=L.message)||void 0===t?void 0:t.toString()}),v(A,{onChange:function(e){N&&N(e);D([A])},onBlur:M})),S),{},{autoComplete:h?"on":"off",pattern:x,onKeyDown:function(e){e.target.value||d||b(!0)}}))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function p(e){var t=l.a.useContext();return Object(u.jsx)(f,Object(n.a)({methods:t},e))}p.displayName=m},498:function(e,t,a){e.exports={NAME_INPUT_FIELD:"InputField",TYPE_INPUT_FIELD:"Element"}},554:function(e,t,a){"use strict";a.d(t,"a",(function(){return i}));var n=a(39),c=a(187),s=a(6);function i(e){var t=e.textErrorRequired,a=e.textErrorEmail,i=e.textErrorMaxLength,o=e.emailMaxLength,r=e.emailValidationRegex,l=[Object(c.d)(n.e.string.ofLength(s.fb,o),i),Object(c.d)(Object(c.h)(r),a)];return Object(n.c)((function(e){var a=l.find((function(t){return!Object(n.d)(e,t)}));return e&&a?a:Object(c.d)(n.e.string.required(),t)}))}},565:function(e,t,a){"use strict";a.d(t,"c",(function(){return A})),a.d(t,"b",(function(){return L})),a.d(t,"a",(function(){return y}));var n=a(16),c=a(11),s=a(41),i=a(99),o=a(39),r=a(87),l=a(187),d=a(50),b=a(38),u=a(82),j=a(490),m=a(74),O=a(33),f=a(8),p=a(36),E=a(6),_=a(494),x=a(79),T=a(80),h=a(51),N=a(270),M=a(574),S=a.n(M),v=a(575),g=a.n(v),P=a(10),D=g.a.NAME_MODAL_OTP,C=g.a.TYPE_MODAL_OTP,A=function(e,t,a){return Object(o.c)((function(n){return n?Object(l.d)(Object(l.m)(e),t):Object(l.d)(o.e.string.required(),a)}))},L=function(e,t,a){return o.e.object({otp:A(e,t,a)})};function y(e){var t=e,a=t.isModalVisible,o=t.handleModal,l=t.children,M=t.titleText,v=t.isLoading,g=Object(p.i)().isMobile,A=Object(f.b)(),L=Object(T.g)(),y=Object(h.sb)(h.kb),F=E.yb.SOFT_TOKEN,I=Object(f.c)(O.e.token),k=Object(f.c)(r.c.otpType),w=Object(f.c)(r.c.countSendOtpSMS),R=Object(f.c)(r.c.fetching)||v,U=Object(b.c)().textGet,Y=Object(i.a)().getValueConfig,B=Object(r.e)(),V=B.isSeedPresent,H=B.softToken,q=Object(x.d)().showSuccessToast,X=Object(m.a)(Y("safeway.otps.soft.length")),z=c.b.useState(E.D),G=Object(n.a)(z,2),K=G[0],J=G[1],Q=k===E.Lb,Z=c.b.useState(!1),W=Object(n.a)(Z,2),$=W[0],ee=W[1],te=w>E.Sb?"spa.modal.otp.button.resendCode":"spa.modal.otp.button.sendCode",ae=c.b.useCallback((function(){if(!g||!Q||!V)return J(E.D),void ee(!1);J(H),ee(!0)}),[g,Q,H,V]);return c.b.useEffect((function(){ae()}),[ae]),c.b.useEffect((function(){w>E.Sb&&q("spa.modal.otp.success.sendCode")}),[w,q]),Object(P.jsx)(s.a,{name:D,tag:"section",type:C,children:Object(P.jsxs)(j.a,{open:a,title:"spa.modal.otp.title",onClose:o,children:[!R&&Object(P.jsxs)(c.b.Fragment,{children:[Object(P.jsxs)(j.a.Body,{children:[M&&Object(P.jsx)(b.b,{uuid:M}),k?Object(P.jsxs)(c.b.Fragment,{children:[l,!Q&&Object(P.jsx)(b.b,{uuid:"spa.modal.otp.text.sendCode"}),Object(P.jsx)("div",{className:$?S.a.hiddenInput:E.D,children:Object(P.jsx)(_.a,{defaultValue:K,label:U({uuid:"spa.modal.otp.label"}),maxLength:X,name:"otp",start:Object(P.jsx)(d.Icon,{name:"tokenPadlock"})})})]}):Object(P.jsx)(b.b,{uuid:"spa.otp.not.assign"})]}),Object(P.jsx)(j.a.Footer,{children:Object(P.jsxs)("div",{className:S.a.footer,children:[k?Object(P.jsxs)(c.b.Fragment,{children:[!Q&&Object(P.jsx)(u.a,{label:{uuid:te},onClick:function(){if(!I)return;A(r.b.sendOtpOverSms({accessToken:I}))}}),Object(P.jsx)(u.a,{disabled:!Q&&w===E.Sb,label:{uuid:"spa.modal.otp.accept.button"},type:"submit"})]}):Object(P.jsx)(u.a,{label:{uuid:"spa.otp.not.assign.button"},onClick:function(){o(),L(y.replace(h.c,F))}}),Object(P.jsx)(u.a,{label:{uuid:"spa.modal.otp.cancel.button"},variant:"outlined",onClick:o})]})})]}),R&&Object(P.jsx)(N.a,{})]})})}y.defaultProps={isLoading:!1}},574:function(e,t,a){e.exports={NAME_MODAL_OTP:"ModalOTP",TYPE_MODAL_OTP:"Section",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_INPUT_FIELD:"InputField",TYPE_INPUT_FIELD:"Element",hiddenInput:"_rules_hiddenInput__2xfdH",footer:"_rules_footer__OXIXm"}},575:function(e,t,a){e.exports={NAME_MODAL_OTP:"ModalOTP",TYPE_MODAL_OTP:"Section"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=26.ed8bf7ed.chunk.js.map