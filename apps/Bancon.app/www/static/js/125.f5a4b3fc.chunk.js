(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[125,80,167,199,309],{337:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return P}));n(11);var a=n(38),o=n(82),r=n(489),i=n(488),c=n(503),s=n(507),u=n(494),d=n(270),l=n(187),m=n(39),E=n(99),b=n(506),O=n(8),f=n(150),j=n(147),T=n(6),_=n(431),p=n.n(_),h=n(10);function P(){var e=Object(O.b)(),t=Object(a.c)().textGet,n=t({uuid:"spa.generic.field.error.required"}),_=Object(E.a)().getValueConfig,P=Object(O.c)(j.c.exchangeToken),N=Object(O.c)(f.d.fetching),R=Object(O.c)(f.d.publicPositionDeclaration),M=Object(O.c)(f.d.publicPositionType),A=Object(O.c)(f.d.publicPosition),g=T.H,x=T.Sb,v=t({uuid:"spa.onboarding.error.exceeds.maximum.allowed",replace:"".concat(g)}),S=m.e.object({declaration:Object(l.d)(m.e.string.required(),n),publicFunctionary:Object(l.d)(m.e.string.required(),n),publicPosition:Object(m.c)((function(e){return e?Object(l.d)(m.e.string.ofLength(x,g),v):Object(l.d)(m.e.string.required(),n)}))}),C=function(){var e=t({uuid:"spa.onboarding.ddjj.pep.form.combo.1"}),n=t({uuid:"spa.onboarding.ddjj.pep.form.combo.2"});return[{id:"pep",value:e},{id:"family",value:n}].map((function(e){var t=e.id,n=e.value;return{isDisabled:!1,value:t,label:n,searchKey:n}}))}(),I=C.find((function(e){return e.value===R}));return N?Object(h.jsx)(d.a,{}):Object(h.jsx)(r.a,{"header-onBack":function(){e(f.b.cleanPepDeclaration())},children:Object(h.jsx)("section",{children:Object(h.jsxs)(i.a,{schema:S,onSubmit:function(t){if(!P)return;e(f.c.updateStatus({status:f.a.PEP_FINISHED,exchangeToken:P})),e(f.b.pepDeclaration(t))},children:[Object(h.jsx)("header",{children:Object(h.jsx)(a.b,{tag:"h1",uuid:"spa.onboarding.ddjj.pep.form.title"})}),Object(h.jsx)("div",{className:p.a.formContainer,children:Object(h.jsx)(c.a,{defaultOption:I,id:"declaration",label:t({uuid:"spa.onboarding.ddjj.pep.form.label.1"}),name:"declaration",options:C})}),Object(h.jsxs)("div",{className:p.a.formContainer,children:[Object(h.jsx)(a.b,{tag:"p",uuid:"spa.onboarding.ddjj.pep.form.label.2.pep"}),Object(h.jsx)(b.a,{name:"publicFunctionary",value:M,children:"".concat(_("onboarding.ddjj.pep.form.label.2.types")).split("|").map((function(e){var n=t({uuid:"spa.onboarding.ddjj.pep.form.label.2.type.".concat(e)});return Object(h.jsx)(s.a,{id:"publicFunctionary-".concat(n),label:n,name:"publicFunctionary",value:e},n)}))})]}),Object(h.jsx)("div",{className:p.a.formContainer,children:Object(h.jsx)(u.a,{defaultValue:A,id:"publicPosition",label:t({uuid:"spa.onboarding.ddjj.pep.form.label.3.pep"}),name:"publicPosition"})}),Object(h.jsx)(o.a,{label:{uuid:"spa.onboarding.ddjj.form.continue"},type:"submit"})]})})})}},431:function(e,t,n){e.exports={NAME_EXTERNAL_CONTAINER:"ContainerExternal",TYPE_EXTERNAL_CONTAINER:"Container",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",infoContainer:"_rules_infoContainer__NsT2B",formContainer:"_rules_formContainer__3oZ9K",title:"_rules_title__13-ed",importantText:"_rules_importantText__1NiIU",downloadText:"_rules_downloadText__3FDkn"}},488:function(e,t,n){"use strict";n.d(t,"a",(function(){return _}));var a=n(2),o=n(16),r=n(19),i=n(11),c=n(502),s=n(505),u=n(41),d=n(6),l=n(79),m=n(8),E=n(493),b=n.n(E),O=n(10),f=["ariaLabel","ariaLabelledby","schema","onSubmit","children","warnings","isRequiredToast","isResetForm"],j=b.a.NAME_FORM,T=b.a.TYPE_FORM;function _(e){var t=e,n=t.ariaLabel,E=t.ariaLabelledby,b=t.schema,_=t.onSubmit,p=t.children,h=t.warnings,P=t.isRequiredToast,N=t.isResetForm,R=Object(r.a)(t,f),M=Object(m.b)(),A=Object(c.e)({resolver:Object(s.a)(b)}),g=A.handleSubmit,x=A.setError,v=A.formState.errors,S=A.reset,C=Object.keys(v),I=i.b.useState(!1),L=Object(o.a)(I,2),F=L[0],y=L[1],Y=i.b.useCallback((function(){P&&F&&M(l.a.set({kind:"ERROR",text:{uuid:"spa.form.field.generic.error"},duration:d.w})),y(!1)}),[M,P,F]),U=i.b.useCallback((function(){S()}),[S]);return i.b.useEffect((function(){h&&Object.keys(h.data).map((function(e){var t=e.startsWith(d.Nb)?e.slice(d.fb):e;return x(t,{message:h.data[e]},{shouldFocus:!1}),null})),C.length>d.Sb&&Y(),N&&U()}),[C.length,N,U,x,Y,h]),Object(O.jsx)(c.b,Object(a.a)(Object(a.a)(Object(a.a)({},A),R),{},{children:Object(O.jsx)(u.a,{noValidate:!0,"aria-label":n,"aria-labelledby":E,name:j,tag:"form",type:T,onSubmit:g(_,(function(){return y(!F)})),children:p})}))}_.useContext=c.f,_.defaultProps={isRequiredToast:!0,isResetForm:!1,warnings:null}},489:function(e,t,n){"use strict";n.d(t,"a",(function(){return j}));var a=n(2),o=n(19),r=(n(11),n(41)),i=n(136),c=n(82),s=n(38),u=n(101),d=n(491),l=n.n(d),m={name:l.a.NAME_EXTERNAL_CONTAINER,type:l.a.TYPE_EXTERNAL_CONTAINER,showLogo:!1},E=n(492),b=n.n(E),O=n(10),f=["header-onBack","header-title","children","name","type","headerClassName","showLogo"];function j(e){var t=e,n=t["header-onBack"],d=t["header-title"],l=t.children,m=t.name,E=t.type,j=t.headerClassName,T=t.showLogo,_=Object(o.a)(t,f),p=Boolean(n||d),h=Object(r.c)(!d&&b.a.onlyRow,j),P=Object(r.c)(T&&b.a.step1Logo),N=Object(r.c)(T&&b.a.hasLogo);return Object(O.jsxs)(u.a,{children:[T&&Object(O.jsx)("div",{className:P,children:Object(O.jsx)(i.a,{alt:"logo",uuid:"logo150Login"})}),Object(O.jsx)(r.a,Object(a.a)(Object(a.a)({name:m,tag:"article",type:E},_),{},{children:Object(O.jsxs)("article",{className:N,children:[p&&Object(O.jsxs)("header",{className:h,children:[n&&Object(O.jsx)(c.a,{icon:"left",kind:"icon",label:{uuid:"spa.a11y.buttons.back"},size:"medium",variant:"text",onClick:n}),d&&Object(O.jsx)(s.b,{tag:"h5",uuid:d})]}),l]})}))]})}j.defaultProps=m},491:function(e,t,n){e.exports={NAME_EXTERNAL_CONTAINER:"ContainerExternal",TYPE_EXTERNAL_CONTAINER:"Container"}},492:function(e,t,n){e.exports={NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_LINK:"Link",TYPE_LINK:"Element",NAME_IMAGE:"Image",TYPE_IMAGE:"Element",NAME_XS:"xs",NAME_SM:"sm",NAME_MD:"md",NAME_LG:"lg",NAME_EXTERNAL_CONTAINER:"ContainerExternal",TYPE_EXTERNAL_CONTAINER:"Container",hasLogo:"_rules_hasLogo__AxHGK",onlyRow:"_rules_onlyRow__1im8h",step1Logo:"_rules_step1Logo__3LNq5"}},493:function(e,t,n){e.exports={NAME_FORM:"Form",TYPE_FORM:"Element"}},494:function(e,t,n){"use strict";n.d(t,"a",(function(){return j}));var a=n(2),o=n(19),r=n(16),i=n(11),c=n(50),s=n(41),u=n(488),d=n(498),l=n.n(d),m=n(10),E=["id","name","methods","defaultValue","pattern","withSuggestions","onChange","onBlur"],b=l.a.NAME_INPUT_FIELD,O=l.a.TYPE_INPUT_FIELD,f=i.b.memo((function(e){var t,n=i.b.useState(!1),u=Object(r.a)(n,2),d=u[0],l=u[1],f=e.id,j=e.name,T=e.methods,_=e.defaultValue,p=e.pattern,h=e.withSuggestions,P=void 0===h||h,N=e.onChange,R=e.onBlur,M=Object(o.a)(e,E),A=T.register,g=T.formState,x=T.setValue,v=T.clearErrors,S=g.errors,C="".concat(j),I=S[j];return i.b.useEffect((function(){_&&x(C,_),_||x(C,void 0),P&&l(!0)}),[_,C,x,P,l]),Object(m.jsx)(s.a,{name:b,type:O,children:Object(m.jsx)(c.TextField,Object(a.a)(Object(a.a)(Object(a.a)(Object(a.a)(Object(a.a)({id:f||j},_&&{defaultValue:_}),I&&{error:null===(t=I.message)||void 0===t?void 0:t.toString()}),A(C,{onChange:function(e){N&&N(e);v([C])},onBlur:R})),M),{},{autoComplete:P?"on":"off",pattern:p,onKeyDown:function(e){e.target.value||d||l(!0)}}))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function j(e){var t=u.a.useContext();return Object(m.jsx)(f,Object(a.a)({methods:t},e))}j.displayName=b},498:function(e,t,n){e.exports={NAME_INPUT_FIELD:"InputField",TYPE_INPUT_FIELD:"Element"}},503:function(e,t,n){"use strict";n.d(t,"a",(function(){return T}));var a=n(272),o=n(2),r=n(16),i=n(19),c=n(11),s=n(50),u=n(41),d=n(488),l=n(516),m=n.n(l),E=n(10),b=["id","name","methods","options","defaultOption","onSelectOption"],O=m.a.NAME_INPUT_SELECT,f=m.a.TYPE_INPUT_SELECT,j=c.b.memo((function(e){var t,n=e.id,a=e.name,d=e.methods,l=e.options,m=e.defaultOption,j=e.onSelectOption,T=Object(i.a)(e,b),_=d.register,p=d.formState,h=d.setValue,P=d.watch,N=p.errors,R="".concat(a),M=c.b.useState(m),A=Object(r.a)(M,2),g=A[0],x=A[1];P(R);var v=c.b.useRef(null),S=N[a];return c.b.useEffect((function(){null!==m&&void 0!==m&&m.value&&h(R,null===m||void 0===m?void 0:m.value,{shouldValidate:!0})}),[null===m||void 0===m?void 0:m.value,R,h]),c.b.useEffect((function(){v.current&&v.current.blur()}),[S]),c.b.useEffect((function(){g||x(m)}),[m,g]),Object(E.jsx)(u.a,{name:O,type:f,children:Object(E.jsx)(s.SelectField,Object(o.a)(Object(o.a)(Object(o.a)({defaultOption:g,id:n||a,options:l},_(R)),S&&{error:null===(t=S.message)||void 0===t?void 0:t.toString()}),{},{ref:v,onSelectOption:function(e){h(R,e.value,{shouldValidate:!0}),j&&j(e)}},T))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function T(e){var t=d.a.useContext(),n=e,r=Object.assign({},(Object(a.a)(n),n));return Object(E.jsx)(j,Object(o.a)({methods:t},r))}},506:function(e,t,n){"use strict";n.d(t,"a",(function(){return j}));var a=n(2),o=n(19),r=n(11),i=n(50),c=n(41),s=n(488),u=n(509),d=n.n(u),l=n(10),m=["id","name","children","methods","value","onChange"],E=d.a.NAME_RADIO_GROUP,b=d.a.TYPE_RADIO_GROUP,O={id:E},f=r.b.memo((function(e){var t=e.id,n=e.name,s=e.children,u=e.methods,d=e.value,O=e.onChange,f=Object(o.a)(e,m),j=u.formState,T=u.setValue,_=j.errors[n];return r.b.useEffect((function(){d&&T(n,d,{shouldValidate:!0})}),[d,n,T]),Object(l.jsx)(c.a,{name:E,type:b,children:Object(l.jsx)(i.RadioGroup,Object(a.a)(Object(a.a)(Object(a.a)({id:t,name:n,value:d,onChange:function(e){T(n,e.target.value),O&&O(e)}},_&&{error:String(_.message)}),f),{},{children:s}))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function j(e){var t=s.a.useContext();return Object(l.jsx)(f,Object(a.a)({methods:t},e))}j.defaultProps=O},507:function(e,t,n){"use strict";n.d(t,"a",(function(){return j}));var a=n(2),o=n(19),r=n(11),i=n(50),c=n(41),s=n(488),u=n(510),d=n.n(u),l=(n(511),n(10)),m=["id","name","methods","onChange"],E=d.a.NAME_INPUT_RADIO,b=d.a.TYPE_INPUT_RADIO,O={id:E},f=r.b.memo((function(e){var t=e.id,n=e.name,r=e.methods,s=e.onChange,u=Object(o.a)(e,m),d=r.register,O=r.formState,f=r.clearErrors,j=O.errors,T="".concat(n),_=j[n];return Object(l.jsx)(c.a,{name:E,type:b,children:Object(l.jsx)(i.Radio,Object(a.a)(Object(a.a)(Object(a.a)({id:t},_&&{error:String(_.message)}),d(T)),{},{name:n,onChange:function(e){s&&s(e),f([T])}},u))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function j(e){var t=s.a.useContext();return Object(l.jsx)(f,Object(a.a)({methods:t},e))}j.defaultProps=O},509:function(e,t,n){e.exports={NAME_RADIO_GROUP:"RadioGroup",TYPE_RADIO_GROUP:"Element"}},510:function(e,t,n){e.exports={NAME_INPUT_RADIO:"InputRadio",TYPE_INPUT_RADIO:"Element"}},511:function(e,t,n){e.exports={NAME_INPUT_RADIO:"InputRadio",TYPE_INPUT_RADIO:"Element",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider"}},516:function(e,t,n){e.exports={NAME_INPUT_SELECT:"InputSelect",TYPE_INPUT_SELECT:"Element"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=125.f5a4b3fc.chunk.js.map