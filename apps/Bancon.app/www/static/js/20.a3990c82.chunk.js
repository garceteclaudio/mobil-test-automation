(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[20],{499:function(e,t,a){"use strict";a.d(t,"a",(function(){return b}));var n=a(0),r=a(5);function i(e){var t=e.filename,a=e.path,n=e.flags;return new Promise((function(e,r){var i;function s(e){r(e)}(i=window.cordova.file[a],new Promise((function(e,t){window.resolveLocalFileSystemURL(i,(function(t){e(t)}),(function(e){t(e)}))}))).then((function(a){var r=a;r.getFile(t,n,(function(t){var a=new FileReader;t.createWriter((function(n){e({fileEntry:t,dirEntry:r,fileReader:a,fileWriter:n,fileWrite:function(e){return new Promise((function(t,a){n.onwriteend=function(){return t(n)},n.onerror=function(e){return a(e)},n.write(e)}))},fileRemove:function(){return new Promise((function(e,a){t.remove((function(){return e(!0)}),(function(e){return a(e)}))}))}})}),s)}),s)}))}))}var s=a(36),c=a(26),o=a(28);function u(){return l.apply(this,arguments)}function l(){return(l=Object(r.a)(Object(n.a)().mark((function e(){var t;return Object(n.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(c.c)();case 2:if(e.sent&&cordova.plugins){e.next=5;break}throw c.a.CORDOVA_UNAVAILABLE;case 5:if(t=cordova.plugins.fileOpener2){e.next=8;break}throw c.a.PLUGIN_UNAVAILABLE;case 8:return e.abrupt("return",t);case 9:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function d(e){return p.apply(this,arguments)}function p(){return p=Object(r.a)(Object(n.a)().mark((function e(t){var a,r,i,s,l;return Object(n.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a=t.contentType,r=t.fileName,i=t.withDialog,e.next=3,Object(c.c)();case 3:if(e.sent){e.next=6;break}throw c.a.CORDOVA_UNAVAILABLE;case 6:return e.next=8,u();case 8:return s=e.sent,l=i?s.open:s.showOpenWithDialog,e.abrupt("return",new Promise((function(e,t){try{l(r,a,{success:function(){e({code:o.a.SUCCESS,value:!0})},error:function(e){function t(t){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}((function(e){t("boolean"===typeof e?new o.b(o.a.ERROR,s.open.name,o.c):new o.b(o.a.ERROR,s.open.name,e.message))}))})}catch(n){t(new o.b(o.a.ERROR_UNKNOWN,s.open.name,o.c))}})));case 11:case"end":return e.stop()}}),e)}))),p.apply(this,arguments)}function b(){var e=Object(s.i)(),t=e.isDesktop,a=e.isUnknown,c=e.platform;function o(e){var t=e.split(".").pop();return"png"===t||"jpg"===t||"gif"===t||"bmp"===t?"image/".concat(t):"pdf"===t?"application/".concat(t):"doc"===t||"docx"===t?"application/msword":"ppt"===t||"pptx"===t?"application/vnd.ms-powerpoint":"xls"===t||"xlsx"===t?"application/vnd.ms-excel":"xlsm"===t?"application/vnd.ms-excel.sheet.macroEnabled.12":"txt"===t?"text/plain":"zip"===t?"application/zip":void 0}return function(){var e=Object(r.a)(Object(n.a)().mark((function e(r,u){var l,p,b,f,j,m,O;return Object(n.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(l=c===s.b.CORDOVA_ANDROID,!(p=o(r))){e.next=19;break}if(!t&&!a){e.next=9;break}return(b=document.createElement("a")).href=window.URL.createObjectURL(u),b.download=r,b.click(),e.abrupt("return");case 9:return e.next=11,i({filename:r,path:l?"externalApplicationStorageDirectory":"dataDirectory",flags:{create:!0,exclusive:!1}});case 11:return f=e.sent,j=f.fileWrite,m=f.fileEntry,e.next=16,j(u);case 16:return O={contentType:p,fileName:m.nativeURL,withDialog:!0},e.next=19,d(O);case 19:case"end":return e.stop()}}),e)})));return function(t,a){return e.apply(this,arguments)}}()}},501:function(e,t,a){"use strict";a.d(t,"a",(function(){return i}));var n=512,r=0;function i(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:n,i=window.atob(e),s=[],c=r;c<i.length;c+=a){for(var o=i.slice(c,c+a),u=new Array(o.length),l=r;l<o.length;l++)u[l]=o.charCodeAt(l);s.push(new Uint8Array(u))}return new Blob(s,{type:t})}},508:function(e,t,a){"use strict";a.d(t,"a",(function(){return r}));var n=a(6);function r(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"pdf";if("string"===typeof e&&e.trim()){var a=e.trim().toLowerCase().replace(/[^a-zA-Z0-9]/g,n.Nb);return"".concat(a,".").concat(t)}var r=new Date,i=r.getMonth()+n.fb,s=(i<n.Fb?n.Ub:n.D)+i,c=r.getDate(),o=(c<n.Fb?n.Ub:n.D)+c;return"".concat(r.getFullYear(),"_").concat(s,"_").concat(o,".").concat(t)}},569:function(e,t,a){"use strict";a.d(t,"a",(function(){return x}));var n=a(2),r=(a(11),a(41)),i=a(36),s=a(50),c=a(83),o=a(100),u=a(6),l=a(38),d=a(82),p=a(504),b=a(581),f=a.n(b),j=a(587),m=a.n(j),O=a(10),_=m.a.NAME_TICKET,T=m.a.TYPE_TICKET,v={cancelButtonText:u.D,statusCustomMessage:u.D,isDownloadable:!1,isShareable:!1},h="spa.transaction.ticket";function x(e){var t=e,a=t.transactionDate,u=t.transactionStatus,b=t.statusCustomMessage,j=t.finishButtonText,m=t.cancelButtonText,v=t.children,x=t.className,E=t.isDownloadable,g=t.isShareable,w=t.title,N=t.subtitle,A=t.handleCancel,D=t.handleFinish,M=t.handleDownload,P=t.handleShare,R=Object(i.i)().isDesktop,k=Object(l.c)().textGet,U=E||g,y=function(){switch(u){case c.e.STATUS_AUTHORIZED:return{variant:"success",title:"".concat(h,".status.authorized")};case c.e.STATUS_FINISHED:return{variant:"success",title:"".concat(h,".status.finished")};case c.e.STATUS_IMPUTED:return{variant:"success",title:"".concat(h,".status.imputed")};case c.e.STATUS_PENDING_SIGNATURE:return{variant:"info",title:"".concat(h,".status.pending.signature")};case c.e.STATUS_PENDING:return{variant:"info",title:"".concat(h,".status.pending")};default:return{variant:"error",title:"".concat(h,".status.error")}}}(),S=k({uuid:b||y.title,fallback:b||y.title});return Object(O.jsx)(r.a,{className:x,name:_,tag:"section",type:T,children:Object(O.jsxs)(s.Card,{className:f.a.wrapperTicket,children:[Object(O.jsxs)("header",{children:[Object(O.jsx)(s.Tag,{className:f.a.status,variant:y.variant,children:S}),a&&Object(O.jsx)(p.a,{className:f.a.date,date:a,formatParams:{format:o.a.FULL}}),Object(O.jsxs)("div",{className:f.a.titles,children:[Object(O.jsx)(l.b,{className:f.a.label,fallback:w.label,tag:"h4",uuid:w.label}),Object(O.jsx)(l.b,{className:f.a.value,tag:"span",children:w.dataValue})]}),N&&Object(O.jsxs)("div",{className:f.a.subtitles,children:[Object(O.jsx)(l.b,{className:f.a.label,fallback:N.label,tag:"h6",uuid:N.label}),Object(O.jsx)(l.b,{className:f.a.value,tag:"h6",children:N.dataValue})]})]}),Object(O.jsx)(s.Separator,{}),Object(O.jsxs)("section",{children:[v,U&&Object(O.jsxs)("div",{className:f.a.actions,children:[g&&!R&&Object(O.jsxs)(d.a,{kind:"plain",label:{uuid:"spa.a11y.buttons.share"},type:"button",variant:"text",onClick:P,children:[Object(O.jsx)(s.Icon,{name:"share",size:"small"}),Object(O.jsx)(l.b,{tag:"span",uuid:"spa.a11y.buttons.share"})]}),E&&R&&Object(O.jsxs)(d.a,{kind:"plain",label:{uuid:"spa.a11y.buttons.download"},type:"button",variant:"text",onClick:M,children:[Object(O.jsx)(s.Icon,{name:"download",size:"small"}),Object(O.jsx)(l.b,{tag:"span",uuid:"spa.a11y.buttons.download"})]})]})]}),Object(O.jsxs)("footer",{children:[Object(O.jsx)(d.a,Object(n.a)(Object(n.a)({},R&&{inline:!0}),{},{label:{uuid:j,fallback:j},onClick:D})),m&&Object(O.jsx)(d.a,Object(n.a)(Object(n.a)({},R&&{inline:!0}),{},{label:{uuid:m,fallback:m},variant:"text",onClick:A})),Object(O.jsx)(l.b,{className:f.a.message,tag:"span",uuid:"".concat(h,".footer.message")})]})]})})}x.defaultProps=v},581:function(e,t,a){e.exports={NAME_TICKET:"Ticket",TYPE_TICKET:"Section",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_AMOUNT_FORMATTER:"AmountFormatter",TYPE_AMOUNT_FORMATTER:"Element",NAME_XS:"xs",NAME_SM:"sm",NAME_MD:"md",NAME_LG:"lg",wrapperTicket:"_rules_wrapperTicket__3BmjV",titles:"_rules_titles__2byR7",label:"_rules_label__3_S5E",value:"_rules_value__2g2mZ",subtitles:"_rules_subtitles__2PJAr",status:"_rules_status__19e7z",date:"_rules_date__27-j3",actions:"_rules_actions__240vJ",message:"_rules_message__7JekD",signatureInfo:"_rules_signatureInfo__2WEDU",signatureTitle:"_rules_signatureTitle__wqjUV"}},587:function(e,t,a){e.exports={NAME_TICKET:"Ticket",TYPE_TICKET:"Section"}},615:function(e,t,a){"use strict";a.d(t,"a",(function(){return u}));a(11);var n=a(41),r=a(100),i=a(38),s=a(581),c=a.n(s),o=a(10);function u(e){var t=e.transaction,a=e.className,s=Object(i.c)().textGet;if(!t||!t.signatures)return null;var u=t.signatureGroupUsed,l=t.signatures,d=t.idUserCreator,p=l.sort((function(e,t){var a=new Date(e.creationDateTime);return new Date(t.creationDateTime).getTime()-a.getTime()})),b=l.find((function(e){return e.idUser===d})),f=Object(n.c)(c.a.signatureInfo,a);return Object(o.jsxs)("div",{className:f,children:[Object(o.jsx)(i.b,{className:c.a.signatureTitle,uuid:"spa.suppliers.voidPayment.ticket.signatures"}),u&&Object(o.jsxs)("li",{children:[Object(o.jsx)(i.b,{uuid:"spa.suppliers.voidPayment.ticket.signatures.schema"}),Object(o.jsx)(i.b,{tag:"span",children:u})]}),Object(o.jsxs)("li",{children:[Object(o.jsx)(i.b,{uuid:"spa.suppliers.voidPayment.ticket.signatures.createdBy"}),Object(o.jsx)(i.b,{tag:"span",children:b&&j(null===b||void 0===b?void 0:b.userFullName,null===b||void 0===b?void 0:b.signatureLevel,null===t||void 0===t?void 0:t.creationDateTime)})]}),Object(o.jsxs)("li",{children:[Object(o.jsx)(i.b,{uuid:"spa.suppliers.voidPayment.ticket.signatures.signed"}),Object(o.jsx)("div",{children:p.map((function(e){return Object(o.jsx)(i.b,{tag:"span",children:j(e.userFullName,e.signatureLevel,e.creationDateTime)},e.userFullName)}))})]})]});function j(e,t,a){var n=s({uuid:"spa.suppliers.voidPayment.ticket.signatures.signatureLevel",replace:t});return"".concat(e," (").concat(n,") - ").concat(Object(r.d)(a,{format:r.a.MEDIUM}))}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=20.a3990c82.chunk.js.map