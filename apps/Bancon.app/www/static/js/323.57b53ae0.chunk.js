(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[323],{107:function(e,t,r){"use strict";r.d(t,"a",(function(){return k})),r.d(t,"b",(function(){return A}));var n="persist:",o="persist/FLUSH",i="persist/REHYDRATE",u="persist/PAUSE",s="persist/PERSIST",c="persist/PURGE",a="persist/REGISTER",f=-1;function p(e){return p="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},p(e)}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function y(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function b(e,t,r,n){n.debug;var o=function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(r,!0).forEach((function(t){y(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(r).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}({},r);return e&&"object"===p(e)&&Object.keys(e).forEach((function(n){"_persist"!==n&&t[n]===r[n]&&(o[n]=e[n])})),o}function d(e){var t,r=e.blacklist||null,o=e.whitelist||null,i=e.transforms||[],u=e.throttle||0,s="".concat(void 0!==e.keyPrefix?e.keyPrefix:n).concat(e.key),c=e.storage;t=!1===e.serialize?function(e){return e}:"function"===typeof e.serialize?e.serialize:h;var a=e.writeFailHandler||null,f={},p={},l=[],y=null,b=null;function d(){if(0===l.length)return y&&clearInterval(y),void(y=null);var e=l.shift(),r=i.reduce((function(t,r){return r.in(t,e,f)}),f[e]);if(void 0!==r)try{p[e]=t(r)}catch(n){console.error("redux-persist/createPersistoid: error serializing state",n)}else delete p[e];0===l.length&&(Object.keys(p).forEach((function(e){void 0===f[e]&&delete p[e]})),b=c.setItem(s,t(p)).catch(O))}function v(e){return(!o||-1!==o.indexOf(e)||"_persist"===e)&&(!r||-1===r.indexOf(e))}function O(e){a&&a(e)}return{update:function(e){Object.keys(e).forEach((function(t){v(t)&&f[t]!==e[t]&&-1===l.indexOf(t)&&l.push(t)})),Object.keys(f).forEach((function(t){void 0===e[t]&&v(t)&&-1===l.indexOf(t)&&void 0!==f[t]&&l.push(t)})),null===y&&(y=setInterval(d,u)),f=e},flush:function(){for(;0!==l.length;)d();return b||Promise.resolve()}}}function h(e){return JSON.stringify(e)}function v(e){var t,r=e.transforms||[],o="".concat(void 0!==e.keyPrefix?e.keyPrefix:n).concat(e.key),i=e.storage;e.debug;return t=!1===e.deserialize?function(e){return e}:"function"===typeof e.deserialize?e.deserialize:O,i.getItem(o).then((function(e){if(e)try{var n={},o=t(e);return Object.keys(o).forEach((function(e){n[e]=r.reduceRight((function(t,r){return r.out(t,e,o)}),t(o[e]))})),n}catch(i){throw i}}))}function O(e){return JSON.parse(e)}function g(e){0}function m(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function P(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?m(r,!0).forEach((function(t){j(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):m(r).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function j(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function w(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var S=5e3;function k(e,t){var r=void 0!==e.version?e.version:f,a=(e.debug,void 0===e.stateReconciler?b:e.stateReconciler),p=e.getStoredState||v,l=void 0!==e.timeout?e.timeout:S,y=null,h=!1,O=!0,m=function(e){return e._persist.rehydrated&&y&&!O&&y.update(e),e};return function(f,b){var v=f||{},j=v._persist,S=w(v,["_persist"]);if(b.type===s){var k=!1,E=function(t,r){k||(b.rehydrate(e.key,t,r),k=!0)};if(l&&setTimeout((function(){!k&&E(void 0,new Error('redux-persist: persist timed out for persist key "'.concat(e.key,'"')))}),l),O=!1,y||(y=d(e)),j)return P({},t(S,b),{_persist:j});if("function"!==typeof b.rehydrate||"function"!==typeof b.register)throw new Error("redux-persist: either rehydrate or register is not a function on the PERSIST action. This can happen if the action is being replayed. This is an unexplored use case, please open an issue and we will figure out a resolution.");return b.register(e.key),p(e).then((function(t){(e.migrate||function(e,t){return Promise.resolve(e)})(t,r).then((function(e){E(e)}),(function(e){E(void 0,e)}))}),(function(e){E(void 0,e)})),P({},t(S,b),{_persist:{version:r,rehydrated:!1}})}if(b.type===c)return h=!0,b.result(function(e){var t=e.storage,r="".concat(void 0!==e.keyPrefix?e.keyPrefix:n).concat(e.key);return t.removeItem(r,g)}(e)),P({},t(S,b),{_persist:j});if(b.type===o)return b.result(y&&y.flush()),P({},t(S,b),{_persist:j});if(b.type===u)O=!0;else if(b.type===i){if(h)return P({},S,{_persist:P({},j,{rehydrated:!0})});if(b.key===e.key){var _=t(S,b),x=b.payload,D=P({},!1!==a&&void 0!==x?a(x,f,_,e):_,{_persist:P({},j,{rehydrated:!0})});return m(D)}}if(!j)return t(f,b);var R=t(S,b);return R===S?f:m(P({},R,{_persist:j}))}}var E=r(70);function _(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function x(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function D(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?x(r,!0).forEach((function(t){R(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):x(r).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function R(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var I={registry:[],bootstrapped:!1},T=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:I,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case a:return D({},e,{registry:[].concat(_(e.registry),[t.key])});case i:var r=e.registry.indexOf(t.key),n=_(e.registry);return n.splice(r,1),D({},e,{registry:n,bootstrapped:0===n.length});default:return e}};function A(e,t,r){var n=r||!1,f=Object(E.d)(T,I,t&&t.enhancer?t.enhancer:void 0),p=function(e){f.dispatch({type:a,key:e})},l=function(t,r,o){var u={type:i,payload:r,err:o,key:t};e.dispatch(u),f.dispatch(u),n&&y.getState().bootstrapped&&(n(),n=!1)},y=D({},f,{purge:function(){var t=[];return e.dispatch({type:c,result:function(e){t.push(e)}}),Promise.all(t)},flush:function(){var t=[];return e.dispatch({type:o,result:function(e){t.push(e)}}),Promise.all(t)},pause:function(){e.dispatch({type:u})},persist:function(){e.dispatch({type:s,register:p,rehydrate:l})}});return t&&t.manualPersist||y.persist(),y}},291:function(e,t,r){"use strict";r.d(t,"a",(function(){return f}));var n=r(7);function o(e){return o="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function u(e){return u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},u(e)}function s(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function c(e,t){return c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},c(e,t)}function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var f=function(e){function t(){var e,r,n,i;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var c=arguments.length,f=new Array(c),p=0;p<c;p++)f[p]=arguments[p];return n=this,i=(e=u(t)).call.apply(e,[this].concat(f)),r=!i||"object"!==o(i)&&"function"!==typeof i?s(n):i,a(s(r),"state",{bootstrapped:!1}),a(s(r),"_unsubscribe",void 0),a(s(r),"handlePersistorState",(function(){r.props.persistor.getState().bootstrapped&&(r.props.onBeforeLift?Promise.resolve(r.props.onBeforeLift()).finally((function(){return r.setState({bootstrapped:!0})})):r.setState({bootstrapped:!0}),r._unsubscribe&&r._unsubscribe())})),r}var r,n,f;return function(e,t){if("function"!==typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(t,e),r=t,(n=[{key:"componentDidMount",value:function(){this._unsubscribe=this.props.persistor.subscribe(this.handlePersistorState),this.handlePersistorState()}},{key:"componentWillUnmount",value:function(){this._unsubscribe&&this._unsubscribe()}},{key:"render",value:function(){return"function"===typeof this.props.children?this.props.children(this.state.bootstrapped):this.state.bootstrapped?this.props.children:this.props.loading}}])&&i(r.prototype,n),f&&i(r,f),t}(n.PureComponent);a(f,"defaultProps",{children:null,loading:null})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=323.57b53ae0.chunk.js.map