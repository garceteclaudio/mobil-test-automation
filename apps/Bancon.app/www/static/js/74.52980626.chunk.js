(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[74],{321:function(e,t,a){"use strict";a.r(t),a.d(t,"DEF_EDIT_EXPIRATION_ACTION",(function(){return m})),a.d(t,"EditExpirationAction",(function(){return x}));var n=a(11),i=a(69),c=a(148),r=a(8),o=a(50),s=a(490),l=a(82),u=a(38),d=a(270),b=a(74),p=a(99),j=a(436),f=a.n(j),O=a(10),m={};function x(e){var t=e,a=t.showDialog,j=t.handleDialog,m=t.handleConfirmation,x=Object(u.c)().textGet,E=Object(p.a)().getValueConfig,h=Object(r.c)(i.c.isMobile),g=Object(r.c)(c.c.fetchingRemoveAutomaticRenewal),v="confirm-expiration-action-button",A=x({uuid:"spa.deposits.edit.expiration.action.description",replace:Object(b.a)(E("backend.spa.deposits.time.action.expirate"))});return h?Object(O.jsxs)(o.BottomSheet,{className:f.a.editModal,initialFocusElementId:v,isVisible:a,onClose:j,children:[Object(O.jsx)(u.b,{className:f.a.editBottomSheetTitle,uuid:"spa.deposits.edit.expiration.action.title"}),g?Object(O.jsx)(d.a,{a11yMsg:x({uuid:"spa.a11y.loading"})}):Object(O.jsxs)(n.b.Fragment,{children:[Object(O.jsx)(u.b,{children:A}),Object(O.jsxs)("div",{className:f.a.editBottomSheetButton,children:[Object(O.jsx)(l.a,{inline:!0,label:{uuid:"spa.form.cancel"},variant:"text",onClick:j}),Object(O.jsx)(l.a,{inline:!0,"data-focus-id":v,label:{uuid:"spa.form.confirm"}})]})]})]}):Object(O.jsx)(s.a,{className:f.a.editModal,hasCloseIcon:!1,initialFocusElementId:v,open:a,title:"spa.deposits.edit.expiration.action.title",children:Object(O.jsx)(s.a.Body,{children:g?Object(O.jsx)(d.a,{a11yMsg:x({uuid:"spa.a11y.loading"})}):Object(O.jsxs)(n.b.Fragment,{children:[Object(O.jsx)(o.Separator,{}),Object(O.jsx)(u.b,{className:f.a.description,children:A}),Object(O.jsx)(o.Separator,{}),Object(O.jsxs)("div",{className:f.a.editModalButtons,children:[Object(O.jsx)(l.a,{inline:!0,label:{uuid:"spa.form.cancel"},variant:"text",onClick:j}),Object(O.jsx)(l.a,{inline:!0,"data-focus-id":v,label:{uuid:"spa.form.confirm"},onClick:m})]})]})})})}x.defaultProps=m},322:function(e,t,a){"use strict";a.r(t),a.d(t,"DEF_EDIT_TAG",(function(){return E})),a.d(t,"EditTag",(function(){return h}));var n=a(2),i=(a(11),a(41)),c=a(69),r=a(148),o=a(8),s=a(50),l=a(490),u=a(82),d=a(38),b=a(494),p=a(488),j=a(270),f=a(6),O=a(436),m=a.n(O),x=a(10),E={};function h(e){var t=e,a=t.showEditor,O=t.handleEditor,E=Object(d.c)().textGet,h=p.a.useContext(),g=h.clearErrors,v=h.resetField,A=Object(o.c)(c.c.isDesktop),T=Object(o.c)(r.c.fetchingUpdateAlias),S="confirm-edit-tag-button",_=Object(i.c)(A&&m.a.inlineInput,m.a.editModal);return A?Object(x.jsxs)(l.a,{className:_,hasCloseIcon:!1,initialFocusElementId:S,open:a,title:"spa.deposits.edit.tag.title",onClose:N,children:[Object(x.jsx)(l.a.Body,{children:T?Object(x.jsx)(j.a,{a11yMsg:E({uuid:"spa.deposits.a11y.edit.alias.loading"})}):Object(x.jsx)(b.a,{label:E({uuid:"spa.deposits.edit.tag.alias.label"}),name:"alias",regexPattern:f.rb})}),Object(x.jsx)(l.a.Footer,{children:Object(x.jsxs)("div",{className:m.a.editModalButtons,children:[Object(x.jsx)(u.a,Object(n.a)(Object(n.a)({},T&&{disabled:!0}),{},{inline:!0,label:{uuid:"spa.form.cancel"},variant:"text",onClick:N})),Object(x.jsx)(u.a,Object(n.a)(Object(n.a)({},T&&{disabled:!0}),{},{inline:!0,"data-focus-id":S,label:{uuid:"spa.form.confirm"},type:"submit"}))]})})]}):Object(x.jsxs)(s.BottomSheet,{className:m.a.editModal,initialFocusElementId:S,isVisible:a,onClose:N,children:[Object(x.jsx)(d.b,{className:m.a.editBottomSheetTitle,uuid:"spa.deposits.edit.tag.title"}),T?Object(x.jsx)(j.a,{a11yMsg:E({uuid:"spa.deposits.a11y.edit.alias.loading"})}):Object(x.jsx)(b.a,{label:E({uuid:"spa.deposits.edit.tag.alias.label"}),name:"alias",regexPattern:f.rb}),Object(x.jsx)("div",{className:m.a.editBottomSheetButton,children:Object(x.jsx)(u.a,Object(n.a)(Object(n.a)({},T&&{disabled:!0}),{},{inline:!0,"data-focus-id":S,label:{uuid:"spa.form.confirm"},type:"submit"}))})]});function N(){g(),v("alias"),O()}}h.defaultProps=E},323:function(e,t,a){"use strict";a.r(t),a.d(t,"DEF_EDIT_PRE_CANCEL",(function(){return O})),a.d(t,"PreCancel",(function(){return m}));var n=a(2),i=a(11),c=a(69),r=a(8),o=a(50),s=a(490),l=a(82),u=a(38),d=a(148),b=a(270),p=a(436),j=a.n(p),f=a(10),O={};function m(e){var t=e,a=t.showDialog,p=t.handleDialog,O=t.handlePreCancel,m=t.isPreCancellationAvailable,x=Object(u.c)().textGet,E=Object(r.c)(c.c.isMobile),h=Object(r.c)(d.c.fetchingPrecancelUVAHolding),g="confirm-precancel-button";return E?Object(f.jsxs)(o.BottomSheet,{className:j.a.editModal,initialFocusElementId:g,isVisible:a,onClose:p,children:[Object(f.jsx)(u.b,{className:j.a.editBottomSheetTitle,uuid:"spa.deposits.precancel.title"}),h?Object(f.jsx)(b.a,{a11yMsg:x({uuid:"spa.a11y.loading"})}):Object(f.jsxs)(i.b.Fragment,{children:[" ",Object(f.jsx)(u.b,{className:j.a.description,uuid:m?"spa.deposits.precancel.description":"spa.deposits.precancel.unavailable"}),Object(f.jsx)("div",{className:j.a.editBottomSheetButton,children:v()})]})]}):Object(f.jsx)(s.a,{className:j.a.editModal,hasCloseIcon:!1,initialFocusElementId:g,open:a,title:"spa.deposits.precancel.title",children:Object(f.jsx)(s.a.Body,{children:h?Object(f.jsx)(b.a,{a11yMsg:x({uuid:"spa.a11y.loading"})}):Object(f.jsxs)(i.b.Fragment,{children:[Object(f.jsx)(o.Separator,{}),Object(f.jsx)(u.b,{className:j.a.description,uuid:m?"spa.deposits.precancel.description":"spa.deposits.precancel.unavailable"}),Object(f.jsx)(o.Separator,{}),Object(f.jsx)("div",{className:j.a.editModalButtons,children:v()})]})})});function v(){return m?Object(f.jsxs)(i.b.Fragment,{children:[Object(f.jsx)(l.a,{inline:!0,label:{uuid:"spa.global.no"},variant:"text",onClick:p}),Object(f.jsx)(l.a,{inline:!0,"data-focus-id":g,label:{uuid:"spa.global.yes"},onClick:O})]}):Object(f.jsx)(l.a,Object(n.a)(Object(n.a)({inline:!0,label:{uuid:"spa.global.understood"}},E&&{variant:"outlined"}),{},{onClick:p}))}}m.defaultProps=O},494:function(e,t,a){"use strict";a.d(t,"a",(function(){return m}));var n=a(2),i=a(19),c=a(16),r=a(11),o=a(50),s=a(41),l=a(488),u=a(498),d=a.n(u),b=a(10),p=["id","name","methods","defaultValue","pattern","withSuggestions","onChange","onBlur"],j=d.a.NAME_INPUT_FIELD,f=d.a.TYPE_INPUT_FIELD,O=r.b.memo((function(e){var t,a=r.b.useState(!1),l=Object(c.a)(a,2),u=l[0],d=l[1],O=e.id,m=e.name,x=e.methods,E=e.defaultValue,h=e.pattern,g=e.withSuggestions,v=void 0===g||g,A=e.onChange,T=e.onBlur,S=Object(i.a)(e,p),_=x.register,N=x.formState,C=x.setValue,y=x.clearErrors,w=N.errors,P="".concat(m),M=w[m];return r.b.useEffect((function(){E&&C(P,E),E||C(P,void 0),v&&d(!0)}),[E,P,C,v,d]),Object(b.jsx)(s.a,{name:j,type:f,children:Object(b.jsx)(o.TextField,Object(n.a)(Object(n.a)(Object(n.a)(Object(n.a)(Object(n.a)({id:O||m},E&&{defaultValue:E}),M&&{error:null===(t=M.message)||void 0===t?void 0:t.toString()}),_(P,{onChange:function(e){A&&A(e);y([P])},onBlur:T})),S),{},{autoComplete:v?"on":"off",pattern:h,onKeyDown:function(e){e.target.value||u||d(!0)}}))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function m(e){var t=l.a.useContext();return Object(b.jsx)(O,Object(n.a)({methods:t},e))}m.displayName=j},498:function(e,t,a){e.exports={NAME_INPUT_FIELD:"InputField",TYPE_INPUT_FIELD:"Element"}},499:function(e,t,a){"use strict";a.d(t,"a",(function(){return p}));var n=a(0),i=a(5);function c(e){var t=e.filename,a=e.path,n=e.flags;return new Promise((function(e,i){var c;function r(e){i(e)}(c=window.cordova.file[a],new Promise((function(e,t){window.resolveLocalFileSystemURL(c,(function(t){e(t)}),(function(e){t(e)}))}))).then((function(a){var i=a;i.getFile(t,n,(function(t){var a=new FileReader;t.createWriter((function(n){e({fileEntry:t,dirEntry:i,fileReader:a,fileWriter:n,fileWrite:function(e){return new Promise((function(t,a){n.onwriteend=function(){return t(n)},n.onerror=function(e){return a(e)},n.write(e)}))},fileRemove:function(){return new Promise((function(e,a){t.remove((function(){return e(!0)}),(function(e){return a(e)}))}))}})}),r)}),r)}))}))}var r=a(36),o=a(26),s=a(28);function l(){return u.apply(this,arguments)}function u(){return(u=Object(i.a)(Object(n.a)().mark((function e(){var t;return Object(n.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(o.c)();case 2:if(e.sent&&cordova.plugins){e.next=5;break}throw o.a.CORDOVA_UNAVAILABLE;case 5:if(t=cordova.plugins.fileOpener2){e.next=8;break}throw o.a.PLUGIN_UNAVAILABLE;case 8:return e.abrupt("return",t);case 9:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function d(e){return b.apply(this,arguments)}function b(){return b=Object(i.a)(Object(n.a)().mark((function e(t){var a,i,c,r,u;return Object(n.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a=t.contentType,i=t.fileName,c=t.withDialog,e.next=3,Object(o.c)();case 3:if(e.sent){e.next=6;break}throw o.a.CORDOVA_UNAVAILABLE;case 6:return e.next=8,l();case 8:return r=e.sent,u=c?r.open:r.showOpenWithDialog,e.abrupt("return",new Promise((function(e,t){try{u(i,a,{success:function(){e({code:s.a.SUCCESS,value:!0})},error:function(e){function t(t){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}((function(e){t("boolean"===typeof e?new s.b(s.a.ERROR,r.open.name,s.c):new s.b(s.a.ERROR,r.open.name,e.message))}))})}catch(n){t(new s.b(s.a.ERROR_UNKNOWN,r.open.name,s.c))}})));case 11:case"end":return e.stop()}}),e)}))),b.apply(this,arguments)}function p(){var e=Object(r.i)(),t=e.isDesktop,a=e.isUnknown,o=e.platform;function s(e){var t=e.split(".").pop();return"png"===t||"jpg"===t||"gif"===t||"bmp"===t?"image/".concat(t):"pdf"===t?"application/".concat(t):"doc"===t||"docx"===t?"application/msword":"ppt"===t||"pptx"===t?"application/vnd.ms-powerpoint":"xls"===t||"xlsx"===t?"application/vnd.ms-excel":"xlsm"===t?"application/vnd.ms-excel.sheet.macroEnabled.12":"txt"===t?"text/plain":"zip"===t?"application/zip":void 0}return function(){var e=Object(i.a)(Object(n.a)().mark((function e(i,l){var u,b,p,j,f,O,m;return Object(n.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(u=o===r.b.CORDOVA_ANDROID,!(b=s(i))){e.next=19;break}if(!t&&!a){e.next=9;break}return(p=document.createElement("a")).href=window.URL.createObjectURL(l),p.download=i,p.click(),e.abrupt("return");case 9:return e.next=11,c({filename:i,path:u?"externalApplicationStorageDirectory":"dataDirectory",flags:{create:!0,exclusive:!1}});case 11:return j=e.sent,f=j.fileWrite,O=j.fileEntry,e.next=16,f(l);case 16:return m={contentType:b,fileName:O.nativeURL,withDialog:!0},e.next=19,d(m);case 19:case"end":return e.stop()}}),e)})));return function(t,a){return e.apply(this,arguments)}}()}},501:function(e,t,a){"use strict";a.d(t,"a",(function(){return c}));var n=512,i=0;function c(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:n,c=window.atob(e),r=[],o=i;o<c.length;o+=a){for(var s=c.slice(o,o+a),l=new Array(s.length),u=i;u<s.length;u++)l[u]=s.charCodeAt(u);r.push(new Uint8Array(l))}return new Blob(r,{type:t})}},523:function(e,t,a){"use strict";a.d(t,"a",(function(){return x}));var n=a(2),i=a(16),c=a(19),r=a(11),o=a(41),s=a(6),l=a(38),u=a(525),d=a.n(u),b=a(526),p=a.n(b),j=a(10),f=["a11yMessage","className"],O=p.a.NAME_ACCESSIBLE_LOADER_STATUS,m=p.a.TYPE_ACCESSIBLE_LOADER_STATUS;function x(e){var t=e,a=t.a11yMessage,u=t.className,b=Object(c.a)(t,f),p=Object(o.c)(u,d.a.fetchedIndicator),x=r.b.useState(!1),E=Object(i.a)(x,2),h=E[0],g=E[1];return r.b.useEffect((function(){var e=setTimeout((function(){g(!0)}),s.y);return function(){return clearTimeout(e)}}),[]),h?null:Object(j.jsx)(o.a,Object(n.a)(Object(n.a)({},b),{},{className:p,name:O,type:m,children:Object(j.jsx)(l.b,{"aria-live":"polite",role:"status",tag:"span",uuid:a})}))}x.defaultProps={a11yMessage:"spa.a11y.loaded"}},525:function(e,t,a){e.exports={NAME_ACCESSIBLE_LOADER_STATUS:"AccessibleLoaderStatus",TYPE_ACCESSIBLE_LOADER_STATUS:"Element",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",fetchedIndicator:"_rules_fetchedIndicator__2_ji8"}},526:function(e,t,a){e.exports={NAME_ACCESSIBLE_LOADER_STATUS:"AccessibleLoaderStatus",TYPE_ACCESSIBLE_LOADER_STATUS:"Element"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=74.52980626.chunk.js.map