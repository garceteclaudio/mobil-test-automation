(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[58],{344:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return A}));var a=n(0),r=n(5),o=(n(11),n(39)),c=n(99),i=n(41),s=n(50),u=n(82),l=n(38),d=n(513),b=n(488),O=n(517),f=n(515),p=n(640),j=n(489),m=n(108),E=n(79),h=n(33),v=n(8),g=n(187),S=n(6),N=n(51),x=n(74),T=n(120),_=n(432),P=n.n(_),R=n(10);function A(){var e=Object(v.b)(),t=Object(l.c)().textGet,n=Object(m.h)().state.isBiometryAvailable,_=Object(c.a)().getValueConfig,C=Object(x.a)(_("core.auth.captcha.google.siteKey")),w=Object(x.a)(_("core.auth.captcha.enabled")),y=Object(x.a)(_("vu.fraud.check.fingerprint.enable")),M=Object(v.c)(h.e.securitySeal),I=Object(v.c)(h.e.username),k=Object(v.c)(h.e.fetching),F=Object(v.c)(h.e.error),L=Object(v.c)(h.e.warning),U=Object(v.c)(m.f.isBiometrySessionConfigured),B=Object(v.c)(h.e.showCaptcha),V=Object(N.sb)(N.gb),Y=Object(N.sb)(N.P),H=t({uuid:"spa.login.step2.password.input.label"}),D=t({uuid:"spa.login.step2.activateSession.label"}),G=t({uuid:"spa.generic.field.error.required"}),q=Object(m.i)(),K=o.e.object({password:Object(g.d)(o.e.string.required(),G),active:o.e.boolean.orUndefined()}),X=o.e.object({password:Object(g.d)(o.e.string.required(),G),active:o.e.boolean.orUndefined(),captcha:Object(g.d)(o.e.string.required(),G)}),z=w&&B,W=Object(i.c)(P.a.biometryAvailable,z&&P.a.captchaEnabled),J=Object(T.e)(S.G.PREFERENCES_BIOMETRY_FINGERPRINT),Q=Object(x.a)(_("backend.vu.fraud.api.fingerprint.url")),Z=Object(x.a)(_("backend.vu.fraud.api.fingerprint.timeout"));return Object(R.jsxs)(j.a,{"header-onBack":function(){e(h.a.cleanUser())},children:[Object(R.jsxs)("section",{children:[Object(R.jsxs)("div",{className:P.a.securitySeal,children:[Object(R.jsx)(s.Avatar,{alt:t({uuid:"login.step2.imageAlt"}),size:"large",src:M}),Object(R.jsxs)("div",{className:P.a.greeting,children:[Object(R.jsx)(s.Icon,{name:"wavingHandEmoji",size:"small"}),Object(R.jsx)(l.b,{tag:"span",uuid:"spa.login.step2.greeting.text"})]})]}),Object(R.jsxs)(b.a,{schema:w&&B?X:K,onSubmit:function(e){return $.apply(this,arguments)},children:[Object(R.jsx)(O.a,{autoFocus:!0,id:"password",label:H,name:"password",withSuggestions:!1}),Object(R.jsx)("div",{className:P.a.passwordRecovery,children:Object(R.jsx)(d.a,{to:Y,children:Object(R.jsx)(l.b,{tag:"span",uuid:"spa.login.step2.forgotPassword.text"})})}),Object(R.jsx)(p.a,{hasError:Boolean(F||L),isEnabled:z,name:"captcha",sitekey:C}),n&&!U&&J&&Object(R.jsx)("div",{className:W,children:Object(R.jsx)(f.a,{isDisabled:q,label:D,name:"active",onChange:function(t){var n=t.currentTarget;if(e(m.a.setBiometrySessionRequested(n.checked)),!n.checked)return;e(E.a.set({kind:"INFO",text:{uuid:"spa.security.biometric.text"},duration:S.z}))}})}),Object(R.jsx)(u.a,{flowId:A.displayName,label:{uuid:"spa.login.step2.getInto.button"},loading:k,type:"submit"})]})]}),Object(R.jsx)("footer",{children:Object(R.jsx)("div",{className:P.a.alignRecommendations,children:Object(R.jsx)(d.a,{to:V,children:Object(R.jsx)(l.b,{tag:"span",uuid:"spa.login.step2.footer.text"})})})})]});function $(){return($=Object(r.a)(Object(a.a)().mark((function t(n){var r,o,c;return Object(a.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return o=(r=n).password,c=r.captcha,t.next=3,e(h.b.secondStep({username:I,password:o,captcha:c,isVUEnabled:y,url:Q,timeout:Z}));case 3:case"end":return t.stop()}}),t)})))).apply(this,arguments)}}A.displayName="LoginStep2"},503:function(e,t,n){"use strict";n.d(t,"a",(function(){return E}));var a=n(272),r=n(2),o=n(16),c=n(19),i=n(11),s=n(50),u=n(41),l=n(488),d=n(516),b=n.n(d),O=n(10),f=["id","name","methods","options","defaultOption","onSelectOption"],p=b.a.NAME_INPUT_SELECT,j=b.a.TYPE_INPUT_SELECT,m=i.b.memo((function(e){var t,n=e.id,a=e.name,l=e.methods,d=e.options,b=e.defaultOption,m=e.onSelectOption,E=Object(c.a)(e,f),h=l.register,v=l.formState,g=l.setValue,S=l.watch,N=v.errors,x="".concat(a),T=i.b.useState(b),_=Object(o.a)(T,2),P=_[0],R=_[1];S(x);var A=i.b.useRef(null),C=N[a];return i.b.useEffect((function(){null!==b&&void 0!==b&&b.value&&g(x,null===b||void 0===b?void 0:b.value,{shouldValidate:!0})}),[null===b||void 0===b?void 0:b.value,x,g]),i.b.useEffect((function(){A.current&&A.current.blur()}),[C]),i.b.useEffect((function(){P||R(b)}),[b,P]),Object(O.jsx)(u.a,{name:p,type:j,children:Object(O.jsx)(s.SelectField,Object(r.a)(Object(r.a)(Object(r.a)({defaultOption:P,id:n||a,options:d},h(x)),C&&{error:null===(t=C.message)||void 0===t?void 0:t.toString()}),{},{ref:A,onSelectOption:function(e){g(x,e.value,{shouldValidate:!0}),m&&m(e)}},E))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function E(e){var t=l.a.useContext(),n=e,o=Object.assign({},(Object(a.a)(n),n));return Object(O.jsx)(m,Object(r.a)({methods:t},o))}},515:function(e,t,n){"use strict";n.d(t,"a",(function(){return m}));var a=n(2),r=n(16),o=n(19),c=n(11),i=n(50),s=n(41),u=n(488),l=n(520),d=n.n(l),b=n(10),O=["id","name","methods","onChange","isChecked"],f=d.a.NAME_INPUT_CHECKBOX,p=d.a.TYPE_INPUT_CHECKBOX,j=c.b.memo((function(e){var t,n=e.id,u=e.name,l=e.methods,d=e.onChange,j=e.isChecked,m=Object(o.a)(e,O),E=c.b.useState(j),h=Object(r.a)(E,2),v=h[0],g=h[1],S=l.register,N=l.formState,x=l.setValue,T=l.clearErrors,_=N.errors,P="".concat(u);c.b.useEffect((function(){void 0!==j&&(g(j),x(P,j,{shouldValidate:!0}))}),[j,P,x]);var R=_[u];return Object(b.jsx)(s.a,{name:f,type:p,children:Object(b.jsx)(i.Checkbox,Object(a.a)(Object(a.a)(Object(a.a)({id:n||u},R&&{error:null===(t=R.message)||void 0===t?void 0:t.toString()}),S(P)),{},{isChecked:v,onChange:function(e){var t=!v;g(t),x(P,t),d&&d(e),T([P])}},m))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function m(e){var t=u.a.useContext();return Object(b.jsx)(j,Object(a.a)({methods:t},e))}m.displayName=f},516:function(e,t,n){e.exports={NAME_INPUT_SELECT:"InputSelect",TYPE_INPUT_SELECT:"Element"}},517:function(e,t,n){"use strict";n.d(t,"a",(function(){return m}));var a=n(2),r=n(19),o=n(11),c=n(50),i=n(41),s=n(488),u=n(529),l=n.n(u),d=n(10),b=["id","name","autoFocus","methods","withSuggestions","onChange"],O=l.a.NAME_INPUT_PASSWORD,f=l.a.TYPE_INPUT_PASSWORD,p={id:O},j=o.b.memo((function(e){var t,n=e.id,o=e.name,s=e.autoFocus,u=e.methods,l=e.withSuggestions,p=void 0===l||l,j=e.onChange,m=Object(r.a)(e,b),E=u.register,h=u.formState,v=u.clearErrors,g=h.errors,S="".concat(o),N=g[o];return Object(d.jsx)(i.a,{name:O,type:f,children:Object(d.jsx)(c.PasswordField,Object(a.a)(Object(a.a)(Object(a.a)({autoComplete:p?"on":"off",autoFocus:s,id:n||o},N&&{error:null===(t=N.message)||void 0===t?void 0:t.toString()}),E(S,{required:!0,onChange:function(e){j&&j(e);v([S])}})),m))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function m(e){var t=s.a.useContext();return Object(d.jsx)(j,Object(a.a)({methods:t},e))}m.displayName=O,m.defaultProps=p},520:function(e,t,n){e.exports={NAME_INPUT_CHECKBOX:"InputCheckbox",TYPE_INPUT_CHECKBOX:"Element"}},522:function(e,t,n){"use strict";n.d(t,"a",(function(){return a})),n.d(t,"c",(function(){return r})),n.d(t,"e",(function(){return o})),n.d(t,"d",(function(){return c})),n.d(t,"f",(function(){return i})),n.d(t,"b",(function(){return s}));var a="AR1B",r=15,o=function(e){return e===a},c=function(e){return"AR1C"===e},i=function(e){return"0005"===e},s={"0005":r,AR1C:11,AR1B:11}},524:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return l}));var a=n(2),r=n(16),o=n(11),c=n(531),i=n.n(c),s=n(10),u=i.a.NAME_STEPPER;i.a.TYPE_STEPPER;function l(e){var t=e,n=t.steps,c=t.handleFallback,i=t.handleChangeStep,u=Object.entries(n).filter((function(e){return Boolean(e[1].condition)})).map((function(e){var t=Object(r.a)(e,2),n=t[0],o=t[1],c=o.component;return Object(s.jsx)(c,Object(a.a)({},o.props||{}),n)}),{}).shift(),l=o.b.useState(null===u||void 0===u?void 0:u.key),d=Object(r.a)(l,2),b=d[0],O=d[1];return o.b.useEffect((function(){!u&&c&&c()}),[c,u]),o.b.useEffect((function(){b!==(null===u||void 0===u?void 0:u.key)&&i&&i(),O(null===u||void 0===u?void 0:u.key)}),[b,i,null===u||void 0===u?void 0:u.key]),u||null}l.displayName=u,l.defaultProps={handleChangeStep:function(){},handleFallback:function(){}}},529:function(e,t,n){e.exports={NAME_INPUT_PASSWORD:"InputPassword",TYPE_INPUT_PASSWORD:"Element"}},531:function(e,t,n){e.exports={NAME_STEPPER:"Stepper",TYPE_STEPPER:"Element"}},583:function(e,t,n){"use strict";n.d(t,"a",(function(){return v}));var a=n(2),r=n(19),o=n(11),c=n(41),i=n(8),s=n(33),u=n(50),l=n(503),d=n(38),b=n(584),O=n.n(b),f=n(585),p=n.n(f),j=n(10),m=["environments","name","onSelectOption","defaultOption","label","dropdownButton"],E=O.a.NAME_ENVIRONMENTSELECTOR,h=O.a.TYPE_ENVIRONMENTSELECTOR;function v(e){var t,n=e,b=n.environments,O=n.name,f=n.onSelectOption,v=n.defaultOption,g=n.label,S=n.dropdownButton,N=Object(r.a)(n,m),x=Object(i.b)(),T=Object(d.c)().textGet;return o.b.useEffect((function(){v&&x(s.a.setEnvironmentColor(_(b.indexOf(v))))}),[v,x,b]),Object(j.jsx)(c.a,{name:E,type:h,children:Object(j.jsx)(l.a,Object(a.a)(Object(a.a)({defaultOption:v&&P(v,b.indexOf(v))},S?{dropdownButton:S}:{label:g}),{},{name:O,options:(t=b,t.map((function(e,t){return P(e,t)}))),onSelectOption:function(e){b.forEach((function(t,n){var a;t.value===e.value&&(a=_(n),x(s.a.setEnvironmentColor(a)))})),f&&f(e)}},N))});function _(e){var t=["dark-green","yellow","blue","violet","green","purple","light-green"];return t[e%t.length]}function P(e,t){var n,r=null===(n=e.label)||void 0===n?void 0:n.toString(),o=null!==r&&void 0!==r&&r.includes("retail")?"user":"business",c=T({uuid:"user"===o?"spa.a11y.image.alt.user":"spa.a11y.image.alt.business"}),i=null===r||void 0===r?void 0:r.replace("retail","").replace("corporate","");return Object(a.a)(Object(a.a)({},e),{},{label:Object(j.jsxs)("div",{className:p.a.option,children:[Object(j.jsx)(u.Avatar,{alt:c,className:p.a.avatar,color:_(t),name:o,size:"xsmall"}),Object(j.jsx)(d.b,{className:p.a.labelOptionsText,color:"gray-dark",tag:"span",children:i})]})})}}v.defaultProps={}},584:function(e,t,n){e.exports={NAME_ENVIRONMENTSELECTOR:"EnvironmentSelector",TYPE_ENVIRONMENTSELECTOR:"Element"}},585:function(e,t,n){e.exports={NAME_ENVIRONMENTSELECTOR:"EnvironmentSelector",TYPE_ENVIRONMENTSELECTOR:"Element",NAME_XS:"xs",NAME_SM:"sm",NAME_MD:"md",NAME_LG:"lg",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",option:"_rules_option__AVjVt",labelOptionsText:"_rules_labelOptionsText__3k7gc",avatar:"_rules_avatar__3vQce"}},819:function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var a=n(0),r=n(5),o=n(26),c=n(28),i="iOSNavigation";function s(){return u.apply(this,arguments)}function u(){return(u=Object(r.a)(Object(a.a)().mark((function e(){var t;return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(o.c)();case 2:if(e.sent&&cordova.plugins){e.next=5;break}throw o.a.CORDOVA_UNAVAILABLE;case 5:if(t=cordova.plugins.iOSNavigation){e.next=8;break}throw o.a.PLUGIN_UNAVAILABLE;case 8:return e.abrupt("return",t);case 9:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function l(e){return d.apply(this,arguments)}function d(){return(d=Object(r.a)(Object(a.a)().mark((function e(t){var n,r;return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.value,e.next=3,Object(o.c)();case 3:if(e.sent){e.next=6;break}throw o.a.CORDOVA_UNAVAILABLE;case 6:return e.next=8,s();case 8:return r=e.sent,e.abrupt("return",new Promise((function(e,t){try{r.setAllowsBackForwardNavigationGestures(n,(function(t){e({code:c.a.SUCCESS,value:t})}),(function(e){t(new c.b(c.a.ERROR,r.setAllowsBackForwardNavigationGestures.name,e))}))}catch(a){t(new c.b(c.a.ERROR,i,c.c,a))}})));case 10:case"end":return e.stop()}}),e)})))).apply(this,arguments)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvc2Vzc2lvbi9Mb2dpbi9TdGVwMi50c3giLCJ3ZWJwYWNrOi8vLy4uL2JhbmNvci1jb21wb25lbnRzL0VsZW1lbnQvRm9ybS9JbnB1dFNlbGVjdC9pbmRleC50c3giLCJ3ZWJwYWNrOi8vLy4uL2JhbmNvci1jb21wb25lbnRzL0VsZW1lbnQvRm9ybS9JbnB1dENoZWNrYm94L2luZGV4LnRzeCIsIndlYnBhY2s6Ly8vLi4vYmFuY29yLWNvbXBvbmVudHMvRWxlbWVudC9Gb3JtL0lucHV0U2VsZWN0L19pbmRleC5zY3NzIiwid2VicGFjazovLy8uLi9iYW5jb3ItY29tcG9uZW50cy9FbGVtZW50L0Zvcm0vSW5wdXRQYXNzd29yZC9pbmRleC50c3giLCJ3ZWJwYWNrOi8vLy4uL2JhbmNvci1jb21wb25lbnRzL0VsZW1lbnQvRm9ybS9JbnB1dENoZWNrYm94L19pbmRleC5zY3NzIiwid2VicGFjazovLy8uLi9iYW5jb3ItY29tcG9uZW50cy9TZWN0aW9ucy9Eb2N1bWVudC9kb2N1bWVudFV0aWxzLnRzIiwid2VicGFjazovLy8uLi9iYW5jb3ItY29tcG9uZW50cy9FbGVtZW50L1N0ZXBwZXIvaW5kZXgudHN4Iiwid2VicGFjazovLy8uLi9iYW5jb3ItY29tcG9uZW50cy9FbGVtZW50L0Zvcm0vSW5wdXRQYXNzd29yZC9faW5kZXguc2NzcyIsIndlYnBhY2s6Ly8vLi4vYmFuY29yLWNvbXBvbmVudHMvRWxlbWVudC9TdGVwcGVyL19pbmRleC5zY3NzIiwid2VicGFjazovLy8uLi9iYW5jb3ItY29tcG9uZW50cy9FbGVtZW50L0Vudmlyb25tZW50U2VsZWN0b3IvaW5kZXgudHN4Iiwid2VicGFjazovLy8uLi9iYW5jb3ItY29tcG9uZW50cy9FbGVtZW50L0Vudmlyb25tZW50U2VsZWN0b3IvX2luZGV4LnNjc3MiLCJ3ZWJwYWNrOi8vLy4uL2JhbmNvci1jb21wb25lbnRzL0VsZW1lbnQvRW52aXJvbm1lbnRTZWxlY3Rvci9fcnVsZXMubW9kdWxlLnNjc3MiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9tYXJpYWdpbWVuYWVzcG9zaXRvL0RvY3VtZW50cy9SZWRpc2Vuby9SZWxlYXNlMjM2L2FyLWJhbmNvci1yZWRpc2Vuby1lbnRyZWdhL0B0ZWNoL3V0aWxzLWNvcmRvdmEtcGx1Z2luLXRzL2lPU05hdmlnYXRpb24udHMiXSwibmFtZXMiOlsiTG9naW5TdGVwMiIsImRpc3BhdGNoIiwidXNlRGlzcGF0Y2giLCJ0ZXh0R2V0IiwidXNlVGV4dCIsImlzQmlvbWV0cnlBdmFpbGFibGUiLCJ1c2VCaW9tZXRyeUF2YWlsYWJpbGl0eSIsInN0YXRlIiwiZ2V0VmFsdWVDb25maWciLCJ1c2VQZXJzaXN0b3IiLCJjYXB0Y2hhS2V5IiwicGFyc2VDb25maWciLCJpc0NhcHRjaGFFbmFibGVkIiwiaXNWVUVuYWJsZWQiLCJzZWN1cml0eVNlYWwiLCJ1c2VTZWxlY3RvciIsIlNlbGVjdG9yU2xpY2VTZXNzaW9uIiwidXNlcm5hbWUiLCJmZXRjaGluZyIsImVycm9ycyIsImVycm9yIiwid2FybmluZ3MiLCJ3YXJuaW5nIiwiaXNCaW9tZXRyeVNlc3Npb25Db25maWd1cmVkIiwiU2VsZWN0b3JTbGljZUJpb21ldHJ5Iiwic2hvd0NhcHRjaGFBUEkiLCJzaG93Q2FwdGNoYSIsInBhZ2VTZWN1cml0eVJlY29tbWVuZGF0aW9ucyIsInVzZVBhdGgiLCJST1VURV9QQVRIX1RPT0xTX1JFQ09NTUVORCIsInBhZ2VSZWNvdmVyUGFzc3dvcmQiLCJST1VURV9QQVRIX1NFU1NJT05fUkVDT1ZFUl9QV0QiLCJwYXNzd29yZExhYmVsIiwidXVpZCIsImNoZWNrYm94TGFiZWwiLCJyZXF1aXJlZEZpZWxkIiwibG9ja2VkQmlvbWV0cnkiLCJ1c2VCaW9tZXRyeUxvY2siLCJzY2hlbWFXaXRob3V0Q2FwdGNoYSIsIlR5cGUiLCJvYmplY3QiLCJwYXNzd29yZCIsIkN1c3RvbUVycm9yIiwic3RyaW5nIiwicmVxdWlyZWQiLCJhY3RpdmUiLCJib29sZWFuIiwib3JVbmRlZmluZWQiLCJzY2hlbWEiLCJjYXB0Y2hhIiwiY2xhc3NOYW1lQmlvbWV0cnkiLCJnZXRDbGFzc05hbWUiLCJSdWxlcyIsImJpb21ldHJ5QXZhaWxhYmxlIiwiY2FwdGNoYUVuYWJsZWQiLCJpc0ZpbmdlcnByaW50QXZhaWxhYmxlIiwidXNlVmVyaWZ5SXNBdmFpbGFibGVGZWF0dXJlIiwiRkVBVFVSRSIsIlBSRUZFUkVOQ0VTX0JJT01FVFJZX0ZJTkdFUlBSSU5UIiwidnVVcmwiLCJ2dVRpbWVvdXQiLCJfanN4cyIsIkJhc2VFeHRlcm5hbENvbnRhaW5lciIsIkFjdGlvblNsaWNlU2Vzc2lvbiIsImNsZWFuVXNlciIsImNoaWxkcmVuIiwiY2xhc3NOYW1lIiwiX2pzeCIsIkF2YXRhciIsImFsdCIsInNpemUiLCJzcmMiLCJncmVldGluZyIsIkljb24iLCJuYW1lIiwiVGV4dCIsInRhZyIsIkZvcm0iLCJvblN1Ym1pdCIsIl94IiwiX2hhbmRsZVN1Ym1pdCIsImFwcGx5IiwiYXJndW1lbnRzIiwiSW5wdXRQYXNzd29yZCIsImF1dG9Gb2N1cyIsImlkIiwibGFiZWwiLCJ3aXRoU3VnZ2VzdGlvbnMiLCJwYXNzd29yZFJlY292ZXJ5IiwiTGluayIsInRvIiwiQ2FwdGNoYSIsImhhc0Vycm9yIiwiQm9vbGVhbiIsImlzRW5hYmxlZCIsInNpdGVrZXkiLCJJbnB1dENoZWNrYm94IiwiaXNEaXNhYmxlZCIsIm9uQ2hhbmdlIiwiZXYiLCJlbCIsImN1cnJlbnRUYXJnZXQiLCJBY3Rpb25TbGljZUJpb21ldHJ5Iiwic2V0QmlvbWV0cnlTZXNzaW9uUmVxdWVzdGVkIiwiY2hlY2tlZCIsIkFjdGlvblNsaWNlVG9hc3QiLCJzZXQiLCJraW5kIiwidGV4dCIsImR1cmF0aW9uIiwiRFVSQVRJT05fWEwiLCJCdXR0b24iLCJmbG93SWQiLCJkaXNwbGF5TmFtZSIsImxvYWRpbmciLCJ0eXBlIiwiYWxpZ25SZWNvbW1lbmRhdGlvbnMiLCJfYXN5bmNUb0dlbmVyYXRvciIsIl9yZWdlbmVyYXRvclJ1bnRpbWUiLCJtYXJrIiwiX2NhbGxlZSIsImRhdGEiLCJfcmVmIiwid3JhcCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJGZXRjaGVyU2xpY2VTZXNzaW9uIiwic2Vjb25kU3RlcCIsInVybCIsInRpbWVvdXQiLCJzdG9wIiwiTkFNRV9JTlBVVF9TRUxFQ1QiLCJOYW1lc3BhY2UiLCJUWVBFX0lOUFVUX1NFTEVDVCIsIklucHV0U2VsZWN0TWVtb2l6ZWQiLCJSZWFjdCIsIm1lbW8iLCJwcm9wcyIsIl9pbnB1dEVycm9yJG1lc3NhZ2UiLCJtZXRob2RzIiwib3B0aW9ucyIsImRlZmF1bHRPcHRpb24iLCJvblNlbGVjdE9wdGlvbiIsInJlc3QiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJfZXhjbHVkZWQiLCJyZWdpc3RlciIsImZvcm1TdGF0ZSIsInNldFZhbHVlIiwid2F0Y2giLCJyZWdpc3Rlck5hbWUiLCJjb25jYXQiLCJfUmVhY3QkdXNlU3RhdGUiLCJ1c2VTdGF0ZSIsIl9SZWFjdCR1c2VTdGF0ZTIiLCJfc2xpY2VkVG9BcnJheSIsImlucHV0VmFsdWUiLCJzZXRJbnB1dFZhbHVlIiwic2VsZWN0RmllbGRSZWYiLCJ1c2VSZWYiLCJpbnB1dEVycm9yIiwidXNlRWZmZWN0IiwidmFsdWUiLCJzaG91bGRWYWxpZGF0ZSIsImN1cnJlbnQiLCJibHVyIiwiQ29tcG9uZW50IiwiU2VsZWN0RmllbGQiLCJfb2JqZWN0U3ByZWFkIiwibWVzc2FnZSIsInRvU3RyaW5nIiwicmVmIiwib3B0aW9uIiwicHJldlByb3BzIiwibmV4dFByb3BzIiwiZGlydHlGaWVsZHMiLCJJbnB1dFNlbGVjdCIsInVzZUNvbnRleHQiLCJPYmplY3QiLCJhc3NpZ24iLCJfb2JqZWN0RGVzdHJ1Y3R1cmluZ0VtcHR5IiwiTkFNRV9JTlBVVF9DSEVDS0JPWCIsIlRZUEVfSU5QVVRfQ0hFQ0tCT1giLCJJbnB1dENoZWNrYm94TWVtb2l6ZWQiLCJpc0NoZWNrZWQiLCJzZXRDaGVja2VkIiwiY2xlYXJFcnJvcnMiLCJ1bmRlZmluZWQiLCJDaGVja2JveCIsImUiLCJjaGVjayIsIm1vZHVsZSIsImV4cG9ydHMiLCJOQU1FX0lOUFVUX1BBU1NXT1JEIiwiVFlQRV9JTlBVVF9QQVNTV09SRCIsIkRFRl9JTlBVVF9QQVNTV09SRCIsIklucHV0UGFzc3dvcmRNZW1vaXplZCIsIl9wcm9wcyR3aXRoU3VnZ2VzdGlvbiIsIlBhc3N3b3JkRmllbGQiLCJhdXRvQ29tcGxldGUiLCJldmVudCIsImRlZmF1bHRQcm9wcyIsIkNVSVQiLCJQQVNTUE9SVF9NQVhfTEVOR1RIIiwiaXNDdWl0VHlwZSIsInByb3AiLCJpc0NESVR5cGUiLCJpc1Bhc3Nwb3J0VHlwZSIsIkRPQ1VNRU5UU19NQVhfTEVOR1RIIiwiQVIxQyIsIkFSMUIiLCJOQU1FX1NURVBQRVIiLCJUWVBFX1NURVBQRVIiLCJTdGVwcGVyIiwic3RlcHMiLCJoYW5kbGVGYWxsYmFjayIsImhhbmRsZUNoYW5nZVN0ZXAiLCJ0YXJnZXQiLCJlbnRyaWVzIiwiZmlsdGVyIiwiZW50cnkiLCJjb25kaXRpb24iLCJtYXAiLCJfcmVmMiIsIl9yZWYzIiwia2V5Iiwic3RlcCIsIlN0ZXAiLCJjb21wb25lbnQiLCJzaGlmdCIsImN1cnJlbnRTdGVwIiwic2V0Q3VycmVudFN0ZXAiLCJOQU1FX0VOVklST05NRU5UU0VMRUNUT1IiLCJUWVBFX0VOVklST05NRU5UU0VMRUNUT1IiLCJFbnZpcm9ubWVudFNlbGVjdG9yIiwiZW52aXJvbm1lbnRPcHRpb25zIiwiZW52aXJvbm1lbnRzIiwiZHJvcGRvd25CdXR0b24iLCJzZXRFbnZpcm9ubWVudENvbG9yIiwiZ2V0RW52aXJvbm1lbnRDb2xvciIsImluZGV4T2YiLCJidWlsZEVudmlyb25tZW50T3B0aW9ucyIsImVudmlyb25tZW50IiwiaW5kZXgiLCJmb3JFYWNoIiwiY29sb3IiLCJwb3NpdGlvbiIsImNvbG9ycyIsImxlbmd0aCIsIl9lbnZpcm9ubWVudE9wdGlvbnMkbCIsImxhYmVsU3RyaW5nIiwiYXZhdGFyTmFtZSIsImluY2x1ZGVzIiwiYWx0VGV4dCIsImZpbmFsTGFiZWwiLCJyZXBsYWNlIiwiYXZhdGFyIiwibGFiZWxPcHRpb25zVGV4dCIsInBsdWdpbk5hbWUiLCJnZXRQbHVnaW4iLCJfZ2V0UGx1Z2luIiwicGx1Z2luIiwiTW9iaWxlUmVhZHkiLCJzZW50IiwiY29yZG92YSIsInBsdWdpbnMiLCJFUlJPUl9DT1JET1ZBIiwiQ09SRE9WQV9VTkFWQUlMQUJMRSIsImlPU05hdmlnYXRpb24iLCJQTFVHSU5fVU5BVkFJTEFCTEUiLCJhYnJ1cHQiLCJzZXRBbGxvd3NCYWNrRm9yd2FyZE5hdmlnYXRpb25HZXN0dXJlcyIsIl9zZXRBbGxvd3NCYWNrRm9yd2FyZE5hdmlnYXRpb25HZXN0dXJlcyIsIl9jYWxsZWUyIiwiX2NvbnRleHQyIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJjb2RlIiwiUExVR0lOX1NUQVRVUyIsIlNVQ0NFU1MiLCJQbHVnaW5FcnJvciIsIkVSUk9SIiwiZXJyIiwiVU5LTk9XTl9FUlJPUl9NU0ciXSwibWFwcGluZ3MiOiJxWUF1Q2UsU0FBU0EsSUFDcEIsSUFBTUMsRUFBV0MsY0FDVEMsRUFBWUMsY0FBWkQsUUFFQUUsRUFEVUMsY0FBVkMsTUFDQUYsb0JBQ0FHLEVBQW1CQyxjQUFuQkQsZUFFRkUsRUFBYUMsWUFBWUgsRUFBZSxxQ0FDeENJLEVBQW1CRCxZQUFxQkgsRUFBZSw4QkFDdkRLLEVBQWNGLFlBQXFCSCxFQUFlLHNDQUVsRE0sRUFBZUMsWUFBWUMsSUFBcUJGLGNBQ2hERyxFQUFXRixZQUFZQyxJQUFxQkMsVUFDNUNDLEVBQVdILFlBQVlDLElBQXFCRSxVQUM1Q0MsRUFBU0osWUFBWUMsSUFBcUJJLE9BQzFDQyxFQUFXTixZQUFZQyxJQUFxQk0sU0FDNUNDLEVBQThCUixZQUNoQ1MsSUFBc0JELDZCQUVwQkUsRUFBaUJWLFlBQVlDLElBQXFCVSxhQUVsREMsRUFBOEJDLGFBQVFDLE1BQ3RDQyxFQUFzQkYsYUFBUUcsS0FFOUJDLEVBQWdCN0IsRUFBUSxDQUFFOEIsS0FBTSx5Q0FDaENDLEVBQWdCL0IsRUFBUSxDQUFF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LEdBQ3pCLElBQ0loQixFQUFPVSx1Q0FDSDdHLEdBQ0EsU0FBQ29ILEdBQ0dGLEVBQVEsQ0FDSkUsS0FBTUMsSUFBY0MsUUFDcEJ0SCxNQUFPb0gsR0FFZixJQUNBLFNBQUNuUSxHQUNHa1EsRUFDSSxJQUFJSSxJQUNBRixJQUFjRyxNQUNkckIsRUFBT1UsdUNBQXVDdE0sS0FDOUN0RCxHQUdaLEdBRVIsQ0FBRSxNQUFPd1EsR0FDTE4sRUFBTyxJQUFJSSxJQUFZRixJQUFjRyxNQUFPeEIsRUFBWTBCLElBQW1CRCxHQUMvRSxDQUNKLEtBQUUseUJBQUFULEVBQUFoSixPQUFBLEdBQUErSSxFQUFBLE1BQ0xqTSxNQUFBLEtBQUFDLFVBQUEsQyIsImZpbGUiOiJzdGF0aWMvanMvNTguNDAyOTNiMjkuY2h1bmsuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcIkBwa2cvcmVhY3RcIjtcbmltcG9ydCB0eXBlIHsgSW5mZXIgfSBmcm9tIFwiQHBrZy91dGlscy9zY2hlbWFcIjtcbmltcG9ydCB7IFR5cGUgfSBmcm9tIFwiQHBrZy91dGlscy9zY2hlbWFcIjtcbmltcG9ydCB7IHVzZVBlcnNpc3RvciB9IGZyb20gXCJAcGtnL3JlYWN0LXN0b3J5Ym9vay9Db21wb25lbnQvUGVyc2lzdG9yXCI7XG5pbXBvcnQgeyBnZXRDbGFzc05hbWUgfSBmcm9tIFwiQHBrZy9yZWFjdC1zdG9yeWJvb2svQ29tcG9uZW50XCI7XG5cbmltcG9ydCB7IEF2YXRhciwgSWNvbiB9IGZyb20gXCJAYXBwL2JhbmNvbi11aVwiO1xuXG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tIFwiQGFwcC9iYW5jb3ItY29tcG9uZW50cy9FbGVtZW50L0J1dHRvblwiO1xuaW1wb3J0IHsgVGV4dCwgdXNlVGV4dCB9IGZyb20gXCJAYXBwL2JhbmNvci1jb21wb25lbnRzL0VsZW1lbnQvVGV4dFwiO1xuaW1wb3J0IHsgTGluayB9IGZyb20gXCJAYXBwL2JhbmNvci1jb21wb25lbnRzL0VsZW1lbnQvTGlua1wiO1xuaW1wb3J0IHsgRm9ybSB9IGZyb20gXCJAYXBwL2JhbmNvci1jb21wb25lbnRzL0VsZW1lbnQvRm9ybVwiO1xuaW1wb3J0IHsgSW5wdXRQYXNzd29yZCB9IGZyb20gXCJAYXBwL2JhbmNvci1jb21wb25lbnRzL0VsZW1lbnQvRm9ybS9JbnB1dFBhc3N3b3JkXCI7XG5pbXBvcnQgeyBJbnB1dENoZWNrYm94IH0gZnJvbSBcIkBhcHAvYmFuY29yLWNvbXBvbmVudHMvRWxlbWVudC9Gb3JtL0lucHV0Q2hlY2tib3hcIjtcbmltcG9ydCB7IENhcHRjaGEgfSBmcm9tIFwiQGFwcC9iYW5jb3ItY29tcG9uZW50cy9FbGVtZW50L0NhcHRjaGFcIjtcbmltcG9ydCB7IEJhc2VFeHRlcm5hbENvbnRhaW5lciB9IGZyb20gXCJAYXBwL2JhbmNvci1jb21wb25lbnRzL0NvbnRhaW5lci9CYXNlRXh0ZXJuYWxcIjtcblxuaW1wb3J0IHtcbiAgICBBY3Rpb25TbGljZUJpb21ldHJ5LFxuICAgIFNlbGVjdG9yU2xpY2VCaW9tZXRyeSxcbiAgICB1c2VCaW9tZXRyeUF2YWlsYWJpbGl0eSxcbiAgICB1c2VCaW9tZXRyeUxvY2ssXG59IGZyb20gXCJAYXBwL2JhbmNvbi1kYXRhL3NsaWNlcy9iaW9tZXRyeVwiO1xuaW1wb3J0IHsgQWN0aW9uU2xpY2VUb2FzdCB9IGZyb20gXCJAYXBwL2JhbmNvbi1kYXRhL3NsaWNlcy90b2FzdFwiO1xuaW1wb3J0IHtcbiAgICBBY3Rpb25TbGljZVNlc3Npb24sXG4gICAgRmV0Y2hlclNsaWNlU2Vzc2lvbixcbiAgICBTZWxlY3RvclNsaWNlU2Vzc2lvbixcbn0gZnJvbSBcIkBhcHAvYmFuY29uLWRhdGEvc2xpY2VzL3Nlc3Npb25cIjtcbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTZWxlY3RvciB9IGZyb20gXCJAYXBwL2JhbmNvbi1kYXRhXCI7XG5pbXBvcnQgeyBDdXN0b21FcnJvciB9IGZyb20gXCJAYXBwL2JhbmNvbi1kYXRhL3ZhbGlkYXRpb25zXCI7XG5pbXBvcnQgeyBEVVJBVElPTl9YTCwgRkVBVFVSRSB9IGZyb20gXCJAYXBwL2JhbmNvbi1kYXRhL2NvbnN0YW50c1wiO1xuXG5pbXBvcnQgeyB1c2VQYXRoLCBST1VURV9QQVRIX1RPT0xTX1JFQ09NTUVORCwgUk9VVEVfUEFUSF9TRVNTSU9OX1JFQ09WRVJfUFdEIH0gZnJvbSBcIn4vcm91dGVzXCI7XG5pbXBvcnQgeyBwYXJzZUNvbmZpZyB9IGZyb20gXCJ+L3V0aWxzL2NvbmZpZ1V0aWxzXCI7XG5pbXBvcnQgeyB1c2VWZXJpZnlJc0F2YWlsYWJsZUZlYXR1cmUgfSBmcm9tIFwiQGFwcC9iYW5jb24tZGF0YS9zbGljZXMvZmVhdHVyZXNcIjtcblxuaW1wb3J0IFJ1bGVzIGZyb20gXCIuL19ydWxlcy5tb2R1bGUuc2Nzc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBMb2dpblN0ZXAyKCkge1xuICAgIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgICBjb25zdCB7IHRleHRHZXQgfSA9IHVzZVRleHQoKTtcbiAgICBjb25zdCB7IHN0YXRlIH0gPSB1c2VCaW9tZXRyeUF2YWlsYWJpbGl0eSgpO1xuICAgIGNvbnN0IHsgaXNCaW9tZXRyeUF2YWlsYWJsZSB9ID0gc3RhdGU7XG4gICAgY29uc3QgeyBnZXRWYWx1ZUNvbmZpZyB9ID0gdXNlUGVyc2lzdG9yKCk7XG5cbiAgICBjb25zdCBjYXB0Y2hhS2V5ID0gcGFyc2VDb25maWcoZ2V0VmFsdWVDb25maWcoXCJjb3JlLmF1dGguY2FwdGNoYS5nb29nbGUuc2l0ZUtleVwiKSk7XG4gICAgY29uc3QgaXNDYXB0Y2hhRW5hYmxlZCA9IHBhcnNlQ29uZmlnPGJvb2xlYW4+KGdldFZhbHVlQ29uZmlnKFwiY29yZS5hdXRoLmNhcHRjaGEuZW5hYmxlZFwiKSk7XG4gICAgY29uc3QgaXNWVUVuYWJsZWQgPSBwYXJzZUNvbmZpZzxib29sZWFuPihnZXRWYWx1ZUNvbmZpZyhcInZ1LmZyYXVkLmNoZWNrLmZpbmdlcnByaW50LmVuYWJsZVwiKSk7XG5cbiAgICBjb25zdCBzZWN1cml0eVNlYWwgPSB1c2VTZWxlY3RvcihTZWxlY3RvclNsaWNlU2Vzc2lvbi5zZWN1cml0eVNlYWwpO1xuICAgIGNvbnN0IHVzZXJuYW1lID0gdXNlU2VsZWN0b3IoU2VsZWN0b3JTbGljZVNlc3Npb24udXNlcm5hbWUpO1xuICAgIGNvbnN0IGZldGNoaW5nID0gdXNlU2VsZWN0b3IoU2VsZWN0b3JTbGljZVNlc3Npb24uZmV0Y2hpbmcpO1xuICAgIGNvbnN0IGVycm9ycyA9IHVzZVNlbGVjdG9yKFNlbGVjdG9yU2xpY2VTZXNzaW9uLmVycm9yKTtcbiAgICBjb25zdCB3YXJuaW5ncyA9IHVzZVNlbGVjdG9yKFNlbGVjdG9yU2xpY2VTZXNzaW9uLndhcm5pbmcpO1xuICAgIGNvbnN0IGlzQmlvbWV0cnlTZXNzaW9uQ29uZmlndXJlZCA9IHVzZVNlbGVjdG9yKFxuICAgICAgICBTZWxlY3RvclNsaWNlQmlvbWV0cnkuaXNCaW9tZXRyeVNlc3Npb25Db25maWd1cmVkLFxuICAgICk7XG4gICAgY29uc3Qgc2hvd0NhcHRjaGFBUEkgPSB1c2VTZWxlY3RvcihTZWxlY3RvclNsaWNlU2Vzc2lvbi5zaG93Q2FwdGNoYSk7XG5cbiAgICBjb25zdCBwYWdlU2VjdXJpdHlSZWNvbW1lbmRhdGlvbnMgPSB1c2VQYXRoKFJPVVRFX1BBVEhfVE9PTFNfUkVDT01NRU5EKTtcbiAgICBjb25zdCBwYWdlUmVjb3ZlclBhc3N3b3JkID0gdXNlUGF0aChST1VURV9QQVRIX1NFU1NJT05fUkVDT1ZFUl9QV0QpO1xuXG4gICAgY29uc3QgcGFzc3dvcmRMYWJlbCA9IHRleHRHZXQoeyB1dWlkOiBcInNwYS5sb2dpbi5zdGVwMi5wYXNzd29yZC5pbnB1dC5sYWJlbFwiIH0pO1xuICAgIGNvbnN0IGNoZWNrYm94TGFiZWwgPSB0ZXh0R2V0KHsgdXVpZDogXCJzcGEubG9naW4uc3RlcDIuYWN0aXZhdGVTZXNzaW9uLmxhYmVsXCIgfSk7XG4gICAgY29uc3QgcmVxdWlyZWRGaWVsZCA9IHRleHRHZXQoeyB1dWlkOiBcInNwYS5nZW5lcmljLmZpZWxkLmVycm9yLnJlcXVpcmVkXCIgfSk7XG5cbiAgICBjb25zdCBsb2NrZWRCaW9tZXRyeSA9IHVzZUJpb21ldHJ5TG9jaygpO1xuXG4gICAgY29uc3Qgc2NoZW1hV2l0aG91dENhcHRjaGEgPSBUeXBlLm9iamVjdCh7XG4gICAgICAgIHBhc3N3b3JkOiBDdXN0b21FcnJvcihUeXBlLnN0cmluZy5yZXF1aXJlZCgpLCByZXF1aXJlZEZpZWxkKSxcbiAgICAgICAgYWN0aXZlOiBUeXBlLmJvb2xlYW4ub3JVbmRlZmluZWQoKSxcbiAgICB9KTtcblxuICAgIGNvbnN0IHNjaGVtYSA9IFR5cGUub2JqZWN0KHtcbiAgICAgICAgcGFzc3dvcmQ6IEN1c3RvbUVycm9yKFR5cGUuc3RyaW5nLnJlcXVpcmVkKCksIHJlcXVpcmVkRmllbGQpLFxuICAgICAgICBhY3RpdmU6IFR5cGUuYm9vbGVhbi5vclVuZGVmaW5lZCgpLFxuICAgICAgICBjYXB0Y2hhOiBDdXN0b21FcnJvcihUeXBlLnN0cmluZy5yZXF1aXJlZCgpLCByZXF1aXJlZEZpZWxkKSxcbiAgICB9KTtcbiAgICBjb25zdCBzaG93Q2FwdGNoYSA9IGlzQ2FwdGNoYUVuYWJsZWQgJiYgc2hvd0NhcHRjaGFBUEk7XG4gICAgY29uc3QgY2xhc3NOYW1lQmlvbWV0cnkgPSBnZXRDbGFzc05hbWUoXG4gICAgICAgIFJ1bGVzLmJpb21ldHJ5QXZhaWxhYmxlLFxuICAgICAgICBzaG93Q2FwdGNoYSAmJiBSdWxlcy5jYXB0Y2hhRW5hYmxlZCxcbiAgICApO1xuICAgIGNvbnN0IGlzRmluZ2VycHJpbnRBdmFpbGFibGUgPSB1c2VWZXJpZnlJc0F2YWlsYWJsZUZlYXR1cmUoXG4gICAgICAgIEZFQVRVUkUuUFJFRkVSRU5DRVNfQklPTUVUUllfRklOR0VSUFJJTlQsXG4gICAgKTtcblxuICAgIC8vIFdlIG5lZWQgdHdvIHNjaGVtYXMgZm9yIHJlbmRlciB0aGUgY2FwdGNoYSBjb21wb25lbnQgaW4gdGhlIDNyZCBwYXNzd29yZCBhdHRlbXB0XG4gICAgLy8gYmVjYXVzZSB0aGUgY2FwdGNoYSBzY2hlbWEgd2UgbmVlZCBpdCBvbmx5IGlmIHRoZSBjYXB0Y2hhIGlzIHJlbmRlcmVkXG4gICAgY29uc3QgZ2V0U2NoZW1hID0gKCkgPT4gKGlzQ2FwdGNoYUVuYWJsZWQgJiYgc2hvd0NhcHRjaGFBUEkgPyBzY2hlbWEgOiBzY2hlbWFXaXRob3V0Q2FwdGNoYSk7XG5cbiAgICBjb25zdCB2dVVybCA9IHBhcnNlQ29uZmlnPHN0cmluZz4oZ2V0VmFsdWVDb25maWcoXCJiYWNrZW5kLnZ1LmZyYXVkLmFwaS5maW5nZXJwcmludC51cmxcIikpO1xuICAgIGNvbnN0IHZ1VGltZW91dCA9IHBhcnNlQ29uZmlnPG51bWJlcj4oXG4gICAgICAgIGdldFZhbHVlQ29uZmlnKFwiYmFja2VuZC52dS5mcmF1ZC5hcGkuZmluZ2VycHJpbnQudGltZW91dFwiKSxcbiAgICApO1xuXG4gICAgdHlwZSBTY2hlbWEgPSBJbmZlcjx0eXBlb2Ygc2NoZW1hIHwgdHlwZW9mIHNjaGVtYVdpdGhvdXRDYXB0Y2hhPjtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxCYXNlRXh0ZXJuYWxDb250YWluZXIgaGVhZGVyLW9uQmFjaz17aGFuZGxlQmFja30+XG4gICAgICAgICAgICA8c2VjdGlvbj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17UnVsZXMuc2VjdXJpdHlTZWFsfT5cbiAgICAgICAgICAgICAgICAgICAgPEF2YXRhclxuICAgICAgICAgICAgICAgICAgICAgICAgYWx0PXt0ZXh0R2V0KHsgdXVpZDogXCJsb2dpbi5zdGVwMi5pbWFnZUFsdFwiIH0pfVxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZT1cImxhcmdlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz17c2VjdXJpdHlTZWFsfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17UnVsZXMuZ3JlZXRpbmd9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPEljb24gbmFtZT1cIndhdmluZ0hhbmRFbW9qaVwiIHNpemU9XCJzbWFsbFwiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VGV4dCB0YWc9XCJzcGFuXCIgdXVpZD1cInNwYS5sb2dpbi5zdGVwMi5ncmVldGluZy50ZXh0XCIgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8Rm9ybSBzY2hlbWE9e2dldFNjaGVtYSgpfSBvblN1Ym1pdD17aGFuZGxlU3VibWl0fT5cbiAgICAgICAgICAgICAgICAgICAgPElucHV0UGFzc3dvcmRcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9Gb2N1c1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJwYXNzd29yZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17cGFzc3dvcmRMYWJlbH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJwYXNzd29yZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICB3aXRoU3VnZ2VzdGlvbnM9e2ZhbHNlfVxuICAgICAgICAgICAgICAgICAgICAvPlxuXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtSdWxlcy5wYXNzd29yZFJlY292ZXJ5fT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxMaW5rIHRvPXtwYWdlUmVjb3ZlclBhc3N3b3JkfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGV4dCB0YWc9XCJzcGFuXCIgdXVpZD1cInNwYS5sb2dpbi5zdGVwMi5mb3Jnb3RQYXNzd29yZC50ZXh0XCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgPENhcHRjaGFcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc0Vycm9yPXtCb29sZWFuKGVycm9ycyB8fCB3YXJuaW5ncyl9XG4gICAgICAgICAgICAgICAgICAgICAgICBpc0VuYWJsZWQ9e3Nob3dDYXB0Y2hhfVxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cImNhcHRjaGFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgc2l0ZWtleT17Y2FwdGNoYUtleX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAge2lzQmlvbWV0cnlBdmFpbGFibGUgJiYgIWlzQmlvbWV0cnlTZXNzaW9uQ29uZmlndXJlZCAmJiBpc0ZpbmdlcnByaW50QXZhaWxhYmxlICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWVCaW9tZXRyeX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPElucHV0Q2hlY2tib3hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNEaXNhYmxlZD17bG9ja2VkQmlvbWV0cnl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXtjaGVja2JveExhYmVsfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwiYWN0aXZlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUJpb21ldHJ5VG9hc3R9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICApfVxuXG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgIGZsb3dJZD17TG9naW5TdGVwMi5kaXNwbGF5TmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXt7IHV1aWQ6IFwic3BhLmxvZ2luLnN0ZXAyLmdldEludG8uYnV0dG9uXCIgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRpbmc9e2ZldGNoaW5nfVxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInN1Ym1pdFwiXG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9Gb3JtPlxuICAgICAgICAgICAgPC9zZWN0aW9uPlxuXG4gICAgICAgICAgICA8Zm9vdGVyPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtSdWxlcy5hbGlnblJlY29tbWVuZGF0aW9uc30+XG4gICAgICAgICAgICAgICAgICAgIDxMaW5rIHRvPXtwYWdlU2VjdXJpdHlSZWNvbW1lbmRhdGlvbnN9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPFRleHQgdGFnPVwic3BhblwiIHV1aWQ9XCJzcGEubG9naW4uc3RlcDIuZm9vdGVyLnRleHRcIiAvPlxuICAgICAgICAgICAgICAgICAgICA8L0xpbms+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Zvb3Rlcj5cbiAgICAgICAgPC9CYXNlRXh0ZXJuYWxDb250YWluZXI+XG4gICAgKTtcblxuICAgIGZ1bmN0aW9uIGhhbmRsZUJpb21ldHJ5VG9hc3QoZXY6IFJlYWN0LkZvcm1FdmVudDxIVE1MSW5wdXRFbGVtZW50Pikge1xuICAgICAgICBjb25zdCB7IGN1cnJlbnRUYXJnZXQ6IGVsIH0gPSBldjtcbiAgICAgICAgZGlzcGF0Y2goQWN0aW9uU2xpY2VCaW9tZXRyeS5zZXRCaW9tZXRyeVNlc3Npb25SZXF1ZXN0ZWQoZWwuY2hlY2tlZCkpO1xuICAgICAgICBpZiAoIWVsLmNoZWNrZWQpIHJldHVybjtcbiAgICAgICAgZGlzcGF0Y2goXG4gICAgICAgICAgICBBY3Rpb25TbGljZVRvYXN0LnNldCh7XG4gICAgICAgICAgICAgICAga2luZDogXCJJTkZPXCIsXG4gICAgICAgICAgICAgICAgdGV4dDoge1xuICAgICAgICAgICAgICAgICAgICB1dWlkOiBcInNwYS5zZWN1cml0eS5iaW9tZXRyaWMudGV4dFwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IERVUkFUSU9OX1hMLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlQmFjaygpOiB2b2lkIHtcbiAgICAgICAgZGlzcGF0Y2goQWN0aW9uU2xpY2VTZXNzaW9uLmNsZWFuVXNlcigpKTtcbiAgICB9XG5cbiAgICBhc3luYyBmdW5jdGlvbiBoYW5kbGVTdWJtaXQoZGF0YTogU2NoZW1hKSB7XG4gICAgICAgIGNvbnN0IHsgcGFzc3dvcmQsIGNhcHRjaGEgfSA9IGRhdGEgYXMgSW5mZXI8dHlwZW9mIHNjaGVtYT47XG4gICAgICAgIGF3YWl0IGRpc3BhdGNoKFxuICAgICAgICAgICAgRmV0Y2hlclNsaWNlU2Vzc2lvbi5zZWNvbmRTdGVwKHtcbiAgICAgICAgICAgICAgICB1c2VybmFtZSxcbiAgICAgICAgICAgICAgICBwYXNzd29yZCxcbiAgICAgICAgICAgICAgICBjYXB0Y2hhLFxuICAgICAgICAgICAgICAgIGlzVlVFbmFibGVkLFxuICAgICAgICAgICAgICAgIHVybDogdnVVcmwsXG4gICAgICAgICAgICAgICAgdGltZW91dDogdnVUaW1lb3V0LFxuICAgICAgICAgICAgfSksXG4gICAgICAgICk7XG4gICAgfVxufVxuXG5Mb2dpblN0ZXAyLmRpc3BsYXlOYW1lID0gXCJMb2dpblN0ZXAyXCI7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcIkBwa2cvcmVhY3RcIjtcbmltcG9ydCB7IFNlbGVjdEZpZWxkIH0gZnJvbSBcIkBhcHAvYmFuY29uLXVpXCI7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tIFwiQHBrZy9yZWFjdC1zdG9yeWJvb2svQ29tcG9uZW50XCI7XG5pbXBvcnQgdHlwZSB7IFByb3BEZWZhdWx0cywgUHJvcFR5cGVzIH0gZnJvbSBcIkBwa2cvcmVhY3Qtc3Rvcnlib29rL0NvbXBvbmVudFwiO1xuaW1wb3J0IHR5cGUge1xuICAgIFByb3BzIGFzIFNlbGVjdEZpZWxkUHJvcHMsXG4gICAgT3B0aW9uc0Jhc2UsXG59IGZyb20gXCJAYXBwL2JhbmNvbi11aS9kaXN0L2NvbXBvbmVudHMvU2VsZWN0RmllbGQvU2VsZWN0RmllbGQudHlwZXNcIjtcbmltcG9ydCB0eXBlIHsgVXNlRm9ybVJldHVybiB9IGZyb20gXCJyZWFjdC1ob29rLWZvcm1cIjtcbmltcG9ydCB0eXBlIHsgT21pdFByb3BJRCwgUHJvcERTIH0gZnJvbSBcIi4uXCI7XG5pbXBvcnQgeyBGb3JtIH0gZnJvbSBcIi4uXCI7XG5pbXBvcnQgTmFtZXNwYWNlIGZyb20gXCIuL19pbmRleC5zY3NzXCI7XG5cbmV4cG9ydCBjb25zdCB7IE5BTUVfSU5QVVRfU0VMRUNULCBUWVBFX0lOUFVUX1NFTEVDVCB9ID0gTmFtZXNwYWNlO1xuXG50eXBlIFByb3BEcm9wZG93bkJ1dHRvblZhcmlhbnQgPSB7XG4gICAgZHJvcGRvd25CdXR0b246IFJlYWN0LlJlYWN0Tm9kZTtcbiAgICBsYWJlbD86IG5ldmVyO1xufTtcblxudHlwZSBQcm9wTGFiZWxWYXJpYW50ID0ge1xuICAgIGRyb3Bkb3duQnV0dG9uPzogbmV2ZXI7XG4gICAgbGFiZWw6IE5vbk51bGxhYmxlPFNlbGVjdEZpZWxkUHJvcHNbXCJsYWJlbFwiXT47XG59O1xuXG5leHBvcnQgdHlwZSBQcm9wSW5wdXRTZWxlY3RGaWVsZCA9IFByb3BEUzxTZWxlY3RGaWVsZFByb3BzPiAmIHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgaWQ/OiBzdHJpbmc7XG4gICAgb25TZWxlY3RPcHRpb24/OiAoKHZhbHVlOiBPcHRpb25zQmFzZSkgPT4gdm9pZCkgfCB1bmRlZmluZWQ7XG4gICAgZGlzYWJsZWQ/OiBib29sZWFuO1xufTtcblxuZXhwb3J0IHR5cGUgUHJvcElucHV0U2VsZWN0ID0gT21pdDxQcm9wSW5wdXRTZWxlY3RGaWVsZCwgXCJsYWJlbFwiPiAmXG4gICAgKFByb3BEcm9wZG93bkJ1dHRvblZhcmlhbnQgfCBQcm9wTGFiZWxWYXJpYW50KTtcblxuZXhwb3J0IGNvbnN0IERFRl9JTlBVVF9TRUxFQ1Q6IFByb3BEZWZhdWx0czxcbiAgICBQcm9wSW5wdXRTZWxlY3QsXG4gICAgT21pdFByb3BJRDxQcm9wSW5wdXRTZWxlY3Q+IHwga2V5b2YgUHJvcERTPFNlbGVjdEZpZWxkUHJvcHM+XG4+ID0geyBpZDogTkFNRV9JTlBVVF9TRUxFQ1QsIGRpc2FibGVkOiBmYWxzZSB9O1xuXG5leHBvcnQgdHlwZSBQcm9wVHlwZXNJbnB1dFNlbGVjdCA9IFByb3BUeXBlczxQcm9wSW5wdXRTZWxlY3QsIHR5cGVvZiBERUZfSU5QVVRfU0VMRUNUPiAmIHtcbiAgICBsYWJlbDogTm9uTnVsbGFibGU8U2VsZWN0RmllbGRQcm9wc1tcImxhYmVsXCJdPjtcbn07XG5cbnR5cGUgUHJvcElucHV0U2VsZWN0TWVtb2l6ZWQgPSBQcm9wSW5wdXRTZWxlY3RGaWVsZCAmIHtcbiAgICBtZXRob2RzOiBVc2VGb3JtUmV0dXJuO1xufTtcblxuY29uc3QgSW5wdXRTZWxlY3RNZW1vaXplZCA9IFJlYWN0Lm1lbW8oXG4gICAgKHByb3BzOiBQcm9wSW5wdXRTZWxlY3RNZW1vaXplZCkgPT4ge1xuICAgICAgICBjb25zdCB7IGlkLCBuYW1lLCBtZXRob2RzLCBvcHRpb25zLCBkZWZhdWx0T3B0aW9uLCBvblNlbGVjdE9wdGlvbiwgLi4ucmVzdCB9ID0gcHJvcHM7XG4gICAgICAgIGNvbnN0IHsgcmVnaXN0ZXIsIGZvcm1TdGF0ZSwgc2V0VmFsdWUsIHdhdGNoIH0gPSBtZXRob2RzO1xuICAgICAgICBjb25zdCB7IGVycm9ycyB9ID0gZm9ybVN0YXRlO1xuICAgICAgICBjb25zdCByZWdpc3Rlck5hbWUgPSBgJHtuYW1lfWAgYXMgY29uc3Q7XG4gICAgICAgIGNvbnN0IFtpbnB1dFZhbHVlLCBzZXRJbnB1dFZhbHVlXSA9IFJlYWN0LnVzZVN0YXRlKGRlZmF1bHRPcHRpb24pO1xuXG4gICAgICAgIHdhdGNoKHJlZ2lzdGVyTmFtZSk7XG4gICAgICAgIGNvbnN0IHNlbGVjdEZpZWxkUmVmID0gUmVhY3QudXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KG51bGwpO1xuICAgICAgICBjb25zdCBpbnB1dEVycm9yID0gZXJyb3JzW25hbWVdO1xuXG4gICAgICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoZGVmYXVsdE9wdGlvbj8udmFsdWUpIHtcbiAgICAgICAgICAgICAgICBzZXRWYWx1ZShyZWdpc3Rlck5hbWUsIGRlZmF1bHRPcHRpb24/LnZhbHVlLCB7IHNob3VsZFZhbGlkYXRlOiB0cnVlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBbZGVmYXVsdE9wdGlvbj8udmFsdWUsIHJlZ2lzdGVyTmFtZSwgc2V0VmFsdWVdKTtcblxuICAgICAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHNlbGVjdEZpZWxkUmVmLmN1cnJlbnQpIHNlbGVjdEZpZWxkUmVmLmN1cnJlbnQuYmx1cigpO1xuICAgICAgICB9LCBbaW5wdXRFcnJvcl0pO1xuXG4gICAgICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoaW5wdXRWYWx1ZSkgcmV0dXJuO1xuXG4gICAgICAgICAgICBzZXRJbnB1dFZhbHVlKGRlZmF1bHRPcHRpb24pO1xuICAgICAgICB9LCBbZGVmYXVsdE9wdGlvbiwgaW5wdXRWYWx1ZV0pO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8Q29tcG9uZW50IG5hbWU9e05BTUVfSU5QVVRfU0VMRUNUfSB0eXBlPXtUWVBFX0lOUFVUX1NFTEVDVH0+XG4gICAgICAgICAgICAgICAgPFNlbGVjdEZpZWxkXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRPcHRpb249e2lucHV0VmFsdWV9XG4gICAgICAgICAgICAgICAgICAgIGlkPXtpZCB8fCBuYW1lfVxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zPXtvcHRpb25zfVxuICAgICAgICAgICAgICAgICAgICB7Li4ucmVnaXN0ZXIocmVnaXN0ZXJOYW1lKX1cbiAgICAgICAgICAgICAgICAgICAgey4uLihpbnB1dEVycm9yICYmIHsgZXJyb3I6IGlucHV0RXJyb3IubWVzc2FnZT8udG9TdHJpbmcoKSB9KX1cbiAgICAgICAgICAgICAgICAgICAgcmVmPXtzZWxlY3RGaWVsZFJlZn1cbiAgICAgICAgICAgICAgICAgICAgb25TZWxlY3RPcHRpb249eyhvcHRpb246IE9wdGlvbnNCYXNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRWYWx1ZShyZWdpc3Rlck5hbWUsIG9wdGlvbi52YWx1ZSwgeyBzaG91bGRWYWxpZGF0ZTogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvblNlbGVjdE9wdGlvbikgb25TZWxlY3RPcHRpb24ob3B0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgey4uLnJlc3R9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvQ29tcG9uZW50PlxuICAgICAgICApO1xuICAgIH0sXG4gICAgKHByZXZQcm9wcywgbmV4dFByb3BzKSA9PlxuICAgICAgICBwcmV2UHJvcHMubWV0aG9kcy5mb3JtU3RhdGUuZXJyb3JzID09PSBuZXh0UHJvcHMubWV0aG9kcy5mb3JtU3RhdGUuZXJyb3JzICYmXG4gICAgICAgIHByZXZQcm9wcy5tZXRob2RzLmZvcm1TdGF0ZS5kaXJ0eUZpZWxkc1twcmV2UHJvcHMubmFtZV0gIT09XG4gICAgICAgICAgICBuZXh0UHJvcHMubWV0aG9kcy5mb3JtU3RhdGUuZGlydHlGaWVsZHNbbmV4dFByb3BzLm5hbWVdLFxuKTtcblxuZXhwb3J0IGZ1bmN0aW9uIElucHV0U2VsZWN0KHByb3BzOiBQcm9wSW5wdXRTZWxlY3QpIHtcbiAgICBjb25zdCBtZXRob2RzID0gRm9ybS51c2VDb250ZXh0KCk7XG4gICAgY29uc3QgeyAuLi5yZXN0IH0gPSBwcm9wcyBhcyBQcm9wVHlwZXNJbnB1dFNlbGVjdDtcblxuICAgIHJldHVybiA8SW5wdXRTZWxlY3RNZW1vaXplZCBtZXRob2RzPXttZXRob2RzfSB7Li4ucmVzdH0gLz47XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcIkBwa2cvcmVhY3RcIjtcbmltcG9ydCB7IENoZWNrYm94IH0gZnJvbSBcIkBhcHAvYmFuY29uLXVpXCI7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tIFwiQHBrZy9yZWFjdC1zdG9yeWJvb2svQ29tcG9uZW50XCI7XG5pbXBvcnQgdHlwZSB7IFByb3BEZWZhdWx0cywgUHJvcFR5cGVzIH0gZnJvbSBcIkBwa2cvcmVhY3Qtc3Rvcnlib29rL0NvbXBvbmVudFwiO1xuaW1wb3J0IHR5cGUgeyBQcm9wcyBhcyBDaGVja2JveFByb3BzIH0gZnJvbSBcIkBhcHAvYmFuY29uLXVpL2Rpc3QvY29tcG9uZW50cy9DaGVja2JveFwiO1xuaW1wb3J0IHR5cGUgeyBVc2VGb3JtUmV0dXJuIH0gZnJvbSBcInJlYWN0LWhvb2stZm9ybVwiO1xuaW1wb3J0IHR5cGUgeyBPbWl0UHJvcElELCBQcm9wRFMgfSBmcm9tIFwiLi5cIjtcbmltcG9ydCB7IEZvcm0gfSBmcm9tIFwiLi5cIjtcbmltcG9ydCBOYW1lc3BhY2UgZnJvbSBcIi4vX2luZGV4LnNjc3NcIjtcblxuZXhwb3J0IGNvbnN0IHsgTkFNRV9JTlBVVF9DSEVDS0JPWCwgVFlQRV9JTlBVVF9DSEVDS0JPWCB9ID0gTmFtZXNwYWNlO1xuXG5leHBvcnQgdHlwZSBQcm9wSW5wdXRDaGVja2JveCA9IFByb3BEUzxDaGVja2JveFByb3BzPiAmIHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgaWQ/OiBzdHJpbmc7XG4gICAgb25DaGFuZ2U/OiAoKGV2ZW50OiBSZWFjdC5Gb3JtRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHZvaWQpIHwgdW5kZWZpbmVkO1xufTtcblxuZXhwb3J0IGNvbnN0IERFRl9JTlBVVF9DSEVDS0JPWDogUHJvcERlZmF1bHRzPFxuICAgIFByb3BJbnB1dENoZWNrYm94LFxuICAgIE9taXRQcm9wSUQ8UHJvcElucHV0Q2hlY2tib3g+IHwga2V5b2YgUHJvcERTPENoZWNrYm94UHJvcHM+XG4+ID0geyBpZDogTkFNRV9JTlBVVF9DSEVDS0JPWCwgaXNDaGVja2VkOiBmYWxzZSB9O1xuXG50eXBlIFByb3BJbnB1dENoZWNrYm94TWVtb2l6ZWQgPSBQcm9wSW5wdXRDaGVja2JveCAmIHtcbiAgICBtZXRob2RzOiBVc2VGb3JtUmV0dXJuO1xufTtcblxuY29uc3QgSW5wdXRDaGVja2JveE1lbW9pemVkID0gUmVhY3QubWVtbyhcbiAgICAocHJvcHM6IFByb3BJbnB1dENoZWNrYm94TWVtb2l6ZWQpID0+IHtcbiAgICAgICAgY29uc3QgeyBpZCwgbmFtZSwgbWV0aG9kcywgb25DaGFuZ2UsIGlzQ2hlY2tlZCwgLi4ucmVzdCB9ID0gcHJvcHM7XG4gICAgICAgIGNvbnN0IFtjaGVja2VkLCBzZXRDaGVja2VkXSA9IFJlYWN0LnVzZVN0YXRlKGlzQ2hlY2tlZCk7XG4gICAgICAgIGNvbnN0IHsgcmVnaXN0ZXIsIGZvcm1TdGF0ZSwgc2V0VmFsdWUsIGNsZWFyRXJyb3JzIH0gPSBtZXRob2RzO1xuICAgICAgICBjb25zdCB7IGVycm9ycyB9ID0gZm9ybVN0YXRlO1xuXG4gICAgICAgIGNvbnN0IHJlZ2lzdGVyTmFtZSA9IGAke25hbWV9YCBhcyBjb25zdDtcblxuICAgICAgICAvLyB1cGRhdGUgY2hlY2tlZCBzdGF0ZSB3aGVuIGlzQ2hlY2tlZCBwcm9wIGNoYW5nZVxuICAgICAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGlzQ2hlY2tlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgc2V0Q2hlY2tlZChpc0NoZWNrZWQpO1xuICAgICAgICAgICAgICAgIHNldFZhbHVlKHJlZ2lzdGVyTmFtZSwgaXNDaGVja2VkLCB7IHNob3VsZFZhbGlkYXRlOiB0cnVlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBbaXNDaGVja2VkLCByZWdpc3Rlck5hbWUsIHNldFZhbHVlXSk7XG5cbiAgICAgICAgY29uc3QgaW5wdXRFcnJvciA9IGVycm9yc1tuYW1lXTtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPENvbXBvbmVudCBuYW1lPXtOQU1FX0lOUFVUX0NIRUNLQk9YfSB0eXBlPXtUWVBFX0lOUFVUX0NIRUNLQk9YfT5cbiAgICAgICAgICAgICAgICA8Q2hlY2tib3hcbiAgICAgICAgICAgICAgICAgICAgaWQ9e2lkIHx8IG5hbWV9XG4gICAgICAgICAgICAgICAgICAgIHsuLi4oaW5wdXRFcnJvciAmJiB7IGVycm9yOiBpbnB1dEVycm9yLm1lc3NhZ2U/LnRvU3RyaW5nKCkgfSl9XG4gICAgICAgICAgICAgICAgICAgIHsuLi5yZWdpc3RlcihyZWdpc3Rlck5hbWUpfVxuICAgICAgICAgICAgICAgICAgICBpc0NoZWNrZWQ9e2NoZWNrZWR9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hlY2sgPSAhY2hlY2tlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldENoZWNrZWQoY2hlY2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VmFsdWUocmVnaXN0ZXJOYW1lLCBjaGVjayk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob25DaGFuZ2UpIG9uQ2hhbmdlKGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJFcnJvcnMoW3JlZ2lzdGVyTmFtZV0pO1xuICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICB7Li4ucmVzdH1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9Db21wb25lbnQ+XG4gICAgICAgICk7XG4gICAgfSxcbiAgICAocHJldlByb3BzLCBuZXh0UHJvcHMpID0+XG4gICAgICAgIHByZXZQcm9wcy5tZXRob2RzLmZvcm1TdGF0ZS5lcnJvcnMgPT09IG5leHRQcm9wcy5tZXRob2RzLmZvcm1TdGF0ZS5lcnJvcnMgJiZcbiAgICAgICAgcHJldlByb3BzLm1ldGhvZHMuZm9ybVN0YXRlLmRpcnR5RmllbGRzW3ByZXZQcm9wcy5uYW1lXSAhPT1cbiAgICAgICAgICAgIG5leHRQcm9wcy5tZXRob2RzLmZvcm1TdGF0ZS5kaXJ0eUZpZWxkc1tuZXh0UHJvcHMubmFtZV0sXG4pO1xuXG5leHBvcnQgZnVuY3Rpb24gSW5wdXRDaGVja2JveChwcm9wczogUHJvcFR5cGVzPFByb3BJbnB1dENoZWNrYm94LCB0eXBlb2YgREVGX0lOUFVUX0NIRUNLQk9YPikge1xuICAgIGNvbnN0IG1ldGhvZHMgPSBGb3JtLnVzZUNvbnRleHQoKTtcblxuICAgIHJldHVybiA8SW5wdXRDaGVja2JveE1lbW9pemVkIG1ldGhvZHM9e21ldGhvZHN9IHsuLi5wcm9wc30gLz47XG59XG5cbklucHV0Q2hlY2tib3guZGlzcGxheU5hbWUgPSBOQU1FX0lOUFVUX0NIRUNLQk9YO1xuIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcIk5BTUVfSU5QVVRfU0VMRUNUXCI6XCJJbnB1dFNlbGVjdFwiLFwiVFlQRV9JTlBVVF9TRUxFQ1RcIjpcIkVsZW1lbnRcIn07IiwiaW1wb3J0IFJlYWN0IGZyb20gXCJAcGtnL3JlYWN0XCI7XG5pbXBvcnQgeyBQYXNzd29yZEZpZWxkIH0gZnJvbSBcIkBhcHAvYmFuY29uLXVpXCI7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tIFwiQHBrZy9yZWFjdC1zdG9yeWJvb2svQ29tcG9uZW50XCI7XG5pbXBvcnQgdHlwZSB7IFByb3BEZWZhdWx0cywgUHJvcFR5cGVzIH0gZnJvbSBcIkBwa2cvcmVhY3Qtc3Rvcnlib29rL0NvbXBvbmVudFwiO1xuaW1wb3J0IHR5cGUgeyBQcm9wcyBhcyBQYXNzd29yZEZpZWxkUHJvcHMgfSBmcm9tIFwiQGFwcC9iYW5jb24tdWkvZGlzdC9jb21wb25lbnRzL1Bhc3N3b3JkRmllbGRcIjtcbmltcG9ydCB0eXBlIHsgVXNlRm9ybVJldHVybiB9IGZyb20gXCJyZWFjdC1ob29rLWZvcm1cIjtcbmltcG9ydCB0eXBlIHsgT21pdFByb3BJRCwgUHJvcERTIH0gZnJvbSBcIi4uXCI7XG5pbXBvcnQgeyBGb3JtIH0gZnJvbSBcIi4uXCI7XG5pbXBvcnQgTmFtZXNwYWNlIGZyb20gXCIuL19pbmRleC5zY3NzXCI7XG5cbmV4cG9ydCBjb25zdCB7IE5BTUVfSU5QVVRfUEFTU1dPUkQsIFRZUEVfSU5QVVRfUEFTU1dPUkQgfSA9IE5hbWVzcGFjZTtcblxudHlwZSBPbk9mZlR5cGUgPSBcIm9uXCIgfCBcIm9mZlwiO1xuXG5leHBvcnQgdHlwZSBQcm9wSW5wdXRQYXNzd29yZCA9IFByb3BEUzxQYXNzd29yZEZpZWxkUHJvcHM+ICYge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBpZD86IHN0cmluZztcbiAgICBhdXRvRm9jdXM/OiBib29sZWFuO1xuICAgIG9uQ2hhbmdlPzogUmVhY3QuQ2hhbmdlRXZlbnRIYW5kbGVyPEhUTUxJbnB1dEVsZW1lbnQ+O1xuICAgIG1heExlbmd0aD86IG51bWJlcjtcbiAgICB3aXRoU3VnZ2VzdGlvbnM/OiBib29sZWFuO1xuICAgIGF1dG9DYXBpdGFsaXplPzogT25PZmZUeXBlO1xuICAgIGF1dG9Db3JyZWN0PzogT25PZmZUeXBlO1xuICAgIHNwZWxsQ2hlY2s/OiBib29sZWFuO1xufTtcblxuZXhwb3J0IGNvbnN0IERFRl9JTlBVVF9QQVNTV09SRDogUHJvcERlZmF1bHRzPFxuICAgIFByb3BJbnB1dFBhc3N3b3JkLFxuICAgIE9taXRQcm9wSUQ8UHJvcElucHV0UGFzc3dvcmQ+IHwga2V5b2YgUHJvcERTPFBhc3N3b3JkRmllbGRQcm9wcz5cbj4gPSB7IGlkOiBOQU1FX0lOUFVUX1BBU1NXT1JEIH07XG5cbnR5cGUgUHJvcElucHV0UGFzc3dvcmRNZW1vaXplZCA9IFByb3BJbnB1dFBhc3N3b3JkICYge1xuICAgIG1ldGhvZHM6IFVzZUZvcm1SZXR1cm47XG59O1xuXG5jb25zdCBJbnB1dFBhc3N3b3JkTWVtb2l6ZWQgPSBSZWFjdC5tZW1vKFxuICAgIChwcm9wczogUHJvcElucHV0UGFzc3dvcmRNZW1vaXplZCkgPT4ge1xuICAgICAgICBjb25zdCB7IGlkLCBuYW1lLCBhdXRvRm9jdXMsIG1ldGhvZHMsIHdpdGhTdWdnZXN0aW9ucyA9IHRydWUsIG9uQ2hhbmdlLCAuLi5yZXN0IH0gPSBwcm9wcztcbiAgICAgICAgY29uc3QgeyByZWdpc3RlciwgZm9ybVN0YXRlLCBjbGVhckVycm9ycyB9ID0gbWV0aG9kcztcbiAgICAgICAgY29uc3QgeyBlcnJvcnMgfSA9IGZvcm1TdGF0ZTtcblxuICAgICAgICBjb25zdCByZWdpc3Rlck5hbWUgPSBgJHtuYW1lfWAgYXMgY29uc3Q7XG4gICAgICAgIGNvbnN0IGlucHV0RXJyb3IgPSBlcnJvcnNbbmFtZV07XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxDb21wb25lbnQgbmFtZT17TkFNRV9JTlBVVF9QQVNTV09SRH0gdHlwZT17VFlQRV9JTlBVVF9QQVNTV09SRH0+XG4gICAgICAgICAgICAgICAgPFBhc3N3b3JkRmllbGRcbiAgICAgICAgICAgICAgICAgICAgYXV0b0NvbXBsZXRlPXt3aXRoU3VnZ2VzdGlvbnMgPyBcIm9uXCIgOiBcIm9mZlwifVxuICAgICAgICAgICAgICAgICAgICBhdXRvRm9jdXM9e2F1dG9Gb2N1c31cbiAgICAgICAgICAgICAgICAgICAgaWQ9e2lkIHx8IG5hbWV9XG4gICAgICAgICAgICAgICAgICAgIHsuLi4oaW5wdXRFcnJvciAmJiB7IGVycm9yOiBpbnB1dEVycm9yLm1lc3NhZ2U/LnRvU3RyaW5nKCkgfSl9XG4gICAgICAgICAgICAgICAgICAgIHsuLi5yZWdpc3RlcihyZWdpc3Rlck5hbWUsIHsgcmVxdWlyZWQ6IHRydWUsIG9uQ2hhbmdlOiByZXNldEVycm9ycyB9KX1cbiAgICAgICAgICAgICAgICAgICAgey4uLnJlc3R9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvQ29tcG9uZW50PlxuICAgICAgICApO1xuICAgICAgICBmdW5jdGlvbiByZXNldEVycm9ycyhldmVudDogUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pIHtcbiAgICAgICAgICAgIGlmIChvbkNoYW5nZSkgb25DaGFuZ2UoZXZlbnQpO1xuICAgICAgICAgICAgY2xlYXJFcnJvcnMoW3JlZ2lzdGVyTmFtZV0pO1xuICAgICAgICB9XG4gICAgfSxcbiAgICAocHJldlByb3BzLCBuZXh0UHJvcHMpID0+XG4gICAgICAgIHByZXZQcm9wcy5tZXRob2RzLmZvcm1TdGF0ZS5lcnJvcnMgPT09IG5leHRQcm9wcy5tZXRob2RzLmZvcm1TdGF0ZS5lcnJvcnMgJiZcbiAgICAgICAgcHJldlByb3BzLm1ldGhvZHMuZm9ybVN0YXRlLmRpcnR5RmllbGRzW3ByZXZQcm9wcy5uYW1lXSAhPT1cbiAgICAgICAgICAgIG5leHRQcm9wcy5tZXRob2RzLmZvcm1TdGF0ZS5kaXJ0eUZpZWxkc1tuZXh0UHJvcHMubmFtZV0sXG4pO1xuXG5leHBvcnQgZnVuY3Rpb24gSW5wdXRQYXNzd29yZChwcm9wczogUHJvcFR5cGVzPFByb3BJbnB1dFBhc3N3b3JkLCB0eXBlb2YgREVGX0lOUFVUX1BBU1NXT1JEPikge1xuICAgIGNvbnN0IG1ldGhvZHMgPSBGb3JtLnVzZUNvbnRleHQoKTtcblxuICAgIHJldHVybiA8SW5wdXRQYXNzd29yZE1lbW9pemVkIG1ldGhvZHM9e21ldGhvZHN9IHsuLi5wcm9wc30gLz47XG59XG5cbklucHV0UGFzc3dvcmQuZGlzcGxheU5hbWUgPSBOQU1FX0lOUFVUX1BBU1NXT1JEO1xuSW5wdXRQYXNzd29yZC5kZWZhdWx0UHJvcHMgPSBERUZfSU5QVVRfUEFTU1dPUkQ7XG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wiTkFNRV9JTlBVVF9DSEVDS0JPWFwiOlwiSW5wdXRDaGVja2JveFwiLFwiVFlQRV9JTlBVVF9DSEVDS0JPWFwiOlwiRWxlbWVudFwifTsiLCJjb25zdCBQQVNTUE9SVCA9IFwiMDAwNVwiIGFzIGNvbnN0O1xuY29uc3QgQ0RJID0gXCJBUjFDXCIgYXMgY29uc3Q7XG5leHBvcnQgY29uc3QgQ1VJVCA9IFwiQVIxQlwiIGFzIGNvbnN0O1xuXG5leHBvcnQgY29uc3QgUEFTU1BPUlRfTUFYX0xFTkdUSCA9IDE1O1xuZXhwb3J0IGNvbnN0IENVSVRfTUFYX0xFTkdUSCA9IDExO1xuZXhwb3J0IGNvbnN0IENESV9NQVhfTEVOR1RIID0gMTE7XG5cbmV4cG9ydCBjb25zdCBpc0N1aXRUeXBlID0gKHByb3A6IHVua25vd24pID0+IHByb3AgPT09IENVSVQ7XG5leHBvcnQgY29uc3QgaXNDRElUeXBlID0gKHByb3A6IHVua25vd24pID0+IHByb3AgPT09IENESTtcbmV4cG9ydCBjb25zdCBpc1Bhc3Nwb3J0VHlwZSA9IChwcm9wOiB1bmtub3duKSA9PiBwcm9wID09PSBQQVNTUE9SVDtcblxuZXhwb3J0IGNvbnN0IERPQ1VNRU5UU19NQVhfTEVOR1RIID0ge1xuICAgIFwiMDAwNVwiOiBQQVNTUE9SVF9NQVhfTEVOR1RILFxuICAgIEFSMUM6IENESV9NQVhfTEVOR1RILFxuICAgIEFSMUI6IENVSVRfTUFYX0xFTkdUSCxcbn07XG5cbmV4cG9ydCB0eXBlIERvY3VtZW50cyA9IGtleW9mIHR5cGVvZiBET0NVTUVOVFNfTUFYX0xFTkdUSDtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwiQHBrZy9yZWFjdFwiO1xuXG5pbXBvcnQgdHlwZSB7IFByb3BUeXBlcywgUHJvcEVsZW1lbnQsIFByb3BEZWZhdWx0cyB9IGZyb20gXCJAcGtnL3JlYWN0LXN0b3J5Ym9vay9Db21wb25lbnRcIjtcbmltcG9ydCBOYW1lc3BhY2UgZnJvbSBcIi4vX2luZGV4LnNjc3NcIjtcblxuZXhwb3J0IGNvbnN0IHsgTkFNRV9TVEVQUEVSLCBUWVBFX1NURVBQRVIgfSA9IE5hbWVzcGFjZTtcblxuZXhwb3J0IHR5cGUgU3RlcFN0ZXBwZXI8VD4gPSB7XG4gICAgY29uZGl0aW9uPzogYm9vbGVhbjtcbiAgICBjb21wb25lbnQ6IChwcm9wcz86IFQpID0+IEpTWC5FbGVtZW50IHwgbnVsbDtcbiAgICBwcm9wcz86IFQ7XG59O1xuXG5leHBvcnQgdHlwZSBTdGVwcyA9IHtcbiAgICBbVCBpbiBrZXlvZiB1bmtub3duXT86IFN0ZXBTdGVwcGVyPFQ+O1xufTtcblxuZXhwb3J0IHR5cGUgUHJvcFN0ZXBwZXIgPSBQcm9wRWxlbWVudCAmIHtcbiAgICBzdGVwczogU3RlcHM7XG4gICAgaGFuZGxlRmFsbGJhY2s/OiAoKSA9PiB2b2lkO1xuICAgIGhhbmRsZUNoYW5nZVN0ZXA/OiAoKSA9PiB2b2lkO1xufTtcblxuZXhwb3J0IGNvbnN0IERFRl9TVEVQUEVSOiBQcm9wRGVmYXVsdHM8UHJvcFN0ZXBwZXI+ID0ge1xuICAgIGhhbmRsZUNoYW5nZVN0ZXAoKSB7IH0sXG4gICAgaGFuZGxlRmFsbGJhY2soKSB7IH0sXG59O1xuXG5leHBvcnQgdHlwZSBQcm9wVHlwZXNTdGVwcGVyID0gUHJvcFR5cGVzPFByb3BTdGVwcGVyLCB0eXBlb2YgREVGX1NURVBQRVI+O1xuZXhwb3J0IGZ1bmN0aW9uIFN0ZXBwZXIocHJvcHM6IFByb3BTdGVwcGVyKSB7XG4gICAgY29uc3QgeyBzdGVwcywgaGFuZGxlRmFsbGJhY2ssIGhhbmRsZUNoYW5nZVN0ZXAgfSA9IHByb3BzIGFzIFByb3BUeXBlc1N0ZXBwZXI7XG4gICAgY29uc3QgZW50cmllcyA9IE9iamVjdC5lbnRyaWVzPFN0ZXBTdGVwcGVyPHVua25vd24+PihzdGVwcyk7XG4gICAgY29uc3QgdGFyZ2V0ID0gZW50cmllc1xuICAgICAgICAuZmlsdGVyKChlbnRyeSkgPT4gQm9vbGVhbihlbnRyeVsxXS5jb25kaXRpb24pKVxuICAgICAgICAubWFwKChba2V5LCBzdGVwXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgU3RlcCA9IHN0ZXAuY29tcG9uZW50O1xuICAgICAgICAgICAgcmV0dXJuIDxTdGVwIGtleT17a2V5fSB7Li4uKHN0ZXAucHJvcHMgfHwge30pfSAvPjtcbiAgICAgICAgfSwge30pXG4gICAgICAgIC5zaGlmdCgpO1xuXG4gICAgY29uc3QgW2N1cnJlbnRTdGVwLCBzZXRDdXJyZW50U3RlcF0gPSBSZWFjdC51c2VTdGF0ZSh0YXJnZXQ/LmtleSk7XG5cbiAgICAvKiogaWYgd2UgZG9udCBoYXZlIGEgdGFyZ2V0IFN0ZXAsXG4gICAgICogaXMgYmVjYXVzZSB3ZSBkaWRuJ3QgZ2V0IGEgdHJ1ZSBjb25kaXRpb24gZm9yIGFueSBzdGVwLFxuICAgICAqIHNvIHdlIGV4ZWN1dGUgYSBmYWxsYmFja1xuICAgICAqL1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmICghdGFyZ2V0ICYmIGhhbmRsZUZhbGxiYWNrKSBoYW5kbGVGYWxsYmFjaygpO1xuICAgIH0sIFtoYW5kbGVGYWxsYmFjaywgdGFyZ2V0XSk7XG5cbiAgICAvKiogaXQgd2lsbCBjb21wYXJlIGN1cnJlbnRTdGVwIHdpdGggdGFyZ2V0J3Mgc3RlcCBhbmQgaWYgaXRzIGRpZmZlcmVudCBpdCB3aWxsIGV4ZWN1dGUgaGFuZGxlQ2hhbmdlU3RlcCAqL1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmIChjdXJyZW50U3RlcCAhPT0gdGFyZ2V0Py5rZXkgJiYgaGFuZGxlQ2hhbmdlU3RlcCkgaGFuZGxlQ2hhbmdlU3RlcCgpO1xuICAgICAgICBzZXRDdXJyZW50U3RlcCh0YXJnZXQ/LmtleSk7XG4gICAgfSwgW2N1cnJlbnRTdGVwLCBoYW5kbGVDaGFuZ2VTdGVwLCB0YXJnZXQ/LmtleV0pO1xuXG4gICAgcmV0dXJuIHRhcmdldCB8fCBudWxsO1xufVxuXG5TdGVwcGVyLmRpc3BsYXlOYW1lID0gTkFNRV9TVEVQUEVSO1xuU3RlcHBlci5kZWZhdWx0UHJvcHMgPSBERUZfU1RFUFBFUjtcbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJOQU1FX0lOUFVUX1BBU1NXT1JEXCI6XCJJbnB1dFBhc3N3b3JkXCIsXCJUWVBFX0lOUFVUX1BBU1NXT1JEXCI6XCJFbGVtZW50XCJ9OyIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJOQU1FX1NURVBQRVJcIjpcIlN0ZXBwZXJcIixcIlRZUEVfU1RFUFBFUlwiOlwiRWxlbWVudFwifTsiLCJpbXBvcnQgUmVhY3QgZnJvbSBcIkBwa2cvcmVhY3RcIjtcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gXCJAcGtnL3JlYWN0LXN0b3J5Ym9vay9Db21wb25lbnRcIjtcbmltcG9ydCB0eXBlIHsgUHJvcERlZmF1bHRzLCBQcm9wVHlwZXMgfSBmcm9tIFwiQHBrZy9yZWFjdC1zdG9yeWJvb2svQ29tcG9uZW50XCI7XG5cbmltcG9ydCB7IHVzZURpc3BhdGNoIH0gZnJvbSBcIkBhcHAvYmFuY29uLWRhdGFcIjtcbmltcG9ydCB7IEFjdGlvblNsaWNlU2Vzc2lvbiB9IGZyb20gXCJAYXBwL2JhbmNvbi1kYXRhL3NsaWNlcy9zZXNzaW9uXCI7XG5cbmltcG9ydCB0eXBlIHtcbiAgICBPcHRpb25zQmFzZSxcbiAgICBQcm9wcyBhcyBTZWxlY3RGaWVsZFByb3BzLFxufSBmcm9tIFwiQGFwcC9iYW5jb24tdWkvZGlzdC9jb21wb25lbnRzL1NlbGVjdEZpZWxkXCI7XG5pbXBvcnQgeyBBdmF0YXIgfSBmcm9tIFwiQGFwcC9iYW5jb24tdWlcIjtcbmltcG9ydCB0eXBlIHsgQXZhdGFyQ29sb3IgfSBmcm9tIFwiQGFwcC9iYW5jb24tdWkvZGlzdC9jb21wb25lbnRzL0F2YXRhclwiO1xuaW1wb3J0IHR5cGUgeyBPbWl0UHJvcElELCBQcm9wRFMgfSBmcm9tIFwiLi4vRm9ybVwiO1xuaW1wb3J0IHsgSW5wdXRTZWxlY3QgfSBmcm9tIFwiLi4vRm9ybS9JbnB1dFNlbGVjdC9pbmRleFwiO1xuaW1wb3J0IHsgVGV4dCwgdXNlVGV4dCB9IGZyb20gXCIuLi9UZXh0L2luZGV4XCI7XG5pbXBvcnQgTmFtZXNwYWNlIGZyb20gXCIuL19pbmRleC5zY3NzXCI7XG5pbXBvcnQgUnVsZXMgZnJvbSBcIi4vX3J1bGVzLm1vZHVsZS5zY3NzXCI7XG5cbmV4cG9ydCBjb25zdCB7IE5BTUVfRU5WSVJPTk1FTlRTRUxFQ1RPUiwgVFlQRV9FTlZJUk9OTUVOVFNFTEVDVE9SIH0gPSBOYW1lc3BhY2U7XG5cbnR5cGUgUHJvcERyb3Bkb3duQnV0dG9uVmFyaWFudCA9IHtcbiAgICBkcm9wZG93bkJ1dHRvbjogUmVhY3QuUmVhY3ROb2RlO1xuICAgIGxhYmVsPzogbmV2ZXI7XG59O1xuXG50eXBlIFByb3BMYWJlbFZhcmlhbnQgPSB7XG4gICAgZHJvcGRvd25CdXR0b24/OiBuZXZlcjtcbiAgICBsYWJlbDogTm9uTnVsbGFibGU8U2VsZWN0RmllbGRQcm9wc1tcImxhYmVsXCJdPjtcbn07XG5cbmV4cG9ydCB0eXBlIFByb3BFbnZpcm9ubWVudFNlbGVjdG9yID0gKE9taXQ8XG4gICAgU2VsZWN0RmllbGRQcm9wcyxcbiAgICBrZXlvZiBSZWFjdC5IVE1MQXR0cmlidXRlczxIVE1MRWxlbWVudD4gfCBcIm9wdGlvbnNcIiB8IFwibGFiZWxcIlxuPiAmIHtcbiAgICBlbnZpcm9ubWVudHM6IE9wdGlvbnNCYXNlW107XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIG9uU2VsZWN0T3B0aW9uPzogKG9wdGlvbjogT3B0aW9uc0Jhc2UpID0+IHZvaWQgfCB1bmRlZmluZWQ7XG59KSAmXG4gICAgKFByb3BEcm9wZG93bkJ1dHRvblZhcmlhbnQgfCBQcm9wTGFiZWxWYXJpYW50KTtcblxuZXhwb3J0IGNvbnN0IERFRl9FTlZJUk9OTUVOVFNFTEVDVE9SOiBQcm9wRGVmYXVsdHM8XG4gICAgUHJvcEVudmlyb25tZW50U2VsZWN0b3IsXG4gICAgT21pdFByb3BJRDxTZWxlY3RGaWVsZFByb3BzPiB8IGtleW9mIFByb3BEUzxTZWxlY3RGaWVsZFByb3BzPlxuPiA9IHt9O1xuXG5leHBvcnQgdHlwZSBQcm9wVHlwZXNFbnZpcm9ubWVudFNlbGVjdG9yID0gUHJvcFR5cGVzPFxuICAgIFByb3BFbnZpcm9ubWVudFNlbGVjdG9yLFxuICAgIHR5cGVvZiBERUZfRU5WSVJPTk1FTlRTRUxFQ1RPUlxuPiAmIHtcbiAgICBsYWJlbDogTm9uTnVsbGFibGU8U2VsZWN0RmllbGRQcm9wc1tcImxhYmVsXCJdPjtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBFbnZpcm9ubWVudFNlbGVjdG9yKHByb3BzOiBQcm9wRW52aXJvbm1lbnRTZWxlY3Rvcikge1xuICAgIGNvbnN0IHsgZW52aXJvbm1lbnRzLCBuYW1lLCBvblNlbGVjdE9wdGlvbiwgZGVmYXVsdE9wdGlvbiwgbGFiZWwsIGRyb3Bkb3duQnV0dG9uLCAuLi5yZXN0IH0gPVxuICAgICAgICBwcm9wcyBhcyBQcm9wVHlwZXNFbnZpcm9ubWVudFNlbGVjdG9yO1xuICAgIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcblxuICAgIGNvbnN0IHsgdGV4dEdldCB9ID0gdXNlVGV4dCgpO1xuXG4gICAgLy9VcGRhdGVzIHRoZSBlbnZpcm9ubWVudCBjb2xvciBpZiBpdHMgZmFzdCBsb2dpblxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmICghZGVmYXVsdE9wdGlvbikgcmV0dXJuO1xuICAgICAgICBkaXNwYXRjaChcbiAgICAgICAgICAgIEFjdGlvblNsaWNlU2Vzc2lvbi5zZXRFbnZpcm9ubWVudENvbG9yKFxuICAgICAgICAgICAgICAgIGdldEVudmlyb25tZW50Q29sb3IoZW52aXJvbm1lbnRzLmluZGV4T2YoZGVmYXVsdE9wdGlvbikpLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICB9LCBbZGVmYXVsdE9wdGlvbiwgZGlzcGF0Y2gsIGVudmlyb25tZW50c10pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPENvbXBvbmVudCBuYW1lPXtOQU1FX0VOVklST05NRU5UU0VMRUNUT1J9IHR5cGU9e1RZUEVfRU5WSVJPTk1FTlRTRUxFQ1RPUn0+XG4gICAgICAgICAgICA8SW5wdXRTZWxlY3RcbiAgICAgICAgICAgICAgICBkZWZhdWx0T3B0aW9uPXtcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdE9wdGlvbiAmJlxuICAgICAgICAgICAgICAgICAgICBidWlsZEVudmlyb25tZW50T3B0aW9ucyhkZWZhdWx0T3B0aW9uLCBlbnZpcm9ubWVudHMuaW5kZXhPZihkZWZhdWx0T3B0aW9uKSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgey4uLihkcm9wZG93bkJ1dHRvbiA/IHsgZHJvcGRvd25CdXR0b24gfSA6IHsgbGFiZWwgfSl9XG4gICAgICAgICAgICAgICAgbmFtZT17bmFtZX1cbiAgICAgICAgICAgICAgICBvcHRpb25zPXtnZXRFbnZpcm9ubWVudE9wdGlvbnMoZW52aXJvbm1lbnRzKX1cbiAgICAgICAgICAgICAgICBvblNlbGVjdE9wdGlvbj17aGFuZGxlU2VsZWN0fVxuICAgICAgICAgICAgICAgIHsuLi5yZXN0fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgPC9Db21wb25lbnQ+XG4gICAgKTtcblxuICAgIGZ1bmN0aW9uIGdldEVudmlyb25tZW50Q29sb3IocG9zaXRpb246IG51bWJlcik6IEF2YXRhckNvbG9yIHtcbiAgICAgICAgY29uc3QgY29sb3JzOiBBdmF0YXJDb2xvcltdID0gW1xuICAgICAgICAgICAgXCJkYXJrLWdyZWVuXCIsXG4gICAgICAgICAgICBcInllbGxvd1wiLFxuICAgICAgICAgICAgXCJibHVlXCIsXG4gICAgICAgICAgICBcInZpb2xldFwiLFxuICAgICAgICAgICAgXCJncmVlblwiLFxuICAgICAgICAgICAgXCJwdXJwbGVcIixcbiAgICAgICAgICAgIFwibGlnaHQtZ3JlZW5cIixcbiAgICAgICAgXTtcbiAgICAgICAgcmV0dXJuIGNvbG9yc1twb3NpdGlvbiAlIGNvbG9ycy5sZW5ndGhdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEVudmlyb25tZW50T3B0aW9ucyhlbnZpcm9ubWVudE9wdGlvbnM6IE9wdGlvbnNCYXNlW10pOiBPcHRpb25zQmFzZVtdIHtcbiAgICAgICAgcmV0dXJuIGVudmlyb25tZW50T3B0aW9ucy5tYXAoKGVudmlyb25tZW50LCBpbmRleCkgPT5cbiAgICAgICAgICAgIGJ1aWxkRW52aXJvbm1lbnRPcHRpb25zKGVudmlyb25tZW50LCBpbmRleCksXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYnVpbGRFbnZpcm9ubWVudE9wdGlvbnMoXG4gICAgICAgIGVudmlyb25tZW50T3B0aW9uczogT3B0aW9uc0Jhc2UsXG4gICAgICAgIHBvc2l0aW9uOiBudW1iZXIsXG4gICAgKTogT3B0aW9uc0Jhc2Uge1xuICAgICAgICBjb25zdCBsYWJlbFN0cmluZyA9IGVudmlyb25tZW50T3B0aW9ucy5sYWJlbD8udG9TdHJpbmcoKTtcbiAgICAgICAgY29uc3QgYXZhdGFyTmFtZSA9IGxhYmVsU3RyaW5nPy5pbmNsdWRlcyhcInJldGFpbFwiKSA/IFwidXNlclwiIDogXCJidXNpbmVzc1wiO1xuICAgICAgICBjb25zdCBhbHRUZXh0ID0gdGV4dEdldCh7XG4gICAgICAgICAgICB1dWlkOiBhdmF0YXJOYW1lID09PSBcInVzZXJcIiA/IFwic3BhLmExMXkuaW1hZ2UuYWx0LnVzZXJcIiA6IFwic3BhLmExMXkuaW1hZ2UuYWx0LmJ1c2luZXNzXCIsXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBmaW5hbExhYmVsID0gbGFiZWxTdHJpbmc/LnJlcGxhY2UoXCJyZXRhaWxcIiwgXCJcIikucmVwbGFjZShcImNvcnBvcmF0ZVwiLCBcIlwiKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmVudmlyb25tZW50T3B0aW9ucyxcbiAgICAgICAgICAgIGxhYmVsOiAoXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e1J1bGVzLm9wdGlvbn0+XG4gICAgICAgICAgICAgICAgICAgIDxBdmF0YXJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD17YWx0VGV4dH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17UnVsZXMuYXZhdGFyfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9e2dldEVudmlyb25tZW50Q29sb3IocG9zaXRpb24pfVxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT17YXZhdGFyTmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU9XCJ4c21hbGxcIlxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICA8VGV4dCBjbGFzc05hbWU9e1J1bGVzLmxhYmVsT3B0aW9uc1RleHR9IGNvbG9yPVwiZ3JheS1kYXJrXCIgdGFnPVwic3BhblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAge2ZpbmFsTGFiZWx9XG4gICAgICAgICAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICksXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlU2VsZWN0KG9wdGlvbjogT3B0aW9uc0Jhc2UpIHtcbiAgICAgICAgZW52aXJvbm1lbnRzLmZvckVhY2goKGVudmlyb25tZW50LCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgaWYgKGVudmlyb25tZW50LnZhbHVlID09PSBvcHRpb24udmFsdWUpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVFbnZpcm9ubWVudENvbG9yKGdldEVudmlyb25tZW50Q29sb3IoaW5kZXgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChvblNlbGVjdE9wdGlvbikgb25TZWxlY3RPcHRpb24ob3B0aW9uKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVFbnZpcm9ubWVudENvbG9yKGNvbG9yOiBBdmF0YXJDb2xvcik6IHZvaWQge1xuICAgICAgICBkaXNwYXRjaChBY3Rpb25TbGljZVNlc3Npb24uc2V0RW52aXJvbm1lbnRDb2xvcihjb2xvcikpO1xuICAgIH1cbn1cblxuRW52aXJvbm1lbnRTZWxlY3Rvci5kZWZhdWx0UHJvcHMgPSBERUZfRU5WSVJPTk1FTlRTRUxFQ1RPUjtcbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJOQU1FX0VOVklST05NRU5UU0VMRUNUT1JcIjpcIkVudmlyb25tZW50U2VsZWN0b3JcIixcIlRZUEVfRU5WSVJPTk1FTlRTRUxFQ1RPUlwiOlwiRWxlbWVudFwifTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wiTkFNRV9FTlZJUk9OTUVOVFNFTEVDVE9SXCI6XCJFbnZpcm9ubWVudFNlbGVjdG9yXCIsXCJUWVBFX0VOVklST05NRU5UU0VMRUNUT1JcIjpcIkVsZW1lbnRcIixcIk5BTUVfWFNcIjpcInhzXCIsXCJOQU1FX1NNXCI6XCJzbVwiLFwiTkFNRV9NRFwiOlwibWRcIixcIk5BTUVfTEdcIjpcImxnXCIsXCJOQU1FX1RIRU1FUExBVEZPUk1cIjpcIlRoZW1lUGxhdGZvcm1cIixcIlRZUEVfVEhFTUVQTEFURk9STVwiOlwiQnVuZGxlXCIsXCJOQU1FX0NPTlNVTUVSX1RIRU1FUExBVEZPUk1cIjpcIlRoZW1lUGxhdGZvcm1Db25zdW1lclwiLFwiVFlQRV9DT05TVU1FUl9USEVNRVBMQVRGT1JNXCI6XCJFbGVtZW50XCIsXCJOQU1FX1BST1ZJREVSX1RIRU1FUExBVEZPUk1cIjpcIlRoZW1lUGxhdGZvcm1Qcm92aWRlclwiLFwiVFlQRV9QUk9WSURFUl9USEVNRVBMQVRGT1JNXCI6XCJQcm92aWRlclwiLFwib3B0aW9uXCI6XCJfcnVsZXNfb3B0aW9uX19BVmpWdFwiLFwibGFiZWxPcHRpb25zVGV4dFwiOlwiX3J1bGVzX2xhYmVsT3B0aW9uc1RleHRfXzNrN2djXCIsXCJhdmF0YXJcIjpcIl9ydWxlc19hdmF0YXJfXzN2UWNlXCJ9OyIsImltcG9ydCB7IEVSUk9SX0NPUkRPVkEsIE1vYmlsZVJlYWR5IH0gZnJvbSBcIkBwa2cvdXRpbHMtY29yZG92YS1wbHVnaW4tdHNcIjtcbmltcG9ydCB7IFBsdWdpbkVycm9yLCBQTFVHSU5fU1RBVFVTLCBVTktOT1dOX0VSUk9SX01TRyB9IGZyb20gXCIuL2Vycm9yXCI7XG5cbmV4cG9ydCB0eXBlIFByb3BpT1NOYXZpZ2F0aW9uID0ge1xuICAgIHZhbHVlOiBib29sZWFuO1xufTtcblxuY29uc3QgcGx1Z2luTmFtZSA9IFwiaU9TTmF2aWdhdGlvblwiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0UGx1Z2luKCk6IFByb21pc2U8Q29yZG92YVBsdWdpbnNbXCJpT1NOYXZpZ2F0aW9uXCJdPiB7XG4gICAgY29uc3QgaXNNb2JpbGVSZWFkeSA9IGF3YWl0IE1vYmlsZVJlYWR5KCk7XG4gICAgLy8gbWFrZSBzdXJlIENvcmRvdmEgaXMgYXZhaWxhYmxlIGFuZCByZWFkeVxuICAgIGlmICghaXNNb2JpbGVSZWFkeSB8fCAhY29yZG92YS5wbHVnaW5zKSB0aHJvdyBFUlJPUl9DT1JET1ZBLkNPUkRPVkFfVU5BVkFJTEFCTEU7XG4gICAgLy8gbWFrZSBzdXJlIHBsdWdpbiBpcyBhdmFpbGFibGVcbiAgICBjb25zdCBwbHVnaW4gPSAoXG4gICAgICAgIGNvcmRvdmEucGx1Z2lucyBhcyBDb3Jkb3ZhUGx1Z2lucyAmIHsgaU9TTmF2aWdhdGlvbjogQ29yZG92YVBsdWdpbnNbXCJpT1NOYXZpZ2F0aW9uXCJdIH1cbiAgICApLmlPU05hdmlnYXRpb247XG5cbiAgICBpZiAoIXBsdWdpbikgdGhyb3cgRVJST1JfQ09SRE9WQS5QTFVHSU5fVU5BVkFJTEFCTEU7XG4gICAgcmV0dXJuIHBsdWdpbjtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNldEFsbG93c0JhY2tGb3J3YXJkTmF2aWdhdGlvbkdlc3R1cmVzKHByb3BzOiBQcm9waU9TTmF2aWdhdGlvbikge1xuICAgIGNvbnN0IHsgdmFsdWUgfSA9IHByb3BzO1xuXG4gICAgY29uc3QgaXNNb2JpbGVSZWFkeSA9IGF3YWl0IE1vYmlsZVJlYWR5KCk7XG4gICAgLy8gbWFrZSBzdXJlIENvcmRvdmEgaXMgYXZhaWxhYmxlIGFuZCByZWFkeVxuICAgIGlmICghaXNNb2JpbGVSZWFkeSkgdGhyb3cgRVJST1JfQ09SRE9WQS5DT1JET1ZBX1VOQVZBSUxBQkxFO1xuXG4gICAgY29uc3QgcGx1Z2luID0gYXdhaXQgZ2V0UGx1Z2luKCk7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcGx1Z2luLnNldEFsbG93c0JhY2tGb3J3YXJkTmF2aWdhdGlvbkdlc3R1cmVzKFxuICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICAgIChjb2RlOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBQTFVHSU5fU1RBVFVTLlNVQ0NFU1MsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY29kZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAoZXJyb3I6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgUGx1Z2luRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUExVR0lOX1NUQVRVUy5FUlJPUixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHVnaW4uc2V0QWxsb3dzQmFja0ZvcndhcmROYXZpZ2F0aW9uR2VzdHVyZXMubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvclxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmVqZWN0KG5ldyBQbHVnaW5FcnJvcihQTFVHSU5fU1RBVFVTLkVSUk9SLCBwbHVnaW5OYW1lLCBVTktOT1dOX0VSUk9SX01TRywgZXJyKSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=
//# sourceMappingURL=58.40293b29.chunk.js.map