(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[60,298],{243:function(e,t,a){"use strict";a.r(t),a.d(t,"default",(function(){return k}));var n=a(0),r=a(5),c=a(2),o=a(16),s=a(11),i=a(497),u=a(51),l=a(38),d=a(270),_=a(82),m=a(503),b=a(488),E=a(39),O=a(6),T=a(8),j=a(117),f=a(33),p=a(562),A=a(500),N=a(504),M=a(779),h=a.n(M),S=a(10);function x(e){var t=e.transaction,a=t.contactName,n=t.accountNumber,r=t.date,c=t.amount,o=t.state,s=t.branchId,i=Object(l.c)().textGet,u="spa.modo.transaction.card",d="".concat(s).concat(O.j).concat(n),_=i({uuid:"".concat(u,".state.").concat(o.toLocaleLowerCase())}),m={ERROR:"error",PENDI:"warning",OK:"success"}[o];return Object(S.jsxs)(p.a,{children:[Object(S.jsxs)("div",{className:h.a.cardInfo,children:[Object(S.jsx)(l.b,{className:h.a.name,tag:"span",children:a}),Object(S.jsx)(l.b,{className:h.a.amount,tag:"span",children:Object(S.jsx)(A.a,{amount:c.quantity})})]}),Object(S.jsxs)("div",{className:h.a.cardInfo,children:[Object(S.jsx)(l.b,{tag:"span",uuid:"".concat(u,".date")}),Object(S.jsx)(N.a,{date:r})]}),Object(S.jsxs)("div",{className:h.a.cardInfo,children:[Object(S.jsx)(l.b,{tag:"span",uuid:"".concat(u,".account")}),Object(S.jsx)(l.b,{className:h.a.account,tag:"span",children:d})]}),Object(S.jsxs)("div",{className:h.a.cardInfo,children:[Object(S.jsx)(l.b,{tag:"span",uuid:"".concat(u,".state")}),Object(S.jsx)(l.b,{className:h.a[m],tag:"span",children:_})]})]})}var P=a(19),R=a(41),C=a(187),F=a(566),g=a(512),I=a(780),D=a.n(I),v=["handleShowFilters","showFilters"],L=D.a.NAME_TRANSACTION_FILTERS,U=D.a.TYPE_TRANSACTION_FILTERS,y={DATE_RANGE:"DateRange",AMOUNT:"Amount",STATE:"State"},Y=function(e){var t=e.textErrorMaxAmount,a=e.textErrorRequired,n=e.textErrorDateFrom,r=e.typeState,c=r===y.STATE,o=r===y.AMOUNT,s=r===y.DATE_RANGE;return E.e.object({typeState:Object(C.d)(E.e.string.required(),a),state:c?Object(C.d)(E.e.string.required(),a):E.e.string.orUndefined(),dateFrom:s?Object(E.c)((function(e,t){var r=t.branch[O.Sb].dateTo;return e?Object(C.f)(E.e.date(),r,n):Object(C.d)(E.e.date(),a)})):E.e.date.orUndefined(),dateTo:s?Object(C.d)(E.e.date(),a):E.e.date.orUndefined(),minAmount:o?Object(C.d)(E.e.number(),a):E.e.number.orUndefined(),maxAmount:o?Object(E.c)((function(e,n){var r=n.branch[O.Sb].minAmount;return String(e)?Object(C.j)(E.e.number(),r,t):Object(C.d)(E.e.number(),a)})):E.e.number.orUndefined()})};function w(e){var t,a=e,n=a.handleShowFilters,r=a.showFilters,i=Object(P.a)(a,v),u=Object(l.c)().textGet,d=Object(T.b)(),E=b.a.useContext(),f=E.clearErrors,p=E.reset,A=s.b.useState(),N=Object(o.a)(A,2),M=N[0],h=N[1],x=Object(T.c)(j.c.stateOptions),C=Object(T.c)(j.c.typeStateOptions),I=Object(T.c)(j.c.selectedTypeState),D=u({uuid:"spa.modo.transaction.option.filter.states.label"}),Y=u({uuid:"spa.modo.transaction.from.label"}),w=u({uuid:"spa.modo.transaction.to.label"}),H=r?"spa.modo.transaction.hide.filters":"spa.modo.transaction.show.filters",B=u({uuid:"spa.modo.transaction.option.filterBy.label"});return Object(S.jsxs)(R.a,Object(c.a)(Object(c.a)({},i),{},{name:L,type:U,children:[Object(S.jsx)("div",{children:Object(S.jsx)(_.a,{kind:"plain",label:{uuid:H},type:"button",onClick:function(){r&&f();p(),n(),d(j.a.cleanTransactionsPagination()),d(j.a.cleanSelectedStates())}})}),r&&Object(S.jsxs)(s.b.Fragment,{children:[Object(S.jsx)(m.a,{defaultOption:(t=C,k(t).filter((function(e){if(e.value===I)return e}))[O.Sb]),label:B,name:"typeState",options:k(C),onSelectOption:function(e){var t=e.value;d(j.a.setSelectedTypeState(String(t))),d(j.a.cleanTransactionsPagination()),y.DATE_RANGE!==String(t)&&p()}}),function(e){switch(e){case y.DATE_RANGE:return Object(S.jsxs)(s.b.Fragment,{children:[Object(S.jsx)(F.a,{id:"filterDate",label:Y,name:"dateFrom",onChange:V}),Object(S.jsx)(F.a,{id:"filterDate",label:w,minDate:M,name:"dateTo"})]});case y.AMOUNT:return Object(S.jsxs)(s.b.Fragment,{children:[Object(S.jsx)(g.a,{fixedDecimalScale:!0,decimalScale:O.Jb,decimalSeparator:O.t,label:Y,name:"minAmount",pattern:O.D,prefixCode:O.b}),Object(S.jsx)(g.a,{fixedDecimalScale:!0,decimalScale:O.Jb,decimalSeparator:O.t,label:w,name:"maxAmount",pattern:O.D,prefixCode:O.b})]});case y.STATE:return Object(S.jsx)(m.a,{label:D,name:"state",options:k(x)});default:return}}(I),Object(S.jsx)(_.a,{label:{uuid:"spa.form.search"},type:"submit"})]})]}));function k(e){return e.map((function(e){return Object(c.a)(Object(c.a)({},e),{},{label:u({uuid:"spa.modo.transaction.option.".concat(e.label)})})}))}function V(e){h(e)}}var H=a(475),B=a.n(H);function k(){var e,t=Object(l.c)().textGet,a=Object(u.qb)(),p=Object(T.b)(),A=s.b.useState(!1),N=Object(o.a)(A,2),M=N[0],h=N[1],P=s.b.useState(!1),R=Object(o.a)(P,2),C=R[0],F=R[1],g=Object(u.sb)(u.C),I=Object(T.c)(j.c.fetching),D=Object(T.c)(j.c.transactionsFetching),v=Object(T.c)(j.c.transactionList),L=Object(T.c)(j.c.transactionsPagination),U=Object(T.c)(j.c.isEmptyPagination),H=Object(T.c)(j.c.isEmptyList),k=Object(T.c)(j.c.showMoreTransactions),V=Object(T.c)(j.c.timeStateOptions),G=Object(T.c)(j.c.selectedTypeState),q=Object(T.c)(j.c.selectedTimeState),J=Object(T.c)(j.c.hasFinishedModoOnboarding),W=Object(T.c)(f.e.token),X=G===y.STATE,Z=G===y.AMOUNT,z=G===y.DATE_RANGE,K=t({uuid:"spa.modo.transaction.option.filter.label"}),Q=t({uuid:"spa.generic.field.error.required"}),$=t({uuid:"spa.modo.transaction.maxAmount.error"}),ee=t({uuid:"spa.modo.transaction.dateFrom.error"}),te=Object(E.a)(E.e.object({timeState:E.e.string.orUndefined()}),Y({textErrorMaxAmount:$,textErrorRequired:Q,textErrorDateFrom:ee,typeState:G}));return s.b.useEffect((function(){W&&(J?(p(j.b.getTransactionStates({token:W})),p(j.b.getTransactionList({token:W,timeState:"Today"})),p(j.a.cleanSelectedStates()),F(!0)):a(g,{replace:!0}))}),[p,J,a,W,g]),s.b.useEffect((function(){v&&v.length&&p(j.a.trasactionGetPagination())}),[v,p]),I&&!D||!C?Object(S.jsx)(d.a,{}):Object(S.jsxs)(i.a,{withFooter:!0,className:B.a.trasactionSent,"header-onBack":function(){a(O.c)},children:[Object(S.jsx)("header",{children:Object(S.jsx)(l.b,{tag:"h1",uuid:"spa.modo.transaction.sent.title"})}),Object(S.jsxs)(b.a,{schema:te,onSubmit:function(e){return ne.apply(this,arguments)},children:[Object(S.jsx)(m.a,{defaultOption:(e=V,ae(e).filter((function(e){if(e.value===q)return e}))[O.Sb]),disabled:M,label:K,name:"timeState",options:ae(V),onSelectOption:function(e){return re.apply(this,arguments)}}),Object(S.jsx)(w,{handleShowFilters:function(){h(!M)},showFilters:M})]}),Object(S.jsx)("section",{className:B.a.transactionList,children:D?Object(S.jsx)(d.a,{}):H?Object(S.jsx)(l.b,{className:B.a.emptyMessage,uuid:"spa.modo.transaction.empty"}):Object(S.jsxs)(s.b.Fragment,{children:[L.map((function(e){return Object(S.jsx)(x,{transaction:e},e.transferId)})),k&&!U&&Object(S.jsx)("footer",{children:Object(S.jsx)(_.a,{kind:"plain",label:{uuid:"spa.modo.show.more"},onClick:ce})})]})})]});function ae(e){return e.map((function(e){return Object(c.a)(Object(c.a)({},e),{},{label:t({uuid:"spa.modo.transaction.option.".concat(e.label)})})}))}function ne(){return(ne=Object(r.a)(Object(n.a)().mark((function e(t){var a,r,o,s,i;return Object(n.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(W){e.next=2;break}return e.abrupt("return");case 2:return a=t.dateFrom,r=t.dateTo,o=t.minAmount,s=t.maxAmount,i=t.state,e.next=5,p(j.b.getTransactionList(Object(c.a)(Object(c.a)(Object(c.a)({token:W},z&&{typeState:y.DATE_RANGE,dateFrom:a,dateTo:r}),Z&&{typeState:y.AMOUNT,minAmount:String(o),maxAmount:String(s)}),X&&{typeState:y.STATE,state:i})));case 5:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function re(){return(re=Object(r.a)(Object(n.a)().mark((function e(t){var a;return Object(n.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(a=t.value,W){e.next=3;break}return e.abrupt("return");case 3:return p(j.a.setSelectedTimeState(String(a))),e.next=6,p(j.b.getTransactionList({token:W,timeState:String(a)}));case 6:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function ce(){p(j.a.trasactionGetPagination())}}},475:function(e,t,a){e.exports={NAME_INPUT_SELECT:"InputSelect",TYPE_INPUT_SELECT:"Element",NAME_INPUT_DATE_FIELD:"InputDateField",TYPE_INPUT_DATE_FIELD:"Element",NAME_INPUT_NUMBER:"InputNumber",TYPE_INPUT_NUMBER:"Element",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_FORM:"Form",TYPE_FORM:"Element",NAME_TRANSACTION_FILTERS:"TransactionFilters",TYPE_TRANSACTION_FILTERS:"Section",trasactionSent:"_rules_trasactionSent__2LBT_",transactionList:"_rules_transactionList__1WBX-",emptyMessage:"_rules_emptyMessage__20JUs"}},512:function(e,t,a){"use strict";a.d(t,"a",(function(){return T}));var n=a(2),r=a(19),c=a(11),o=a(50),s=a(41),i=a(488),u=a(514),l=a.n(u),d=a(10),_=["id","name","methods","defaultValue","onChange","valueAsNumber"],m=l.a.NAME_INPUT_NUMBER,b=l.a.TYPE_INPUT_NUMBER,E={id:m,valueAsNumber:!0},O=c.b.memo((function(e){var t,a=e.id,i=e.name,u=e.methods,l=e.defaultValue,E=e.onChange,O=e.valueAsNumber,T=Object(r.a)(e,_),j=u.register,f=u.formState,p=u.getValues,A=u.setValue,N=u.clearErrors,M=f.errors,h="".concat(i),S=p()[h],x=M[i];return c.b.useEffect((function(){l&&A(h,l,{shouldValidate:!0}),l||A(h,void 0)}),[l,h,A]),Object(d.jsx)(s.a,{name:m,type:b,children:Object(d.jsx)(o.NumberField,Object(n.a)(Object(n.a)(Object(n.a)(Object(n.a)({},l&&{defaultValue:l}),{},{id:a||i},x&&{error:null===(t=x.message)||void 0===t?void 0:t.toString()}),j(h,{onChange:function(e){E&&E(e);N([h])},valueAsNumber:O})),{},{value:S},T))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function T(e){var t=i.a.useContext();return Object(d.jsx)(O,Object(n.a)({methods:t},e))}T.displayName=m,T.defaultProps=E},514:function(e,t,a){e.exports={NAME_INPUT_NUMBER:"InputNumber",TYPE_INPUT_NUMBER:"Element"}},562:function(e,t,a){"use strict";a.d(t,"a",(function(){return E}));var n=a(2),r=a(19),c=(a(11),a(50)),o=a(563),s=a.n(o),i=a(564),u=a.n(i),l=a(559),d=a(10),_=["children","cardColor"],m=u.a.NAME_MODOCARD,b=u.a.TYPE_MODOCARD;function E(e){var t=e,a=t.children,o=t.cardColor,i=Object(r.a)(t,_);return Object(d.jsx)(c.Card,Object(n.a)(Object(n.a)({"data-name":m,"data-type":b},i),{},{children:Object(d.jsxs)("div",{className:s.a.container,children:[Object(d.jsx)(c.Separator,{className:s.a[l.c[o]],type:"vertical"}),Object(d.jsx)("section",{className:s.a.content,children:a})]})}))}E.defaultProps={cardColor:"LC"}},563:function(e,t,a){e.exports={NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_MODOCARD:"ModoCard",TYPE_MODOCARD:"Element",container:"_rules_container__38l4C",content:"_rules_content__2hZJ9",cardColor_1:"_rules_cardColor_1__2RwjH",cardColor_2:"_rules_cardColor_2__3EECs",cardColor_3:"_rules_cardColor_3__3iegv",cardColor_4:"_rules_cardColor_4__1Ewid",cardColor_5:"_rules_cardColor_5__asLI4",cardColor_6:"_rules_cardColor_6__3G0vB",cardColor_7:"_rules_cardColor_7__2-RuC",cardColor_8:"_rules_cardColor_8__31h6l",cardColor_9:"_rules_cardColor_9__1LDGZ",cardColor_10:"_rules_cardColor_10__1M1_O",cardColor_11:"_rules_cardColor_11__3bwOm",cardColor_12:"_rules_cardColor_12__2L3Na"}},564:function(e,t,a){e.exports={NAME_MODOCARD:"ModoCard",TYPE_MODOCARD:"Element"}},566:function(e,t,a){"use strict";a.d(t,"a",(function(){return O}));var n=a(2),r=a(19),c=a(11),o=a(50),s=a(41),i=a(488),u=a(567),l=a.n(u),d=a(10),_=["id","name","methods","onChange","defaultValue"],m=l.a.NAME_INPUT_DATE_FIELD,b=l.a.TYPE_INPUT_DATE_FIELD,E=c.b.memo((function(e){var t=e.id,a=e.name,i=e.methods,u=e.onChange,l=e.defaultValue,E=Object(r.a)(e,_),O=i.register,T=i.formState,j=i.setValue,f=i.clearErrors,p=T.errors,A="".concat(a),N=p[a];return c.b.useEffect((function(){j(A,l||void 0)}),[l,A,j]),Object(d.jsx)(s.a,{name:m,type:b,children:Object(d.jsx)(o.DateField,Object(n.a)(Object(n.a)(Object(n.a)({id:t||a},N&&{error:String(N.message)}),O(A)),{},{onChange:function(e){j(A,e),f([A]),u&&u(e)}},E))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function O(e){var t=i.a.useContext();return Object(d.jsx)(E,Object(n.a)({methods:t},e))}O.displayName=m},567:function(e,t,a){e.exports={NAME_INPUT_DATE_FIELD:"InputDateField",TYPE_INPUT_DATE_FIELD:"Element"}},779:function(e,t,a){e.exports={NAME_AMOUNT_FORMATTER:"AmountFormatter",TYPE_AMOUNT_FORMATTER:"Element",NAME_DATETIME:"DateTime",TYPE_DATETIME:"Element",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",cardInfo:"_rules_cardInfo__35luQ",name:"_rules_name__2W6jT",amount:"_rules_amount__1LITl",account:"_rules_account__5OEz0",error:"_rules_error__2hR0W",success:"_rules_success__3JNmF",warning:"_rules_warning__3Vxqw"}},780:function(e,t,a){e.exports={NAME_TRANSACTION_FILTERS:"TransactionFilters",TYPE_TRANSACTION_FILTERS:"Section"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc2VjdGlvbnMvTW9kby9UcmFzYWN0aW9uU2VudENhcmQvaW5kZXgudHN4Iiwid2VicGFjazovLy8uL3NyYy9zZWN0aW9ucy9Nb2RvL1RyYW5zYWN0aW9uRmlsdGVycy9pbmRleC50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzL01vZG8vVHJhbnNhY3Rpb25zU2VudC9pbmRleC50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzL01vZG8vVHJhbnNhY3Rpb25zU2VudC9fcnVsZXMubW9kdWxlLnNjc3MiLCJ3ZWJwYWNrOi8vLy4uL2JhbmNvci1jb21wb25lbnRzL0VsZW1lbnQvRm9ybS9JbnB1dE51bWJlci9pbmRleC50c3giLCJ3ZWJwYWNrOi8vLy4uL2JhbmNvci1jb21wb25lbnRzL0VsZW1lbnQvRm9ybS9JbnB1dE51bWJlci9faW5kZXguc2NzcyIsIndlYnBhY2s6Ly8vLi4vYmFuY29yLWNvbXBvbmVudHMvRWxlbWVudC9DYXJkL01vZG9DYXJkL2luZGV4LnRzeCIsIndlYnBhY2s6Ly8vLi4vYmFuY29yLWNvbXBvbmVudHMvRWxlbWVudC9DYXJkL01vZG9DYXJkL19ydWxlcy5tb2R1bGUuc2NzcyIsIndlYnBhY2s6Ly8vLi4vYmFuY29yLWNvbXBvbmVudHMvRWxlbWVudC9DYXJkL01vZG9DYXJkL19pbmRleC5zY3NzIiwid2VicGFjazovLy8uLi9iYW5jb3ItY29tcG9uZW50cy9FbGVtZW50L0Zvcm0vSW5wdXREYXRlRmllbGQvaW5kZXgudHN4Iiwid2VicGFjazovLy8uLi9iYW5jb3ItY29tcG9uZW50cy9FbGVtZW50L0Zvcm0vSW5wdXREYXRlRmllbGQvX2luZGV4LnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlY3Rpb25zL01vZG8vVHJhc2FjdGlvblNlbnRDYXJkL19ydWxlcy5tb2R1bGUuc2NzcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2VjdGlvbnMvTW9kby9UcmFuc2FjdGlvbkZpbHRlcnMvX2luZGV4LnNjc3MiXSwibmFtZXMiOlsiVHJhc2FjdGlvblNlbnRDYXJkIiwicHJvcHMiLCJ0cmFuc2FjdGlvbiIsImNvbnRhY3ROYW1lIiwiYWNjb3VudE51bWJlciIsImRhdGUiLCJhbW91bnQiLCJzdGF0ZSIsImJyYW5jaElkIiwidGV4dEdldCIsInVzZVRleHQiLCJUUkFOU0FDVElPTlNfVEVYVFMiLCJhY2NvdW50IiwiY29uY2F0IiwiREFTSCIsInN0YXRlVmFsdWUiLCJ1dWlkIiwidG9Mb2NhbGVMb3dlckNhc2UiLCJjb2xvclN0YXRlQ2xhc3MiLCJFUlJPUiIsIlBFTkRJIiwiT0siLCJfanN4cyIsIk1vZG9DYXJkIiwiY2hpbGRyZW4iLCJjbGFzc05hbWUiLCJSdWxlcyIsImNhcmRJbmZvIiwiX2pzeCIsIlRleHQiLCJuYW1lIiwidGFnIiwiQW1vdW50Rm9ybWF0dGVyIiwicXVhbnRpdHkiLCJEYXRlVGltZSIsIk5BTUVfVFJBTlNBQ1RJT05fRklMVEVSUyIsIk5hbWVzcGFjZSIsIlRZUEVfVFJBTlNBQ1RJT05fRklMVEVSUyIsIktJTkRfVFlQRV9TVEFURSIsIkRBVEVfUkFOR0UiLCJBTU9VTlQiLCJTVEFURSIsImZpbHRlclNjaGVtYSIsIl9yZWYiLCJ0ZXh0RXJyb3JNYXhBbW91bnQiLCJ0ZXh0RXJyb3JSZXF1aXJlZCIsInRleHRFcnJvckRhdGVGcm9tIiwidHlwZVN0YXRlIiwiaXNUeXBlU3RhdGUiLCJpc1R5cGVBbW91bnQiLCJpc1R5cGVEYXRlUmFuZ2UiLCJUeXBlIiwib2JqZWN0IiwiQ3VzdG9tRXJyb3IiLCJzdHJpbmciLCJyZXF1aXJlZCIsIm9yVW5kZWZpbmVkIiwiZGF0ZUZyb20iLCJEeW5hbWljIiwidmFsdWUiLCJfcmVmMiIsImRhdGVUbyIsImJyYW5jaCIsIlpFUk8iLCJEYXRlTGVzc1RoYW4iLCJtaW5BbW91bnQiLCJudW1iZXIiLCJtYXhBbW91bnQiLCJfcmVmMyIsIlN0cmluZyIsIkdyZWF0ZXJFcXVhbFRvIiwiVHJhbnNhY3Rpb25GaWx0ZXJzIiwib3B0aW9ucyIsIl9yZWY0IiwiaGFuZGxlU2hvd0ZpbHRlcnMiLCJzaG93RmlsdGVycyIsInJlc3QiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJfZXhjbHVkZWQiLCJkaXNwYXRjaCIsInVzZURpc3BhdGNoIiwibWV0aG9kcyIsIkZvcm0iLCJ1c2VDb250ZXh0IiwiY2xlYXJFcnJvcnMiLCJyZXNldCIsIl9SZWFjdCR1c2VTdGF0ZSIsIlJlYWN0IiwidXNlU3RhdGUiLCJfUmVhY3QkdXNlU3RhdGUyIiwiX3NsaWNlZFRvQXJyYXkiLCJkYXRlRnJvbVNlbGVjdGVkIiwic2V0RGF0ZUZyb21TZWxlY3RlZCIsInN0YXRlT3B0aW9ucyIsInVzZVNlbGVjdG9yIiwiU2VsZWN0b3JTbGljZU1vZG8iLCJ0eXBlU3RhdGVPcHRpb25zIiwic2VsZWN0ZWRUeXBlU3RhdGUiLCJmaWx0ZXJCeVN0YXRlc0xhYmVsIiwiZnJvbUxhYmVsIiwidG9MYWJlbCIsInNob3dIaWRlRmlsdGVyc1RleHQiLCJmaWx0ZXJCeUxhYmVsIiwiQ29tcG9uZW50IiwiX29iamVjdFNwcmVhZCIsInR5cGUiLCJCdXR0b24iLCJraW5kIiwibGFiZWwiLCJvbkNsaWNrIiwiQWN0aW9uU2xpY2VNb2RvIiwiY2xlYW5UcmFuc2FjdGlvbnNQYWdpbmF0aW9uIiwiY2xlYW5TZWxlY3RlZFN0YXRlcyIsIkZyYWdtZW50IiwiSW5wdXRTZWxlY3QiLCJkZWZhdWx0T3B0aW9uIiwiYnVpbGRGaWx0ZXJPcHRpb25zIiwiZmlsdGVyIiwib3B0aW9uIiwib25TZWxlY3RPcHRpb24iLCJzZXRTZWxlY3RlZFR5cGVTdGF0ZSIsIklucHV0RGF0ZUZpZWxkIiwiaWQiLCJvbkNoYW5nZSIsImhhbmRsZURhdGVGcm9tIiwibWluRGF0ZSIsIklucHV0TnVtYmVyIiwiZml4ZWREZWNpbWFsU2NhbGUiLCJkZWNpbWFsU2NhbGUiLCJUV08iLCJkZWNpbWFsU2VwYXJhdG9yIiwiRE9UX1NUUiIsInBhdHRlcm4iLCJFTVBUWV9TVFJJTkciLCJwcmVmaXhDb2RlIiwiQVJTX1NZTUJPTCIsImdldFR5cGVTdGF0ZUZpbHRlcnMiLCJlbnZpcm9ubWVudE9wdGlvbnMiLCJtYXAiLCJUcmFuc2FjdGlvbnNTZW50IiwibmF2aWdhdGUiLCJ1c2VOYXZpZ2F0ZSIsInNldFNob3dGaWx0ZXJzIiwiX1JlYWN0JHVzZVN0YXRlMyIsIl9SZWFjdCR1c2VTdGF0ZTQiLCJ1c2VyVmVyaWZpZWRNT0RPIiwic2V0VXNlclZlcmlmaWVkTU9ETyIsInVybFByZXNlbnRhdGlvbk1vZG8iLCJ1c2VQYXRoIiwiUk9VVEVfUEFUSF9NT0RPX09OQk9BUkRJTkdfUkVHSVNURVJfUFJFU0VOVEFUSU9OIiwiZmV0Y2hpbmciLCJ0cmFuc2FjdGlvbnNGZXRjaGluZyIsInRyYW5zYWN0aW9ucyIsInRyYW5zYWN0aW9uTGlzdCIsInRyYW5zYWN0aW9uc1BhZ2luYXRpb24iLCJpc0VtcHR5UGFnaW5hdGlvbiIsImlzRW1wdHlMaXN0Iiwic2hvd01vcmUiLCJzaG93TW9yZVRyYW5zYWN0aW9ucyIsInRpbWVTdGF0ZU9wdGlvbnMiLCJzZWxlY3RlZFRpbWVTdGF0ZSIsImhhc0ZpbmlzaGVkTW9kb09uYm9hcmRpbmciLCJ0b2tlbiIsIlNlbGVjdG9yU2xpY2VTZXNzaW9uIiwiZmlsdGVyTGFiZWwiLCJzY2hlbWEiLCJBc3NpZ24iLCJ0aW1lU3RhdGUiLCJ1c2VFZmZlY3QiLCJGZXRjaGVyU2xpY2VNb2RvIiwiZ2V0VHJhbnNhY3Rpb25TdGF0ZXMiLCJnZXRUcmFuc2FjdGlvbkxpc3QiLCJyZXBsYWNlIiwibGVuZ3RoIiwidHJhc2FjdGlvbkdldFBhZ2luYXRpb24iLCJMb2FkaW5nIiwiSW50ZXJuYWxDb250YWluZXIiLCJ3aXRoRm9vdGVyIiwidHJhc2FjdGlvblNlbnQiLCJCQUNLX1JPVVRFUiIsIm9uU3VibWl0IiwiX3giLCJfaGFuZGxlU3VibWl0IiwiYXBwbHkiLCJhcmd1bWVudHMiLCJkaXNhYmxlZCIsIl94MiIsIl9oYW5kbGVTZWxlY3QiLCJlbXB0eU1lc3NhZ2UiLCJ0cmFuc2ZlcklkIiwiaGFuZGxlQ2xpY2tTaG93TW9yZSIsIl9hc3luY1RvR2VuZXJhdG9yIiwiX3JlZ2VuZXJhdG9yUnVudGltZSIsIm1hcmsiLCJfY2FsbGVlIiwiZGF0YSIsIndyYXAiLCJfY29udGV4dCIsInByZXYiLCJuZXh0IiwiYWJydXB0Iiwic3RvcCIsIl9jYWxsZWUyIiwiX2NvbnRleHQyIiwic2V0U2VsZWN0ZWRUaW1lU3RhdGUiLCJtb2R1bGUiLCJleHBvcnRzIiwiTkFNRV9JTlBVVF9OVU1CRVIiLCJUWVBFX0lOUFVUX05VTUJFUiIsIkRFRl9JTlBVVF9OVU1CRVIiLCJ2YWx1ZUFzTnVtYmVyIiwiSW5wdXROdW1iZXJNZW1vaXplZCIsIm1lbW8iLCJfaW5wdXRFcnJvciRtZXNzYWdlIiwiZGVmYXVsdFZhbHVlIiwicmVnaXN0ZXIiLCJmb3JtU3RhdGUiLCJnZXRWYWx1ZXMiLCJzZXRWYWx1ZSIsImVycm9ycyIsInJlZ2lzdGVyTmFtZSIsImlucHV0RXJyb3IiLCJzaG91bGRWYWxpZGF0ZSIsInVuZGVmaW5lZCIsIk51bWJlckZpZWxkIiwiZXJyb3IiLCJtZXNzYWdlIiwidG9TdHJpbmciLCJldmVudCIsInByZXZQcm9wcyIsIm5leHRQcm9wcyIsImRpcnR5RmllbGRzIiwiZGlzcGxheU5hbWUiLCJkZWZhdWx0UHJvcHMiLCJOQU1FX01PRE9DQVJEIiwiVFlQRV9NT0RPQ0FSRCIsImNhcmRDb2xvciIsIkNhcmQiLCJjb250YWluZXIiLCJTZXBhcmF0b3IiLCJjYXJkc0NvbG9ycyIsImNvbnRlbnQiLCJOQU1FX0lOUFVUX0RBVEVfRklFTEQiLCJUWVBFX0lOUFVUX0RBVEVfRklFTEQiLCJJbnB1dERhdGVGaWVsZE1lbW9pemVkIiwiRGF0ZUZpZWxkIl0sIm1hcHBpbmdzIjoidVdBY08sU0FBU0EsRUFBbUJDLEdBQy9CLElBQVFDLEVBQWdCRCxFQUFoQkMsWUFDQUMsRUFBOERELEVBQTlEQyxZQUFhQyxFQUFpREYsRUFBakRFLGNBQWVDLEVBQWtDSCxFQUFsQ0csS0FBTUMsRUFBNEJKLEVBQTVCSSxPQUFRQyxFQUFvQkwsRUFBcEJLLE1BQU9DLEVBQWFOLEVB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QUFXLHlCQUF5QixLQUFPLHFCQUFxQixPQUFTLHVCQUF1QixRQUFVLHdCQUF3QixNQUFRLHNCQUFzQixRQUFVLHdCQUF3QixRQUFVLHdCLHNCQ0EvbEJELEVBQU9DLFFBQVUsQ0FBQyx5QkFBMkIscUJBQXFCLHlCQUEyQixVIiwiZmlsZSI6InN0YXRpYy9qcy82MC5kYjYwOTFjYS5jaHVuay5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwiQHBrZy9yZWFjdFwiO1xuaW1wb3J0IHsgTW9kb0NhcmQgfSBmcm9tIFwiQGFwcC9iYW5jb3ItY29tcG9uZW50cy9FbGVtZW50L0NhcmQvTW9kb0NhcmRcIjtcbmltcG9ydCB7IFRleHQsIHVzZVRleHQgfSBmcm9tIFwiQGFwcC9iYW5jb3ItY29tcG9uZW50cy9FbGVtZW50L1RleHRcIjtcbmltcG9ydCB7IEFtb3VudEZvcm1hdHRlciB9IGZyb20gXCJAYXBwL2JhbmNvci1jb21wb25lbnRzL0VsZW1lbnQvQW1vdW50Rm9ybWF0dGVyXCI7XG5pbXBvcnQgeyBEYXRlVGltZSB9IGZyb20gXCJAYXBwL2JhbmNvci1jb21wb25lbnRzL0VsZW1lbnQvRGF0ZVRpbWVcIjtcblxuaW1wb3J0IHsgREFTSCB9IGZyb20gXCJAYXBwL2JhbmNvbi1kYXRhL2NvbnN0YW50c1wiO1xuaW1wb3J0IHR5cGUgeyBOU0FQSW1vZG8gfSBmcm9tIFwiQGFwcC9iYW5jb24tZGF0YS9hcGkvbW9kb1wiO1xuaW1wb3J0IFJ1bGVzIGZyb20gXCIuL19ydWxlcy5tb2R1bGUuc2Nzc1wiO1xuXG5leHBvcnQgdHlwZSBQcm9wcyA9IHtcbiAgICB0cmFuc2FjdGlvbjogTlNBUEltb2RvLlRyYW5zYWN0aW9uO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIFRyYXNhY3Rpb25TZW50Q2FyZChwcm9wczogUHJvcHMpIHtcbiAgICBjb25zdCB7IHRyYW5zYWN0aW9uIH0gPSBwcm9wcztcbiAgICBjb25zdCB7IGNvbnRhY3ROYW1lLCBhY2NvdW50TnVtYmVyLCBkYXRlLCBhbW91bnQsIHN0YXRlLCBicmFuY2hJZCB9ID0gdHJhbnNhY3Rpb247XG4gICAgY29uc3QgeyB0ZXh0R2V0IH0gPSB1c2VUZXh0KCk7XG5cbiAgICBjb25zdCBUUkFOU0FDVElPTlNfVEVYVFMgPSBcInNwYS5tb2RvLnRyYW5zYWN0aW9uLmNhcmRcIjtcblxuICAgIGNvbnN0IGFjY291bnQgPSBgJHticmFuY2hJZH0ke0RBU0h9JHthY2NvdW50TnVtYmVyfWA7XG4gICAgY29uc3Qgc3RhdGVWYWx1ZSA9IHRleHRHZXQoe1xuICAgICAgICB1dWlkOiBgJHtUUkFOU0FDVElPTlNfVEVYVFN9LnN0YXRlLiR7c3RhdGUudG9Mb2NhbGVMb3dlckNhc2UoKX1gLFxuICAgIH0pO1xuXG4gICAgY29uc3QgQ09MT1JfU1RBVEVfVFJBTlNBQ1RJT04gPSB7XG4gICAgICAgIEVSUk9SOiBcImVycm9yXCIsXG4gICAgICAgIFBFTkRJOiBcIndhcm5pbmdcIixcbiAgICAgICAgT0s6IFwic3VjY2Vzc1wiLFxuICAgIH07XG5cbiAgICBjb25zdCBjb2xvclN0YXRlQ2xhc3MgPSBDT0xPUl9TVEFURV9UUkFOU0FDVElPTltzdGF0ZSBhcyBrZXlvZiB0eXBlb2YgQ09MT1JfU1RBVEVfVFJBTlNBQ1RJT05dO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPE1vZG9DYXJkPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e1J1bGVzLmNhcmRJbmZvfT5cbiAgICAgICAgICAgICAgICA8VGV4dCBjbGFzc05hbWU9e1J1bGVzLm5hbWV9IHRhZz1cInNwYW5cIj5cbiAgICAgICAgICAgICAgICAgICAge2NvbnRhY3ROYW1lfVxuICAgICAgICAgICAgICAgIDwvVGV4dD5cblxuICAgICAgICAgICAgICAgIDxUZXh0IGNsYXNzTmFtZT17UnVsZXMuYW1vdW50fSB0YWc9XCJzcGFuXCI+XG4gICAgICAgICAgICAgICAgICAgIDxBbW91bnRGb3JtYXR0ZXIgYW1vdW50PXthbW91bnQucXVhbnRpdHl9IC8+XG4gICAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtSdWxlcy5jYXJkSW5mb30+XG4gICAgICAgICAgICAgICAgPFRleHQgdGFnPVwic3BhblwiIHV1aWQ9e2Ake1RSQU5TQUNUSU9OU19URVhUU30uZGF0ZWB9IC8+XG4gICAgICAgICAgICAgICAgPERhdGVUaW1lIGRhdGU9e2RhdGV9IC8+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e1J1bGVzLmNhcmRJbmZvfT5cbiAgICAgICAgICAgICAgICA8VGV4dCB0YWc9XCJzcGFuXCIgdXVpZD17YCR7VFJBTlNBQ1RJT05TX1RFWFRTfS5hY2NvdW50YH0gLz5cbiAgICAgICAgICAgICAgICA8VGV4dCBjbGFzc05hbWU9e1J1bGVzLmFjY291bnR9IHRhZz1cInNwYW5cIj5cbiAgICAgICAgICAgICAgICAgICAge2FjY291bnR9XG4gICAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtSdWxlcy5jYXJkSW5mb30+XG4gICAgICAgICAgICAgICAgPFRleHQgdGFnPVwic3BhblwiIHV1aWQ9e2Ake1RSQU5TQUNUSU9OU19URVhUU30uc3RhdGVgfSAvPlxuICAgICAgICAgICAgICAgIDxUZXh0IGNsYXNzTmFtZT17UnVsZXNbY29sb3JTdGF0ZUNsYXNzXX0gdGFnPVwic3BhblwiPlxuICAgICAgICAgICAgICAgICAgICB7c3RhdGVWYWx1ZX1cbiAgICAgICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9Nb2RvQ2FyZD5cbiAgICApO1xufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJAcGtnL3JlYWN0XCI7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tIFwiQHBrZy9yZWFjdC1zdG9yeWJvb2svQ29tcG9uZW50XCI7XG5pbXBvcnQgdHlwZSB7IFByb3BFbGVtZW50LCBQcm9wRGVmYXVsdHMsIFByb3BUeXBlcyB9IGZyb20gXCJAcGtnL3JlYWN0LXN0b3J5Ym9vay9Db21wb25lbnRcIjtcbmltcG9ydCB7IER5bmFtaWMsIFR5cGUgfSBmcm9tIFwiQHBrZy91dGlscy9zY2hlbWFcIjtcblxuaW1wb3J0IHsgQVJTX1NZTUJPTCwgWkVSTywgRE9UX1NUUiwgRU1QVFlfU1RSSU5HLCBUV08gfSBmcm9tIFwiQGFwcC9iYW5jb24tZGF0YS9jb25zdGFudHNcIjtcbmltcG9ydCB7IEN1c3RvbUVycm9yLCBHcmVhdGVyRXF1YWxUbywgRGF0ZUxlc3NUaGFuIH0gZnJvbSBcIkBhcHAvYmFuY29uLWRhdGEvdmFsaWRhdGlvbnNcIjtcbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTZWxlY3RvciB9IGZyb20gXCJAYXBwL2JhbmNvbi1kYXRhXCI7XG5pbXBvcnQgeyBBY3Rpb25TbGljZU1vZG8sIFNlbGVjdG9yU2xpY2VNb2RvIH0gZnJvbSBcIkBhcHAvYmFuY29uLWRhdGEvc2xpY2VzL21vZG9cIjtcbmltcG9ydCB0eXBlIHsgT3B0aW9uc0Jhc2UgfSBmcm9tIFwiQGFwcC9iYW5jb24tdWkvZGlzdC9jb21wb25lbnRzL1NlbGVjdEZpZWxkXCI7XG5cbmltcG9ydCB7IElucHV0RGF0ZUZpZWxkIH0gZnJvbSBcIkBhcHAvYmFuY29yLWNvbXBvbmVudHMvRWxlbWVudC9Gb3JtL0lucHV0RGF0ZUZpZWxkXCI7XG5pbXBvcnQgeyBJbnB1dE51bWJlciB9IGZyb20gXCJAYXBwL2JhbmNvci1jb21wb25lbnRzL0VsZW1lbnQvRm9ybS9JbnB1dE51bWJlclwiO1xuaW1wb3J0IHsgSW5wdXRTZWxlY3QgfSBmcm9tIFwiQGFwcC9iYW5jb3ItY29tcG9uZW50cy9FbGVtZW50L0Zvcm0vSW5wdXRTZWxlY3RcIjtcbmltcG9ydCB7IHVzZVRleHQgfSBmcm9tIFwiQGFwcC9iYW5jb3ItY29tcG9uZW50cy9FbGVtZW50L1RleHRcIjtcbmltcG9ydCB7IEZvcm0gfSBmcm9tIFwiQGFwcC9iYW5jb3ItY29tcG9uZW50cy9FbGVtZW50L0Zvcm1cIjtcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gXCJAYXBwL2JhbmNvci1jb21wb25lbnRzL0VsZW1lbnQvQnV0dG9uXCI7XG5cbmltcG9ydCBOYW1lc3BhY2UgZnJvbSBcIi4vX2luZGV4LnNjc3NcIjtcblxuZXhwb3J0IGNvbnN0IHsgTkFNRV9UUkFOU0FDVElPTl9GSUxURVJTLCBUWVBFX1RSQU5TQUNUSU9OX0ZJTFRFUlMgfSA9IE5hbWVzcGFjZTtcblxuZXhwb3J0IGNvbnN0IEtJTkRfVFlQRV9TVEFURSA9IHtcbiAgICBEQVRFX1JBTkdFOiBcIkRhdGVSYW5nZVwiLFxuICAgIEFNT1VOVDogXCJBbW91bnRcIixcbiAgICBTVEFURTogXCJTdGF0ZVwiLFxufSBhcyBjb25zdDtcblxudHlwZSBGaWx0ZXJFcnJvcnMgPSB7XG4gICAgdGV4dEVycm9yTWF4QW1vdW50OiBzdHJpbmc7XG4gICAgdGV4dEVycm9yUmVxdWlyZWQ6IHN0cmluZztcbiAgICB0ZXh0RXJyb3JEYXRlRnJvbTogc3RyaW5nO1xuICAgIHR5cGVTdGF0ZTogc3RyaW5nO1xufTtcblxuZXhwb3J0IGNvbnN0IGZpbHRlclNjaGVtYSA9ICh7XG4gICAgdGV4dEVycm9yTWF4QW1vdW50LFxuICAgIHRleHRFcnJvclJlcXVpcmVkLFxuICAgIHRleHRFcnJvckRhdGVGcm9tLFxuICAgIHR5cGVTdGF0ZSxcbn06IEZpbHRlckVycm9ycykgPT4ge1xuICAgIGNvbnN0IGlzVHlwZVN0YXRlID0gdHlwZVN0YXRlID09PSBLSU5EX1RZUEVfU1RBVEUuU1RBVEU7XG4gICAgY29uc3QgaXNUeXBlQW1vdW50ID0gdHlwZVN0YXRlID09PSBLSU5EX1RZUEVfU1RBVEUuQU1PVU5UO1xuICAgIGNvbnN0IGlzVHlwZURhdGVSYW5nZSA9IHR5cGVTdGF0ZSA9PT0gS0lORF9UWVBFX1NUQVRFLkRBVEVfUkFOR0U7XG5cbiAgICByZXR1cm4gVHlwZS5vYmplY3Qoe1xuICAgICAgICB0eXBlU3RhdGU6IEN1c3RvbUVycm9yKFR5cGUuc3RyaW5nLnJlcXVpcmVkKCksIHRleHRFcnJvclJlcXVpcmVkKSxcbiAgICAgICAgc3RhdGU6IGlzVHlwZVN0YXRlXG4gICAgICAgICAgICA/IEN1c3RvbUVycm9yKFR5cGUuc3RyaW5nLnJlcXVpcmVkKCksIHRleHRFcnJvclJlcXVpcmVkKVxuICAgICAgICAgICAgOiBUeXBlLnN0cmluZy5vclVuZGVmaW5lZCgpLFxuICAgICAgICBkYXRlRnJvbTogaXNUeXBlRGF0ZVJhbmdlXG4gICAgICAgICAgICA/IER5bmFtaWMoKHZhbHVlLCB7IGJyYW5jaCB9KSA9PiB7XG4gICAgICAgICAgICAgICAgICBjb25zdCB7IGRhdGVUbyB9ID0gYnJhbmNoW1pFUk9dO1xuICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIERhdGVMZXNzVGhhbihUeXBlLmRhdGUoKSwgZGF0ZVRvLCB0ZXh0RXJyb3JEYXRlRnJvbSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICByZXR1cm4gQ3VzdG9tRXJyb3IoVHlwZS5kYXRlKCksIHRleHRFcnJvclJlcXVpcmVkKTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIDogVHlwZS5kYXRlLm9yVW5kZWZpbmVkKCksXG4gICAgICAgIGRhdGVUbzogaXNUeXBlRGF0ZVJhbmdlXG4gICAgICAgICAgICA/IEN1c3RvbUVycm9yKFR5cGUuZGF0ZSgpLCB0ZXh0RXJyb3JSZXF1aXJlZClcbiAgICAgICAgICAgIDogVHlwZS5kYXRlLm9yVW5kZWZpbmVkKCksXG4gICAgICAgIG1pbkFtb3VudDogaXNUeXBlQW1vdW50XG4gICAgICAgICAgICA/IEN1c3RvbUVycm9yKFR5cGUubnVtYmVyKCksIHRleHRFcnJvclJlcXVpcmVkKVxuICAgICAgICAgICAgOiBUeXBlLm51bWJlci5vclVuZGVmaW5lZCgpLFxuICAgICAgICBtYXhBbW91bnQ6IGlzVHlwZUFtb3VudFxuICAgICAgICAgICAgPyBEeW5hbWljKCh2YWx1ZSwgeyBicmFuY2ggfSkgPT4ge1xuICAgICAgICAgICAgICAgICAgY29uc3QgeyBtaW5BbW91bnQgfSA9IGJyYW5jaFtaRVJPXTtcbiAgICAgICAgICAgICAgICAgIGlmIChTdHJpbmcodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEdyZWF0ZXJFcXVhbFRvKFR5cGUubnVtYmVyKCksIG1pbkFtb3VudCwgdGV4dEVycm9yTWF4QW1vdW50KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJldHVybiBDdXN0b21FcnJvcihUeXBlLm51bWJlcigpLCB0ZXh0RXJyb3JSZXF1aXJlZCk7XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICA6IFR5cGUubnVtYmVyLm9yVW5kZWZpbmVkKCksXG4gICAgfSk7XG59O1xuXG5leHBvcnQgdHlwZSBQcm9wVHJhbnNhY3Rpb25GaWx0ZXIgPSBQcm9wRWxlbWVudCAmIHtcbiAgICBzaG93RmlsdGVyczogYm9vbGVhbjtcbiAgICBoYW5kbGVTaG93RmlsdGVyczogKCkgPT4gdm9pZDtcbn07XG5cbmV4cG9ydCBjb25zdCBERUZfVFJBTlNBQ1RJT05fRklMVEVSOiBQcm9wRGVmYXVsdHM8UHJvcFRyYW5zYWN0aW9uRmlsdGVyPiA9IHt9O1xuXG5leHBvcnQgdHlwZSBQcm9wVHlwZXNQcm9wVHJhbnNhY3Rpb25GaWx0ZXIgPSBQcm9wVHlwZXM8XG4gICAgUHJvcFRyYW5zYWN0aW9uRmlsdGVyLFxuICAgIHR5cGVvZiBERUZfVFJBTlNBQ1RJT05fRklMVEVSXG4+O1xuXG5leHBvcnQgZnVuY3Rpb24gVHJhbnNhY3Rpb25GaWx0ZXJzKHByb3BzOiBQcm9wVHJhbnNhY3Rpb25GaWx0ZXIpIHtcbiAgICBjb25zdCB7IGhhbmRsZVNob3dGaWx0ZXJzLCBzaG93RmlsdGVycywgLi4ucmVzdCB9ID0gcHJvcHMgYXMgUHJvcFRyYW5zYWN0aW9uRmlsdGVyO1xuXG4gICAgY29uc3QgeyB0ZXh0R2V0IH0gPSB1c2VUZXh0KCk7XG4gICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICAgIGNvbnN0IG1ldGhvZHMgPSBGb3JtLnVzZUNvbnRleHQoKTtcbiAgICBjb25zdCB7IGNsZWFyRXJyb3JzLCByZXNldCB9ID0gbWV0aG9kcztcblxuICAgIGNvbnN0IFtkYXRlRnJvbVNlbGVjdGVkLCBzZXREYXRlRnJvbVNlbGVjdGVkXSA9IFJlYWN0LnVzZVN0YXRlPERhdGU+KCk7XG5cbiAgICBjb25zdCBzdGF0ZU9wdGlvbnMgPSB1c2VTZWxlY3RvcihTZWxlY3RvclNsaWNlTW9kby5zdGF0ZU9wdGlvbnMpO1xuICAgIGNvbnN0IHR5cGVTdGF0ZU9wdGlvbnMgPSB1c2VTZWxlY3RvcihTZWxlY3RvclNsaWNlTW9kby50eXBlU3RhdGVPcHRpb25zKTtcbiAgICBjb25zdCBzZWxlY3RlZFR5cGVTdGF0ZSA9IHVzZVNlbGVjdG9yKFNlbGVjdG9yU2xpY2VNb2RvLnNlbGVjdGVkVHlwZVN0YXRlKTtcblxuICAgIGNvbnN0IGZpbHRlckJ5U3RhdGVzTGFiZWwgPSB0ZXh0R2V0KHtcbiAgICAgICAgdXVpZDogXCJzcGEubW9kby50cmFuc2FjdGlvbi5vcHRpb24uZmlsdGVyLnN0YXRlcy5sYWJlbFwiLFxuICAgIH0pO1xuICAgIGNvbnN0IGZyb21MYWJlbCA9IHRleHRHZXQoe1xuICAgICAgICB1dWlkOiBcInNwYS5tb2RvLnRyYW5zYWN0aW9uLmZyb20ubGFiZWxcIixcbiAgICB9KTtcbiAgICBjb25zdCB0b0xhYmVsID0gdGV4dEdldCh7XG4gICAgICAgIHV1aWQ6IFwic3BhLm1vZG8udHJhbnNhY3Rpb24udG8ubGFiZWxcIixcbiAgICB9KTtcbiAgICBjb25zdCBzaG93SGlkZUZpbHRlcnNUZXh0ID0gc2hvd0ZpbHRlcnNcbiAgICAgICAgPyBcInNwYS5tb2RvLnRyYW5zYWN0aW9uLmhpZGUuZmlsdGVyc1wiXG4gICAgICAgIDogXCJzcGEubW9kby50cmFuc2FjdGlvbi5zaG93LmZpbHRlcnNcIjtcbiAgICBjb25zdCBmaWx0ZXJCeUxhYmVsID0gdGV4dEdldCh7IHV1aWQ6IFwic3BhLm1vZG8udHJhbnNhY3Rpb24ub3B0aW9uLmZpbHRlckJ5LmxhYmVsXCIgfSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8Q29tcG9uZW50IHsuLi5yZXN0fSBuYW1lPXtOQU1FX1RSQU5TQUNUSU9OX0ZJTFRFUlN9IHR5cGU9e1RZUEVfVFJBTlNBQ1RJT05fRklMVEVSU30+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgICAga2luZD1cInBsYWluXCJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw9e3sgdXVpZDogc2hvd0hpZGVGaWx0ZXJzVGV4dCB9fVxuICAgICAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlRmlsdGVyc31cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICB7c2hvd0ZpbHRlcnMgJiYgKFxuICAgICAgICAgICAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgICAgICAgICAgPElucHV0U2VsZWN0XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0T3B0aW9uPXtnZXREZWZhdWx0T3B0aW9uKHR5cGVTdGF0ZU9wdGlvbnMpfVxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9e2ZpbHRlckJ5TGFiZWx9XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidHlwZVN0YXRlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM9e2J1aWxkRmlsdGVyT3B0aW9ucyh0eXBlU3RhdGVPcHRpb25zKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uU2VsZWN0T3B0aW9uPXtoYW5kbGVTZWxlY3RUeXBlU3RhdGV9XG4gICAgICAgICAgICAgICAgICAgIC8+XG5cbiAgICAgICAgICAgICAgICAgICAge2dldFR5cGVTdGF0ZUZpbHRlcnMoc2VsZWN0ZWRUeXBlU3RhdGUpfVxuXG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b24gbGFiZWw9e3sgdXVpZDogXCJzcGEuZm9ybS5zZWFyY2hcIiB9fSB0eXBlPVwic3VibWl0XCIgLz5cbiAgICAgICAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgPC9Db21wb25lbnQ+XG4gICAgKTtcblxuICAgIGZ1bmN0aW9uIGdldFR5cGVTdGF0ZUZpbHRlcnModHlwZTogc3RyaW5nKTogSlNYLkVsZW1lbnQgfCB1bmRlZmluZWQge1xuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgS0lORF9UWVBFX1NUQVRFLkRBVEVfUkFOR0U6XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICAgICAgICAgICAgICAgPElucHV0RGF0ZUZpZWxkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJmaWx0ZXJEYXRlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17ZnJvbUxhYmVsfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJkYXRlRnJvbVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZURhdGVGcm9tfVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dERhdGVGaWVsZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPVwiZmlsdGVyRGF0ZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9e3RvTGFiZWx9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluRGF0ZT17ZGF0ZUZyb21TZWxlY3RlZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwiZGF0ZVRvXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNhc2UgS0lORF9UWVBFX1NUQVRFLkFNT1VOVDpcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXROdW1iZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXhlZERlY2ltYWxTY2FsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY2ltYWxTY2FsZT17VFdPfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY2ltYWxTZXBhcmF0b3I9e0RPVF9TVFJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9e2Zyb21MYWJlbH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwibWluQW1vdW50XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuPXtFTVBUWV9TVFJJTkd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlZml4Q29kZT17QVJTX1NZTUJPTH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXROdW1iZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXhlZERlY2ltYWxTY2FsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY2ltYWxTY2FsZT17VFdPfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY2ltYWxTZXBhcmF0b3I9e0RPVF9TVFJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9e3RvTGFiZWx9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cIm1heEFtb3VudFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybj17RU1QVFlfU1RSSU5HfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZWZpeENvZGU9e0FSU19TWU1CT0x9XG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjYXNlIEtJTkRfVFlQRV9TVEFURS5TVEFURTpcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICA8SW5wdXRTZWxlY3RcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXtmaWx0ZXJCeVN0YXRlc0xhYmVsfVxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInN0YXRlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM9e2J1aWxkRmlsdGVyT3B0aW9ucyhzdGF0ZU9wdGlvbnMpfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVTZWxlY3RUeXBlU3RhdGUob3B0aW9uOiBPcHRpb25zQmFzZSkge1xuICAgICAgICBjb25zdCB7IHZhbHVlIH0gPSBvcHRpb247XG4gICAgICAgIGRpc3BhdGNoKEFjdGlvblNsaWNlTW9kby5zZXRTZWxlY3RlZFR5cGVTdGF0ZShTdHJpbmcodmFsdWUpKSk7XG4gICAgICAgIGRpc3BhdGNoKEFjdGlvblNsaWNlTW9kby5jbGVhblRyYW5zYWN0aW9uc1BhZ2luYXRpb24oKSk7XG5cbiAgICAgICAgaWYgKEtJTkRfVFlQRV9TVEFURS5EQVRFX1JBTkdFICE9PSBTdHJpbmcodmFsdWUpKSB7XG4gICAgICAgICAgICByZXNldCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RGVmYXVsdE9wdGlvbihvcHRpb25zOiBPcHRpb25zQmFzZVtdKSB7XG4gICAgICAgIHJldHVybiBidWlsZEZpbHRlck9wdGlvbnMob3B0aW9ucykuZmlsdGVyKChvcHRpb24pID0+IHtcbiAgICAgICAgICAgIGlmIChvcHRpb24udmFsdWUgPT09IHNlbGVjdGVkVHlwZVN0YXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH0pW1pFUk9dO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGJ1aWxkRmlsdGVyT3B0aW9ucyhlbnZpcm9ubWVudE9wdGlvbnM6IE9wdGlvbnNCYXNlW10pOiBPcHRpb25zQmFzZVtdIHtcbiAgICAgICAgcmV0dXJuIGVudmlyb25tZW50T3B0aW9ucy5tYXAoKG9wdGlvbikgPT4gKHtcbiAgICAgICAgICAgIC4uLm9wdGlvbixcbiAgICAgICAgICAgIGxhYmVsOiB0ZXh0R2V0KHsgdXVpZDogYHNwYS5tb2RvLnRyYW5zYWN0aW9uLm9wdGlvbi4ke29wdGlvbi5sYWJlbH1gIH0pLFxuICAgICAgICB9KSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlRmlsdGVycygpOiB2b2lkIHtcbiAgICAgICAgaWYgKHNob3dGaWx0ZXJzKSB7XG4gICAgICAgICAgICBjbGVhckVycm9ycygpO1xuICAgICAgICB9XG4gICAgICAgIHJlc2V0KCk7XG4gICAgICAgIGhhbmRsZVNob3dGaWx0ZXJzKCk7XG4gICAgICAgIGRpc3BhdGNoKEFjdGlvblNsaWNlTW9kby5jbGVhblRyYW5zYWN0aW9uc1BhZ2luYXRpb24oKSk7XG4gICAgICAgIGRpc3BhdGNoKEFjdGlvblNsaWNlTW9kby5jbGVhblNlbGVjdGVkU3RhdGVzKCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZURhdGVGcm9tKGRhdGU6IERhdGUpIHtcbiAgICAgICAgc2V0RGF0ZUZyb21TZWxlY3RlZChkYXRlKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcIkBwa2cvcmVhY3RcIjtcbmltcG9ydCB7IEludGVybmFsQ29udGFpbmVyIH0gZnJvbSBcIn4vY29udGFpbmVycy9JbnRlcm5hbFwiO1xuaW1wb3J0IHsgUk9VVEVfUEFUSF9NT0RPX09OQk9BUkRJTkdfUkVHSVNURVJfUFJFU0VOVEFUSU9OLCB1c2VOYXZpZ2F0ZSwgdXNlUGF0aCB9IGZyb20gXCJ+L3JvdXRlc1wiO1xuXG5pbXBvcnQgeyBUZXh0LCB1c2VUZXh0IH0gZnJvbSBcIkBhcHAvYmFuY29yLWNvbXBvbmVudHMvRWxlbWVudC9UZXh0XCI7XG5pbXBvcnQgeyBMb2FkaW5nIH0gZnJvbSBcIkBhcHAvYmFuY29yLWNvbXBvbmVudHMvRWxlbWVudC9Mb2FkaW5nXCI7XG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tIFwiQGFwcC9iYW5jb3ItY29tcG9uZW50cy9FbGVtZW50L0J1dHRvblwiO1xuaW1wb3J0IHsgSW5wdXRTZWxlY3QgfSBmcm9tIFwiQGFwcC9iYW5jb3ItY29tcG9uZW50cy9FbGVtZW50L0Zvcm0vSW5wdXRTZWxlY3RcIjtcbmltcG9ydCB7IEZvcm0gfSBmcm9tIFwiQGFwcC9iYW5jb3ItY29tcG9uZW50cy9FbGVtZW50L0Zvcm1cIjtcbmltcG9ydCB7IFR5cGUsIEFzc2lnbiB9IGZyb20gXCJAcGtnL3V0aWxzL3NjaGVtYVwiO1xuaW1wb3J0IHR5cGUgeyBJbmZlciB9IGZyb20gXCJAcGtnL3V0aWxzL3NjaGVtYVwiO1xuXG5pbXBvcnQgdHlwZSB7IE9wdGlvbnNCYXNlIH0gZnJvbSBcIkBhcHAvYmFuY29uLXVpL2Rpc3QvY29tcG9uZW50cy9TZWxlY3RGaWVsZFwiO1xuaW1wb3J0IHsgQkFDS19ST1VURVIsIFpFUk8gfSBmcm9tIFwiQGFwcC9iYW5jb24tZGF0YS9jb25zdGFudHNcIjtcbmltcG9ydCB7IHVzZVNlbGVjdG9yLCB1c2VEaXNwYXRjaCB9IGZyb20gXCJAYXBwL2JhbmNvbi1kYXRhXCI7XG5pbXBvcnQgdHlwZSB7IE5TQVBJbW9kbyB9IGZyb20gXCJAYXBwL2JhbmNvbi1kYXRhL2FwaS9tb2RvXCI7XG5pbXBvcnQgeyBTZWxlY3RvclNsaWNlTW9kbywgRmV0Y2hlclNsaWNlTW9kbywgQWN0aW9uU2xpY2VNb2RvIH0gZnJvbSBcIkBhcHAvYmFuY29uLWRhdGEvc2xpY2VzL21vZG9cIjtcbmltcG9ydCB7IFNlbGVjdG9yU2xpY2VTZXNzaW9uIH0gZnJvbSBcIkBhcHAvYmFuY29uLWRhdGEvc2xpY2VzL3Nlc3Npb25cIjtcblxuaW1wb3J0IHsgVHJhc2FjdGlvblNlbnRDYXJkIH0gZnJvbSBcIn4vc2VjdGlvbnMvTW9kby9UcmFzYWN0aW9uU2VudENhcmRcIjtcbmltcG9ydCB7XG4gICAgS0lORF9UWVBFX1NUQVRFLFxuICAgIFRyYW5zYWN0aW9uRmlsdGVycyxcbiAgICBmaWx0ZXJTY2hlbWEsXG59IGZyb20gXCJ+L3NlY3Rpb25zL01vZG8vVHJhbnNhY3Rpb25GaWx0ZXJzXCI7XG5cbmltcG9ydCBSdWxlcyBmcm9tIFwiLi9fcnVsZXMubW9kdWxlLnNjc3NcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVHJhbnNhY3Rpb25zU2VudCgpIHtcbiAgICBjb25zdCB7IHRleHRHZXQgfSA9IHVzZVRleHQoKTtcbiAgICBjb25zdCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG4gICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuXG4gICAgY29uc3QgW3Nob3dGaWx0ZXJzLCBzZXRTaG93RmlsdGVyc10gPSBSZWFjdC51c2VTdGF0ZTxib29sZWFuPihmYWxzZSk7XG4gICAgY29uc3QgW3VzZXJWZXJpZmllZE1PRE8sIHNldFVzZXJWZXJpZmllZE1PRE9dID0gUmVhY3QudXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xuXG4gICAgY29uc3QgdXJsUHJlc2VudGF0aW9uTW9kbyA9IHVzZVBhdGgoUk9VVEVfUEFUSF9NT0RPX09OQk9BUkRJTkdfUkVHSVNURVJfUFJFU0VOVEFUSU9OKTtcblxuICAgIGNvbnN0IGZldGNoaW5nID0gdXNlU2VsZWN0b3IoU2VsZWN0b3JTbGljZU1vZG8uZmV0Y2hpbmcpO1xuICAgIGNvbnN0IHRyYW5zYWN0aW9uc0ZldGNoaW5nID0gdXNlU2VsZWN0b3IoU2VsZWN0b3JTbGljZU1vZG8udHJhbnNhY3Rpb25zRmV0Y2hpbmcpO1xuICAgIGNvbnN0IHRyYW5zYWN0aW9ucyA9IHVzZVNlbGVjdG9yKFNlbGVjdG9yU2xpY2VNb2RvLnRyYW5zYWN0aW9uTGlzdCk7XG4gICAgY29uc3QgdHJhbnNhY3Rpb25zUGFnaW5hdGlvbiA9IHVzZVNlbGVjdG9yKFNlbGVjdG9yU2xpY2VNb2RvLnRyYW5zYWN0aW9uc1BhZ2luYXRpb24pO1xuICAgIGNvbnN0IGlzRW1wdHlQYWdpbmF0aW9uID0gdXNlU2VsZWN0b3IoU2VsZWN0b3JTbGljZU1vZG8uaXNFbXB0eVBhZ2luYXRpb24pO1xuICAgIGNvbnN0IGlzRW1wdHlMaXN0ID0gdXNlU2VsZWN0b3IoU2VsZWN0b3JTbGljZU1vZG8uaXNFbXB0eUxpc3QpO1xuICAgIGNvbnN0IHNob3dNb3JlID0gdXNlU2VsZWN0b3IoU2VsZWN0b3JTbGljZU1vZG8uc2hvd01vcmVUcmFuc2FjdGlvbnMpO1xuICAgIGNvbnN0IHRpbWVTdGF0ZU9wdGlvbnMgPSB1c2VTZWxlY3RvcihTZWxlY3RvclNsaWNlTW9kby50aW1lU3RhdGVPcHRpb25zKTtcbiAgICBjb25zdCBzZWxlY3RlZFR5cGVTdGF0ZSA9IHVzZVNlbGVjdG9yKFNlbGVjdG9yU2xpY2VNb2RvLnNlbGVjdGVkVHlwZVN0YXRlKTtcbiAgICBjb25zdCBzZWxlY3RlZFRpbWVTdGF0ZSA9IHVzZVNlbGVjdG9yKFNlbGVjdG9yU2xpY2VNb2RvLnNlbGVjdGVkVGltZVN0YXRlKTtcbiAgICBjb25zdCBoYXNGaW5pc2hlZE1vZG9PbmJvYXJkaW5nID0gdXNlU2VsZWN0b3IoU2VsZWN0b3JTbGljZU1vZG8uaGFzRmluaXNoZWRNb2RvT25ib2FyZGluZyk7XG4gICAgY29uc3QgdG9rZW4gPSB1c2VTZWxlY3RvcihTZWxlY3RvclNsaWNlU2Vzc2lvbi50b2tlbik7XG5cbiAgICBjb25zdCBpc1R5cGVTdGF0ZSA9IHNlbGVjdGVkVHlwZVN0YXRlID09PSBLSU5EX1RZUEVfU1RBVEUuU1RBVEU7XG4gICAgY29uc3QgaXNUeXBlQW1vdW50ID0gc2VsZWN0ZWRUeXBlU3RhdGUgPT09IEtJTkRfVFlQRV9TVEFURS5BTU9VTlQ7XG4gICAgY29uc3QgaXNUeXBlRGF0ZVJhbmdlID0gc2VsZWN0ZWRUeXBlU3RhdGUgPT09IEtJTkRfVFlQRV9TVEFURS5EQVRFX1JBTkdFO1xuXG4gICAgY29uc3QgZmlsdGVyTGFiZWwgPSB0ZXh0R2V0KHsgdXVpZDogXCJzcGEubW9kby50cmFuc2FjdGlvbi5vcHRpb24uZmlsdGVyLmxhYmVsXCIgfSk7XG4gICAgY29uc3QgdGV4dEVycm9yUmVxdWlyZWQgPSB0ZXh0R2V0KHsgdXVpZDogXCJzcGEuZ2VuZXJpYy5maWVsZC5lcnJvci5yZXF1aXJlZFwiIH0pO1xuICAgIGNvbnN0IHRleHRFcnJvck1heEFtb3VudCA9IHRleHRHZXQoeyB1dWlkOiBcInNwYS5tb2RvLnRyYW5zYWN0aW9uLm1heEFtb3VudC5lcnJvclwiIH0pO1xuICAgIGNvbnN0IHRleHRFcnJvckRhdGVGcm9tID0gdGV4dEdldCh7IHV1aWQ6IFwic3BhLm1vZG8udHJhbnNhY3Rpb24uZGF0ZUZyb20uZXJyb3JcIiB9KTtcbiAgICBjb25zdCBzY2hlbWEgPSBnZXRTY2hlbWEoKTtcblxuICAgIC8vIEdldCBzdGF0ZXMsIHR5cGVTdGF0ZSBhbmQgdGltZVN0YXRlIGlmIHVzZXIgaXMgcmVnaXN0ZXIgb24gbW9kb1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmICghdG9rZW4pIHJldHVybjtcblxuICAgICAgICBpZiAoIWhhc0ZpbmlzaGVkTW9kb09uYm9hcmRpbmcpIHtcbiAgICAgICAgICAgIG5hdmlnYXRlKHVybFByZXNlbnRhdGlvbk1vZG8sIHsgcmVwbGFjZTogdHJ1ZSB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRpc3BhdGNoKEZldGNoZXJTbGljZU1vZG8uZ2V0VHJhbnNhY3Rpb25TdGF0ZXMoeyB0b2tlbiB9KSk7XG4gICAgICAgICAgICBkaXNwYXRjaChGZXRjaGVyU2xpY2VNb2RvLmdldFRyYW5zYWN0aW9uTGlzdCh7IHRva2VuLCB0aW1lU3RhdGU6IFwiVG9kYXlcIiB9KSk7XG4gICAgICAgICAgICBkaXNwYXRjaChBY3Rpb25TbGljZU1vZG8uY2xlYW5TZWxlY3RlZFN0YXRlcygpKTtcbiAgICAgICAgICAgIHNldFVzZXJWZXJpZmllZE1PRE8odHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9LCBbZGlzcGF0Y2gsIGhhc0ZpbmlzaGVkTW9kb09uYm9hcmRpbmcsIG5hdmlnYXRlLCB0b2tlbiwgdXJsUHJlc2VudGF0aW9uTW9kb10pO1xuXG4gICAgLy8gU2V0IExpc3QgYWZ0ZXIgZmV0Y2hcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIXRyYW5zYWN0aW9ucyB8fCAhdHJhbnNhY3Rpb25zLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgICBkaXNwYXRjaChBY3Rpb25TbGljZU1vZG8udHJhc2FjdGlvbkdldFBhZ2luYXRpb24oKSk7XG4gICAgfSwgW3RyYW5zYWN0aW9ucywgZGlzcGF0Y2hdKTtcblxuICAgIGlmICgoZmV0Y2hpbmcgJiYgIXRyYW5zYWN0aW9uc0ZldGNoaW5nKSB8fCAhdXNlclZlcmlmaWVkTU9ETykgcmV0dXJuIDxMb2FkaW5nIC8+O1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPEludGVybmFsQ29udGFpbmVyIHdpdGhGb290ZXIgY2xhc3NOYW1lPXtSdWxlcy50cmFzYWN0aW9uU2VudH0gaGVhZGVyLW9uQmFjaz17aGFuZGxlQmFja30+XG4gICAgICAgICAgICA8aGVhZGVyPlxuICAgICAgICAgICAgICAgIDxUZXh0IHRhZz1cImgxXCIgdXVpZD1cInNwYS5tb2RvLnRyYW5zYWN0aW9uLnNlbnQudGl0bGVcIiAvPlxuICAgICAgICAgICAgPC9oZWFkZXI+XG5cbiAgICAgICAgICAgIDxGb3JtIHNjaGVtYT17c2NoZW1hfSBvblN1Ym1pdD17aGFuZGxlU3VibWl0fT5cbiAgICAgICAgICAgICAgICA8SW5wdXRTZWxlY3RcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdE9wdGlvbj17Z2V0RGVmYXVsdE9wdGlvbih0aW1lU3RhdGVPcHRpb25zKX1cbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e3Nob3dGaWx0ZXJzfVxuICAgICAgICAgICAgICAgICAgICBsYWJlbD17ZmlsdGVyTGFiZWx9XG4gICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ0aW1lU3RhdGVcIlxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zPXtidWlsZEZpbHRlck9wdGlvbnModGltZVN0YXRlT3B0aW9ucyl9XG4gICAgICAgICAgICAgICAgICAgIG9uU2VsZWN0T3B0aW9uPXtoYW5kbGVTZWxlY3R9XG4gICAgICAgICAgICAgICAgLz5cblxuICAgICAgICAgICAgICAgIDxUcmFuc2FjdGlvbkZpbHRlcnNcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlU2hvd0ZpbHRlcnM9e2hhbmRsZVNob3dGaWx0ZXJzfVxuICAgICAgICAgICAgICAgICAgICBzaG93RmlsdGVycz17c2hvd0ZpbHRlcnN9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvRm9ybT5cblxuICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPXtSdWxlcy50cmFuc2FjdGlvbkxpc3R9PntnZXRUcmFuc2FjdGlvbkxpc3QoKX08L3NlY3Rpb24+XG4gICAgICAgIDwvSW50ZXJuYWxDb250YWluZXI+XG4gICAgKTtcblxuICAgIGZ1bmN0aW9uIGdldFRyYW5zYWN0aW9uTGlzdCgpIHtcbiAgICAgICAgaWYgKHRyYW5zYWN0aW9uc0ZldGNoaW5nKSByZXR1cm4gPExvYWRpbmcgLz47XG5cbiAgICAgICAgcmV0dXJuICFpc0VtcHR5TGlzdCA/IChcbiAgICAgICAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgICAgICB7dHJhbnNhY3Rpb25zUGFnaW5hdGlvbi5tYXAoKHRyYW5zYWN0aW9uOiBOU0FQSW1vZG8uVHJhbnNhY3Rpb24pID0+IChcbiAgICAgICAgICAgICAgICAgICAgPFRyYXNhY3Rpb25TZW50Q2FyZCBrZXk9e3RyYW5zYWN0aW9uLnRyYW5zZmVySWR9IHRyYW5zYWN0aW9uPXt0cmFuc2FjdGlvbn0gLz5cbiAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgICB7c2hvd01vcmUgJiYgIWlzRW1wdHlQYWdpbmF0aW9uICYmIChcbiAgICAgICAgICAgICAgICAgICAgPGZvb3Rlcj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBraW5kPVwicGxhaW5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXt7IHV1aWQ6IFwic3BhLm1vZG8uc2hvdy5tb3JlXCIgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVDbGlja1Nob3dNb3JlfVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9mb290ZXI+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICkgOiAoXG4gICAgICAgICAgICA8VGV4dCBjbGFzc05hbWU9e1J1bGVzLmVtcHR5TWVzc2FnZX0gdXVpZD1cInNwYS5tb2RvLnRyYW5zYWN0aW9uLmVtcHR5XCIgLz5cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTY2hlbWEoKSB7XG4gICAgICAgIHJldHVybiBBc3NpZ24oXG4gICAgICAgICAgICBUeXBlLm9iamVjdCh7XG4gICAgICAgICAgICAgICAgdGltZVN0YXRlOiBUeXBlLnN0cmluZy5vclVuZGVmaW5lZCgpLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBmaWx0ZXJTY2hlbWEoe1xuICAgICAgICAgICAgICAgIHRleHRFcnJvck1heEFtb3VudCxcbiAgICAgICAgICAgICAgICB0ZXh0RXJyb3JSZXF1aXJlZCxcbiAgICAgICAgICAgICAgICB0ZXh0RXJyb3JEYXRlRnJvbSxcbiAgICAgICAgICAgICAgICB0eXBlU3RhdGU6IHNlbGVjdGVkVHlwZVN0YXRlLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RGVmYXVsdE9wdGlvbihvcHRpb25zOiBPcHRpb25zQmFzZVtdKSB7XG4gICAgICAgIHJldHVybiBidWlsZEZpbHRlck9wdGlvbnMob3B0aW9ucykuZmlsdGVyKChvcHRpb24pID0+IHtcbiAgICAgICAgICAgIGlmIChvcHRpb24udmFsdWUgPT09IHNlbGVjdGVkVGltZVN0YXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH0pW1pFUk9dO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZVNob3dGaWx0ZXJzKCkge1xuICAgICAgICBzZXRTaG93RmlsdGVycyghc2hvd0ZpbHRlcnMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGJ1aWxkRmlsdGVyT3B0aW9ucyhlbnZpcm9ubWVudE9wdGlvbnM6IE9wdGlvbnNCYXNlW10pOiBPcHRpb25zQmFzZVtdIHtcbiAgICAgICAgcmV0dXJuIGVudmlyb25tZW50T3B0aW9ucy5tYXAoKG9wdGlvbikgPT4gKHtcbiAgICAgICAgICAgIC4uLm9wdGlvbixcbiAgICAgICAgICAgIGxhYmVsOiB0ZXh0R2V0KHsgdXVpZDogYHNwYS5tb2RvLnRyYW5zYWN0aW9uLm9wdGlvbi4ke29wdGlvbi5sYWJlbH1gIH0pLFxuICAgICAgICB9KSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlU3VibWl0KGRhdGE6IEluZmVyPHR5cGVvZiBzY2hlbWE+KSB7XG4gICAgICAgIGlmICghdG9rZW4pIHJldHVybjtcblxuICAgICAgICBjb25zdCB7IGRhdGVGcm9tLCBkYXRlVG8sIG1pbkFtb3VudCwgbWF4QW1vdW50LCBzdGF0ZSB9ID0gZGF0YTtcblxuICAgICAgICBhd2FpdCBkaXNwYXRjaChcbiAgICAgICAgICAgIEZldGNoZXJTbGljZU1vZG8uZ2V0VHJhbnNhY3Rpb25MaXN0KHtcbiAgICAgICAgICAgICAgICB0b2tlbixcbiAgICAgICAgICAgICAgICAuLi4oaXNUeXBlRGF0ZVJhbmdlICYmIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZVN0YXRlOiBLSU5EX1RZUEVfU1RBVEUuREFURV9SQU5HRSxcbiAgICAgICAgICAgICAgICAgICAgZGF0ZUZyb20sXG4gICAgICAgICAgICAgICAgICAgIGRhdGVUbyxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAuLi4oaXNUeXBlQW1vdW50ICYmIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZVN0YXRlOiBLSU5EX1RZUEVfU1RBVEUuQU1PVU5ULFxuICAgICAgICAgICAgICAgICAgICBtaW5BbW91bnQ6IFN0cmluZyhtaW5BbW91bnQpLFxuICAgICAgICAgICAgICAgICAgICBtYXhBbW91bnQ6IFN0cmluZyhtYXhBbW91bnQpLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIC4uLihpc1R5cGVTdGF0ZSAmJiB7IHR5cGVTdGF0ZTogS0lORF9UWVBFX1NUQVRFLlNUQVRFLCBzdGF0ZSB9KSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZVNlbGVjdChvcHRpb246IE9wdGlvbnNCYXNlKSB7XG4gICAgICAgIGNvbnN0IHsgdmFsdWUgfSA9IG9wdGlvbjtcbiAgICAgICAgaWYgKCF0b2tlbikgcmV0dXJuO1xuXG4gICAgICAgIGRpc3BhdGNoKEFjdGlvblNsaWNlTW9kby5zZXRTZWxlY3RlZFRpbWVTdGF0ZShTdHJpbmcodmFsdWUpKSk7XG4gICAgICAgIGF3YWl0IGRpc3BhdGNoKEZldGNoZXJTbGljZU1vZG8uZ2V0VHJhbnNhY3Rpb25MaXN0KHsgdG9rZW4sIHRpbWVTdGF0ZTogU3RyaW5nKHZhbHVlKSB9KSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlQ2xpY2tTaG93TW9yZSgpOiB2b2lkIHtcbiAgICAgICAgZGlzcGF0Y2goQWN0aW9uU2xpY2VNb2RvLnRyYXNhY3Rpb25HZXRQYWdpbmF0aW9uKCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZUJhY2soKTogdm9pZCB7XG4gICAgICAgIG5hdmlnYXRlKEJBQ0tfUk9VVEVSKTtcbiAgICB9XG59XG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wiTkFNRV9JTlBVVF9TRUxFQ1RcIjpcIklucHV0U2VsZWN0XCIsXCJUWVBFX0lOUFVUX1NFTEVDVFwiOlwiRWxlbWVudFwiLFwiTkFNRV9JTlBVVF9EQVRFX0ZJRUxEXCI6XCJJbnB1dERhdGVGaWVsZFwiLFwiVFlQRV9JTlBVVF9EQVRFX0ZJRUxEXCI6XCJFbGVtZW50XCIsXCJOQU1FX0lOUFVUX05VTUJFUlwiOlwiSW5wdXROdW1iZXJcIixcIlRZUEVfSU5QVVRfTlVNQkVSXCI6XCJFbGVtZW50XCIsXCJOQU1FX1RIRU1FUExBVEZPUk1cIjpcIlRoZW1lUGxhdGZvcm1cIixcIlRZUEVfVEhFTUVQTEFURk9STVwiOlwiQnVuZGxlXCIsXCJOQU1FX0NPTlNVTUVSX1RIRU1FUExBVEZPUk1cIjpcIlRoZW1lUGxhdGZvcm1Db25zdW1lclwiLFwiVFlQRV9DT05TVU1FUl9USEVNRVBMQVRGT1JNXCI6XCJFbGVtZW50XCIsXCJOQU1FX1BST1ZJREVSX1RIRU1FUExBVEZPUk1cIjpcIlRoZW1lUGxhdGZvcm1Qcm92aWRlclwiLFwiVFlQRV9QUk9WSURFUl9USEVNRVBMQVRGT1JNXCI6XCJQcm92aWRlclwiLFwiTkFNRV9URVhUXCI6XCJUZXh0XCIsXCJUWVBFX1RFWFRcIjpcIkVsZW1lbnRcIixcIk5BTUVfQlVUVE9OXCI6XCJCdXR0b25cIixcIlRZUEVfQlVUVE9OXCI6XCJFbGVtZW50XCIsXCJOQU1FX0ZPUk1cIjpcIkZvcm1cIixcIlRZUEVfRk9STVwiOlwiRWxlbWVudFwiLFwiTkFNRV9UUkFOU0FDVElPTl9GSUxURVJTXCI6XCJUcmFuc2FjdGlvbkZpbHRlcnNcIixcIlRZUEVfVFJBTlNBQ1RJT05fRklMVEVSU1wiOlwiU2VjdGlvblwiLFwidHJhc2FjdGlvblNlbnRcIjpcIl9ydWxlc190cmFzYWN0aW9uU2VudF9fMkxCVF9cIixcInRyYW5zYWN0aW9uTGlzdFwiOlwiX3J1bGVzX3RyYW5zYWN0aW9uTGlzdF9fMVdCWC1cIixcImVtcHR5TWVzc2FnZVwiOlwiX3J1bGVzX2VtcHR5TWVzc2FnZV9fMjBKVXNcIn07IiwiaW1wb3J0IFJlYWN0IGZyb20gXCJAcGtnL3JlYWN0XCI7XG5pbXBvcnQgeyBOdW1iZXJGaWVsZCB9IGZyb20gXCJAYXBwL2JhbmNvbi11aVwiO1xuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSBcIkBwa2cvcmVhY3Qtc3Rvcnlib29rL0NvbXBvbmVudFwiO1xuaW1wb3J0IHR5cGUgeyBQcm9wRGVmYXVsdHMsIFByb3BUeXBlcyB9IGZyb20gXCJAcGtnL3JlYWN0LXN0b3J5Ym9vay9Db21wb25lbnRcIjtcbmltcG9ydCB0eXBlIHsgUHJvcHMgYXMgTnVtYmVyRmllbGRQcm9wcyB9IGZyb20gXCJAYXBwL2JhbmNvbi11aS9kaXN0L2NvbXBvbmVudHMvTnVtYmVyRmllbGRcIjtcblxuaW1wb3J0IHR5cGUgeyBVc2VGb3JtUmV0dXJuIH0gZnJvbSBcInJlYWN0LWhvb2stZm9ybVwiO1xuaW1wb3J0IHR5cGUgeyBPbWl0UHJvcElELCBQcm9wRFMgfSBmcm9tIFwiLi5cIjtcbmltcG9ydCB7IEZvcm0gfSBmcm9tIFwiLi5cIjtcbmltcG9ydCBOYW1lc3BhY2UgZnJvbSBcIi4vX2luZGV4LnNjc3NcIjtcblxuZXhwb3J0IGNvbnN0IHsgTkFNRV9JTlBVVF9OVU1CRVIsIFRZUEVfSU5QVVRfTlVNQkVSIH0gPSBOYW1lc3BhY2U7XG5cbmV4cG9ydCB0eXBlIFByb3BJbnB1dE51bWJlciA9IFByb3BEUzxOdW1iZXJGaWVsZFByb3BzPiAmIHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgaWQ/OiBzdHJpbmc7XG4gICAgZGVmYXVsdFZhbHVlPzogbnVtYmVyO1xuICAgIG1heExlbmd0aD86IG51bWJlcjtcbiAgICBkaXNhYmxlZD86IGJvb2xlYW47XG4gICAgcGF0dGVybj86IHN0cmluZztcbiAgICBvbkNoYW5nZT86ICgoZXZlbnQ6IFJlYWN0LkZvcm1FdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4gdm9pZCkgfCB1bmRlZmluZWQ7XG4gICAgb25CbHVyPzogKGV2ZW50OiBSZWFjdC5Gb3JtRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHZvaWQ7XG4gICAgdmFsdWVBc051bWJlcj86IGJvb2xlYW47XG59O1xuXG5leHBvcnQgY29uc3QgREVGX0lOUFVUX05VTUJFUjogUHJvcERlZmF1bHRzPFxuICAgIFByb3BJbnB1dE51bWJlcixcbiAgICBPbWl0UHJvcElEPFByb3BJbnB1dE51bWJlcj4gfCBrZXlvZiBQcm9wRFM8TnVtYmVyRmllbGRQcm9wcz5cbj4gPSB7IGlkOiBOQU1FX0lOUFVUX05VTUJFUiwgdmFsdWVBc051bWJlcjogdHJ1ZSB9O1xuXG50eXBlIFByb3BJbnB1dE51bWJlck1lbW9pemVkID0gUHJvcElucHV0TnVtYmVyICYge1xuICAgIG1ldGhvZHM6IFVzZUZvcm1SZXR1cm47XG59O1xuXG5jb25zdCBJbnB1dE51bWJlck1lbW9pemVkID0gUmVhY3QubWVtbyhcbiAgICAocHJvcHM6IFByb3BJbnB1dE51bWJlck1lbW9pemVkKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgaWQsIG5hbWUsIG1ldGhvZHMsIGRlZmF1bHRWYWx1ZSwgb25DaGFuZ2UsIHZhbHVlQXNOdW1iZXIsIC4uLnJlc3QgfSA9IHByb3BzO1xuICAgICAgICBjb25zdCB7IHJlZ2lzdGVyLCBmb3JtU3RhdGUsIGdldFZhbHVlcywgc2V0VmFsdWUsIGNsZWFyRXJyb3JzIH0gPSBtZXRob2RzO1xuICAgICAgICBjb25zdCB7IGVycm9ycyB9ID0gZm9ybVN0YXRlO1xuXG4gICAgICAgIGNvbnN0IHJlZ2lzdGVyTmFtZSA9IGAke25hbWV9YCBhcyBjb25zdDtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBnZXRWYWx1ZXMoKVtyZWdpc3Rlck5hbWVdO1xuXG4gICAgICAgIGNvbnN0IGlucHV0RXJyb3IgPSBlcnJvcnNbbmFtZV07XG5cbiAgICAgICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgICAgIGlmIChkZWZhdWx0VmFsdWUpIHNldFZhbHVlKHJlZ2lzdGVyTmFtZSwgZGVmYXVsdFZhbHVlLCB7IHNob3VsZFZhbGlkYXRlOiB0cnVlIH0pO1xuICAgICAgICAgICAgaWYgKCFkZWZhdWx0VmFsdWUpIHNldFZhbHVlKHJlZ2lzdGVyTmFtZSwgdW5kZWZpbmVkKTtcbiAgICAgICAgfSwgW2RlZmF1bHRWYWx1ZSwgcmVnaXN0ZXJOYW1lLCBzZXRWYWx1ZV0pO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8Q29tcG9uZW50IG5hbWU9e05BTUVfSU5QVVRfTlVNQkVSfSB0eXBlPXtUWVBFX0lOUFVUX05VTUJFUn0+XG4gICAgICAgICAgICAgICAgPE51bWJlckZpZWxkXG4gICAgICAgICAgICAgICAgICAgIHsuLi4oZGVmYXVsdFZhbHVlICYmIHsgZGVmYXVsdFZhbHVlIH0pfVxuICAgICAgICAgICAgICAgICAgICBpZD17aWQgfHwgbmFtZX1cbiAgICAgICAgICAgICAgICAgICAgey4uLihpbnB1dEVycm9yICYmIHsgZXJyb3I6IGlucHV0RXJyb3IubWVzc2FnZT8udG9TdHJpbmcoKSB9KX1cbiAgICAgICAgICAgICAgICAgICAgey4uLnJlZ2lzdGVyKHJlZ2lzdGVyTmFtZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U6IHJlc2V0RXJyb3JzLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVBc051bWJlcixcbiAgICAgICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgICAgICAgICAgICAgICAgey4uLnJlc3R9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvQ29tcG9uZW50PlxuICAgICAgICApO1xuICAgICAgICBmdW5jdGlvbiByZXNldEVycm9ycyhldmVudDogUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pIHtcbiAgICAgICAgICAgIGlmIChvbkNoYW5nZSkgb25DaGFuZ2UoZXZlbnQpO1xuICAgICAgICAgICAgY2xlYXJFcnJvcnMoW3JlZ2lzdGVyTmFtZV0pO1xuICAgICAgICB9XG4gICAgfSxcbiAgICAocHJldlByb3BzLCBuZXh0UHJvcHMpID0+XG4gICAgICAgIHByZXZQcm9wcy5tZXRob2RzLmZvcm1TdGF0ZS5lcnJvcnMgPT09IG5leHRQcm9wcy5tZXRob2RzLmZvcm1TdGF0ZS5lcnJvcnMgJiZcbiAgICAgICAgcHJldlByb3BzLm1ldGhvZHMuZm9ybVN0YXRlLmRpcnR5RmllbGRzW3ByZXZQcm9wcy5uYW1lXSAhPT1cbiAgICAgICAgICAgIG5leHRQcm9wcy5tZXRob2RzLmZvcm1TdGF0ZS5kaXJ0eUZpZWxkc1tuZXh0UHJvcHMubmFtZV0sXG4pO1xuXG5leHBvcnQgZnVuY3Rpb24gSW5wdXROdW1iZXIocHJvcHM6IFByb3BUeXBlczxQcm9wSW5wdXROdW1iZXIsIHR5cGVvZiBERUZfSU5QVVRfTlVNQkVSPikge1xuICAgIGNvbnN0IG1ldGhvZHMgPSBGb3JtLnVzZUNvbnRleHQoKTtcblxuICAgIHJldHVybiA8SW5wdXROdW1iZXJNZW1vaXplZCBtZXRob2RzPXttZXRob2RzfSB7Li4ucHJvcHN9IC8+O1xufVxuXG5JbnB1dE51bWJlci5kaXNwbGF5TmFtZSA9IE5BTUVfSU5QVVRfTlVNQkVSO1xuSW5wdXROdW1iZXIuZGVmYXVsdFByb3BzID0gREVGX0lOUFVUX05VTUJFUjtcbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJOQU1FX0lOUFVUX05VTUJFUlwiOlwiSW5wdXROdW1iZXJcIixcIlRZUEVfSU5QVVRfTlVNQkVSXCI6XCJFbGVtZW50XCJ9OyIsImltcG9ydCBSZWFjdCBmcm9tIFwiQHBrZy9yZWFjdFwiO1xuaW1wb3J0IHsgQ2FyZCwgU2VwYXJhdG9yIH0gZnJvbSBcIkBhcHAvYmFuY29uLXVpXCI7XG5pbXBvcnQgdHlwZSB7IFByb3BFbGVtZW50LCBQcm9wRGVmYXVsdHMsIFByb3BUeXBlcyB9IGZyb20gXCJAcGtnL3JlYWN0LXN0b3J5Ym9vay9Db21wb25lbnRcIjtcblxuaW1wb3J0IFJ1bGVzIGZyb20gXCIuL19ydWxlcy5tb2R1bGUuc2Nzc1wiO1xuaW1wb3J0IE5hbWVzcGFjZSBmcm9tIFwiLi9faW5kZXguc2Nzc1wiO1xuaW1wb3J0IHsgY2FyZHNDb2xvcnMgfSBmcm9tIFwiLi4vUHJvZHVjdFwiO1xuXG5leHBvcnQgY29uc3QgeyBOQU1FX01PRE9DQVJELCBUWVBFX01PRE9DQVJEIH0gPSBOYW1lc3BhY2U7XG5cbmV4cG9ydCB0eXBlIFByb3BNb2RvQ2FyZCA9IFByb3BFbGVtZW50ICYge1xuICAgIGNhcmRDb2xvcj86IGtleW9mIHR5cGVvZiBjYXJkc0NvbG9ycztcbn07XG5cbmV4cG9ydCBjb25zdCBERUZfTU9ET0NBUkQ6IFByb3BEZWZhdWx0czxQcm9wTW9kb0NhcmQ+ID0ge1xuICAgIGNhcmRDb2xvcjogXCJMQ1wiLFxufTtcblxuZXhwb3J0IHR5cGUgUHJvcFR5cGVzUHJvcE1vZG9DYXJkID0gUHJvcFR5cGVzPFByb3BNb2RvQ2FyZCwgdHlwZW9mIERFRl9NT0RPQ0FSRD47XG5cbmV4cG9ydCBmdW5jdGlvbiBNb2RvQ2FyZChwcm9wczogUHJvcE1vZG9DYXJkKSB7XG4gICAgY29uc3QgeyBjaGlsZHJlbiwgY2FyZENvbG9yLCAuLi5yZXN0IH0gPSBwcm9wcyBhcyBQcm9wVHlwZXNQcm9wTW9kb0NhcmQ7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8Q2FyZCBkYXRhLW5hbWU9e05BTUVfTU9ET0NBUkR9IGRhdGEtdHlwZT17VFlQRV9NT0RPQ0FSRH0gey4uLnJlc3R9PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e1J1bGVzLmNvbnRhaW5lcn0+XG4gICAgICAgICAgICAgICAgPFNlcGFyYXRvciBjbGFzc05hbWU9e1J1bGVzW2NhcmRzQ29sb3JzW2NhcmRDb2xvcl1dfSB0eXBlPVwidmVydGljYWxcIiAvPlxuXG4gICAgICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPXtSdWxlcy5jb250ZW50fT57Y2hpbGRyZW59PC9zZWN0aW9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvQ2FyZD5cbiAgICApO1xufVxuXG5Nb2RvQ2FyZC5kZWZhdWx0UHJvcHMgPSBERUZfTU9ET0NBUkQ7XG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wiTkFNRV9USEVNRVBMQVRGT1JNXCI6XCJUaGVtZVBsYXRmb3JtXCIsXCJUWVBFX1RIRU1FUExBVEZPUk1cIjpcIkJ1bmRsZVwiLFwiTkFNRV9DT05TVU1FUl9USEVNRVBMQVRGT1JNXCI6XCJUaGVtZVBsYXRmb3JtQ29uc3VtZXJcIixcIlRZUEVfQ09OU1VNRVJfVEhFTUVQTEFURk9STVwiOlwiRWxlbWVudFwiLFwiTkFNRV9QUk9WSURFUl9USEVNRVBMQVRGT1JNXCI6XCJUaGVtZVBsYXRmb3JtUHJvdmlkZXJcIixcIlRZUEVfUFJPVklERVJfVEhFTUVQTEFURk9STVwiOlwiUHJvdmlkZXJcIixcIk5BTUVfTU9ET0NBUkRcIjpcIk1vZG9DYXJkXCIsXCJUWVBFX01PRE9DQVJEXCI6XCJFbGVtZW50XCIsXCJjb250YWluZXJcIjpcIl9ydWxlc19jb250YWluZXJfXzM4bDRDXCIsXCJjb250ZW50XCI6XCJfcnVsZXNfY29udGVudF9fMmhaSjlcIixcImNhcmRDb2xvcl8xXCI6XCJfcnVsZXNfY2FyZENvbG9yXzFfXzJSd2pIXCIsXCJjYXJkQ29sb3JfMlwiOlwiX3J1bGVzX2NhcmRDb2xvcl8yX18zRUVDc1wiLFwiY2FyZENvbG9yXzNcIjpcIl9ydWxlc19jYXJkQ29sb3JfM19fM2llZ3ZcIixcImNhcmRDb2xvcl80XCI6XCJfcnVsZXNfY2FyZENvbG9yXzRfXzFFd2lkXCIsXCJjYXJkQ29sb3JfNVwiOlwiX3J1bGVzX2NhcmRDb2xvcl81X19hc0xJNFwiLFwiY2FyZENvbG9yXzZcIjpcIl9ydWxlc19jYXJkQ29sb3JfNl9fM0cwdkJcIixcImNhcmRDb2xvcl83XCI6XCJfcnVsZXNfY2FyZENvbG9yXzdfXzItUnVDXCIsXCJjYXJkQ29sb3JfOFwiOlwiX3J1bGVzX2NhcmRDb2xvcl84X18zMWg2bFwiLFwiY2FyZENvbG9yXzlcIjpcIl9ydWxlc19jYXJkQ29sb3JfOV9fMUxER1pcIixcImNhcmRDb2xvcl8xMFwiOlwiX3J1bGVzX2NhcmRDb2xvcl8xMF9fMU0xX09cIixcImNhcmRDb2xvcl8xMVwiOlwiX3J1bGVzX2NhcmRDb2xvcl8xMV9fM2J3T21cIixcImNhcmRDb2xvcl8xMlwiOlwiX3J1bGVzX2NhcmRDb2xvcl8xMl9fMkwzTmFcIn07IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcIk5BTUVfTU9ET0NBUkRcIjpcIk1vZG9DYXJkXCIsXCJUWVBFX01PRE9DQVJEXCI6XCJFbGVtZW50XCJ9OyIsImltcG9ydCBSZWFjdCBmcm9tIFwiQHBrZy9yZWFjdFwiO1xuaW1wb3J0IHsgRGF0ZUZpZWxkIH0gZnJvbSBcIkBhcHAvYmFuY29uLXVpXCI7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tIFwiQHBrZy9yZWFjdC1zdG9yeWJvb2svQ29tcG9uZW50XCI7XG5pbXBvcnQgdHlwZSB7IFByb3BEZWZhdWx0cywgUHJvcFR5cGVzIH0gZnJvbSBcIkBwa2cvcmVhY3Qtc3Rvcnlib29rL0NvbXBvbmVudFwiO1xuaW1wb3J0IHR5cGUgeyBQcm9wcyBhcyBEYXRlRmllbGRQcm9wcyB9IGZyb20gXCJAYXBwL2JhbmNvbi11aS9kaXN0L2NvbXBvbmVudHMvRGF0ZUZpZWxkL0RhdGVGaWVsZC50eXBlc1wiO1xuaW1wb3J0IHR5cGUgeyBVc2VGb3JtUmV0dXJuIH0gZnJvbSBcInJlYWN0LWhvb2stZm9ybVwiO1xuaW1wb3J0IHR5cGUgeyBPbWl0UHJvcElELCBQcm9wRFMgfSBmcm9tIFwiLi5cIjtcbmltcG9ydCB7IEZvcm0gfSBmcm9tIFwiLi5cIjtcbmltcG9ydCBOYW1lc3BhY2UgZnJvbSBcIi4vX2luZGV4LnNjc3NcIjtcblxuZXhwb3J0IGNvbnN0IHsgTkFNRV9JTlBVVF9EQVRFX0ZJRUxELCBUWVBFX0lOUFVUX0RBVEVfRklFTEQgfSA9IE5hbWVzcGFjZTtcblxuZXhwb3J0IHR5cGUgUHJvcElucHV0RGF0ZUZpZWxkID0gUHJvcERTPERhdGVGaWVsZFByb3BzPiAmIHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgaWQ/OiBzdHJpbmc7XG4gICAgb25DaGFuZ2U/OiAoKGRhdGU6IERhdGUpID0+IHZvaWQpIHwgdW5kZWZpbmVkO1xuICAgIGRlZmF1bHRWYWx1ZT86IERhdGU7XG59O1xuXG5leHBvcnQgY29uc3QgREVGX0lOUFVUX0RBVEVfRklFTEQ6IFByb3BEZWZhdWx0czxcbiAgICBQcm9wSW5wdXREYXRlRmllbGQsXG4gICAgT21pdFByb3BJRDxQcm9wSW5wdXREYXRlRmllbGQ+IHwga2V5b2YgUHJvcERTPERhdGVGaWVsZFByb3BzPlxuPiA9IHsgaWQ6IE5BTUVfSU5QVVRfREFURV9GSUVMRCB9O1xuXG50eXBlIFByb3BJbnB1dERhdGVGaWVsZE1lbW9pemVkID0gRGF0ZUZpZWxkUHJvcHMgJiB7XG4gICAgbWV0aG9kczogVXNlRm9ybVJldHVybjtcbn07XG5cbmNvbnN0IElucHV0RGF0ZUZpZWxkTWVtb2l6ZWQgPSBSZWFjdC5tZW1vKFxuICAgIChwcm9wczogUHJvcElucHV0RGF0ZUZpZWxkTWVtb2l6ZWQpID0+IHtcbiAgICAgICAgY29uc3QgeyBpZCwgbmFtZSwgbWV0aG9kcywgb25DaGFuZ2UsIGRlZmF1bHRWYWx1ZSwgLi4ucmVzdCB9ID0gcHJvcHM7XG4gICAgICAgIGNvbnN0IHsgcmVnaXN0ZXIsIGZvcm1TdGF0ZSwgc2V0VmFsdWUsIGNsZWFyRXJyb3JzIH0gPSBtZXRob2RzO1xuICAgICAgICBjb25zdCB7IGVycm9ycyB9ID0gZm9ybVN0YXRlO1xuXG4gICAgICAgIGNvbnN0IHJlZ2lzdGVyTmFtZSA9IGAke25hbWV9YCBhcyBjb25zdDtcblxuICAgICAgICBjb25zdCBpbnB1dEVycm9yID0gZXJyb3JzW25hbWVdO1xuXG4gICAgICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoZGVmYXVsdFZhbHVlKSBzZXRWYWx1ZShyZWdpc3Rlck5hbWUsIGRlZmF1bHRWYWx1ZSk7XG4gICAgICAgICAgICBlbHNlIHNldFZhbHVlKHJlZ2lzdGVyTmFtZSwgdW5kZWZpbmVkKTtcbiAgICAgICAgfSwgW2RlZmF1bHRWYWx1ZSwgcmVnaXN0ZXJOYW1lLCBzZXRWYWx1ZV0pO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8Q29tcG9uZW50IG5hbWU9e05BTUVfSU5QVVRfREFURV9GSUVMRH0gdHlwZT17VFlQRV9JTlBVVF9EQVRFX0ZJRUxEfT5cbiAgICAgICAgICAgICAgICA8RGF0ZUZpZWxkXG4gICAgICAgICAgICAgICAgICAgIGlkPXtpZCB8fCBuYW1lfVxuICAgICAgICAgICAgICAgICAgICB7Li4uKGlucHV0RXJyb3IgJiYgeyBlcnJvcjogU3RyaW5nKGlucHV0RXJyb3IubWVzc2FnZSkgfSl9XG4gICAgICAgICAgICAgICAgICAgIHsuLi5yZWdpc3RlcihyZWdpc3Rlck5hbWUpfVxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17cmVzZXRFcnJvcnN9XG4gICAgICAgICAgICAgICAgICAgIHsuLi5yZXN0fVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0NvbXBvbmVudD5cbiAgICAgICAgKTtcblxuICAgICAgICBmdW5jdGlvbiByZXNldEVycm9ycyhkYXRlOiBEYXRlKSB7XG4gICAgICAgICAgICBzZXRWYWx1ZShyZWdpc3Rlck5hbWUsIGRhdGUpO1xuICAgICAgICAgICAgY2xlYXJFcnJvcnMoW3JlZ2lzdGVyTmFtZV0pO1xuICAgICAgICAgICAgaWYgKG9uQ2hhbmdlKSBvbkNoYW5nZShkYXRlKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgKHByZXZQcm9wcywgbmV4dFByb3BzKSA9PlxuICAgICAgICBwcmV2UHJvcHMubWV0aG9kcy5mb3JtU3RhdGUuZXJyb3JzID09PSBuZXh0UHJvcHMubWV0aG9kcy5mb3JtU3RhdGUuZXJyb3JzICYmXG4gICAgICAgIHByZXZQcm9wcy5tZXRob2RzLmZvcm1TdGF0ZS5kaXJ0eUZpZWxkc1twcmV2UHJvcHMubmFtZV0gIT09XG4gICAgICAgICAgICBuZXh0UHJvcHMubWV0aG9kcy5mb3JtU3RhdGUuZGlydHlGaWVsZHNbbmV4dFByb3BzLm5hbWVdLFxuKTtcblxuZXhwb3J0IGZ1bmN0aW9uIElucHV0RGF0ZUZpZWxkKHByb3BzOiBQcm9wVHlwZXM8UHJvcElucHV0RGF0ZUZpZWxkLCB0eXBlb2YgREVGX0lOUFVUX0RBVEVfRklFTEQ+KSB7XG4gICAgY29uc3QgbWV0aG9kcyA9IEZvcm0udXNlQ29udGV4dCgpO1xuXG4gICAgcmV0dXJuIDxJbnB1dERhdGVGaWVsZE1lbW9pemVkIG1ldGhvZHM9e21ldGhvZHN9IHsuLi5wcm9wc30gLz47XG59XG5cbklucHV0RGF0ZUZpZWxkLmRpc3BsYXlOYW1lID0gTkFNRV9JTlBVVF9EQVRFX0ZJRUxEO1xuIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcIk5BTUVfSU5QVVRfREFURV9GSUVMRFwiOlwiSW5wdXREYXRlRmllbGRcIixcIlRZUEVfSU5QVVRfREFURV9GSUVMRFwiOlwiRWxlbWVudFwifTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wiTkFNRV9BTU9VTlRfRk9STUFUVEVSXCI6XCJBbW91bnRGb3JtYXR0ZXJcIixcIlRZUEVfQU1PVU5UX0ZPUk1BVFRFUlwiOlwiRWxlbWVudFwiLFwiTkFNRV9EQVRFVElNRVwiOlwiRGF0ZVRpbWVcIixcIlRZUEVfREFURVRJTUVcIjpcIkVsZW1lbnRcIixcIk5BTUVfVEhFTUVQTEFURk9STVwiOlwiVGhlbWVQbGF0Zm9ybVwiLFwiVFlQRV9USEVNRVBMQVRGT1JNXCI6XCJCdW5kbGVcIixcIk5BTUVfQ09OU1VNRVJfVEhFTUVQTEFURk9STVwiOlwiVGhlbWVQbGF0Zm9ybUNvbnN1bWVyXCIsXCJUWVBFX0NPTlNVTUVSX1RIRU1FUExBVEZPUk1cIjpcIkVsZW1lbnRcIixcIk5BTUVfUFJPVklERVJfVEhFTUVQTEFURk9STVwiOlwiVGhlbWVQbGF0Zm9ybVByb3ZpZGVyXCIsXCJUWVBFX1BST1ZJREVSX1RIRU1FUExBVEZPUk1cIjpcIlByb3ZpZGVyXCIsXCJjYXJkSW5mb1wiOlwiX3J1bGVzX2NhcmRJbmZvX18zNWx1UVwiLFwibmFtZVwiOlwiX3J1bGVzX25hbWVfXzJXNmpUXCIsXCJhbW91bnRcIjpcIl9ydWxlc19hbW91bnRfXzFMSVRsXCIsXCJhY2NvdW50XCI6XCJfcnVsZXNfYWNjb3VudF9fNU9FejBcIixcImVycm9yXCI6XCJfcnVsZXNfZXJyb3JfXzJoUjBXXCIsXCJzdWNjZXNzXCI6XCJfcnVsZXNfc3VjY2Vzc19fM0pObUZcIixcIndhcm5pbmdcIjpcIl9ydWxlc193YXJuaW5nX18zVnhxd1wifTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wiTkFNRV9UUkFOU0FDVElPTl9GSUxURVJTXCI6XCJUcmFuc2FjdGlvbkZpbHRlcnNcIixcIlRZUEVfVFJBTlNBQ1RJT05fRklMVEVSU1wiOlwiU2VjdGlvblwifTsiXSwic291cmNlUm9vdCI6IiJ9
//# sourceMappingURL=60.db6091ca.chunk.js.map