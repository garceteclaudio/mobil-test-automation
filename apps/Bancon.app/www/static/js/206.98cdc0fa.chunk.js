(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[206,301],{397:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return y}));var a=n(11),r=n(8),i=n(33),c=n(137),o=n(80),s=n(6),l=n(50),u=n(38),m=n(270),b=n(82),_=n(497),d=n(609),f=n(519),p=n(39),O=n(157),T=n(51),j=n(438),E=n.n(j),P=n(10),A="paymentsSuppliers.generate.send";function y(){var e=Object(r.b)(),t=Object(o.g)(),n=Object(u.c)().textGet,j=Object(T.sb)(T.ab),y=p.e.object({}),R=Object(r.c)(i.e.token),g=Object(r.c)(c.c.fetching),v=Object(r.c)(c.c.warning),M=Object(r.c)(c.c.dataPaymentPre),h=Object(r.c)(c.c.sendFulfilled),x=Object(r.c)(c.c.transfersSuppliersError),N=Object(r.c)(c.c.idTransaction),F=Object(r.c)(O.c.isOtpFormTokenVisible),C=Boolean(null===x||void 0===x?void 0:x.length),I=null===M||void 0===M?void 0:M.transfersSuppliers,S=(null===I||void 0===I?void 0:I.length)>s.fb;return a.b.useEffect((function(){N&&h&&!C&&t(j)}),[N,e,t,j,h,C]),I?Object(P.jsxs)(_.a,{withoutBox:!0,className:E.a.fileConfirmation,"header-onBack":k,children:[Object(P.jsx)("header",{children:Object(P.jsx)(u.b,{tag:"h1",uuid:"spa.suppliers.generatePayment.title"})}),Object(P.jsx)(l.Card,{children:Object(P.jsxs)(d.a,{newTokenCredential:!0,descriptionSignAndAccept:function(){var e,t=null!==(e=M.currency)&&void 0!==e?e:s.g.ARG_ISO,a=s.i[t],r=Object(f.a)(parseFloat(M.amount),{currencySymbol:a,minimumFractionDigits:s.Jb});return n({uuid:"spa.suppliers.generatePayment.signAndAccept.file.text",replace:[String(M.numTransfersProcessed),"<b>".concat(r,"</b>"),"<b>".concat(M.debitAccountLabel,"</b>")]})}(),idActivityToRead:A,isLoading:g,schema:y,warnings:v,onSubmit:function(t){if(!R)return;var n=t.otp,a=M.idFile,r=M.nameFile,i=M.contractIdDecrypt,o=M.amount,l=M.currency,u=M.numTransfersProcessed,m=M.accountIdProduct,b=M.consolidateDebit,_=M.debitAccountLabel,d={token:R,idFile:a,nameFile:r,amount:Number(o),total_amount:{currency:s.g.ARG_ISO,quantity:o},currency:l,contractId:i,rows:u,debitAccount:m,debitAccountLabel:_,consolidateDebit:Boolean(b),_otp:n};e(c.b.generatePaymentSend(d))},children:[Object(P.jsxs)("section",{className:E.a.fileConfirmationSection,children:[Object(P.jsx)(u.b,{className:E.a.fileConfirmationTitle,tag:"span",uuid:"spa.suppliers.generatePayment.filePayment.confirmation.subtitle"}),Object(P.jsxs)("ul",{children:[Object(P.jsxs)("li",{children:[Object(P.jsx)(u.b,{tag:"span",uuid:"spa.suppliers.generatePayment.filePayment.confirmation.debitAccount"}),Object(P.jsx)(u.b,{tag:"span",children:null===M||void 0===M?void 0:M.debitAccount})]}),function(){var e=function(){var e=[];return I.forEach((function(t){var n=e.findIndex((function(e){return e.providerCBU===t.cbuTo}));if(n!==s.ab){e[n].orderTotalAmount+=Number(t.amount),e[n].transfersRequested++;var a=e[n].paymentReference;e[n].paymentReference=a?"".concat(a,", ").concat(t.reference):t.reference}else e.push({row:t.row,providerCBU:t.cbuTo,paymentReference:t.reference,transfersRequested:s.fb,orderTotalAmount:Number(t.amount)})})),e}();return Object(P.jsx)("div",{className:E.a.payments,children:e.map(D)})}(),Object(P.jsxs)("li",{children:[Object(P.jsx)(u.b,{tag:"span",uuid:"spa.suppliers.generatePayment.filePayment.confirmation.totalAmount"}),Object(P.jsx)(u.b,{className:E.a.value,tag:"span",children:Object(f.a)(Number(null===M||void 0===M?void 0:M.amount),{minimumFractionDigits:s.Jb})})]})]})]}),Object(P.jsxs)("footer",{children:[Object(P.jsx)(b.a,{inline:!0,label:{uuid:"spa.form.back"},variant:"outlined",onClick:k}),Object(P.jsx)(b.a,{inline:!0,label:{uuid:"spa.form.accept"},type:"submit"})]})]})})]}):Object(P.jsx)(m.a,{});function D(e,t,n){var a=Object.keys(e).filter((function(e){return"row"!==e})).map((function(t){var n=e[t];return Object(P.jsxs)("li",{children:[Object(P.jsx)(u.b,{tag:"span",uuid:"spa.suppliers.generatePayment.filePayment.confirmation.".concat(t)}),Object(P.jsx)(u.b,{className:E.a.value,tag:"span",children:U(t,n)})]},n)}));return Object(P.jsxs)("ul",{children:[a,S&&t<n.length-s.fb&&Object(P.jsx)(l.Separator,{className:E.a.separator})]},"".concat(e.row,"-").concat(e.paymentReference))}function U(e,t){return"number"===typeof t&&"orderTotalAmount"===e?Object(f.a)(t,{minimumFractionDigits:s.Jb}):t}function k(){F?e(O.a.setOtpFormTokenVisible(!1)):(e(c.a.cleanDataPaymentPre()),t(o.a))}}},438:function(e,t,n){e.exports={NAME_FORM:"Form",TYPE_FORM:"Element",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_RADIO_GROUP:"RadioGroup",TYPE_RADIO_GROUP:"Element",NAME_INPUT_RADIO:"InputRadio",TYPE_INPUT_RADIO:"Element",NAME_AMOUNT_FORMATTER:"AmountFormatter",TYPE_AMOUNT_FORMATTER:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_DATETIME:"DateTime",TYPE_DATETIME:"Element",Container:"_rules_Container__cZIyp",footer:"_rules_footer__vxKyY",detail:"_rules_detail__29WXH",filePaymentError:"_rules_filePaymentError__3lTfQ",fileErrorTable:"_rules_fileErrorTable__2GlC5",dateColumn:"_rules_dateColumn__2Pzan",alert:"_rules_alert__21TPm",fileConfirmation:"_rules_fileConfirmation__3sAfY",fileConfirmationSection:"_rules_fileConfirmationSection__3tpIR",fileConfirmationTitle:"_rules_fileConfirmationTitle__3nRgq",payments:"_rules_payments__1nqsS",value:"_rules_value__QUtyA",separator:"_rules_separator__35z5X",generatePaymentsTicket:"_rules_generatePaymentsTicket__3GU1J",validateModalFooter:"_rules_validateModalFooter__1UAAr"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=206.98cdc0fa.chunk.js.map