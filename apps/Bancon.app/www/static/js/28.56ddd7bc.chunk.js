(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[28],{530:function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var c=n(30),a=n(6),r=n(187),o=n(522),i=n(39),s=n(74);function u(e,t,n,u){var b=Object(s.a)(t("core.password.minLength")),d=Object(s.a)(t("core.password.maxLength")),f=e({uuid:"spa.generic.accessData.error.documentNumberInPassword"}),p=e({uuid:"spa.generic.accessData.error.userInPassword"}),l=e({uuid:"spa.password.error.tooSmall",replace:"".concat(b)}),O=e({uuid:"spa.password.error.tooBig",replace:"".concat(d)}),j=e({uuid:"spa.generic.field.error.required"}),v=Object(r.d)(i.e.string.required(),j),m=[Object(r.d)(i.e.string.ofLength(b),l),Object(r.d)(i.e.string.ofLength(a.fb,d),O),Object(i.b)("document number in password",(function(e){if(!n)return!0;var t=e;var c=n.number,r=n.type===o.a?(i=c,i.slice(a.Jb,a.ab)):c;var i;return!t.includes(r)||f})),Object(i.b)("username in password",(function(e){return!u||(!e.includes(u)||p)})),Object(i.b)("required chars",(function(n){if(n&&h("repeatedCharacters")){var c,r,o=n,i=Object(s.a)(t("spa.password.repeatedCharacters.maximum")),u=null===(c=o.match(/(\w)\1+/g))||void 0===c?void 0:c.find((function(e){return e.length>=i})),b=null===(r=o.match(/([0-9]{3,})/g))||void 0===r?void 0:r.some((function(e){return function(e,t){if(e.length===a.fb)return!1;for(var n=e.charCodeAt(a.Sb),c=a.Sb,r=a.Sb,o=a.fb;o<e.length;o++){var i=e.charCodeAt(o);c>=a.Sb&&(n===a.cb&&i===a.Tb||n+a.fb===i)?c++:c<=a.Sb&&(n===a.Tb&&i===a.cb||n-a.fb===i)?c--:(r=Math.max(Math.abs(c)+a.fb,r),c=a.Sb),n=i}return Math.max(Math.abs(c)+a.fb,r)>=t}(e,i)}));return u?e({uuid:"spa.password.error.repeatedCharacters",replace:"".concat(i)}):!b||e({uuid:"spa.password.error.consecutiveNumbers",replace:"".concat(i)})}return v}))].concat(Object(c.a)(["atLeastOneDigit","atLeastOneLowercaseChar","atLeastOneUppercaseChar"].filter(h).map((function(n){var c=Object(s.a)(t("spa.password.".concat(n,".regex"))),a=e({uuid:"spa.password.error.".concat(n)});return Object(r.d)(i.e.string.match(new RegExp(c)),a)}))));return Object(i.c)((function(e){var t=m.find((function(t){return!Object(i.d)(e,t)}));return e&&t?t:v}));function h(e){return Object(s.a)(t("spa.password.".concat(e,".enabled")))}}},535:function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));var c=n(6);function a(e){var t=Number(e("validationCodes.id.groups.length"));return Number(e("validationCodes.id.groupLength"))*t+t-c.fb}},603:function(e,t,n){"use strict";n.d(t,"a",(function(){return b}));var c=n(0),a=n(5),r=n(16),o=n(11),i=n(8),s=n(33),u=n(87),b=function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t=Object(i.b)(),n=Object(i.c)(s.e.token),b=Object(i.c)(s.e.linkedSoftTokenUser),d=Object(i.c)(s.e.linkedDeviceModel),f=o.b.useState(!0),p=Object(r.a)(f,2),l=p[0],O=p[1],j=o.b.useCallback(Object(a.a)(Object(c.a)().mark((function e(){return Object(c.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n){e.next=2;break}return e.abrupt("return");case 2:return e.next=4,t(u.b.otpConfigurationPre({accessToken:n,linkedSoftTokenUser:b,linkedDeviceModel:d}));case 4:O(!1);case 5:case"end":return e.stop()}}),e)}))),[n,b,d,t]);return o.b.useEffect((function(){e&&j()}),[j,e]),{fetchData:j,isLoading:l}}},679:function(e,t,n){"use strict";n.d(t,"a",(function(){return z}));var c=n(0),a=n(5),r=n(2),o=n(11),i=n(41),s=n(80),u=n(182),b=n(74),d=n(99),f=n(8),p=n(17),l=n(6),O=n(87),j=n(33),v=n(79),m=n(69),h=n(270),g=n(524),S=n(497),k=n(603),T=n(843),w=n(842),x=n(804),E=n(805),C=n(806),P=n(807),L=n(808),M=n(809),D=n(810),N=n(678),I=n(16),y=n(811),V=n(50),U=n(273),B=n(38),A=n(51),_=n(555),Y=n.n(_),R=n(10);function q(){var e=Object(f.b)(),t=Object(B.c)().textGet,n=Object(d.a)().getValueConfig,r=Object(A.sb)(A.kb),i=o.b.useState(l.Sb),s=Object(I.a)(i,2),u=s[0],p=s[1],v=Object(b.a)(n("vu.fraud.check.fingerprint.enable")),h=Object(b.a)(n("secondfactor.vu.fraud.check.fingerprint.enable")),g=Object(b.a)(n("preferences.otp.configuration.validate.device")),S=Object(U.a)("".concat(n("otpConfiguration.smsValidation.timeout"))),k=Object(f.c)(j.e.token),T=Object(f.c)(O.c.seedUser),w=Object(f.c)(m.c.uniqueDeviceID),x=Object(f.c)(O.c.hasSecureDevice),E=Object(f.c)(O.c.deviceModel),C=o.b.useCallback(Object(a.a)(Object(c.a)().mark((function t(){var n;return Object(c.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Object(y.a)();case 2:if(n=t.sent,k){t.next=5;break}return t.abrupt("return");case 5:e(O.b.sendValidationSMS({accessToken:k,hashCode:n.value,uuid:w}));case 6:case"end":return t.stop()}}),t)}))),[k,e,w]),P=o.b.useCallback((function(t){var n=t.message;if(n){if(!k)return;var c=n.indexOf(":"),a=n.substring(c+1,c+8).trim();e(O.b.validateSMS({accessToken:k,code:a,uuid:w,deviceModel:E,isSafeDeviceEnabled:x&&g,seedUser:T,isVUEnabled:v&&h}))}}),[k,E,e,x,g,v,h,T,w]);return o.b.useEffect((function(){return document.addEventListener("onSMSArrive",P),function(){return document.removeEventListener("onSMSArrive",P)}}),[P,r]),o.b.useEffect((function(){var e=function(){var e=Object(a.a)(Object(c.a)().mark((function e(){return Object(c.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(y.b)();case 2:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();C(),e()}),[C]),o.b.useEffect((function(){var t=setTimeout((function(){e(O.a.hasSmsTypifiedFailed())}),S);return function(){return clearTimeout(t)}}),[e,S]),o.b.useEffect((function(){var e=setInterval((function(){p((function(e){return e+l.fb}))}),l.xb);return function(){return clearInterval(e)}}),[S]),Object(R.jsxs)("section",{children:[Object(R.jsx)(B.b,{className:Y.a.title,uuid:"spa.otpconfiguration.smsValidation.waitMessage"}),Object(R.jsx)(V.ProgressBar,{ariaLabel:t({uuid:"spa.otpconfiguration.smsValidation.waitMessage"}),maxValue:S/l.xb,progress:u})]})}var J=n(812),F=n(813),K=n.n(F),G=K.a.NAME_SECURITY_SECTION,H=K.a.TYPE_SECURITY_SECTION;function z(){var e=Object(f.b)(),t=Object(s.g)(),n=Object(d.a)().getValueConfig,I=Object(f.c)(O.c.otpType),y=Object(f.c)(j.e.token),V=Object(f.c)(O.c.exchangeToken),U=Object(f.c)(O.c.documentData),B=Object(f.c)(O.c.isStepBancorPassword),A=Object(f.c)(O.c.isStepSelfie),_=Object(f.c)(O.c.isSelectValidate),Y=Object(f.c)(O.c.isStepUnlink),F=Object(f.c)(O.c.hasAssignOTP),K=Object(f.c)(O.c.getOtpType),z=Object(f.c)(O.c.hasEnabledTokenNow),Q=Object(f.c)(O.c.hasValidateSecurity),W=Object(f.c)(O.c.otpType),X=Object(f.c)(O.c.isScreenLock),Z=Object(f.c)(O.c.isTheDeviceSecure),$=Object(f.c)(O.c.isSmsTypified),ee=Object(f.c)(m.c.isMobile),te=Object(f.c)(O.c.fetchingHasKeyPhone),ne=Object(f.c)(O.c.needsProofOfLife),ce=Object(b.a)(n("backend.vu.fraud.api.fingerprint.url")),ae=Object(b.a)(n("backend.vu.fraud.api.fingerprint.timeout")),re=Object(k.a)().isLoading||te,oe=(z||Q)&&!F;o.b.useEffect((function(){e(O.a.cleanOTP())}),[e]),o.b.useEffect((function(){y&&!W&&e(O.b.hasKeyPhone({accessToken:y}))}),[y,e,W]);var ie=o.b.useCallback((function(){var n=B&&!Q;n||t(l.c),n&&e(O.a.cleanOTP())}),[e,t,Q,B]);return Object(R.jsx)(S.a,{changeBackButton:!0,"header-onBack":ie,children:re?Object(R.jsx)(h.a,{}):Object(R.jsx)(i.a,{name:G,type:H,children:Object(R.jsx)(g.b,{handleChangeStep:function(){e(v.a.clean())},steps:{stepNonMobileDevice:{condition:!ee&&!I,component:J.a},stepUnlink:{condition:Y&&Boolean(W),component:D.a},stepNotAvailableToken:{condition:!X,component:C.a},stepEnabledTokenNow:{condition:Z&&!z,component:E.a},stepEnabledToken:{condition:!Z&&!_&&!$,component:x.a},stepValidateSms:{condition:!Z&&$&&!Q,component:q},stepValidateBancorPassword:{condition:B&&!Q,component:T.a},stepValidateSelfie:{condition:A&&!Q,component:w.a,props:{callbackFront:ne?function(t){return y?e(O.b.sendFrontDocument(Object(r.a)({accessToken:y,exchangeToken:l.D,url:ce,timeout:ae},t))).unwrap():Promise.resolve(null)}:null,callbackBack:ne?function(t){var n=t.documentToSave;return y?e(O.b.sendBackDocument({accessToken:y,exchangeToken:V,documentToSave:n,documentData:U,url:ce,timeout:ae})).unwrap():Promise.resolve(null)}:null,callbackSelfie:function(e){return se.apply(this,arguments)}}},stepLinkSoftToken:{condition:oe&&K===p.j.OTPMOBILE,component:M.a},StepLinkSMS:{condition:oe&&K===p.j.OTPSMS,component:L.a},StepLinkOTP:{condition:oe&&K===p.j.OTPLINK,component:P.a},stepTicketOTP:{condition:F,component:N.a}}})})});function se(){return(se=Object(a.a)(Object(c.a)().mark((function t(n){var a,r;return Object(c.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!y){t.next=6;break}return t.next=3,Object(u.a)(!0);case 3:return a=t.sent,r=JSON.stringify(a),t.abrupt("return",e(O.b.sendSelfie({accessToken:y,exchangeToken:V,imagesToSave:n,fingerPrintInfo:r})).unwrap());case 6:return t.abrupt("return",Promise.resolve(null));case 7:case"end":return t.stop()}}),t)})))).apply(this,arguments)}}},813:function(e,t,n){e.exports={NAME_SECURITY_SECTION:"SecuritySection",TYPE_SECURITY_SECTION:"Section"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=28.56ddd7bc.chunk.js.map