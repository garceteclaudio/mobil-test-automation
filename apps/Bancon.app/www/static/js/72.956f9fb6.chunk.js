(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[72,195,314],{230:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return f}));var a=n(11),c=n(524),i=n(8),o=n(118),s=n(65),r=n(79),l=n(3),u=n(6),d=n(310),b=n(311),j=n(312),p=n(313),O=n(10);function f(){var e=Object(i.b)(),t=Object(i.c)(o.c.error),n=t&&(null===t||void 0===t?void 0:t.type)===l.g.CRITICAL;a.b.useEffect((function(){if(n){var a={id:"_custom".concat(c.a),message:"".concat(t.message,"(").concat(t.code,")"),infoMessage:u.D,showDefaultInfo:!1};e(s.a.add(a)),e(o.a.clean())}}),[e,n,t]);var f=Object(i.c)(o.c.isStep1Corporate),m=Object(i.c)(o.c.isStep2Corporate),h=Object(i.c)(o.c.isStep3Corporate),C=Object(i.c)(o.c.isStep4Corporate),x=Boolean(Object(i.c)(o.c.sentData)),_=Object(i.c)(r.b.get),E={step1:{condition:f,component:d.default},step2:{condition:m,component:b.default},step3:{condition:h,component:j.default},step4:{condition:C,component:p.default}};return Object(O.jsx)(c.b,{handleChangeStep:function(){(f||m)&&x||!_.length||e(r.a.clean())},handleFallback:function(){e(s.a.add({id:c.a,message:"ERROR ".concat(c.a," - NO TARGET STEP"),name:"ERROR ".concat(c.a),stack:"ERROR ".concat(c.a)}))},steps:E})}},310:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return g}));var a=n(0),c=n(5),i=n(16),o=n(11),s=n(39),r=n(80),l=n(8),u=n(118),d=n(79),b=n(187),j=n(147),p=n(82),O=n(38),f=n(494),m=n(488),h=n(489),C=n(6),x=n(51),_=n(429),E=n.n(_),v=n(10);function g(){var e=Object(l.b)(),t=Object(O.c)().textGet,n=Object(r.g)(),_=Object(x.sb)(x.R),g=Object(l.c)(u.c.fetching),y=Object(l.c)(u.c.warning),S=Object(l.c)(j.c.exchangeToken),T=Object(l.c)(u.c.sentData),N=Object(l.c)(u.c.sentChannelInvitationCode),P=Object(l.c)(u.c.isCorporate),M=Object(l.c)(u.c.haveCode),k=o.b.useState(!1),A=Object(i.a)(k,2),R=A[0],w=A[1],I=!P&&!M,B=t({uuid:"spa.enrollment.byCode.step2.invitationCode.input.label"}),L=t({uuid:"spa.generic.field.error.required"}),U=s.e.object({invitationCode:Object(b.d)(s.e.string.required(),L)}),D=o.b.useCallback((function(){e(d.a.set({kind:"SUCCESS",text:{uuid:"spa.enrollment.byCode.step2.invitationCode.alert.text",replace:"<b>".concat(T,"</b>")},duration:C.v}))}),[e,T]);return o.b.useEffect((function(){(T||R)&&(D(),w(!1))}),[T,D,R]),Object(v.jsx)(h.a,{"header-onBack":function(){P?(e(u.a.clean()),e(j.a.clean()),e(d.a.clean()),n(_)):(e(u.a.notSendedInvitation()),e(u.a.cleanSentData()))},"header-title":"spa.signup.title",children:Object(v.jsx)("section",{children:Object(v.jsxs)(m.a,{schema:U,warnings:y,onSubmit:function(e){return F.apply(this,arguments)},children:[Object(v.jsx)(O.b,{className:E.a.byCodeInvitationCode,uuid:"spa.enrollment.byCode.step2.subtitle"}),Object(v.jsx)(f.a,{withoutSpaces:!0,label:B,maxLength:C.Bb,name:"invitationCode",onChange:function(){e(u.a.cleanWarnings())}}),Object(v.jsx)(p.a,{className:E.a.submitButton,label:{uuid:"spa.form.continue"},loading:g,type:"submit"}),I&&Object(v.jsxs)("div",{className:E.a.alignInvitationCode,children:[Object(v.jsx)(O.b,{tag:"span",uuid:"spa.enrollment.byCode.notReceive.text"}),Object(v.jsx)(p.a,{className:E.a.haveCode,kind:"plain",label:{uuid:"spa.enrollment.byCode.resend.link"},onClick:function(){return Y.apply(this,arguments)}})]})]})})});function F(){return(F=Object(c.a)(Object(a.a)().mark((function t(n){var c;return Object(a.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return c=n.invitationCode,t.next=3,e(u.b.byCodeStep2({exchangeToken:S,invitationCode:c}));case 3:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function Y(){return(Y=Object(c.a)(Object(a.a)().mark((function t(){return Object(a.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e(u.b.reSendInvitationCode({exchangeToken:S,resendChannel:N}));case 2:w(!0);case 3:case"end":return t.stop()}}),t)})))).apply(this,arguments)}}},311:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return E}));var a=n(0),c=n(5),i=n(16),o=n(11),s=n(39),r=n(8),l=n(118),u=n(187),d=n(6),b=n(79),j=n(147),p=n(38),O=n(488),f=n(82),m=n(494),h=n(489),C=n(429),x=n.n(C),_=n(10);function E(){var e=Object(r.b)(),t=Object(p.c)().textGet,n=Object(r.c)(j.c.exchangeToken),C=Object(r.c)(l.c.fetching),E=Object(r.c)(l.c.warning),v=Object(r.c)(l.c.sentData),g=v.replace(v,"<b>".concat(v,"</b>")),y=Object(r.c)(l.c.sentChannelVerificationCode),S=Object(r.c)(l.c.invitationCode),T=t({uuid:"spa.generic.field.error.required"}),N=o.b.useState(!1),P=Object(i.a)(N,2),M=P[0],k=P[1],A=t({uuid:"spa.enrollment.byCode.step3.verificationCode.input.label"}),R=s.e.object({verificationCode:Object(u.d)(s.e.string.required(),T)}),w=o.b.useCallback((function(){e(b.a.clean()),e(b.a.set({kind:"SUCCESS",text:{uuid:"spa.enrollment.byCode.step3.verificationCode.alert.text",replace:g},duration:d.v}))}),[e,g]);return o.b.useEffect((function(){(v||M)&&(w(),k(!1))}),[w,v,M]),Object(_.jsx)(h.a,{"header-onBack":function(){e(l.a.setInvitationCode(d.D)),e(l.a.cleanSentData()),e(b.a.clean())},"header-title":"spa.signup.title",children:Object(_.jsx)("section",{children:Object(_.jsxs)(O.a,{schema:R,warnings:E,onSubmit:function(e){return I.apply(this,arguments)},children:[Object(_.jsx)(p.b,{className:x.a.byCodeInvitationCode,uuid:"spa.enrollment.byCode.step3.subtitle"}),Object(_.jsx)(m.a,{withoutSpaces:!0,id:"verification",label:A,maxLength:d.Bb,name:"verificationCode",onChange:function(){e(l.a.cleanWarnings())}}),Object(_.jsx)(f.a,{className:x.a.submitButton,label:{uuid:"spa.form.continue"},loading:C,type:"submit"}),Object(_.jsxs)("div",{className:x.a.alignInvitationCode,children:[Object(_.jsx)(p.b,{tag:"span",uuid:"spa.enrollment.byCode.notReceive.text"}),Object(_.jsx)(f.a,{className:x.a.haveCode,kind:"plain",label:{uuid:"spa.enrollment.byCode.resend.link"},onClick:function(){return B.apply(this,arguments)}})]})]})})});function I(){return(I=Object(c.a)(Object(a.a)().mark((function t(c){var i;return Object(a.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return i=c.verificationCode,e(l.a.setVerificationCode(i)),t.next=4,e(l.b.byCodeStep3({exchangeToken:n,invitationCode:S,verificationCode:i}));case 4:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function B(){return(B=Object(c.a)(Object(a.a)().mark((function t(){return Object(a.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e(l.b.reSendInvitationCode({exchangeToken:n,resendChannel:y,invitationCode:S}));case 2:k(!0);case 3:case"end":return t.stop()}}),t)})))).apply(this,arguments)}}},312:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return R}));var a=n(0),c=n(5),i=n(16),o=n(8),s=n(3),r=n(6),l=n(118),u=n(147),d=n(79),b=n(187),j=n(50),p=n(489),O=n(82),f=n(488),m=n(494),h=n(515),C=n(517),x=n(490),_=n(568),E=n(38),v=n(11),g=n(99),y=n(80),S=n(39),T=n(51),N=n(530),P=n(607),M=n(429),k=n.n(M),A=n(10);function R(){var e=v.b.useState(!1),t=Object(i.a)(e,2),n=t[0],M=t[1],R=v.b.useState(!1),w=Object(i.a)(R,2),I=w[0],B=w[1],L=v.b.useState(void 0),U=Object(i.a)(L,2),D=U[0],F=U[1],Y=v.b.useState(!1),q=Object(i.a)(Y,2),H=q[0],W=q[1],X=v.b.useState(r.fb),G=Object(i.a)(X,2),V=G[0],z=G[1],J=Object(o.b)(),Z=Object(y.g)(),K=Object(E.c)().textGet,Q=Object(g.a)().getValueConfig,$=Object(T.sb)(T.R),ee=Object(o.c)(l.c.fetching),te=Object(o.c)(u.c.exchangeToken),ne=Object(o.c)(u.c.documentNumber),ae=Object(o.c)(l.c.invitationCode),ce=Object(o.c)(l.c.securitySeals),ie=Object(o.c)(l.c.firstName),oe=Object(o.c)(l.c.warning),se=Object(P.a)(K,Q),re=ne?Object(N.a)(K,Q,ne):Object(N.a)(K,Q),le=K({uuid:"spa.generic.field.error.required"}),ue=K({uuid:"spa.onboarding.error.termsAndConditions"}),de=K({uuid:"spa.enrollment.step4.createUser.username.input.label"}),be=K({uuid:"spa.enrollment.step4.createUser.password.input.label"}),je=K({uuid:"spa.enrollment.step4.createUser.password.input.helper"}),pe=K({uuid:"spa.generic.accessData.error.userInPassword"}),Oe=K({uuid:"spa.form.continue"}),fe=K({uuid:"spa.enrollment.securitySeal.modal.title"}),me=S.e.object({username:se,newPassword:re,generalConditions:Object(b.d)(S.e.boolean.equals(!0),ue),securitySeal:Object(b.d)(S.e.number(),le)}),he=Object(A.jsx)(j.Lottie,{direction:V,name:"user",play:H,size:"medium"});return v.b.useEffect((function(){J(l.b.securitySealList({exchangeToken:te}))}),[J,te]),Object(A.jsxs)(p.a,{"header-onBack":_e,"header-title":"spa.enrollment.step4.createUser.title",children:[Object(A.jsx)("section",{children:Object(A.jsxs)(f.a,{schema:me,warnings:oe,onSubmit:function(e){return Ce.apply(this,arguments)},children:[Object(A.jsxs)(E.b,{className:k.a.textSubtitle,tag:"h6",children:[Object(A.jsx)("strong",{children:"".concat(ie," ")}),Object(A.jsx)(E.b,{tag:"span",uuid:"spa.enrollment.step4.createUser.subtitle"})]}),Object(A.jsx)("div",{className:k.a.securitySealContainer,children:Object(A.jsx)(_.a,{"aria-label":fe,buttonLabel:Oe,modalTitle:Object(A.jsx)(E.b,{tag:"h5",children:fe}),name:"securitySeal",options:ce,selectedAvatar:D,uuidError:"spa.generic.securitySeal.error.required",uuidLabel:"spa.enrollment.step4.createUser.securitySeal.label",onContinue:function(e){F(e)}})}),Object(A.jsxs)("div",{className:k.a.alignInputs,children:[Object(A.jsx)(m.a,{withoutSpaces:!0,label:de,name:"username",start:he,onBlur:function(){z(r.ab),W(!0)},onChange:xe,onFocus:function(){z(r.fb),W(!0)}}),Object(A.jsx)(C.a,{withoutSpaces:!0,helper:je,label:be,name:"newPassword",onChange:xe})]}),Object(A.jsx)("div",{className:k.a.termsAndConditions,children:Object(A.jsx)(h.a,{label:Object(A.jsxs)("div",{children:[Object(A.jsx)(E.b,{uuid:"spa.enrollment.step4.createUser.generalConditions.input.label1"}),Object(A.jsx)(O.a,{kind:"plain",label:{uuid:"spa.enrollment.step4.createUser.generalConditions.label2"},type:"button",onClick:Ee})]}),name:"generalConditions",onChange:xe})}),Object(A.jsx)(O.a,{className:k.a.submitButton,label:{uuid:"spa.form.continue"},loading:ee,type:"submit"})]})}),Object(A.jsxs)(x.a,{open:n,title:"spa.enrollment.terms.and.conditions.title",onClose:Ee,children:[Object(A.jsx)(x.a.Body,{children:Object(A.jsx)(E.b,{uuid:"spa.enrollment.terms.and.conditions"})}),Object(A.jsx)(x.a.Footer,{children:Object(A.jsx)(O.a,{label:{uuid:"spa.form.accept"},size:"small",type:"button",onClick:Ee})})]}),Object(A.jsxs)(x.a,{open:I,onClose:_e,children:[Object(A.jsx)(x.a.Body,{children:Object(A.jsx)(E.b,{uuid:"spa.enrollment.cancelSignup"})}),Object(A.jsx)(x.a.Footer,{children:Object(A.jsx)(O.a,{label:{uuid:"spa.form.accept"},type:"button",onClick:function(){J(l.a.clean()),J(d.a.clean()),J(u.a.clean()),Z($)}})})]})]});function Ce(){return(Ce=Object(c.a)(Object(a.a)().mark((function e(t){var n,c,i,o;return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=t.generalConditions,c=t.newPassword,i=t.username,o=t.securitySeal,!c.includes(i)){e.next=4;break}return J(l.a.updateWarnings({code:s.a,message:s.a,data:{_newPassword:pe},type:s.i.COR020W.type})),e.abrupt("return");case 4:return e.next=6,J(l.b.createUser({exchangeToken:te,invitationCode:ae,generalConditions:n,newPassword:c,username:i,securitySeal:o.toString()}));case 6:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function xe(){J(l.a.cleanWarnings())}function _e(){B(!I)}function Ee(){M(!n)}}},313:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return f}));n(11);var a=n(80),c=n(8),i=n(118),o=n(147),s=n(270),r=n(82),l=n(38),u=n(136),d=n(51),b=n(489),j=n(429),p=n.n(j),O=n(10);function f(){var e=Object(c.b)(),t=Object(a.g)(),n=Object(d.sb)(d.O);return Object(c.c)(i.c.fetching)?Object(O.jsx)(s.a,{}):Object(O.jsx)(b.a,{children:Object(O.jsxs)("section",{children:[Object(O.jsx)(u.a,{uuid:"eOLogin"}),Object(O.jsx)("div",{className:p.a.textBody,children:Object(O.jsx)(l.b,{uuid:"spa.enrollment.finish.text"})}),Object(O.jsx)(r.a,{label:{uuid:"spa.enrollment.finish.button"},type:"button",onClick:function(){e(i.a.clean()),e(o.a.clean()),t(n)}})]})})}},429:function(e,t,n){e.exports={NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_SECURITY_SEAL:"SecuritySeal",TYPE_SECURITY_SEAL:"Element",NAME_INPUT_NUMBER:"InputNumber",TYPE_INPUT_NUMBER:"Element",NAME_INPUT_PASSWORD:"InputPassword",TYPE_INPUT_PASSWORD:"Element",NAME_XS:"xs",NAME_SM:"sm",NAME_MD:"md",NAME_LG:"lg",NAME_EXTERNAL_CONTAINER:"ContainerExternal",TYPE_EXTERNAL_CONTAINER:"Container",byCodeTitle:"_rules_byCodeTitle__yr3wN",byCodeInvitationCode:"_rules_byCodeInvitationCode__1vi5-",byPin:"_rules_byPin__15kE-",haveCodeSubtitle:"_rules_haveCodeSubtitle__1Zpe2",alignInputs:"_rules_alignInputs__5ZcTE",byCodeSubtitle:"_rules_byCodeSubtitle__33HL5",securitySealContainer:"_rules_securitySealContainer__2vwIC",alignInvitationCode:"_rules_alignInvitationCode__1NX5C",textSubtitle:"_rules_textSubtitle__159WN",haveCode:"_rules_haveCode__Kknyv",submitButton:"_rules_submitButton__1hASq",termsAndConditions:"_rules_termsAndConditions__2CP8-",textBody:"_rules_textBody__3hBIX"}},490:function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var a=n(2),c=n(19),i=n(11),o=n(41),s=n(50),r=n(495),l=n.n(r),u=(n(496),n(38)),d=n(82),b=n(10),j=["ariaLabelledBy","id","children","title","onClose","hasCloseIcon"],p=l.a.TYPE_MODAL,O=l.a.NAME_MODAL;function f(e){var t=e,n=t.ariaLabelledBy,r=t.id,l=t.children,f=t.title,m=t.onClose,h=t.hasCloseIcon,C=Object(c.a)(t,j),x="modal-header-".concat(r||""),_="string"===typeof f?x:n,E="string"===typeof f?Object(b.jsx)(u.b,{id:x,tag:"h4",uuid:f}):f;return Object(b.jsx)(o.a,{name:O,tag:"div",type:p,children:Object(b.jsxs)(s.Modal,Object(a.a)(Object(a.a)({ariaLabelledBy:_,onClose:m},C),{},{children:[Object(b.jsx)(s.Modal.Header,{children:f&&Object(b.jsxs)(i.b.Fragment,{children:[E,h&&Object(b.jsx)(d.a,{icon:"close",kind:"icon",label:{uuid:"spa.a11y.buttons.close.modal"},onClick:m})]})}),l]}))})}f.defaultProps={ariaLabelledBy:"",closeOnBgTap:!0,hasCloseIcon:!0,initialFocusElementId:"",title:""},f.Body=function(e){var t=e.children;return Object(b.jsx)(s.Modal.Body,{children:t})},f.Footer=function(e){var t=e.children,n=e.className;return Object(b.jsx)(s.Modal.Footer,{className:n,children:t})}},495:function(e,t,n){e.exports={NAME_MODAL:"Modal",TYPE_MODAL:"Element"}},496:function(e,t,n){e.exports={NAME_MODAL:"Modal",TYPE_MODAL:"Element"}},524:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return u}));var a=n(2),c=n(16),i=n(11),o=n(531),s=n.n(o),r=n(10),l=s.a.NAME_STEPPER;s.a.TYPE_STEPPER;function u(e){var t=e,n=t.steps,o=t.handleFallback,s=t.handleChangeStep,l=Object.entries(n).filter((function(e){return Boolean(e[1].condition)})).map((function(e){var t=Object(c.a)(e,2),n=t[0],i=t[1],o=i.component;return Object(r.jsx)(o,Object(a.a)({},i.props||{}),n)}),{}).shift(),u=i.b.useState(null===l||void 0===l?void 0:l.key),d=Object(c.a)(u,2),b=d[0],j=d[1];return i.b.useEffect((function(){!l&&o&&o()}),[o,l]),i.b.useEffect((function(){b!==(null===l||void 0===l?void 0:l.key)&&s&&s(),j(null===l||void 0===l?void 0:l.key)}),[b,s,null===l||void 0===l?void 0:l.key]),l||null}u.displayName=l,u.defaultProps={handleChangeStep:function(){},handleFallback:function(){}}},531:function(e,t,n){e.exports={NAME_STEPPER:"Stepper",TYPE_STEPPER:"Element"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=72.956f9fb6.chunk.js.map