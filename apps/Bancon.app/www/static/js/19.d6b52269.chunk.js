(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[19,309],{378:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return A}));var r=n(16),a=n(11),o=n(38),i=n(82),c=n(489),u=n(488),s=n(507),d=n(187),l=n(39),f=n(150),b=n(8),m=n(506),O=n(503),j=n(6),p=n(499),E=n(494),h=n(147),T=n(270),_=n(149),v=n(24),x=n(501),R=n(172),N=n(431),g=n.n(N),P=n(10);function A(){var e,t=Object(b.b)(),n=Object(p.a)(),N=Object(o.c)().textGet,A=Object(b.c)(_.c.fetchedTemplate),I=Object(b.c)(_.c.filename),S=Object(b.c)(_.c.content),w=Object(b.c)(f.d.fetching),C=Object(b.c)(f.d.exteriorIdentification),F=a.b.useState(C),M=Object(r.a)(F,2),y=M[0],U=M[1],D=Object(b.c)(f.d.hasNIF),L=Object(b.c)(f.d.countryRFId),k=Object(b.c)(R.c.countries),V=N({uuid:"spa.generic.field.error.required"}),Y=N({uuid:"spa.onboarding.ddjj.form.radio.yes"}),H=N({uuid:"spa.onboarding.ddjj.form.radio.no"}),B=Object(b.c)(h.c.exchangeToken),G=j.H,W=j.Sb,q=L===j.Ob,X=a.b.useState(D===Y),K=Object(r.a)(X,2),z=K[0],J=K[1],Z=a.b.useState(q),Q=Object(r.a)(Z,2),$=Q[0],ee=Q[1],te=a.b.useState(!1),ne=Object(r.a)(te,2),re=ne[0],ae=ne[1],oe=(e=j.a,k.filter((function(t){return t.id!==e})).map((function(e){return{isDisabled:!1,value:e.id,label:e.label,searchKey:e.label}}))),ie=void 0;L&&(ie=oe.find((function(e){if(e.value===L)return e})));var ce=N({uuid:"spa.onboarding.error.exceeds.maximum.allowed",replace:"".concat(G)});a.b.useEffect((function(){t(R.b.listCountries())}),[t]),a.b.useEffect((function(){re&&(A?(I&&S&&n(I,Object(x.a)(S)),ae(!1),t(_.a.cleanTemplate())):t(_.b.downloadTemplate({exchangeToken:B,templateType:v.t.ONBOARDING_FORM_W9})))}),[t,I,n,S,re,ae,A,B]);var ue=l.e.object({RFCountry:Object(d.d)(l.e.string.required(),V),hasNIF:Object(d.d)(l.e.string.required(),V),NIF:Object(l.c)((function(e,t){var n=t.branch[0].hasNIF;return!z||n&&n===H?l.e.any():Object(l.c)((function(e){return String(e)&&e?String(e).trim()?Object(d.d)(l.e.string.ofLength(W,G),ce):Object(d.d)(Object(d.l)(),V):Object(d.d)(l.e.string.required(),V)}))}))});return w?Object(P.jsx)(T.a,{}):Object(P.jsx)(c.a,{"header-onBack":function(){if(q)return void t(f.b.cleanSubjectType());t(f.b.cleanRFCountry())},children:Object(P.jsx)("section",{children:Object(P.jsxs)(u.a,{schema:ue,onSubmit:function(e){if(!B)return;t(f.c.updateStatus({status:f.a.RF_FINISHED,exchangeToken:B}));var n=e;e.hasNIF===H&&(n.NIF=j.D);t(f.b.setHasRF(!0)),t(f.b.setRFCountry(n))},children:[Object(P.jsx)("header",{children:Object(P.jsx)(o.b,{tag:"h1",uuid:"spa.onboarding.ddjj.rf.title"})}),Object(P.jsx)("div",{className:g.a.formContainer,children:Object(P.jsx)(O.a,{defaultOption:ie,disabled:q,id:"RFCountry",label:N({uuid:"spa.onboarding.ddjj.rf.form.label.1"}),name:"RFCountry",options:oe,onSelectOption:function(e){if(e.value===j.Ob)return void ee(!0);ee(!1)}})}),$&&Object(P.jsxs)("div",{className:g.a.infoContainer,children:[Object(P.jsx)(o.b,{className:g.a.importantText,uuid:"spa.onboarding.ddjj.rf.form.info.usa.span"}),Object(P.jsx)(o.b,{uuid:"spa.onboarding.ddjj.rf.form.info.usa"}),Object(P.jsx)("a",{onClick:function(){ae(!0)},children:Object(P.jsx)(o.b,{className:g.a.downloadText,uuid:"spa.onboarding.ddjj.rf.info.usa.download"})})]}),Object(P.jsx)(o.b,{tag:"span",uuid:"spa.onboarding.ddjj.rf.form.label.2"}),Object(P.jsx)("div",{className:g.a.formContainer,children:Object(P.jsxs)(m.a,{name:"hasNIF",value:D,children:[Object(P.jsx)(s.a,{id:"hasNIF-".concat(Y),label:Y,name:"hasNIF",value:Y,onChange:function(){J(!0)}}),Object(P.jsx)(s.a,{id:"hasNIF-".concat(H),label:H,name:"hasNIF",value:H,onChange:function(){U(j.D),J(!1)}})]})}),z&&Object(P.jsx)("div",{className:g.a.infoContainer,children:Object(P.jsx)(E.a,{defaultValue:y,id:"NIF",label:N({uuid:"spa.onboarding.ddjj.rf.form.label.3"}),name:"NIF"})}),Object(P.jsx)(i.a,{label:{uuid:"spa.onboarding.ddjj.form.continue"},type:"submit"})]})})})}},431:function(e,t,n){e.exports={NAME_EXTERNAL_CONTAINER:"ContainerExternal",TYPE_EXTERNAL_CONTAINER:"Container",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",infoContainer:"_rules_infoContainer__NsT2B",formContainer:"_rules_formContainer__3oZ9K",title:"_rules_title__13-ed",importantText:"_rules_importantText__1NiIU",downloadText:"_rules_downloadText__3FDkn"}},499:function(e,t,n){"use strict";n.d(t,"a",(function(){return b}));var r=n(0),a=n(5);function o(e){var t=e.filename,n=e.path,r=e.flags;return new Promise((function(e,a){var o;function i(e){a(e)}(o=window.cordova.file[n],new Promise((function(e,t){window.resolveLocalFileSystemURL(o,(function(t){e(t)}),(function(e){t(e)}))}))).then((function(n){var a=n;a.getFile(t,r,(function(t){var n=new FileReader;t.createWriter((function(r){e({fileEntry:t,dirEntry:a,fileReader:n,fileWriter:r,fileWrite:function(e){return new Promise((function(t,n){r.onwriteend=function(){return t(r)},r.onerror=function(e){return n(e)},r.write(e)}))},fileRemove:function(){return new Promise((function(e,n){t.remove((function(){return e(!0)}),(function(e){return n(e)}))}))}})}),i)}),i)}))}))}var i=n(36),c=n(26),u=n(28);function s(){return d.apply(this,arguments)}function d(){return(d=Object(a.a)(Object(r.a)().mark((function e(){var t;return Object(r.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(c.c)();case 2:if(e.sent&&cordova.plugins){e.next=5;break}throw c.a.CORDOVA_UNAVAILABLE;case 5:if(t=cordova.plugins.fileOpener2){e.next=8;break}throw c.a.PLUGIN_UNAVAILABLE;case 8:return e.abrupt("return",t);case 9:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function l(e){return f.apply(this,arguments)}function f(){return f=Object(a.a)(Object(r.a)().mark((function e(t){var n,a,o,i,d;return Object(r.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.contentType,a=t.fileName,o=t.withDialog,e.next=3,Object(c.c)();case 3:if(e.sent){e.next=6;break}throw c.a.CORDOVA_UNAVAILABLE;case 6:return e.next=8,s();case 8:return i=e.sent,d=o?i.open:i.showOpenWithDialog,e.abrupt("return",new Promise((function(e,t){try{d(a,n,{success:function(){e({code:u.a.SUCCESS,value:!0})},error:function(e){function t(t){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}((function(e){t("boolean"===typeof e?new u.b(u.a.ERROR,i.open.name,u.c):new u.b(u.a.ERROR,i.open.name,e.message))}))})}catch(r){t(new u.b(u.a.ERROR_UNKNOWN,i.open.name,u.c))}})));case 11:case"end":return e.stop()}}),e)}))),f.apply(this,arguments)}function b(){var e=Object(i.i)(),t=e.isDesktop,n=e.isUnknown,c=e.platform;function u(e){var t=e.split(".").pop();return"png"===t||"jpg"===t||"gif"===t||"bmp"===t?"image/".concat(t):"pdf"===t?"application/".concat(t):"doc"===t||"docx"===t?"application/msword":"ppt"===t||"pptx"===t?"application/vnd.ms-powerpoint":"xls"===t||"xlsx"===t?"application/vnd.ms-excel":"xlsm"===t?"application/vnd.ms-excel.sheet.macroEnabled.12":"txt"===t?"text/plain":"zip"===t?"application/zip":void 0}return function(){var e=Object(a.a)(Object(r.a)().mark((function e(a,s){var d,f,b,m,O,j,p;return Object(r.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(d=c===i.b.CORDOVA_ANDROID,!(f=u(a))){e.next=19;break}if(!t&&!n){e.next=9;break}return(b=document.createElement("a")).href=window.URL.createObjectURL(s),b.download=a,b.click(),e.abrupt("return");case 9:return e.next=11,o({filename:a,path:d?"externalApplicationStorageDirectory":"dataDirectory",flags:{create:!0,exclusive:!1}});case 11:return m=e.sent,O=m.fileWrite,j=m.fileEntry,e.next=16,O(s);case 16:return p={contentType:f,fileName:j.nativeURL,withDialog:!0},e.next=19,l(p);case 19:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}()}},501:function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=512,a=0;function o(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:r,o=window.atob(e),i=[],c=a;c<o.length;c+=n){for(var u=o.slice(c,c+n),s=new Array(u.length),d=a;d<u.length;d++)s[d]=u.charCodeAt(d);i.push(new Uint8Array(s))}return new Blob(i,{type:t})}},503:function(e,t,n){"use strict";n.d(t,"a",(function(){return E}));var r=n(272),a=n(2),o=n(16),i=n(19),c=n(11),u=n(50),s=n(41),d=n(488),l=n(516),f=n.n(l),b=n(10),m=["id","name","methods","options","defaultOption","onSelectOption"],O=f.a.NAME_INPUT_SELECT,j=f.a.TYPE_INPUT_SELECT,p=c.b.memo((function(e){var t,n=e.id,r=e.name,d=e.methods,l=e.options,f=e.defaultOption,p=e.onSelectOption,E=Object(i.a)(e,m),h=d.register,T=d.formState,_=d.setValue,v=d.watch,x=T.errors,R="".concat(r),N=c.b.useState(f),g=Object(o.a)(N,2),P=g[0],A=g[1];v(R);var I=c.b.useRef(null),S=x[r];return c.b.useEffect((function(){null!==f&&void 0!==f&&f.value&&_(R,null===f||void 0===f?void 0:f.value,{shouldValidate:!0})}),[null===f||void 0===f?void 0:f.value,R,_]),c.b.useEffect((function(){I.current&&I.current.blur()}),[S]),c.b.useEffect((function(){P||A(f)}),[f,P]),Object(b.jsx)(s.a,{name:O,type:j,children:Object(b.jsx)(u.SelectField,Object(a.a)(Object(a.a)(Object(a.a)({defaultOption:P,id:n||r,options:l},h(R)),S&&{error:null===(t=S.message)||void 0===t?void 0:t.toString()}),{},{ref:I,onSelectOption:function(e){_(R,e.value,{shouldValidate:!0}),p&&p(e)}},E))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function E(e){var t=d.a.useContext(),n=e,o=Object.assign({},(Object(r.a)(n),n));return Object(b.jsx)(p,Object(a.a)({methods:t},o))}},506:function(e,t,n){"use strict";n.d(t,"a",(function(){return p}));var r=n(2),a=n(19),o=n(11),i=n(50),c=n(41),u=n(488),s=n(509),d=n.n(s),l=n(10),f=["id","name","children","methods","value","onChange"],b=d.a.NAME_RADIO_GROUP,m=d.a.TYPE_RADIO_GROUP,O={id:b},j=o.b.memo((function(e){var t=e.id,n=e.name,u=e.children,s=e.methods,d=e.value,O=e.onChange,j=Object(a.a)(e,f),p=s.formState,E=s.setValue,h=p.errors[n];return o.b.useEffect((function(){d&&E(n,d,{shouldValidate:!0})}),[d,n,E]),Object(l.jsx)(c.a,{name:b,type:m,children:Object(l.jsx)(i.RadioGroup,Object(r.a)(Object(r.a)(Object(r.a)({id:t,name:n,value:d,onChange:function(e){E(n,e.target.value),O&&O(e)}},h&&{error:String(h.message)}),j),{},{children:u}))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function p(e){var t=u.a.useContext();return Object(l.jsx)(j,Object(r.a)({methods:t},e))}p.defaultProps=O},507:function(e,t,n){"use strict";n.d(t,"a",(function(){return p}));var r=n(2),a=n(19),o=n(11),i=n(50),c=n(41),u=n(488),s=n(510),d=n.n(s),l=(n(511),n(10)),f=["id","name","methods","onChange"],b=d.a.NAME_INPUT_RADIO,m=d.a.TYPE_INPUT_RADIO,O={id:b},j=o.b.memo((function(e){var t=e.id,n=e.name,o=e.methods,u=e.onChange,s=Object(a.a)(e,f),d=o.register,O=o.formState,j=o.clearErrors,p=O.errors,E="".concat(n),h=p[n];return Object(l.jsx)(c.a,{name:b,type:m,children:Object(l.jsx)(i.Radio,Object(r.a)(Object(r.a)(Object(r.a)({id:t},h&&{error:String(h.message)}),d(E)),{},{name:n,onChange:function(e){u&&u(e),j([E])}},s))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function p(e){var t=u.a.useContext();return Object(l.jsx)(j,Object(r.a)({methods:t},e))}p.defaultProps=O},509:function(e,t,n){e.exports={NAME_RADIO_GROUP:"RadioGroup",TYPE_RADIO_GROUP:"Element"}},510:function(e,t,n){e.exports={NAME_INPUT_RADIO:"InputRadio",TYPE_INPUT_RADIO:"Element"}},511:function(e,t,n){e.exports={NAME_INPUT_RADIO:"InputRadio",TYPE_INPUT_RADIO:"Element",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider"}},516:function(e,t,n){e.exports={NAME_INPUT_SELECT:"InputSelect",TYPE_INPUT_SELECT:"Element"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=19.d6b52269.chunk.js.map