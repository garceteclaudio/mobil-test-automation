(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[158,97,277],{328:function(e,t,n){"use strict";n.r(t),n.d(t,"DEF_MODAL_PROPS",(function(){return p})),n.d(t,"ModalTermsAndConditions",(function(){return f}));var a=n(16),o=n(11),s=n(99),r=n(74),i=n(8),c=n(82),l=n(490),d=n(488),u=n(38),b=n(515),m=n(33),O=n(6),j=n(90),_=n(100),E=n(430),T=n.n(E),h=n(10),p={};function f(e){var t=e,n=t.showModal,E=t.setShowModal,p=t.handleAcceptTermsAndConditions,f=o.b.useState(!0),C=Object(a.a)(f,2),M=C[0],x=C[1],A=o.b.useState(!1),P=Object(a.a)(A,2),g=P[0],N=P[1],F=Object(i.c)(m.e.creationDate),v=Object(i.b)(),R=Object(s.a)().getValueConfig,y=Object(u.c)().textGet,B=Object(r.a)(R("spa.modal.terms.compareDate")),k=Object(r.a)(R("spa.modal.terms.expirationDate")),S=function(e){return e.split("-").join("/")},L=S(F.split("T")[O.Sb]),I=S(B),D=S(k),H=(new Date).getTime(),Y=Object(_.c)(new Date(S(k)),{format:_.a.SHORT}),w=new Date(L).getTime()<new Date(I).getTime(),U=n&&w,X=V()?y({uuid:"spa.modal.terms.label",replace:["".concat(Y)]}):y({uuid:"spa.modal.tyc.expired.label",replace:["".concat(k)]});return o.b.useEffect((function(){U&&v(m.a.setIsHomeModalActive(!0))}),[v,U,E]),Object(h.jsxs)(o.b.Fragment,{children:[Object(h.jsxs)(l.a,{closeOnBgTap:!1,hasCloseIcon:!1,open:U,title:"spa.modal.terms.title",children:[Object(h.jsx)(l.a.Body,{children:Object(h.jsxs)(d.a,{children:[Object(h.jsx)(u.b,{children:Object(h.jsx)("span",{children:X})}),Object(h.jsx)(b.a,{label:function(){var e=y({uuid:"spa.modal.terms.accept"});return Object(h.jsxs)("div",{className:T.a.termsAndConditionsLink,children:[Object(h.jsx)(u.b,{tag:"span",children:Object(j.a)(e)}),Object(h.jsx)(c.a,{kind:"plain",label:{uuid:"spa.modo.register.accept.terms.and.conditions"},type:"button",onClick:K})]})}(),name:"termsAndConditions",onChange:function(){x(!M)}})]})}),Object(h.jsx)(l.a.Footer,{children:Object(h.jsxs)("div",{className:T.a.modalTermsAndConditionsFooter,children:[V()&&Object(h.jsx)(c.a,{className:T.a.linkButton,label:{uuid:"spa.modal.terms.not.now"},type:"button",variant:"text",onClick:function(){v(m.a.setIsHomeModalActive(!1)),E(!1)}}),Object(h.jsx)(c.a,{className:T.a.acceptTermsAndConditionsButton,disabled:M,label:{uuid:"spa.global.accept"},type:"button",variant:"solid",onClick:p})]})})]}),g&&Object(h.jsxs)(l.a,{open:g,onClose:K,children:[Object(h.jsx)(l.a.Body,{children:Object(h.jsx)(u.b,{className:T.a.termsText,uuid:"spa.enrollment.terms.and.conditions"})}),Object(h.jsx)(l.a.Footer,{children:Object(h.jsx)(c.a,{label:{uuid:"spa.form.accept"},type:"button",onClick:K})})]})]});function K(){N(!g)}function V(){return H<new Date(D).getTime()}}f.defaultProps=p},430:function(e,t,n){e.exports={NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_FORM:"Form",TYPE_FORM:"Element",NAME_INPUT_CHECKBOX:"InputCheckbox",TYPE_INPUT_CHECKBOX:"Element",NAME_TOAST:"Toast",TYPE_TOAST:"Element",footer:"_rules_footer__1siFL",modalTermsAndConditionsFooter:"_rules_modalTermsAndConditionsFooter__MnsKB",acceptTermsAndConditionsButton:"_rules_acceptTermsAndConditionsButton__2vuym",linkButton:"_rules_linkButton__2g5X4",termsAndConditionsLink:"_rules_termsAndConditionsLink__2Ifqn",termsText:"_rules_termsText__3ZQDd",modalItems:"_rules_modalItems__JcKTW",textSeparation:"_rules_textSeparation__2Xhop",logosContainer:"_rules_logosContainer__rjseW",image:"_rules_image__r3ueE"}},488:function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var a=n(2),o=n(16),s=n(19),r=n(11),i=n(502),c=n(505),l=n(41),d=n(6),u=n(79),b=n(8),m=n(493),O=n.n(m),j=n(10),_=["ariaLabel","ariaLabelledby","schema","onSubmit","children","warnings","isRequiredToast","isResetForm"],E=O.a.NAME_FORM,T=O.a.TYPE_FORM;function h(e){var t=e,n=t.ariaLabel,m=t.ariaLabelledby,O=t.schema,h=t.onSubmit,p=t.children,f=t.warnings,C=t.isRequiredToast,M=t.isResetForm,x=Object(s.a)(t,_),A=Object(b.b)(),P=Object(i.e)({resolver:Object(c.a)(O)}),g=P.handleSubmit,N=P.setError,F=P.formState.errors,v=P.reset,R=Object.keys(F),y=r.b.useState(!1),B=Object(o.a)(y,2),k=B[0],S=B[1],L=r.b.useCallback((function(){C&&k&&A(u.a.set({kind:"ERROR",text:{uuid:"spa.form.field.generic.error"},duration:d.w})),S(!1)}),[A,C,k]),I=r.b.useCallback((function(){v()}),[v]);return r.b.useEffect((function(){f&&Object.keys(f.data).map((function(e){var t=e.startsWith(d.Nb)?e.slice(d.fb):e;return N(t,{message:f.data[e]},{shouldFocus:!1}),null})),R.length>d.Sb&&L(),M&&I()}),[R.length,M,I,N,L,f]),Object(j.jsx)(i.b,Object(a.a)(Object(a.a)(Object(a.a)({},P),x),{},{children:Object(j.jsx)(l.a,{noValidate:!0,"aria-label":n,"aria-labelledby":m,name:E,tag:"form",type:T,onSubmit:g(h,(function(){return S(!k)})),children:p})}))}h.useContext=i.f,h.defaultProps={isRequiredToast:!0,isResetForm:!1,warnings:null}},490:function(e,t,n){"use strict";n.d(t,"a",(function(){return _}));var a=n(2),o=n(19),s=n(11),r=n(41),i=n(50),c=n(495),l=n.n(c),d=(n(496),n(38)),u=n(82),b=n(10),m=["ariaLabelledBy","id","children","title","onClose","hasCloseIcon"],O=l.a.TYPE_MODAL,j=l.a.NAME_MODAL;function _(e){var t=e,n=t.ariaLabelledBy,c=t.id,l=t.children,_=t.title,E=t.onClose,T=t.hasCloseIcon,h=Object(o.a)(t,m),p="modal-header-".concat(c||""),f="string"===typeof _?p:n,C="string"===typeof _?Object(b.jsx)(d.b,{id:p,tag:"h4",uuid:_}):_;return Object(b.jsx)(r.a,{name:j,tag:"div",type:O,children:Object(b.jsxs)(i.Modal,Object(a.a)(Object(a.a)({ariaLabelledBy:f,onClose:E},h),{},{children:[Object(b.jsx)(i.Modal.Header,{children:_&&Object(b.jsxs)(s.b.Fragment,{children:[C,T&&Object(b.jsx)(u.a,{icon:"close",kind:"icon",label:{uuid:"spa.a11y.buttons.close.modal"},onClick:E})]})}),l]}))})}_.defaultProps={ariaLabelledBy:"",closeOnBgTap:!0,hasCloseIcon:!0,initialFocusElementId:"",title:""},_.Body=function(e){var t=e.children;return Object(b.jsx)(i.Modal.Body,{children:t})},_.Footer=function(e){var t=e.children,n=e.className;return Object(b.jsx)(i.Modal.Footer,{className:n,children:t})}},493:function(e,t,n){e.exports={NAME_FORM:"Form",TYPE_FORM:"Element"}},495:function(e,t,n){e.exports={NAME_MODAL:"Modal",TYPE_MODAL:"Element"}},496:function(e,t,n){e.exports={NAME_MODAL:"Modal",TYPE_MODAL:"Element"}},515:function(e,t,n){"use strict";n.d(t,"a",(function(){return E}));var a=n(2),o=n(16),s=n(19),r=n(11),i=n(50),c=n(41),l=n(488),d=n(520),u=n.n(d),b=n(10),m=["id","name","methods","onChange","isChecked"],O=u.a.NAME_INPUT_CHECKBOX,j=u.a.TYPE_INPUT_CHECKBOX,_=r.b.memo((function(e){var t,n=e.id,l=e.name,d=e.methods,u=e.onChange,_=e.isChecked,E=Object(s.a)(e,m),T=r.b.useState(_),h=Object(o.a)(T,2),p=h[0],f=h[1],C=d.register,M=d.formState,x=d.setValue,A=d.clearErrors,P=M.errors,g="".concat(l);r.b.useEffect((function(){void 0!==_&&(f(_),x(g,_,{shouldValidate:!0}))}),[_,g,x]);var N=P[l];return Object(b.jsx)(c.a,{name:O,type:j,children:Object(b.jsx)(i.Checkbox,Object(a.a)(Object(a.a)(Object(a.a)({id:n||l},N&&{error:null===(t=N.message)||void 0===t?void 0:t.toString()}),C(g)),{},{isChecked:p,onChange:function(e){var t=!p;f(t),x(g,t),u&&u(e),A([g])}},E))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function E(e){var t=l.a.useContext();return Object(b.jsx)(_,Object(a.a)({methods:t},e))}E.displayName=O},520:function(e,t,n){e.exports={NAME_INPUT_CHECKBOX:"InputCheckbox",TYPE_INPUT_CHECKBOX:"Element"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=158.c9fe6103.chunk.js.map