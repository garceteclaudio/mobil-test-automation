(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[27],{802:function(e,t,n){e.exports={NAME_BANCOR_PASSWORD_SECTION:"BancorPasswordSection",TYPE_BANCOR_PASSWORD_SECTION:"Section"}},806:function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var c=n(11),a=n(80),i=n(51),o=n(38),b=n(82),s=n(555),u=n.n(s),r=n(10);function l(){var e=Object(a.g)(),t=Object(i.sb)(i.n);return Object(r.jsxs)(c.b.Fragment,{children:[Object(r.jsx)(o.b,{className:u.a.linkOtpTitle,tag:"h1",uuid:"spa.otpconfiguration.screen.lock.disable"}),Object(r.jsx)("div",{className:u.a.buttonSoftToken,children:Object(r.jsx)(b.a,{label:{uuid:"spa.key.bancor.back.home"},type:"button",onClick:function(){e(t)}})})]})}},807:function(e,t,n){"use strict";n.d(t,"a",(function(){return S}));var c=n(16),a=n(11),i=n(39),o=n(8),b=n(6),s=n(187),u=n(87),r=n(33),l=n(69),j=n(38),d=n(82),O=n(488),p=n(507),f=n(506),g=n(270),x=n(99),v=n(74),k=n(17),m=n(555),h=n.n(m),y=n(10);function S(){var e=Object(x.a)().getValueConfig,t=Object(j.c)().textGet,n=Object(o.b)(),m=Object(v.a)(e("vu.fraud.check.fingerprint.enable")),S=Object(v.a)(e("secondfactor.vu.fraud.check.fingerprint.enable")),T=Object(o.c)(u.c.fetching),N=Object(o.c)(r.e.token),C=Object(o.c)(u.c.warning),D=Object(o.c)(u.c.isAndroid),E=Object(o.c)(u.c.deviceModel),P=Object(o.c)(l.c.uniqueDeviceID),M=Object(o.c)(u.c.isDeviceCompatibleToken),_=t({uuid:"spa.generic.field.error.required"}),I=t({uuid:"spa.otpconfiguration.type.sms.label"}),q=i.e.object({otpType:Object(s.d)(i.e.string.required(),_)}),w=a.b.useState(!0),B=Object(c.a)(w,2),A=B[0],L=B[1],V=Object(v.a)(e("backend.vu.fraud.api.fingerprint.url")),F=Object(v.a)(e("backend.vu.fraud.api.fingerprint.timeout")),R=a.b.useCallback((function(e){if(N){var t=M?k.j.OTPMOBILE:k.j.OTPSMS;e&&(t=e===b.Lb?k.j.OTPMOBILE:k.j.OTPSMS),t===k.j.OTPMOBILE?n(u.b.linkOTP({accessToken:N,deviceModel:E,validationType:t,uniqueDeviceId:P,isSafeDeviceEnabled:!1,isVUEnabled:m&&S,url:V,timeout:F})):n(u.b.linkOTP({accessToken:N,deviceModel:E,validationType:k.j.OTPSMS,uniqueDeviceId:P,isSafeDeviceEnabled:!1,isVUEnabled:m&&S,url:V,timeout:F}))}}),[N,E,P,m,S,n,M,V,F]);return a.b.useEffect((function(){D?R():L(!1)}),[R,D]),T||A?Object(y.jsx)(g.a,{}):Object(y.jsxs)(a.b.Fragment,{children:[Object(y.jsx)(j.b,{align:"center",tag:"h4",uuid:"spa.otpconfiguration.otp.type.label"}),Object(y.jsxs)(O.a,{className:h.a.gap,schema:q,warnings:C,onSubmit:function(e){var t=e.otpType;R(t)},children:[Object(y.jsxs)(f.a,{name:"otpType",value:b.Lb,children:[Object(y.jsx)(p.a,{id:"otp",label:"".concat(t({uuid:"spa.otpconfiguration.type.token.label"})," ").concat(t({uuid:"spa.otpconfiguration.otp.token.recommend"})),name:"otpType",value:b.Lb}),Object(y.jsx)(p.a,{id:"sms",label:I,name:"otpType",value:b.Mb})]}),Object(y.jsx)(d.a,{className:h.a.gap,label:{uuid:"spa.key.bancor.validation.button"},type:"submit"})]})]})}},808:function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var c=n(11),a=n(8),i=n(87),o=n(33),b=n(69),s=n(17),u=n(74),r=n(99),l=n(270),j=n(10);function d(){var e=Object(r.a)().getValueConfig,t=Object(a.b)(),n=Object(u.a)(e("vu.fraud.check.fingerprint.enable")),d=Object(u.a)(e("secondfactor.vu.fraud.check.fingerprint.enable")),O=Object(a.c)(o.e.token),p=Object(a.c)(i.c.deviceModel),f=Object(a.c)(b.c.uniqueDeviceID),g=Object(u.a)(e("backend.vu.fraud.api.fingerprint.url")),x=Object(u.a)(e("backend.vu.fraud.api.fingerprint.timeout")),v=c.b.useCallback((function(){O&&t(i.b.linkOTP({accessToken:O,deviceModel:p,validationType:s.j.OTPSMS,uniqueDeviceId:f,isSafeDeviceEnabled:!1,isVUEnabled:n&&d,url:g,timeout:x}))}),[O,p,f,n,d,t,g,x]);return c.b.useEffect((function(){v()}),[v]),Object(j.jsx)(l.a,{})}},809:function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var c=n(11),a=n(8),i=n(87),o=n(33),b=n(69),s=n(17),u=n(74),r=n(99),l=n(270),j=n(10);function d(){var e=Object(r.a)().getValueConfig,t=Object(a.b)(),n=Object(u.a)(e("vu.fraud.check.fingerprint.enable")),d=Object(u.a)(e("secondfactor.vu.fraud.check.fingerprint.enable")),O=Object(a.c)(o.e.token),p=Object(a.c)(i.c.deviceModel),f=Object(a.c)(b.c.uniqueDeviceID),g=Object(u.a)(e("backend.vu.fraud.api.fingerprint.url")),x=Object(u.a)(e("backend.vu.fraud.api.fingerprint.timeout")),v=c.b.useCallback((function(){O&&t(i.b.linkOTP({accessToken:O,deviceModel:p,validationType:s.j.OTPMOBILE,uniqueDeviceId:f,isSafeDeviceEnabled:!1,isVUEnabled:n&&d,url:g,timeout:x}))}),[O,p,f,n,d,t,g,x]);return c.b.useEffect((function(){v()}),[v]),Object(j.jsx)(l.a,{})}},810:function(e,t,n){"use strict";n.d(t,"a",(function(){return m}));var c=n(0),a=n(5),i=n(16),o=n(11),b=n(99),s=n(8),u=n(87),r=n(69),l=n(33),j=n(38),d=n(82),O=n(490),p=n(136),f=n(51),g=n(74),x=n(555),v=n.n(x),k=n(10);function m(){var e=Object(s.b)(),t=Object(b.a)().getValueConfig,n=Object(f.qb)(),x=o.b.useState(!1),m=Object(i.a)(x,2),h=m[0],y=m[1],S=Object(g.a)(t("preferences.otp.configuration.validate.device")),T=Object(s.c)(l.e.token),N=Object(s.c)(u.c.deviceModelOTP),C=Object(s.c)(r.c.isMobile),D=Object(s.c)(r.c.uniqueDeviceID),E=Object(s.c)(u.c.hasSecureDevice),P=Object(f.sb)(f.jb),M=C?"spa.otpconfiguration.otp.currentDevice.legend":"spa.otpconfiguration.otp.unlink.legend";return Object(k.jsxs)(o.b.Fragment,{children:[Object(k.jsx)(j.b,{align:"center",className:v.a.infoLabel,tag:"h4",uuid:"spa.otpconfiguration.otp.unlink.title"}),Object(k.jsx)(j.b,{className:v.a.info,tag:"h6",uuid:M}),Object(k.jsx)(p.a,{className:v.a.icon,uuid:"phone"}),Object(k.jsx)(j.b,{className:v.a.device,children:N}),Object(k.jsx)("div",{className:v.a.buttonSoftToken,children:Object(k.jsx)(d.a,{label:{uuid:"spa.preferences.otpConfiguration.type.soft.unlink"},type:"button",onClick:function(){y(!0)}})}),Object(k.jsxs)(O.a,{closeOnBgTap:!0,hasCloseIcon:!0,open:h,title:"spa.otpconfiguration.otp.modal.title",onClose:_,children:[Object(k.jsx)(O.a.Body,{children:Object(k.jsx)(j.b,{uuid:"spa.otpconfiguration.otp.modal.content"})}),Object(k.jsx)(O.a.Footer,{children:Object(k.jsxs)("footer",{className:v.a.footer,children:[Object(k.jsx)(d.a,{label:{uuid:"spa.otpconfiguration.otp.modal.cancel"},type:"button",variant:"outlined",onClick:_}),Object(k.jsx)(d.a,{label:{uuid:"spa.otpconfiguration.otp.modal.accept"},type:"button",onClick:function(){return I.apply(this,arguments)}})]})})]})]});function _(){y(!1)}function I(){return(I=Object(a.a)(Object(c.a)().mark((function t(){return Object(c.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(T){t.next=2;break}return t.abrupt("return");case 2:return t.next=4,e(u.b.unlinkOTP({accessToken:T,deviceModel:N,uniqueDeviceId:D,isSafeDeviceEnabled:S&&E}));case 4:n(P);case 5:case"end":return t.stop()}}),t)})))).apply(this,arguments)}}},812:function(e,t,n){"use strict";n.d(t,"a",(function(){return j}));var c=n(11),a=n(80),i=n(51),o=n(38),b=n(82),s=n(136),u=n(555),r=n.n(u),l=n(10);function j(){var e=Object(a.g)(),t=Object(i.sb)(i.n);return Object(l.jsxs)(c.b.Fragment,{children:[Object(l.jsx)(s.a,{className:r.a.icon,uuid:"attention"}),Object(l.jsx)(o.b,{align:"center",className:r.a.info,tag:"h6",uuid:"spa.otpconfiguration.otp.notmobile"}),Object(l.jsx)("div",{className:r.a.buttonSoftToken,children:Object(l.jsx)(b.a,{label:{uuid:"spa.key.bancor.back.home"},type:"button",onClick:function(){e(t)}})})]})}},843:function(e,t,n){"use strict";n.d(t,"a",(function(){return A}));var c=n(11),a=n(41),i=n(8),o=n(87),b=n(79),s=n(524),u=n(270),r=n(38),l=n(82),j=n(136),d=n(80),O=n(51),p=n(74),f=n(99),g=n(555),x=n.n(g),v=n(10);function k(){var e=Object(f.a)().getValueConfig,t=Object(d.g)(),n=Object(i.b)(),a=Object(O.sb)(O.n),b=Object(p.a)(e("second.factor.selfie.enabled"));return Object(v.jsxs)(c.b.Fragment,{children:[Object(v.jsx)(r.b,{align:"center",tag:"h4",uuid:"spa.key.bancor.validation.label"}),Object(v.jsx)(j.a,{className:x.a.icon,uuid:"attention"}),Object(v.jsx)(r.b,{align:"center",className:x.a.info,tag:"h6",uuid:"spa.key.bancor.expired.info_1"}),Object(v.jsx)(r.b,{align:"center",className:x.a.info,uuid:"spa.key.bancor.expired.info_2"}),Object(v.jsx)(r.b,{align:"center",className:x.a.info,uuid:"spa.key.bancor.expired.info_3"}),Object(v.jsxs)("div",{className:x.a.footer,children:[b&&Object(v.jsx)(l.a,{label:{uuid:"spa.key.bancor.continue.renaper"},type:"button",onClick:function(){n(o.a.setSelfieStep())}}),Object(v.jsx)(l.a,{label:{uuid:"spa.key.bancor.back.home"},type:"button",variant:"outlined",onClick:function(){t(a)}})]})]})}function m(){var e=Object(d.g)(),t=Object(O.sb)(O.n);return Object(v.jsxs)(c.b.Fragment,{children:[Object(v.jsx)(j.a,{className:x.a.icon,uuid:"attention"}),Object(v.jsx)(r.b,{align:"center",className:x.a.info,tag:"h6",uuid:"spa.key.bancor.failed.info_1"}),Object(v.jsx)(r.b,{align:"center",className:x.a.info,uuid:"spa.key.bancor.failed.info_2"}),Object(v.jsxs)("ol",{className:x.a.stepList,children:[Object(v.jsx)("li",{children:Object(v.jsx)(r.b,{uuid:"spa.key.bancor.failed.info.item_1"})}),Object(v.jsx)("li",{children:Object(v.jsx)(r.b,{uuid:"spa.key.bancor.failed.info.item_2"})}),Object(v.jsx)("li",{children:Object(v.jsx)(r.b,{uuid:"spa.key.bancor.failed.info.item_3"})}),Object(v.jsx)("li",{children:Object(v.jsx)(r.b,{uuid:"spa.key.bancor.failed.info.item_4"})}),Object(v.jsx)("li",{children:Object(v.jsx)(r.b,{uuid:"spa.key.bancor.failed.info.item_5"})})]}),Object(v.jsx)(l.a,{label:{uuid:"spa.key.bancor.back.home"},type:"button",variant:"outlined",onClick:function(){e(t)}})]})}var h=n(16),y=n(39),S=n(50),T=n(33),N=n(488),C=n(494),D=n(490),E=n(535),P=n(6),M=n(187);function _(){var e=Object(f.a)().getValueConfig,t=Object(r.c)().textGet,n=Object(i.b)(),a=c.b.useState(!1),b=Object(h.a)(a,2),s=b[0],j=b[1],d=c.b.useState(P.D),O=Object(h.a)(d,2),g=O[0],k=O[1],m=Object(i.c)(T.e.token),_=Object(i.c)(o.c.warning),I=Object(i.c)(o.c.fetching),q=Object(E.a)(e),w=t({uuid:"spa.generic.field.error.required"}),B=t({uuid:"spa.generic.field.error.wrongLength"}),A=y.e.object({password:Object(y.c)((function(e){return e?Object(M.d)(y.e.string.ofLength(P.M,P.M),B):Object(M.d)(y.e.string.required(),w)}))}),L=Object(p.a)(e("second.factor.selfie.enabled"));return I?Object(v.jsx)(u.a,{}):Object(v.jsxs)(c.b.Fragment,{children:[Object(v.jsx)(r.b,{tag:"h4",uuid:"spa.key.bancor.validation.label"}),Object(v.jsx)(S.Alert,{className:x.a.gap,variant:"info",children:Object(v.jsxs)("div",{className:x.a.alert,children:[Object(v.jsx)(S.Icon,{className:x.a.alertIcon,name:"info",stroke:"info"}),Object(v.jsx)(r.b,{uuid:"spa.key.bancor.validation.info"})]})}),Object(v.jsxs)(N.a,{className:x.a.gap,schema:A,warnings:_,onSubmit:function(e){j(!0),k(e.password)},children:[Object(v.jsx)(C.a,{label:t({uuid:"spa.key.bancor.validation.label"}),maxLength:q,name:"password"}),Object(v.jsx)(l.a,{className:x.a.gap,label:{uuid:"spa.key.bancor.validation.button"},type:"submit"})]}),Object(v.jsxs)(D.a,{closeOnBgTap:!0,hasCloseIcon:!0,open:s,title:"spa.otpconfiguration.otp.modal.title",onClose:V,children:[Object(v.jsx)(D.a.Body,{children:Object(v.jsx)(r.b,{uuid:"spa.otpconfiguration.otp.modal.content.link"})}),Object(v.jsx)(D.a.Footer,{children:Object(v.jsxs)("footer",{className:x.a.footer,children:[Object(v.jsx)(l.a,{label:{uuid:"spa.otpconfiguration.otp.modal.cancel"},type:"button",variant:"outlined",onClick:V}),Object(v.jsx)(l.a,{label:{uuid:"spa.otpconfiguration.otp.modal.accept"},type:"button",onClick:function(){if(!m)return;j(!1),n(o.b.activateKeyPhone({accessToken:m,validateCode:g}))}})]})})]}),L&&Object(v.jsx)(l.a,{className:x.a.gap,label:{uuid:"spa.key.bancor.validation.document.button"},type:"button",onClick:function(){n(o.a.setSelfieStep())}})]});function V(){j(!1)}}var I=n(802),q=n.n(I),w=q.a.NAME_BANCOR_PASSWORD_SECTION,B=q.a.TYPE_BANCOR_PASSWORD_SECTION;function A(){var e=Object(i.b)(),t=Object(i.c)(o.c.hasExpiredPhoneKey),n=Object(i.c)(o.c.hasValidPhoneKey);return Object(i.c)(o.c.firstDoneKeyPhone)?Object(v.jsx)(a.a,{name:w,type:B,children:Object(v.jsx)(s.b,{handleChangeStep:function(){e(b.a.clean())},steps:{step1:{condition:t,component:k},step2:{condition:!n&&!t,component:m},step3:{condition:n&&!t,component:_}}})}):Object(v.jsx)(u.a,{})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=27.8caa1483.chunk.js.map