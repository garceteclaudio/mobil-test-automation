(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[12],{519:function(t,e,a){"use strict";a.d(e,"a",(function(){return i}));var c=a(2),r=a(6),n={locales:r.X.ES_AR,currencySymbol:r.b,minimumFractionDigits:r.Sb,maximumFractionDigits:r.Jb,suffix:r.D};function i(t,e){var a=Object(c.a)(Object(c.a)({},n),e),i=a.locales,o=a.currencySymbol,s=a.minimumFractionDigits,u=a.maximumFractionDigits,d=a.options,l=a.suffix,b=Object(c.a)({minimumFractionDigits:s,maximumFractionDigits:u},d),f=new Intl.NumberFormat(i,b);return(t||t===r.Sb)&&f?"".concat(o,"\xa0").concat(f.format(t)).concat(l):r.D}},671:function(t,e,a){t.exports={NAME_XS:"xs",NAME_SM:"sm",NAME_MD:"md",NAME_LG:"lg",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_AMOUNT_FORMATTER:"AmountFormatter",TYPE_AMOUNT_FORMATTER:"Element",NAME_HEADER_PRODUCT_WIDGET:"HeaderWidget",TYPE_HEADER_PRODUCT_WIDGET:"Element",Widgets:"_rules_Widgets__3tpGb",widget_product_nav:"_rules_widget_product_nav__dbfQO",lottie:"_rules_lottie__2cyi_",active:"_rules_active__38stM",bar:"_rules_bar__3U_6q",noPadding:"_rules_noPadding__3XoF0"}},844:function(t,e,a){"use strict";a.d(e,"a",(function(){return V}));var c=a(9),r=a(16),n=a(11),i=a(669),o=a(99),s=a(8),u=a(50),d=a(151),l=a(162),b=a(33),f=a(120),O=a(167),j=a(6),p=a(38),g=a(82),m=a(74),C=a(706),v=a(0),T=a(5),E=a(30),_=a(161),h=a(88),x=a(518),A=a(559),k=a(719),y=a(51),w=a(500),R=a(613),N=a(573),D=a(148),M=a(10),L={VISA:"N",MASTERCARD:"Z"},P="T";function S(){var t,e=Object(y.qb)(),a=Object(p.c)().textGet,c=Object(s.c)(h.e.maskProduct),r=Object(s.c)(b.e.token),i=Object(s.c)(O.c.consultOffer),o=Object(s.c)(O.c.fetchingCards),u=Object(s.c)(O.c.fetchingOffer),d=Object(s.c)(O.c.getCreditCards),l=Object(s.c)(D.c.displayType),f=Object(y.sb)(y.r),g=Object(y.sb)(y.O),m=i&&i.offerCreditCardProducts&&(null===(t=i.offerCreditCardProducts)||void 0===t?void 0:t.length)>j.Sb,C=d&&(null===d||void 0===d?void 0:d.length)>j.Sb,S=function(){var t=[],a=i?function(t){var a=[],c=t.offerCreditCardProducts.filter((function(t){return"1"===t.action}));if(c){var r=function(t,e){var a=t.productData,c=e.productData;return a.limitTo-c.limitTo},n=function(t,e){return t===e},i=function(t){var e=t.brandId;return n(e,L.VISA)},o=function(t){var e=t.brandId;return n(e,L.MASTERCARD)},s=c.filter(i).sort(r),u=c.filter(o).sort(r),d=[];u.length&&d.push(u[0]),s.length&&d.push(s[0]),a.push.apply(a,Object(E.a)(d.map((function(t){var a=t.brandName;return Object(M.jsx)(k.a,{text:{uuid:"spa.widget.creditCard.offer.viewOffer"},title:{uuid:"spa.widget.creditCard.offer.text",replace:a},onClick:c},Object(_.a)());function c(){var t="legacy.spa.feature.sections.show.credit.cards.list";e(Object(x.a)(f,t))}}))))}return a}(i):[];t=[].concat(Object(E.a)(t),Object(E.a)(a)),d&&d.forEach((function(e,a){t=[].concat(Object(E.a)(t),[I(e,a)])}));return t}();return Object(M.jsx)(R.a,{activationCard:{key:"creditCardActivationCard",icon:"card",text:"spa.widget.creditCard.goToCards",title:"spa.widget.creditCard.emptyText",onClick:F},errorCard:{key:"creditCardErrorCard",textError:"spa.widget.creditCard.errorText",textLink:"spa.widget.creditCard.reEnter",onClick:function(){return U.apply(this,arguments)}},fetching:o||u,productCards:S,showActivationCard:!m&&!C});function I(t,r){var i=t.numberCard,o=void 0===i?j.D:i,s=t.ownership,u=t.image,d=t.color,l=t.widgetProductType,b=t.idProduct,O=t.availableLimit,g=function(t,e,r){var i=e&&e===P,o=i?"available":"additional",s=Object(M.jsx)(p.b,{tag:"span",uuid:"spa.widget.creditCard.".concat(o)},"creditCardTitle_".concat(t));if(i){if("number"===typeof r){var u=a({uuid:"".concat(j.h).concat(j.g.ARG_ISO)});return Object(M.jsxs)(n.b.Fragment,{children:[s,Object(M.jsx)(w.a,{amount:r,currency:u,isMasked:c},"creditCardFormatter_".concat(t))]})}return null}return s}(r,s,void 0===O?void 0:O),m=a({uuid:"spa.widget.productType.".concat(l)});return Object(M.jsx)(A.a,{color:d,handlePrimaryClick:function(){return function(t){if(!t)return;var a="legacy.spa.feature.sections.show.credit.cards.detail";e({pathname:Object(x.a)(f,a),search:Object(y.ob)({productId:t}).toString()})}(b)},handleSecondaryClick:F,hasMaskAmount:c,imageHeader:u,textHeaderOne:m,textHeaderTwo:o,textPrimaryLink:"spa.widget.creditCard.viewDetail",textSecondaryLink:"spa.widget.creditCard.goToCards",type:A.b.CREDIT_CARD,children:g},"creditCardCard_".concat(r))}function F(){e(Object(x.a)(f,"legacy.spa.feature.sections.show.credit.cards.list"))}function U(){return(U=Object(T.a)(Object(v.a)().mark((function t(){return Object(v.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(r){t.next=2;break}return t.abrupt("return");case 2:return t.next=4,Object(N.b)(l,r);case 4:return t.next=6,Object(N.a)(c,r);case 6:e(g);case 7:case"end":return t.stop()}}),t)})))).apply(this,arguments)}}var I=a(722),F=a(519),U=a(20);function H(){var t=Object(y.qb)(),e=Object(p.c)().textGet,a=Object(s.b)(),c=Object(o.a)().getValueConfig,r=Object(s.c)(b.e.token),i=Object(s.c)(h.e.maskProduct),u=Object(s.c)(b.e.token),l=Object(s.c)(d.c.fetching),f=Object(s.c)(d.c.offerLoansNotification),O=Object(s.c)(d.c.loans),g=Object(s.c)(D.c.displayType),C=Object(s.c)(d.c.error),_=Object(y.sb)(y.t),k=Object(y.sb)(y.u),L=Object(y.sb)(y.r),P=Object(y.sb)(y.O),S=Object(m.a)(c("loanbt.enable")),H=function(){var t=[];if(f){var a=z(j.g.ARG_ISO);f.forEach((function(e){void 0!==e.message&&(t=[].concat(Object(E.a)(t),[Y(e,a)]))}))}if(O&&null!==O&&void 0!==O&&O.length){var c=e({uuid:"spa.widget.productType.PR"});O.forEach((function(e,a){t=[].concat(Object(E.a)(t),[B(e,c,a)])}))}return t}(),G=f&&(null===f||void 0===f?void 0:f.length)>j.Sb&&f.some((function(t){return t.message})),W=O&&(null===O||void 0===O?void 0:O.length)>j.Sb;return n.b.useEffect((function(){return function(){S||a(d.a.clean())}}),[a,S]),Object(M.jsx)(R.a,{activationCard:{key:"loan-card",icon:"sack",text:"spa.widget.loan.goToLoans",title:"spa.widget.loan.offer",onClick:function(){var e=S?_:Object(x.a)(L,"loans");t(e)}},errorCard:{key:"loan-card",textError:"spa.widget.loan.errorText",textLink:"spa.widget.loan.reEnter",onClick:function(){return V.apply(this,arguments)}},fetching:l,productCards:H,showActivationCard:!G&&!W&&!C});function Y(e,c){var n=Number(e.message);return Object(M.jsx)(I.a,{subtitle:{uuid:"spa.widget.loan.offer.amount",replace:Object(F.a)(n,{currencySymbol:c})},text:{uuid:"spa.widget.loan.simulate"},title:{uuid:"spa.widget.loan.offer.text"},onClick:function(){return function(e){var c="legacy.spa.legacyinfo.widgets.loans.simulate",n=e.productId,i=e.lineId;r&&n&&i&&(S?(a(d.a.clean()),t({pathname:k,search:Object(y.ob)({fromWidget:"true"}).toString()})):t({pathname:Object(x.a)(L,c),search:Object(y.ob)({productId:n,lineId:i,backToLoan:"true"}).toString()}))}(e)}},"loan-card")}function B(t,e,a){var c=function(t){var e=t.currency,a=t.balance,c=z(e||null);return"number"===typeof a?{currency:c,amount:a}:void 0}(t),r=t.shortLabel,n=t.productAlias,o=t.idProduct;return Object(M.jsxs)(A.a,{handlePrimaryClick:function(){return function(t){return X.apply(this,arguments)}(o)},handleSecondaryClick:q,hasMaskAmount:i,textHeaderOne:e,textHeaderTwo:r||n,textPrimaryLink:"spa.widget.loan.viewDetail",textSecondaryLink:"spa.widget.loan.goToLoans",type:A.b.LOAN,children:[Object(M.jsx)(p.b,{tag:"span",uuid:"spa.widget.loan.owed"}),Object(M.jsx)(w.a,{amount:null===c||void 0===c?void 0:c.amount,currency:null===c||void 0===c?void 0:c.currency,isMasked:i})]},"loanCard_".concat(a))}function V(){return(V=Object(T.a)(Object(v.a)().mark((function e(){return Object(v.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(u){e.next=2;break}return e.abrupt("return");case 2:return e.next=4,Object(N.b)(g,u);case 4:return e.next=6,Object(N.a)(i,u);case 6:t(P);case 7:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function X(){return(X=Object(T.a)(Object(v.a)().mark((function e(c){var n;return Object(v.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!c){e.next=11;break}if(!S){e.next=9;break}if(!r){e.next=7;break}return e.next=5,a(d.b.getLoanDetail({token:r,idLoan:c}));case 5:n=Object(y.ob)({fromWidget:"true"}).toString(),t({pathname:U.t,search:n});case 7:e.next=11;break;case 9:"legacy.spa.legacyinfo.widgets.loans.detail",t({pathname:Object(x.a)(L,"legacy.spa.legacyinfo.widgets.loans.detail"),search:Object(y.ob)({productId:c}).toString()});case 11:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function q(){var e=S?_:Object(x.a)(L,"legacy.spa.feature.section.show.loans.list");t(e)}function z(t){return t?e({uuid:"".concat(j.h).concat(t)}):j.D}}var G=a(671),W=a.n(G),Y={ACCOUNT:"account",CREDITCARD:"creditCard",LOAN:"loan"},B=Y.ACCOUNT;function V(){var t,e,a=n.b.useState(B),v=Object(r.a)(a,2),T=v[0],E=v[1],_=n.b.useState(j.Sb),h=Object(r.a)(_,2),x=h[0],A=h[1],k=n.b.useState(null),y=Object(r.a)(k,2),w=y[0],R=y[1],N=Object(s.b)(),D=Object(o.a)().getValueConfig,L=Object(m.a)(D("spa.carrusel.cards.active")),P=Object(m.a)(D("spa.carrusel.loans.active")),I=Object(f.e)(j.G.GENERATE_OFFER_LOANS_BT),F=Object(f.e)(j.G.LIST_LOANS_BT),U=P&&(I||F),G=Object(s.c)(b.e.token),V=Object(b.g)(j.G.REQUEST_CREDIT_CARD),X=n.b.useRef(),q=n.b.useRef(),z=n.b.useRef(),J=n.b.useRef(),Q=n.b.useRef(null),Z=T===Y.ACCOUNT,K=T===Y.CREDITCARD,$=T===Y.LOAN,tt=(t={},Object(c.a)(t,Y.ACCOUNT,Object(M.jsx)(C.a,{})),Object(c.a)(t,Y.CREDITCARD,Object(M.jsx)(S,{})),Object(c.a)(t,Y.LOAN,Object(M.jsx)(H,{})),t),et=n.b.useCallback((function(t){if(G)switch(t){case Y.ACCOUNT:N(l.b.listAccounts({token:G}));break;case Y.CREDITCARD:N(O.b.listCreditCards({token:G})),V&&Number(N(O.b.consultOffer({token:G})));break;case Y.LOAN:N(d.b.listLoansForWidget({token:G}))}}),[N,V,G]),at=n.b.useCallback((function(t){var e=void 0;t===Y.ACCOUNT&&(e=q);t===Y.CREDITCARD&&(e=z);t===Y.LOAN&&(e=J);if(!e)return;if(!e.current)return;e.current.play()}),[]),ct=n.b.useCallback((function(t){var e=t.currentTarget.dataset.key;et(e),E(e),at(e)}),[at,et]),rt=n.b.useCallback((function(t){R(t)}),[]);return Object(i.a)({target:null===(e=X.current)||void 0===e?void 0:e.parentElement,handler:rt}),n.b.useEffect((function(){if(Q.current){var t=Array.from(Q.current.children),e=t[0].offsetLeft;t.forEach((function(t){var a=t.className,c=t.offsetLeft;a===W.a.active&&A(c-e)}))}}),[Z,K,$,w]),n.b.useEffect((function(){G&&et(T)}),[]),Object(M.jsxs)("section",{className:W.a.Widgets,children:[tt[T],Object(M.jsxs)("div",{ref:Q,className:W.a.widget_product_nav,children:[Object(M.jsxs)(g.a,{className:Z?W.a.active:j.D,"data-key":Y.ACCOUNT,kind:"plain",label:{uuid:"spa.widget.accounts"},type:"button",onClick:ct,children:[Object(M.jsx)(u.Lottie,{ref:q,className:W.a.lottie,name:"wallet",size:"small"}),Object(M.jsx)(p.b,{tag:"span",uuid:"spa.widget.accounts"}),Object(M.jsx)("div",{"aria-hidden":"true",className:W.a.bar,style:{transform:"translateX(".concat(x,"px)")}})]}),L&&Object(M.jsxs)(g.a,{className:K?W.a.active:j.D,"data-key":Y.CREDITCARD,kind:"plain",label:{uuid:"spa.widget.cards"},type:"button",onClick:ct,children:[Object(M.jsx)(u.Lottie,{ref:z,className:W.a.lottie,name:"card",size:"small"}),Object(M.jsx)(p.b,{tag:"span",uuid:"spa.widget.cards"})]}),U&&Object(M.jsxs)(g.a,{className:$?W.a.active:j.D,"data-key":Y.LOAN,kind:"plain",label:{uuid:"spa.widget.loans"},type:"button",onClick:ct,children:[Object(M.jsx)(u.Lottie,{ref:J,className:W.a.lottie,name:"sack",size:"small"}),Object(M.jsx)(p.b,{tag:"span",uuid:"spa.widget.loans"})]})]})]})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=12.778ec553.chunk.js.map