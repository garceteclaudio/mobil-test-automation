(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[32,216],{193:function(e,t,c){"use strict";c.r(t),c.d(t,"default",(function(){return X}));var a=c(2),n=c(19),s=c(0),i=c(5),o=c(16),r=c(11),b=c(50),u=c(673),l=c(674),O=c(675),j=c(743),d=c(99),p=c(36),f=c(74),h=c(38),m=c(51),v=c(33),S=c(8),g=c(156),M=c(117),T=c(164),x=c(6),k=c(586),E=c(69),w=c(87),A=c(189),C=c(270),D=c(672),y=c(17),P=c(120),_=c(79),F=c(89),U=c(165),I=c(518),R=c(445),G=c.n(R),L=c(318),N=c(316),W=c(315),Y=c(314),q=c(327),V=c(325),H=c(326),B=c(317),J=c(328),K=c(329),z=c(10),Q=["id"];function X(){var e=Object(S.b)(),t=Object(m.qb)(),c=Object(h.c)().textGet,R=Object(d.a)().getValueConfig,X=r.b.useState(!1),Z=Object(o.a)(X,2),$=Z[0],ee=Z[1],te=r.b.useState(!1),ce=Object(o.a)(te,2),ae=ce[0],ne=ce[1],se=r.b.useState(!1),ie=Object(o.a)(se,2),oe=ie[0],re=ie[1],be=r.b.useState(!1),ue=Object(o.a)(be,2),le=ue[0],Oe=ue[1],je=r.b.useState(!1),de=Object(o.a)(je,2),pe=de[0],fe=de[1],he=r.b.useState(!1),me=Object(o.a)(he,2),ve=me[0],Se=me[1],ge=r.b.useState(!1),Me=Object(o.a)(ge,2),Te=Me[0],xe=Me[1],ke=r.b.useState(!1),Ee=Object(o.a)(ke,2),we=Ee[0],Ae=Ee[1],Ce=r.b.useState(!1),De=Object(o.a)(Ce,2),ye=De[0],Pe=De[1],_e=r.b.useState(!1),Fe=Object(o.a)(_e,2),Ue=Fe[0],Ie=Fe[1],Re=r.b.useState(!1),Ge=Object(o.a)(Re,2),Le=Ge[0],Ne=Ge[1],We=Object(f.a)(R("spa.widget.campaigns.active")),Ye=Object(f.a)(R("spa.widget.insurance.active")),qe=Object(f.a)(R("spa.widget.actions.active")),Ve=Object(f.a)(R("modo.registerUserNotification.showModal")),He=Object(f.a)(R("offerToUpdateSecurityData.retailMobile")),Be=Object(f.a)(R("offerToUpdateSecurityData.retailWeb")),Je=Object(f.a)(R("vu.fraud.check.fingerprint.enable")),Ke=Object(f.a)(R("secondfactor.vu.fraud.check.fingerprint.enable")),ze=Object(f.a)(R("spa.customerSupport.whatsapp.link")),Qe=Object(f.a)(R("spa.widget.chatEO.active")),Xe=Object(P.e)(x.G.OFFERT_TO_UPDATE_SECURITY_DATA_EMAIL),Ze=Object(P.e)(x.G.MODIFY_USER_DATA),$e=Object(P.e)(x.G.OFFERT_TO_UPDATE_SECURITY_DATA_TOKEN),et=Object(P.e)(x.G.OFFERT_TO_UPDATE_SECURITY_DATA_MODO),tt=Object(P.e)(x.G.OFFERT_TO_UPDATE_SECURITY_DATA_TYC),ct=Object(m.sb)(m.r),at=Object(m.sb)(m.C),nt=Object(m.sb)(m.nb),st=Object(m.sb)(m.ib),it=Object(m.sb)(m.G),ot=Object(p.i)(),rt=ot.isDesktop,bt=ot.isUnknown,ut=ot.isWebMobile,lt=Object(K.default)(),Ot=lt.promotionItems,jt=lt.hasPromotionItems,dt=Object(S.c)(v.e.token),pt=Object(S.c)(v.e.email),ft=Object(S.c)(v.e.fetching),ht=Object(S.c)(T.c.fetching),mt=Object(S.c)(T.c.fetched),vt=Object(S.c)(T.c.campaigns),St=Object(S.c)(T.c.businessError),gt=Object(S.c)(T.c.systemError),Mt=Object(S.c)(U.c.fetching),Tt=Object(S.c)(T.c.isRetryEnabled),xt=Object(S.c)(T.c.error),kt=Object(S.c)(M.c.validateUser),Et=Object(S.c)(M.c.hasFinishedModoOnboarding),wt=Object(S.c)(w.c.isDeviceCompatibleToken),At=Object(S.c)(w.c.isEmailNeedsRefreshed),Ct=vt.map((function(e){var t=e.id,c=Object(n.a)(e,Q);return Object(a.a)({campaignId:t},c)})),Dt=Object(S.c)(v.e.activeEnvironmentTokenType),yt=Object(S.c)(w.c.deviceModel),Pt=Object(S.c)(E.c.uniqueDeviceID),_t=Object(S.c)(w.c.fetching),Ft=Object(S.c)(v.e.oncePerSessionModal),Ut=Object(S.c)(w.c.isTheDeviceSecure),It=Object(S.c)(F.e.legacyFeatures),Rt=Object(S.c)(w.c.otpType),Gt=Object(S.c)(w.c.fetchingOtpConfigurationPre),Lt=Object(S.c)(w.c.isScreenLock),Nt=Object(S.c)(w.c.isSecureOtpLinking),Wt=Object(S.c)(v.e.hasAcceptTermsAndConditions),Yt=c({uuid:"spa.modo.pay.qr.scan.title"}),qt=c({uuid:"spa.terms.success.prefix.title"}),Vt=Dt===x.Lb,Ht=Dt===x.Mb,Bt=Vt||Rt,Jt=bt||"boolean"!==typeof At&&Xe||"boolean"!==typeof Wt&&tt||!rt&&("boolean"!==typeof Ut||"undefined"===typeof kt),Kt=_t||ft||Gt,zt=wt&&Ut,Qt=wt&&!Ut,Xt=!wt&&!Ht,Zt=!Lt||!Nt,$t=At,ec=kt&&Ve&&!(null!==kt&&void 0!==kt&&kt.isValid),tc=Object(f.a)(R("backend.vu.fraud.api.fingerprint.url")),cc=Object(f.a)(R("backend.vu.fraud.api.fingerprint.timeout")),ac=Object(f.a)(R("backend.spa.deposits.bantotal.flag")),nc=L.itemsRecirculation.flatMap((function(e){var t=e.href,c=e.text;if(!(t in It))return[];var a=It[t],n=a.url,s=a.availableFeature,i=a.hasPermission;return s&&i?[{id:t,href:Object(I.a)(t,n),text:c}]:[]}));r.b.useEffect((function(){dt&&We&&(mt||ht||gt||St||e(T.b.listCampaignsForWidget({token:dt})),Tt&&!ye&&mt&&(e(T.b.listCampaignsForWidget({token:dt})),Pe(!0)))}),[St,ye,e,mt,ht,Tt,We,gt,dt]);var sc=r.b.useCallback(Object(i.a)(Object(s.a)().mark((function c(){var a;return Object(s.a)().wrap((function(c){for(;;)switch(c.prev=c.next){case 0:if(dt){c.next=2;break}return c.abrupt("return");case 2:return a=y.j.OTPMOBILE,zt&&(a=y.j.OTPMOBILE),Xt&&(a=y.j.OTPSMS),c.next=7,e(w.b.linkOTP({accessToken:dt,deviceModel:yt,validationType:a,uniqueDeviceId:Pt,isSafeDeviceEnabled:!1,isVUEnabled:Je&&Ke,url:tc,timeout:cc}));case 7:t(st);case 8:case"end":return c.stop()}}),c)}))),[dt,zt,Xt,e,yt,Pt,Je,Ke,t,st,tc,cc]);return r.b.useEffect((function(){(ae||oe||$||Te||ve||pe||le)&&e(v.a.setIsHomeModalActive(!0))}),[e,ae,oe,$,Te,ve,pe,le]),r.b.useEffect((function(){if(!Jt){var t=[];rt&&(t=null===Be||void 0===Be?void 0:Be.split(";")),rt||(t=null===He||void 0===He?void 0:He.split(";")),t&&t.every((function(t){switch(t){case x.W:return!Ft&&(!(!Bt&&$e)||(e(v.a.setOncePerSessionModal(!0)),Zt?(xe(!0),!1):(zt&&Oe(!0),Qt&&fe(!0),Xt&&Se(!0),!1)));case x.R:return!Ft&&(!$t||!Xe||(e(v.a.setOncePerSessionModal(!0)),Ze&&ne(!0),Ze||re(!0),!1));case x.S:return!Ft&&(!ec||!et||(e(v.a.setOncePerSessionModal(!0)),ee(!0),!1));case x.V:return!Ft&&(!(!Wt&&void 0!==Wt&&tt)||(Ae(!0),!1));default:return!0}}))}}),[$t,Jt,ec,Xt,Qt,zt,Zt,e,Wt,Bt,Xe,et,$e,Ze,tt,rt,Ft,Be,He]),r.b.useEffect((function(){dt&&Xe&&e(w.b.checkEmailNeedsRefreshed({accessToken:dt}))}),[e,Xe,dt]),r.b.useEffect((function(){dt&&tt&&(e(v.b.getCreationDate({token:dt})),e(v.b.getAcceptTermsAndConditions({token:dt})))}),[e,tt,dt]),r.b.useEffect((function(){!xt&&Ue&&e(_.a.set({kind:"SUCCESS",text:{uuid:"spa.email.modal.confirm.alert"},duration:x.w})),Le&&e(_.a.set({kind:"SUCCESS",text:{uuid:"spa.terms.success.title",replace:"<b>".concat(qt,"</b><br>")},duration:x.w,isHomeActive:!0}))}),[e,qt,xt,Ue,Le]),Kt||ht||Mt||bt?Object(z.jsx)(C.a,{}):Object(z.jsxs)(r.b.Fragment,{children:[Object(z.jsxs)("section",{className:G.a.firstWidgetsColumnRetail,children:[qe&&Object(z.jsxs)(r.b.Fragment,{children:[Object(z.jsx)(u.a,{doScan:function(){return rc.apply(this,arguments)},isBantotalEnabled:ac,items:rt||ut?L.itemsActionsDesktop:L.itemsActions,landingPath:it,legacyPath:ct}),Object(z.jsx)(b.Separator,{})]}),We&&Ct.length>x.Sb&&Object(z.jsxs)(r.b.Fragment,{children:[Object(z.jsx)(l.a,{isFetchingCampaigns:ht,items:Ct}),Object(z.jsx)(b.Separator,{})]}),jt&&Object(z.jsxs)(r.b.Fragment,{children:[Object(z.jsx)(j.a,{isFetchingPromotions:Mt,items:Ot,title:"spa.widget.promotions.title"}),Object(z.jsx)(b.Separator,{})]})]}),Object(z.jsxs)("section",{children:[Ye&&(null===nc||void 0===nc?void 0:nc.length)>x.Sb&&Object(z.jsx)(O.a,{items:nc,legacyPath:ct,title:"spa.widget.recirculation.person.title"}),Qe&&Object(z.jsx)(D.a,{button:{uuid:"spa.customer.support.chat.eo.button.title"},text:{uuid:"spa.customer.support.chat.eo.text"},urlExternalChat:ze})]}),Object(z.jsx)(q.ModalModo,{setShowModal:ee,showModal:$}),Object(z.jsx)(V.ModalEmail,{email:pt,handleEmailModal:function(){return ic.apply(this,arguments)},setShowModal:ne,showModal:ae}),Object(z.jsx)(H.ModalEmailUnavailable,{setShowModal:re,showModal:oe}),Object(z.jsx)(N.ModalTokenSecureDevice,{assignOTP:sc,setShowModal:Oe,showModal:le}),Object(z.jsx)(W.ModalTokenNotSecureDevice,{setShowModal:fe,showModal:pe}),Object(z.jsx)(Y.ModalTokenNotAbleDevice,{assignOTP:sc,setShowModal:Se,showModal:ve}),Object(z.jsx)(B.ModalUnlockedDevice,{setShowModal:xe,showModal:Te}),Object(z.jsx)(A.default,{}),Object(z.jsx)(J.ModalTermsAndConditions,{handleAcceptTermsAndConditions:function(){return oc.apply(this,arguments)},setShowModal:Ae,showModal:we})]});function ic(){return(ic=Object(i.a)(Object(s.a)().mark((function t(){return Object(s.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(dt&&pt){t.next=2;break}return t.abrupt("return");case 2:return t.next=4,e(w.b.updateLatestMailDateActivity({accessToken:dt,mail:pt}));case 4:Ie(!0),e(v.a.setIsHomeModalActive(!1)),ne(!1);case 7:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function oc(){return(oc=Object(i.a)(Object(s.a)().mark((function t(){return Object(s.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(dt){t.next=2;break}return t.abrupt("return");case 2:return e(v.a.setOncePerSessionModal(!0)),t.next=5,e(v.b.setAcceptTermsAndConditions({token:dt}));case 5:Ne(!0),e(v.a.setIsHomeModalActive(!1)),Ae(!1);case 8:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function rc(){return(rc=Object(i.a)(Object(s.a)().mark((function c(){var a;return Object(s.a)().wrap((function(c){for(;;)switch(c.prev=c.next){case 0:if(dt){c.next=2;break}return c.abrupt("return");case 2:if(kt){c.next=5;break}return e(M.b.validateUser({token:dt})),c.abrupt("return");case 5:if(Et||!kt){c.next=8;break}return t(at),c.abrupt("return");case 8:return e(g.a.clean()),c.next=11,Object(k.a)(Yt);case 11:if((a=c.sent)&&a.value){c.next=14;break}return c.abrupt("return");case 14:e(g.a.qrCode(a.value)),t(nt);case 16:case"end":return c.stop()}}),c)})))).apply(this,arguments)}}},329:function(e,t,c){"use strict";c.r(t),c.d(t,"default",(function(){return u}));var a=c(11),n=c(8),s=c(165),i=c(33),o=c(74),r=c(99),b=c(6);function u(){var e=Object(n.b)(),t=Object(r.a)().getValueConfig,c=Object(n.c)(s.c.fetching),u=Object(n.c)(s.c.isRetryEnabled),l=Object(n.c)(i.e.token),O=Object(n.c)(s.c.promotions),j=Object(i.h)(b.Eb),d=Object(o.a)(t("spa.widget.promotions.active"));return a.b.useEffect((function(){d&&j&&l&&!c&&u&&e(s.b.getPromotions({accessToken:l}))}),[e,c,d,j,u,l]),{promotionItems:O,hasPromotionItems:O.length>b.Sb}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvSG9tZS9SZXRhaWwvaW5kZXgudHN4Iiwid2VicGFjazovLy8uL3NyYy9wYWdlcy9Ib21lL1JldGFpbC9faG9va3MudHMiXSwibmFtZXMiOlsiSG9tZVJldGFpbCIsImRpc3BhdGNoIiwidXNlRGlzcGF0Y2giLCJuYXZpZ2F0ZSIsInVzZU5hdmlnYXRlIiwidGV4dEdldCIsInVzZVRleHQiLCJnZXRWYWx1ZUNvbmZpZyIsInVzZVBlcnNpc3RvciIsIl9SZWFjdCR1c2VTdGF0ZSIsIlJlYWN0IiwidXNlU3RhdGUiLCJfUmVhY3QkdXNlU3RhdGUyIiwiX3NsaWNlZFRvQXJyYXkiLCJzaG93TU9ET01vZGFsIiwic2V0U2hvd01PRE9Nb2RhbCIsIl9SZWFjdCR1c2VTdGF0ZTMiLCJfUmVhY3QkdXNlU3RhdGU0Iiwic2hvd0VtYWlsTW9kYWwiLCJzZXRTaG93RW1haWxNb2RhbCIsIl9SZWFjdCR1c2VTdGF0ZTUiLCJfUmVhY3QkdXNlU3RhdGU2Iiwic2hvd0VtYWlsVW5hdmFpbGFibGVNb2RhbCIsInNldFNob3dFbWFpbFVuYXZhaWxhYmxlTW9kYWwiLCJfUmVhY3QkdXNlU3RhdGU3IiwiX1JlYWN0JHVzZVN0YXRlOCIsInNob3dUb2tlbk1vZGFsU2VjdXJlRGV2aWNlIiwic2V0U2hvd1Rva2VuTW9kYWxTZWN1cmVEZXZpY2UiLCJfUmVhY3QkdXNlU3RhdGU5IiwiX1JlYWN0JHVzZVN0YXRlMTAiLCJzaG93VG9rZW5Nb2RhbE5vdFNlY3VyZURldmljZSIsInNldFNob3dUb2tlbk1vZGFsTm90U2VjdXJlRGV2aWNlIiwiX1JlYWN0JHVzZVN0YXRlMTEiLCJfUmVhY3QkdXNlU3RhdGUxMiIsInNob3dUb2tlbk1vZGFsTm90QWJsZURldmljZSIsInNldFNob3dUb2tlbk1vZGFsTm90QWJsZURldmljZSIsIl9SZWFjdCR1c2VTdGF0ZTEzIiwiX1JlYWN0JHVzZVN0YXRlMTQiLCJzaG93TW9kYWxVbmxvY2tlZEFibGVEZXZpY2UiLCJzZXRTaG93TW9kYWxVbmxvY2tlZEFibGVEZXZpY2UiLCJfUmVhY3QkdXNlU3RhdGUxNSIsIl9SZWFjdCR1c2VTdGF0ZTE2Iiwic2hvd1Rlcm1zQW5kQ29uZGl0aW9uc01vZGFsIiwic2V0U2hvd1Rlcm1zQW5kQ29uZGl0aW9uc01vZGFsIiwiX1JlYWN0JHVzZVN0YXRlMTciLCJfUmVhY3QkdXNlU3RhdGUxOCIsImNhbXBhaWduUmV0cnlEb25lIiwic2V0Q2FtcGFpZ25SZXRyeURvbmUiLCJfUmVhY3QkdXNlU3RhdGUxOSIsIl9SZWFjdCR1c2VTdGF0ZTIwIiwic2hvd1RvYXN0RW1haWwiLCJzZXRTaG93VG9hc3RFbWFpbCIsIl9SZWFjdCR1c2VTdGF0ZTIxIiwiX1JlYWN0JHVzZVN0YXRlMjIiLCJzaG93VG9hc3RTdWNjZXNzVGVybXMiLCJzZXRzaG93VG9hc3RTdWNjZXNzVGVybXMiLCJpc0NhbXBhaWduc1dpZGdldEVuYWJsZWQiLCJwYXJzZUNvbmZpZyIsImlzSW5zdXJhbmNlV2lkZ2V0QWN0aXZlIiwiaXNBY3Rpb25zV2lkZ2V0QWN0aXZlIiwiaGFzVG9TaG93TW9kb01vZGFsQ29uZmlnIiwicmV0YWlsTW9iaWxlIiwicmV0YWlsRGVza3RvcCIsImlzVlVGaW5nZXJwcmludEVuYWJsZWQiLCJpc1ZVU2Vjb25kRmFjdG9yRW5hYmxlZCIsInVybEV4dGVybmFsQ2hhdEVvIiwiaXNDaGF0RW9XaWRnZXRBY3RpdmUiLCJpc0F2YWlsYWJsZUNoZWNrRW1haWxBY3Rpdml0eSIsInVzZVZlcmlmeUlzQXZhaWxhYmxlRmVhdHVyZSIsIkZFQVRVUkUiLCJPRkZFUlRfVE9fVVBEQVRFX1NFQ1VSSVRZX0RBVEFfRU1BSUwiLCJpc0F2YWlsYWJsZU1vZGlmeVVzZXJEYXRhQWN0aXZpdHkiLCJNT0RJRllfVVNFUl9EQVRBIiwiaXNBdmFpbGFibGVDaGVja1Rva2VuQWN0aXZpdHkiLCJPRkZFUlRfVE9fVVBEQVRFX1NFQ1VSSVRZX0RBVEFfVE9LRU4iLCJpc0F2YWlsYWJsZUNoZWNrTW9kb0FjdGl2aXR5IiwiT0ZGRVJUX1RPX1VQREFURV9TRUNVUklUWV9EQVRBX01PRE8iLCJpc0F2YWlsYWJsZVR5Y0FjdGl2aXR5IiwiT0ZGRVJUX1RPX1VQREFURV9TRUNVUklUWV9EQVRBX1RZQyIsInVybExlZ2FjeSIsInVzZVBhdGgiLCJST1VURV9QQVRIX0xFR0FDWSIsInVybFByZXNlbnRhdGlvbk1vZG8iLCJST1VURV9QQVRIX01PRE9fT05CT0FSRElOR19SRUdJU1RFUl9QUkVTRU5UQVRJT04iLCJ1cmxRclBheW1lbnQiLCJST1VURV9VUkxfTU9ET19UUkFOU0FDVElPTl9JTkZPUk1BVElPTl9RUiIsInVybFRva2VuVGlja2V0IiwiUk9VVEVfUEFUSF9UT09MU19UT0tFTl9USUNLRVQiLCJ1cmxMYW5kaW5nIiwiUk9VVEVfUEFUSF9NT0RPX1NFTkRfTU9ORVlfQ0hPT1NFX0NPTlRBQ1QiLCJfdXNlUGxhdGZvcm0iLCJ1c2VQbGF0Zm9ybSIsImlzRGVza3RvcCIsImlzVW5rbm93biIsImlzV2ViTW9iaWxlIiwiX3VzZUdldFByb21vdGlvbnMiLCJ1c2VHZXRQcm9tb3Rpb25zIiwicHJvbW90aW9uSXRlbXMiLCJoYXNQcm9tb3Rpb25JdGVtcyIsInRva2VuIiwidXNlU2VsZWN0b3IiLCJTZWxlY3RvclNsaWNlU2Vzc2lvbiIsImVtYWlsIiwiZmV0Y2hpbmdTZXNzaW9uIiwiZmV0Y2hpbmciLCJmZXRjaGluZ0NhbXBhaWducyIsIlNlbGVjdG9yU2xpY2VDYW1wYWlnbnMiLCJmZXRjaGVkQ2FtcGFpZ25zIiwiZmV0Y2hlZCIsImNhbXBhaWducyIsImJ1c2luZXNzRXJyb3JDYW1wYWlnbiIsImJ1c2luZXNzRXJyb3IiLCJzeXN0ZW1FcnJvckNhbXBhaWduIiwic3lzdGVtRXJyb3IiLCJmZXRjaGluZ1Byb21vdGlvbnMiLCJTZWxlY3RvclNsaWNlUHJvbW90aW9ucyIsImlzQ2FtcGFpZ25SZXRyeUVuYWJsZWQiLCJpc1JldHJ5RW5hYmxlZCIsInByZWZlcmVuY2VzRXJyb3IiLCJlcnJvciIsInZhbGlkYXRlVXNlciIsIlNlbGVjdG9yU2xpY2VNb2RvIiwiaGFzRmluaXNoZWRNb2RvT25ib2FyZGluZyIsImlzRGV2aWNlQ29tcGF0aWJsZVRva2VuIiwiU2VsZWN0b3JTbGljZVByZWZlcmVuY2VzIiwiaXNFbWFpbE5lZWRzUmVmcmVzaGVkIiwiaXRlbXNDYW1wYWlnbnMiLCJtYXAiLCJjYW1wYWlnbiIsImlkIiwicmVzdCIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsIl9leGNsdWRlZCIsIl9vYmplY3RTcHJlYWQiLCJjYW1wYWlnbklkIiwiYWN0aXZlRW52aXJvbm1lbnRUb2tlblR5cGUiLCJkZXZpY2VNb2RlbCIsInVuaXF1ZURldmljZUlEIiwiU2VsZWN0b3JTbGljZUNvbmZpZ3VyYXRpb24iLCJmZXRjaGluZ1ByZWZlcmVuY2VzIiwib25jZVBlclNlc3Npb25Nb2RhbCIsImlzVGhlRGV2aWNlU2VjdXJlIiwibGVnYWN5RmVhdHVyZXMiLCJTZWxlY3RvclNsaWNlTGVnYWN5Iiwib3RwVHlwZSIsImZldGNoaW5nT3RwQ29uZmlndXJhdGlvblByZSIsImlzU2NyZWVuTG9jayIsImlzU2VjdXJlT3RwTGlua2luZyIsImhhc0FjY2VwdFRlcm1zQW5kQ29uZGl0aW9ucyIsInNjYW5UaXRsZSIsInV1aWQiLCJtZXNhZ2dlVGVybXNUb2FzdCIsImlzVG9rZW5UeXBlT1RQIiwiVFlQRV9PVFAiLCJpc1Rva2VuVHlwZVNNUyIsIlRZUEVfU01TIiwiaGFzVG9rZW5pemF0aW9uIiwiY29uZGl0aW9uUHJlc2VudE1vZGFscyIsImlzTG9hZGluZ1RvUHJlc2VudE1vZGFsIiwiY29uZGl0aW9uVG9rZW5TZWN1cmVEZXZpY2UiLCJjb25kaXRpb25Ub2tlbk5vdFNlY3VyZURldmljZSIsImNvbmRpdGlvblRva2VuTm90QWJsZURldmljZSIsImNvbmRpdGlvblVubG9ja2VkRGV2aWNlIiwiY29uZGl0aW9uRW1haWwiLCJjb25kaXRpb25NT0RPIiwiaXNWYWxpZCIsInZ1VXJsIiwidnVUaW1lb3V0IiwiYmFudG90YWwiLCJmaWx0ZXJlZEFzc3VyYW5jZUl0ZW1zQXZhaWxhYmxlIiwiaXRlbXNSZWNpcmN1bGF0aW9uIiwiZmxhdE1hcCIsIl9yZWYiLCJocmVmIiwidGV4dCIsIl9sZWdhY3lGZWF0dXJlcyRocmVmIiwidXJsIiwiYXZhaWxhYmxlRmVhdHVyZSIsImhhc1Blcm1pc3Npb24iLCJnZXRMZWdhY3lQYXRoIiwidXNlRWZmZWN0IiwiRmV0Y2hlclNsaWNlQ2FtcGFpZ25zIiwibGlzdENhbXBhaWduc0ZvcldpZGdldCIsImFzc2lnbk9UUCIsInVzZUNhbGxiYWNrIiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJfcmVnZW5lcmF0b3JSdW50aW1lIiwibWFyayIsIl9jYWxsZWUiLCJ2YWxpZGF0aW9uVHlwZSIsIndyYXAiLCJfY29udGV4dCIsInByZXYiLCJuZXh0IiwiYWJydXB0IiwiTGlua09UUE9wZXJhdGlvbiIsIk9UUE1PQklMRSIsIk9UUFNNUyIsIkZldGNoZXJTbGljZVByZWZlcmVuY2VzIiwibGlua09UUCIsImFjY2Vzc1Rva2VuIiwidW5pcXVlRGV2aWNlSWQiLCJpc1NhZmVEZXZpY2VFbmFibGVkIiwiaXNWVUVuYWJsZWQiLCJ0aW1lb3V0Iiwic3RvcCIsIkFjdGlvblNsaWNlU2Vzc2lvbiIsInNldElzSG9tZU1vZGFsQWN0aXZlIiwibW9kYWxQcmlvcml0eWVzTGlzdCIsInNwbGl0IiwiZXZlcnkiLCJtb2RhbFByaW9yaXR5IiwiS0VZX1RPS0VOIiwic2V0T25jZVBlclNlc3Npb25Nb2RhbCIsIktFWV9FTUFJTCIsIktFWV9NT0RPIiwiS0VZX1RFUk1TX0NPTkRJVElPTlMiLCJ1bmRlZmluZWQiLCJjaGVja0VtYWlsTmVlZHNSZWZyZXNoZWQiLCJGZXRjaGVyU2xpY2VTZXNzaW9uIiwiZ2V0Q3JlYXRpb25EYXRlIiwiZ2V0QWNjZXB0VGVybXNBbmRDb25kaXRpb25zIiwiQWN0aW9uU2xpY2VUb2FzdCIsInNldCIsImtpbmQiLCJkdXJhdGlvbiIsIkRVUkFUSU9OX00iLCJyZXBsYWNlIiwiY29uY2F0IiwiaXNIb21lQWN0aXZlIiwiX2pzeCIsIkxvYWRpbmciLCJfanN4cyIsIkZyYWdtZW50IiwiY2hpbGRyZW4iLCJjbGFzc05hbWUiLCJSdWxlcyIsImZpcnN0V2lkZ2V0c0NvbHVtblJldGFpbCIsIldpZGdldEFjdGlvbnMiLCJkb1NjYW4iLCJfZG9TY2FuIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJpc0JhbnRvdGFsRW5hYmxlZCIsIml0ZW1zIiwiaXRlbXNBY3Rpb25zRGVza3RvcCIsIml0ZW1zQWN0aW9ucyIsImxhbmRpbmdQYXRoIiwibGVnYWN5UGF0aCIsIlNlcGFyYXRvciIsImxlbmd0aCIsIlpFUk8iLCJXaWRnZXRDYW1wYWlnbnMiLCJpc0ZldGNoaW5nQ2FtcGFpZ25zIiwiV2lkZ2V0UHJvbW90aW9ucyIsImlzRmV0Y2hpbmdQcm9tb3Rpb25zIiwidGl0bGUiLCJXaWRnZXRSZWNpcmN1bGF0aW9uIiwiQ2hhdENhcmQiLCJidXR0b24iLCJ1cmxFeHRlcm5hbENoYXQiLCJNb2RhbE1vZG8iLCJzZXRTaG93TW9kYWwiLCJzaG93TW9kYWwiLCJNb2RhbEVtYWlsIiwiaGFuZGxlRW1haWxNb2RhbCIsIl9oYW5kbGVFbWFpbE1vZGFsIiwiTW9kYWxFbWFpbFVuYXZhaWxhYmxlIiwiTW9kYWxUb2tlblNlY3VyZURldmljZSIsIk1vZGFsVG9rZW5Ob3RTZWN1cmVEZXZpY2UiLCJNb2RhbFRva2VuTm90QWJsZURldmljZSIsIk1vZGFsVW5sb2NrZWREZXZpY2UiLCJDaGF0TW9kYWwiLCJNb2RhbFRlcm1zQW5kQ29uZGl0aW9ucyIsImhhbmRsZUFjY2VwdFRlcm1zQW5kQ29uZGl0aW9ucyIsIl9oYW5kbGVBY2NlcHRUZXJtc0FuZENvbmRpdGlvbnMiLCJfY2FsbGVlMiIsIl9jb250ZXh0MiIsInVwZGF0ZUxhdGVzdE1haWxEYXRlQWN0aXZpdHkiLCJtYWlsIiwiX2NhbGxlZTMiLCJfY29udGV4dDMiLCJzZXRBY2NlcHRUZXJtc0FuZENvbmRpdGlvbnMiLCJfY2FsbGVlNCIsInJlc3BvbnNlIiwiX2NvbnRleHQ0IiwiRmV0Y2hlclNsaWNlTW9kbyIsIkFjdGlvblNsaWNlTW9kb1FyUGF5bWVudCIsImNsZWFuIiwic2NhbiIsInNlbnQiLCJ2YWx1ZSIsInFyQ29kZSIsInByb21vdGlvbnNSZXRyeUVuYWJsZWQiLCJwcm9tb3Rpb25zIiwiaXNQcm9tb3Rpb25zV2lkZ2V0UGVybWlzc2lvbkVuYWJsZWQiLCJ1c2VQZXJtaXNzaW9uRmVhdHVyZSIsIlNQQV9XSURHRVRfUFJPTU9USU9OUyIsImlzUHJvbW90aW9uV2lkZ2V0RW5hYmxlZCIsIkZldGNoZXJTbGljZVByb21vdGlvbnMiLCJnZXRQcm9tb3Rpb25zIl0sIm1hcHBpbmdzIjoiZ2tCQXdFZSxTQUFTQSxJQUNwQixJQUFNQyxFQUFXQyxjQUNYQyxFQUFXQyxlQUNUQyxFQUFZQyxjQUFaRCxRQUNBRSxFQUFtQkMsY0FBbkJELGVBRVJFLEVBQTBDQyxJQUFNQyxVQUFrQixHQUFNQyxFQUFBQyxZQUFBSixFQUFBLEdBQWpFSyxFQUFhRixFQUFBLEdBQUVHLEdBQWdCSCxFQUFBLEdBQ3RDSSxHQUE0Q04sSUFBTUMsVUFBa0IsR0FBTU0sR0FBQUosWUFBQUcsR0FBQSxHQUFuRUUsR0FBY0QsR0FBQSxHQUFFRSxHQUFpQkYsR0FBQSxHQUN4Q0csR0FDSVYsSUFBTUMsVUFBa0IsR0FBTVUsR0FBQVIsWUFBQU8sR0FBQSxHQUQzQkUsR0FBeUJELEdBQUEsR0FBRUUsR0FBNEJGLEdBQUEsR0FFOURHLEdBQ0lkLElBQU1DLFVBQWtCLEdBQU1jLEdBQUFaLFlBQUFXLEdBQUEsR0FEM0JFLEdBQTBCRCxHQUFBLEdBQUVFLEdBQTZCRixHQUFBLEdBRWhFRyxHQUNJbEIsSUFBTUMsVUFBa0IsR0FBTWtCLEdBQUFoQixZQUFBZSxHQUFBLEdBRDNCRSxHQUE2QkQsR0FBQSxHQUFFRSxHQUFnQ0YsR0FBQSxHQUV0RUcsR0FDSXRCLElBQU1DLFVBQWtCLEdBQU1zQixHQUFBcEIsWUFBQW1CLEdBQUEsR0FEM0JFLEdBQTJCRCxHQUFBLEdBQUVFLEdBQThCRixHQUFBLEdBRWxFRyxHQUNJMUIsSUFBTUMsVUFBa0Is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TTBLLFdBQVUsV0FDUHNILEdBQTZCSCxHQUM3QnBNLElBQVNlLEdBQXVCbUwsR0FDckNwUyxFQUFTMFMsSUFBdUJDLGNBQWMsQ0FBRXBHLFlBQWFyRyxJQUNqRSxHQUFHLENBQ0NsRyxFQUNBaUgsRUFDQXdMLEVBQ0FILEVBQ0FGLEVBQ0FsTSxJQUdHLENBQ0hGLGlCQUNBQyxrQkFBbUJELEVBQWV5SixPQUFTQyxLQUVuRCxDIiwiZmlsZSI6InN0YXRpYy9qcy8zMi4xNDYwNzExYS5jaHVuay5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwiQHBrZy9yZWFjdFwiO1xuaW1wb3J0IHsgU2VwYXJhdG9yIH0gZnJvbSBcIkBhcHAvYmFuY29uLXVpXCI7XG5pbXBvcnQgeyBXaWRnZXRBY3Rpb25zIH0gZnJvbSBcIkBhcHAvYmFuY29yLWNvbXBvbmVudHMvRWxlbWVudC9XaWRnZXRzL0FjdGlvbnNcIjtcbmltcG9ydCB7IFdpZGdldENhbXBhaWducyB9IGZyb20gXCJAYXBwL2JhbmNvci1jb21wb25lbnRzL0VsZW1lbnQvV2lkZ2V0cy9DYW1wYWlnbnNcIjtcbmltcG9ydCB7IFdpZGdldFJlY2lyY3VsYXRpb24gfSBmcm9tIFwiQGFwcC9iYW5jb3ItY29tcG9uZW50cy9FbGVtZW50L1dpZGdldHMvUmVjaXJjdWxhdGlvblwiO1xuaW1wb3J0IHsgV2lkZ2V0UHJvbW90aW9ucyB9IGZyb20gXCJAYXBwL2JhbmNvci1jb21wb25lbnRzL0VsZW1lbnQvV2lkZ2V0cy9Qcm9tb3Rpb25zXCI7XG5pbXBvcnQgeyB1c2VQZXJzaXN0b3IgfSBmcm9tIFwiQHBrZy9yZWFjdC1zdG9yeWJvb2svQ29tcG9uZW50L1BlcnNpc3RvclwiO1xuaW1wb3J0IHsgdXNlUGxhdGZvcm0gfSBmcm9tIFwiQHBrZy91dGlscy1jb3Jkb3ZhLXBsdWdpbi10cy9pbmZvXCI7XG5pbXBvcnQgeyBwYXJzZUNvbmZpZyB9IGZyb20gXCJ+L3V0aWxzL2NvbmZpZ1V0aWxzXCI7XG5pbXBvcnQgeyB1c2VUZXh0IH0gZnJvbSBcIkBhcHAvYmFuY29yLWNvbXBvbmVudHMvRWxlbWVudC9UZXh0XCI7XG5pbXBvcnQge1xuICAgIFJPVVRFX1BBVEhfTEVHQUNZLFxuICAgIFJPVVRFX1BBVEhfTU9ET19PTkJPQVJESU5HX1JFR0lTVEVSX1BSRVNFTlRBVElPTixcbiAgICBST1VURV9VUkxfTU9ET19UUkFOU0FDVElPTl9JTkZPUk1BVElPTl9RUixcbiAgICBST1VURV9QQVRIX1RPT0xTX1RPS0VOX1RJQ0tFVCxcbiAgICB1c2VOYXZpZ2F0ZSxcbiAgICB1c2VQYXRoLFxuICAgIFJPVVRFX1BBVEhfTU9ET19TRU5EX01PTkVZX0NIT09TRV9DT05UQUNULFxufSBmcm9tIFwifi9yb3V0ZXNcIjtcbmltcG9ydCB7XG4gICAgU2VsZWN0b3JTbGljZVNlc3Npb24sXG4gICAgQWN0aW9uU2xpY2VTZXNzaW9uLFxuICAgIEZldGNoZXJTbGljZVNlc3Npb24sXG59IGZyb20gXCJAYXBwL2JhbmNvbi1kYXRhL3NsaWNlcy9zZXNzaW9uXCI7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tIFwiQGFwcC9iYW5jb24tZGF0YVwiO1xuaW1wb3J0IHsgQWN0aW9uU2xpY2VNb2RvUXJQYXltZW50IH0gZnJvbSBcIkBhcHAvYmFuY29uLWRhdGEvc2xpY2VzL21vZG8vUXJQYXltZW50XCI7XG5pbXBvcnQgeyBGZXRjaGVyU2xpY2VNb2RvLCBTZWxlY3RvclNsaWNlTW9kbyB9IGZyb20gXCJAYXBwL2JhbmNvbi1kYXRhL3NsaWNlcy9tb2RvXCI7XG5cbmltcG9ydCB7IEZldGNoZXJTbGljZUNhbXBhaWducywgU2VsZWN0b3JTbGljZUNhbXBhaWducyB9IGZyb20gXCJAYXBwL2JhbmNvbi1kYXRhL3NsaWNlcy9jYW1wYWlnbnNcIjtcblxuaW1wb3J0IHR5cGUgeyBOU0FQSUNhbXBhaWducyB9IGZyb20gXCJAYXBwL2JhbmNvbi1kYXRhL2FwaS9jYW1wYWlnbnNcIjtcbmltcG9ydCB7XG4gICAgWkVSTyxcbiAgICBLRVlfVE9LRU4sXG4gICAgS0VZX0VNQUlMLFxuICAgIEtFWV9NT0RPLFxuICAgIEtFWV9URVJNU19DT05ESVRJT05TLFxuICAgIFRZUEVfT1RQLFxuICAgIEZFQVRVUkUsXG4gICAgRFVSQVRJT05fTSxcbiAgICBUWVBFX1NNUyxcbn0gZnJvbSBcIkBhcHAvYmFuY29uLWRhdGEvY29uc3RhbnRzXCI7XG5cbmltcG9ydCB7IHNjYW4gfSBmcm9tIFwiQHRlY2gvdXRpbHMtY29yZG92YS1wbHVnaW4tdHMvcXJSZWFkZXJcIjtcblxuaW1wb3J0IHsgU2VsZWN0b3JTbGljZUNvbmZpZ3VyYXRpb24gfSBmcm9tIFwiQGFwcC9iYW5jb24tZGF0YS9zbGljZXMvY29uZmlndXJhdGlvblwiO1xuaW1wb3J0IHtcbiAgICBGZXRjaGVyU2xpY2VQcmVmZXJlbmNlcyxcbiAgICBTZWxlY3RvclNsaWNlUHJlZmVyZW5jZXMsXG59IGZyb20gXCJAYXBwL2JhbmNvbi1kYXRhL3NsaWNlcy9wcmVmZXJlbmNlc1wiO1xuaW1wb3J0IENoYXRNb2RhbCBmcm9tIFwifi9wYWdlcy90b29scy9DaGF0TW9kYWxcIjtcbmltcG9ydCB7IExvYWRpbmcgfSBmcm9tIFwiQGFwcC9iYW5jb3ItY29tcG9uZW50cy9FbGVtZW50L0xvYWRpbmdcIjtcbmltcG9ydCB7IENoYXRDYXJkIH0gZnJvbSBcIkBhcHAvYmFuY29yLWNvbXBvbmVudHMvRWxlbWVudC9DYXJkL0NoYXRcIjtcbmltcG9ydCB7IExpbmtPVFBPcGVyYXRpb24gfSBmcm9tIFwiQGFwcC9iYW5jb24tZGF0YS9hcGkvcHJlZmVyZW5jZXNcIjtcbmltcG9ydCB7IHVzZVZlcmlmeUlzQXZhaWxhYmxlRmVhdHVyZSB9IGZyb20gXCJAYXBwL2JhbmNvbi1kYXRhL3NsaWNlcy9mZWF0dXJlc1wiO1xuaW1wb3J0IHsgQWN0aW9uU2xpY2VUb2FzdCB9IGZyb20gXCJAYXBwL2JhbmNvbi1kYXRhL3NsaWNlcy90b2FzdFwiO1xuaW1wb3J0IHsgU2VsZWN0b3JTbGljZUxlZ2FjeSB9IGZyb20gXCJAYXBwL2JhbmNvbi1kYXRhL3NsaWNlcy9sZWdhY3lcIjtcbmltcG9ydCB7IFNlbGVjdG9yU2xpY2VQcm9tb3Rpb25zIH0gZnJvbSBcIkBhcHAvYmFuY29uLWRhdGEvc2xpY2VzL3Byb21vdGlvbnNcIjtcbmltcG9ydCB7IGdldExlZ2FjeVBhdGggfSBmcm9tIFwiQGFwcC9iYW5jb24tZGF0YS91dGlscy9sZWdhY3lcIjtcbmltcG9ydCBSdWxlcyBmcm9tIFwiLi4vX3J1bGVzLm1vZHVsZS5zY3NzXCI7XG5pbXBvcnQgeyBpdGVtc0FjdGlvbnMsIGl0ZW1zQWN0aW9uc0Rlc2t0b3AsIGl0ZW1zUmVjaXJjdWxhdGlvbiB9IGZyb20gXCIuL19kYXRhV2lkZ2V0c1wiO1xuaW1wb3J0IHsgTW9kYWxUb2tlblNlY3VyZURldmljZSB9IGZyb20gXCIuLi9Nb2RhbHMvTW9kYWxUb2tlblNlY3VyZURldmljZVwiO1xuaW1wb3J0IHsgTW9kYWxUb2tlbk5vdFNlY3VyZURldmljZSB9IGZyb20gXCIuLi9Nb2RhbHMvTW9kYWxUb2tlbk5vdFNlY3VyZURldmljZVwiO1xuaW1wb3J0IHsgTW9kYWxUb2tlbk5vdEFibGVEZXZpY2UgfSBmcm9tIFwiLi4vTW9kYWxzL01vZGFsVG9rZW5Ob3RBYmxlRGV2aWNlXCI7XG5pbXBvcnQgeyBNb2RhbE1vZG8gfSBmcm9tIFwiLi4vTW9kYWxzL01vZGFsTW9kb1wiO1xuaW1wb3J0IHsgTW9kYWxFbWFpbCB9IGZyb20gXCIuLi9Nb2RhbHMvTW9kYWxFbWFpbFwiO1xuaW1wb3J0IHsgTW9kYWxFbWFpbFVuYXZhaWxhYmxlIH0gZnJvbSBcIi4uL01vZGFscy9Nb2RhbEVtYWlsVW5hdmFpbGFibGVcIjtcbmltcG9ydCB7IE1vZGFsVW5sb2NrZWREZXZpY2UgfSBmcm9tIFwiLi4vTW9kYWxzL01vZGFsVW5sb2NrZWREZXZpY2VcIjtcbmltcG9ydCB7IE1vZGFsVGVybXNBbmRDb25kaXRpb25zIH0gZnJvbSBcIi4uL01vZGFscy9Nb2RhbFRlcm1zQW5kQ29uZGl0aW9uc1wiO1xuaW1wb3J0IHVzZUdldFByb21vdGlvbnMgZnJvbSBcIi4vX2hvb2tzXCI7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBIb21lUmV0YWlsKCkge1xuICAgIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgICBjb25zdCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG4gICAgY29uc3QgeyB0ZXh0R2V0IH0gPSB1c2VUZXh0KCk7XG4gICAgY29uc3QgeyBnZXRWYWx1ZUNvbmZpZyB9ID0gdXNlUGVyc2lzdG9yKCk7XG5cbiAgICBjb25zdCBbc2hvd01PRE9Nb2RhbCwgc2V0U2hvd01PRE9Nb2RhbF0gPSBSZWFjdC51c2VTdGF0ZTxib29sZWFuPihmYWxzZSk7XG4gICAgY29uc3QgW3Nob3dFbWFpbE1vZGFsLCBzZXRTaG93RW1haWxNb2RhbF0gPSBSZWFjdC51c2VTdGF0ZTxib29sZWFuPihmYWxzZSk7XG4gICAgY29uc3QgW3Nob3dFbWFpbFVuYXZhaWxhYmxlTW9kYWwsIHNldFNob3dFbWFpbFVuYXZhaWxhYmxlTW9kYWxdID1cbiAgICAgICAgUmVhY3QudXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xuICAgIGNvbnN0IFtzaG93VG9rZW5Nb2RhbFNlY3VyZURldmljZSwgc2V0U2hvd1Rva2VuTW9kYWxTZWN1cmVEZXZpY2VdID1cbiAgICAgICAgUmVhY3QudXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xuICAgIGNvbnN0IFtzaG93VG9rZW5Nb2RhbE5vdFNlY3VyZURldmljZSwgc2V0U2hvd1Rva2VuTW9kYWxOb3RTZWN1cmVEZXZpY2VdID1cbiAgICAgICAgUmVhY3QudXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xuICAgIGNvbnN0IFtzaG93VG9rZW5Nb2RhbE5vdEFibGVEZXZpY2UsIHNldFNob3dUb2tlbk1vZGFsTm90QWJsZURldmljZV0gPVxuICAgICAgICBSZWFjdC51c2VTdGF0ZTxib29sZWFuPihmYWxzZSk7XG4gICAgY29uc3QgW3Nob3dNb2RhbFVubG9ja2VkQWJsZURldmljZSwgc2V0U2hvd01vZGFsVW5sb2NrZWRBYmxlRGV2aWNlXSA9XG4gICAgICAgIFJlYWN0LnVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcbiAgICBjb25zdCBbc2hvd1Rlcm1zQW5kQ29uZGl0aW9uc01vZGFsLCBzZXRTaG93VGVybXNBbmRDb25kaXRpb25zTW9kYWxdID1cbiAgICAgICAgUmVhY3QudXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xuICAgIGNvbnN0IFtjYW1wYWlnblJldHJ5RG9uZSwgc2V0Q2FtcGFpZ25SZXRyeURvbmVdID0gUmVhY3QudXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xuICAgIGNvbnN0IFtzaG93VG9hc3RFbWFpbCwgc2V0U2hvd1RvYXN0RW1haWxdID0gUmVhY3QudXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xuICAgIGNvbnN0IFtzaG93VG9hc3RTdWNjZXNzVGVybXMsIHNldHNob3dUb2FzdFN1Y2Nlc3NUZXJtc10gPSBSZWFjdC51c2VTdGF0ZTxib29sZWFuPihmYWxzZSk7XG5cbiAgICBjb25zdCBpc0NhbXBhaWduc1dpZGdldEVuYWJsZWQgPSBwYXJzZUNvbmZpZzxib29sZWFuPihcbiAgICAgICAgZ2V0VmFsdWVDb25maWcoXCJzcGEud2lkZ2V0LmNhbXBhaWducy5hY3RpdmVcIiksXG4gICAgKTtcbiAgICBjb25zdCBpc0luc3VyYW5jZVdpZGdldEFjdGl2ZSA9IHBhcnNlQ29uZmlnPGJvb2xlYW4+KFxuICAgICAgICBnZXRWYWx1ZUNvbmZpZyhcInNwYS53aWRnZXQuaW5zdXJhbmNlLmFjdGl2ZVwiKSxcbiAgICApO1xuICAgIGNvbnN0IGlzQWN0aW9uc1dpZGdldEFjdGl2ZSA9IHBhcnNlQ29uZmlnPGJvb2xlYW4+KGdldFZhbHVlQ29uZmlnKFwic3BhLndpZGdldC5hY3Rpb25zLmFjdGl2ZVwiKSk7XG5cbiAgICBjb25zdCBoYXNUb1Nob3dNb2RvTW9kYWxDb25maWcgPSBwYXJzZUNvbmZpZzxib29sZWFuPihcbiAgICAgICAgZ2V0VmFsdWVDb25maWcoXCJtb2RvLnJlZ2lzdGVyVXNlck5vdGlmaWNhdGlvbi5zaG93TW9kYWxcIiksXG4gICAgKTtcbiAgICBjb25zdCByZXRhaWxNb2JpbGUgPSBwYXJzZUNvbmZpZyhnZXRWYWx1ZUNvbmZpZyhcIm9mZmVyVG9VcGRhdGVTZWN1cml0eURhdGEucmV0YWlsTW9iaWxlXCIpKTtcbiAgICBjb25zdCByZXRhaWxEZXNrdG9wID0gcGFyc2VDb25maWcoZ2V0VmFsdWVDb25maWcoXCJvZmZlclRvVXBkYXRlU2VjdXJpdHlEYXRhLnJldGFpbFdlYlwiKSk7XG4gICAgY29uc3QgaXNWVUZpbmdlcnByaW50RW5hYmxlZCA9IHBhcnNlQ29uZmlnPGJvb2xlYW4+KFxuICAgICAgICBnZXRWYWx1ZUNvbmZpZyhcInZ1LmZyYXVkLmNoZWNrLmZpbmdlcnByaW50LmVuYWJsZVwiKSxcbiAgICApO1xuICAgIGNvbnN0IGlzVlVTZWNvbmRGYWN0b3JFbmFibGVkID0gcGFyc2VDb25maWc8Ym9vbGVhbj4oXG4gICAgICAgIGdldFZhbHVlQ29uZmlnKFwic2Vjb25kZmFjdG9yLnZ1LmZyYXVkLmNoZWNrLmZpbmdlcnByaW50LmVuYWJsZVwiKSxcbiAgICApO1xuICAgIGNvbnN0IHVybEV4dGVybmFsQ2hhdEVvID0gcGFyc2VDb25maWcoZ2V0VmFsdWVDb25maWcoXCJzcGEuY3VzdG9tZXJTdXBwb3J0LndoYXRzYXBwLmxpbmtcIikpO1xuICAgIGNvbnN0IGlzQ2hhdEVvV2lkZ2V0QWN0aXZlID0gcGFyc2VDb25maWc8Ym9vbGVhbj4oZ2V0VmFsdWVDb25maWcoXCJzcGEud2lkZ2V0LmNoYXRFTy5hY3RpdmVcIikpO1xuXG4gICAgY29uc3QgaXNBdmFpbGFibGVDaGVja0VtYWlsQWN0aXZpdHkgPSB1c2VWZXJpZnlJc0F2YWlsYWJsZUZlYXR1cmUoXG4gICAgICAgIEZFQVRVUkUuT0ZGRVJUX1RPX1VQREFURV9TRUNVUklUWV9EQVRBX0VNQUlMLFxuICAgICk7XG4gICAgY29uc3QgaXNBdmFpbGFibGVNb2RpZnlVc2VyRGF0YUFjdGl2aXR5ID0gdXNlVmVyaWZ5SXNBdmFpbGFibGVGZWF0dXJlKEZFQVRVUkUuTU9ESUZZX1VTRVJfREFUQSk7XG4gICAgY29uc3QgaXNBdmFpbGFibGVDaGVja1Rva2VuQWN0aXZpdHkgPSB1c2VWZXJpZnlJc0F2YWlsYWJsZUZlYXR1cmUoXG4gICAgICAgIEZFQVRVUkUuT0ZGRVJUX1RPX1VQREFURV9TRUNVUklUWV9EQVRBX1RPS0VOLFxuICAgICk7XG4gICAgY29uc3QgaXNBdmFpbGFibGVDaGVja01vZG9BY3Rpdml0eSA9IHVzZVZlcmlmeUlzQXZhaWxhYmxlRmVhdHVyZShcbiAgICAgICAgRkVBVFVSRS5PRkZFUlRfVE9fVVBEQVRFX1NFQ1VSSVRZX0RBVEFfTU9ETyxcbiAgICApO1xuICAgIGNvbnN0IGlzQXZhaWxhYmxlVHljQWN0aXZpdHkgPSB1c2VWZXJpZnlJc0F2YWlsYWJsZUZlYXR1cmUoXG4gICAgICAgIEZFQVRVUkUuT0ZGRVJUX1RPX1VQREFURV9TRUNVUklUWV9EQVRBX1RZQyxcbiAgICApO1xuXG4gICAgY29uc3QgdXJsTGVnYWN5ID0gdXNlUGF0aChST1VURV9QQVRIX0xFR0FDWSk7XG4gICAgY29uc3QgdXJsUHJlc2VudGF0aW9uTW9kbyA9IHVzZVBhdGgoUk9VVEVfUEFUSF9NT0RPX09OQk9BUkRJTkdfUkVHSVNURVJfUFJFU0VOVEFUSU9OKTtcbiAgICBjb25zdCB1cmxRclBheW1lbnQgPSB1c2VQYXRoKFJPVVRFX1VSTF9NT0RPX1RSQU5TQUNUSU9OX0lORk9STUFUSU9OX1FSKTtcbiAgICBjb25zdCB1cmxUb2tlblRpY2tldCA9IHVzZVBhdGgoUk9VVEVfUEFUSF9UT09MU19UT0tFTl9USUNLRVQpO1xuICAgIGNvbnN0IHVybExhbmRpbmcgPSB1c2VQYXRoKFJPVVRFX1BBVEhfTU9ET19TRU5EX01PTkVZX0NIT09TRV9DT05UQUNUKTtcblxuICAgIGNvbnN0IHsgaXNEZXNrdG9wLCBpc1Vua25vd24sIGlzV2ViTW9iaWxlIH0gPSB1c2VQbGF0Zm9ybSgpO1xuICAgIGNvbnN0IHsgcHJvbW90aW9uSXRlbXMsIGhhc1Byb21vdGlvbkl0ZW1zIH0gPSB1c2VHZXRQcm9tb3Rpb25zKCk7XG5cbiAgICBjb25zdCB0b2tlbiA9IHVzZVNlbGVjdG9yKFNlbGVjdG9yU2xpY2VTZXNzaW9uLnRva2VuKTtcbiAgICBjb25zdCBlbWFpbCA9IHVzZVNlbGVjdG9yKFNlbGVjdG9yU2xpY2VTZXNzaW9uLmVtYWlsKTtcbiAgICBjb25zdCBmZXRjaGluZ1Nlc3Npb24gPSB1c2VTZWxlY3RvcihTZWxlY3RvclNsaWNlU2Vzc2lvbi5mZXRjaGluZyk7XG4gICAgY29uc3QgZmV0Y2hpbmdDYW1wYWlnbnMgPSB1c2VTZWxlY3RvcihTZWxlY3RvclNsaWNlQ2FtcGFpZ25zLmZldGNoaW5nKTtcbiAgICBjb25zdCBmZXRjaGVkQ2FtcGFpZ25zID0gdXNlU2VsZWN0b3IoU2VsZWN0b3JTbGljZUNhbXBhaWducy5mZXRjaGVkKTtcbiAgICBjb25zdCBjYW1wYWlnbnMgPSB1c2VTZWxlY3RvcihTZWxlY3RvclNsaWNlQ2FtcGFpZ25zLmNhbXBhaWducyk7XG4gICAgY29uc3QgYnVzaW5lc3NFcnJvckNhbXBhaWduID0gdXNlU2VsZWN0b3IoU2VsZWN0b3JTbGljZUNhbXBhaWducy5idXNpbmVzc0Vycm9yKTtcbiAgICBjb25zdCBzeXN0ZW1FcnJvckNhbXBhaWduID0gdXNlU2VsZWN0b3IoU2VsZWN0b3JTbGljZUNhbXBhaWducy5zeXN0ZW1FcnJvcik7XG4gICAgY29uc3QgZmV0Y2hpbmdQcm9tb3Rpb25zID0gdXNlU2VsZWN0b3IoU2VsZWN0b3JTbGljZVByb21vdGlvbnMuZmV0Y2hpbmcpO1xuICAgIGNvbnN0IGlzQ2FtcGFpZ25SZXRyeUVuYWJsZWQgPSB1c2VTZWxlY3RvcihTZWxlY3RvclNsaWNlQ2FtcGFpZ25zLmlzUmV0cnlFbmFibGVkKTtcbiAgICBjb25zdCBwcmVmZXJlbmNlc0Vycm9yID0gdXNlU2VsZWN0b3IoU2VsZWN0b3JTbGljZUNhbXBhaWducy5lcnJvcik7XG4gICAgY29uc3QgdmFsaWRhdGVVc2VyID0gdXNlU2VsZWN0b3IoU2VsZWN0b3JTbGljZU1vZG8udmFsaWRhdGVVc2VyKTtcbiAgICBjb25zdCBoYXNGaW5pc2hlZE1vZG9PbmJvYXJkaW5nID0gdXNlU2VsZWN0b3IoU2VsZWN0b3JTbGljZU1vZG8uaGFzRmluaXNoZWRNb2RvT25ib2FyZGluZyk7XG4gICAgY29uc3QgaXNEZXZpY2VDb21wYXRpYmxlVG9rZW4gPSB1c2VTZWxlY3RvcihTZWxlY3RvclNsaWNlUHJlZmVyZW5jZXMuaXNEZXZpY2VDb21wYXRpYmxlVG9rZW4pO1xuICAgIGNvbnN0IGlzRW1haWxOZWVkc1JlZnJlc2hlZCA9IHVzZVNlbGVjdG9yKFNlbGVjdG9yU2xpY2VQcmVmZXJlbmNlcy5pc0VtYWlsTmVlZHNSZWZyZXNoZWQpO1xuICAgIGNvbnN0IGl0ZW1zQ2FtcGFpZ25zID0gY2FtcGFpZ25zLm1hcChtYXBDYW1wYWlnbnMpO1xuICAgIGNvbnN0IGFjdGl2ZUVudmlyb25tZW50VG9rZW5UeXBlID0gdXNlU2VsZWN0b3IoU2VsZWN0b3JTbGljZVNlc3Npb24uYWN0aXZlRW52aXJvbm1lbnRUb2tlblR5cGUpO1xuICAgIGNvbnN0IGRldmljZU1vZGVsID0gdXNlU2VsZWN0b3IoU2VsZWN0b3JTbGljZVByZWZlcmVuY2VzLmRldmljZU1vZGVsKTtcbiAgICBjb25zdCB1bmlxdWVEZXZpY2VJRCA9IHVzZVNlbGVjdG9yKFNlbGVjdG9yU2xpY2VDb25maWd1cmF0aW9uLnVuaXF1ZURldmljZUlEKTtcbiAgICBjb25zdCBmZXRjaGluZ1ByZWZlcmVuY2VzID0gdXNlU2VsZWN0b3IoU2VsZWN0b3JTbGljZVByZWZlcmVuY2VzLmZldGNoaW5nKTtcbiAgICBjb25zdCBvbmNlUGVyU2Vzc2lvbk1vZGFsID0gdXNlU2VsZWN0b3IoU2VsZWN0b3JTbGljZVNlc3Npb24ub25jZVBlclNlc3Npb25Nb2RhbCk7XG4gICAgY29uc3QgaXNUaGVEZXZpY2VTZWN1cmUgPSB1c2VTZWxlY3RvcihTZWxlY3RvclNsaWNlUHJlZmVyZW5jZXMuaXNUaGVEZXZpY2VTZWN1cmUpO1xuICAgIGNvbnN0IGxlZ2FjeUZlYXR1cmVzID0gdXNlU2VsZWN0b3IoU2VsZWN0b3JTbGljZUxlZ2FjeS5sZWdhY3lGZWF0dXJlcyk7XG4gICAgY29uc3Qgb3RwVHlwZSA9IHVzZVNlbGVjdG9yKFNlbGVjdG9yU2xpY2VQcmVmZXJlbmNlcy5vdHBUeXBlKTtcbiAgICBjb25zdCBmZXRjaGluZ090cENvbmZpZ3VyYXRpb25QcmUgPSB1c2VTZWxlY3RvcihcbiAgICAgICAgU2VsZWN0b3JTbGljZVByZWZlcmVuY2VzLmZldGNoaW5nT3RwQ29uZmlndXJhdGlvblByZSxcbiAgICApO1xuICAgIGNvbnN0IGlzU2NyZWVuTG9jayA9IHVzZVNlbGVjdG9yKFNlbGVjdG9yU2xpY2VQcmVmZXJlbmNlcy5pc1NjcmVlbkxvY2spO1xuICAgIGNvbnN0IGlzU2VjdXJlT3RwTGlua2luZyA9IHVzZVNlbGVjdG9yKFNlbGVjdG9yU2xpY2VQcmVmZXJlbmNlcy5pc1NlY3VyZU90cExpbmtpbmcpO1xuICAgIGNvbnN0IGhhc0FjY2VwdFRlcm1zQW5kQ29uZGl0aW9ucyA9IHVzZVNlbGVjdG9yKFxuICAgICAgICBTZWxlY3RvclNsaWNlU2Vzc2lvbi5oYXNBY2NlcHRUZXJtc0FuZENvbmRpdGlvbnMsXG4gICAgKTtcblxuICAgIGNvbnN0IHNjYW5UaXRsZSA9IHRleHRHZXQoeyB1dWlkOiBcInNwYS5tb2RvLnBheS5xci5zY2FuLnRpdGxlXCIgfSk7XG4gICAgY29uc3QgbWVzYWdnZVRlcm1zVG9hc3QgPSB0ZXh0R2V0KHsgdXVpZDogXCJzcGEudGVybXMuc3VjY2Vzcy5wcmVmaXgudGl0bGVcIiB9KTtcblxuICAgIGNvbnN0IGlzVG9rZW5UeXBlT1RQID0gYWN0aXZlRW52aXJvbm1lbnRUb2tlblR5cGUgPT09IFRZUEVfT1RQO1xuICAgIGNvbnN0IGlzVG9rZW5UeXBlU01TID0gYWN0aXZlRW52aXJvbm1lbnRUb2tlblR5cGUgPT09IFRZUEVfU01TO1xuICAgIGNvbnN0IGhhc1Rva2VuaXphdGlvbiA9IGlzVG9rZW5UeXBlT1RQIHx8IG90cFR5cGU7XG4gICAgY29uc3QgY29uZGl0aW9uUHJlc2VudE1vZGFsc01vYmlsZSA9XG4gICAgICAgIHR5cGVvZiBpc1RoZURldmljZVNlY3VyZSAhPT0gXCJib29sZWFuXCIgfHwgdHlwZW9mIHZhbGlkYXRlVXNlciA9PT0gXCJ1bmRlZmluZWRcIjtcbiAgICBjb25zdCBjb25kaXRpb25QcmVzZW50TW9kYWxFbWFpbCA9XG4gICAgICAgIHR5cGVvZiBpc0VtYWlsTmVlZHNSZWZyZXNoZWQgIT09IFwiYm9vbGVhblwiICYmIGlzQXZhaWxhYmxlQ2hlY2tFbWFpbEFjdGl2aXR5O1xuICAgIGNvbnN0IGNvbmRpdGlvblByZXNlbnRNb2RhbFR5QyA9XG4gICAgICAgIHR5cGVvZiBoYXNBY2NlcHRUZXJtc0FuZENvbmRpdGlvbnMgIT09IFwiYm9vbGVhblwiICYmIGlzQXZhaWxhYmxlVHljQWN0aXZpdHk7XG4gICAgY29uc3QgY29uZGl0aW9uUHJlc2VudE1vZGFscyA9XG4gICAgICAgIGlzVW5rbm93biB8fFxuICAgICAgICBjb25kaXRpb25QcmVzZW50TW9kYWxFbWFpbCB8fFxuICAgICAgICBjb25kaXRpb25QcmVzZW50TW9kYWxUeUMgfHxcbiAgICAgICAgKCFpc0Rlc2t0b3AgJiYgY29uZGl0aW9uUHJlc2VudE1vZGFsc01vYmlsZSk7XG4gICAgY29uc3QgaXNMb2FkaW5nVG9QcmVzZW50TW9kYWwgPVxuICAgICAgICBmZXRjaGluZ1ByZWZlcmVuY2VzIHx8IGZldGNoaW5nU2Vzc2lvbiB8fCBmZXRjaGluZ090cENvbmZpZ3VyYXRpb25QcmU7XG4gICAgY29uc3QgY29uZGl0aW9uVG9rZW5TZWN1cmVEZXZpY2UgPSBpc0RldmljZUNvbXBhdGlibGVUb2tlbiAmJiBpc1RoZURldmljZVNlY3VyZTtcbiAgICBjb25zdCBjb25kaXRpb25Ub2tlbk5vdFNlY3VyZURldmljZSA9IGlzRGV2aWNlQ29tcGF0aWJsZVRva2VuICYmICFpc1RoZURldmljZVNlY3VyZTtcbiAgICBjb25zdCBjb25kaXRpb25Ub2tlbk5vdEFibGVEZXZpY2UgPSAhaXNEZXZpY2VDb21wYXRpYmxlVG9rZW4gJiYgIWlzVG9rZW5UeXBlU01TO1xuICAgIGNvbnN0IGNvbmRpdGlvblVubG9ja2VkRGV2aWNlID0gIWlzU2NyZWVuTG9jayB8fCAhaXNTZWN1cmVPdHBMaW5raW5nO1xuICAgIGNvbnN0IGNvbmRpdGlvbkVtYWlsID0gaXNFbWFpbE5lZWRzUmVmcmVzaGVkO1xuICAgIGNvbnN0IGNvbmRpdGlvbk1PRE8gPSB2YWxpZGF0ZVVzZXIgJiYgaGFzVG9TaG93TW9kb01vZGFsQ29uZmlnICYmICF2YWxpZGF0ZVVzZXI/LmlzVmFsaWQ7XG5cbiAgICBjb25zdCB2dVVybCA9IHBhcnNlQ29uZmlnPHN0cmluZz4oZ2V0VmFsdWVDb25maWcoXCJiYWNrZW5kLnZ1LmZyYXVkLmFwaS5maW5nZXJwcmludC51cmxcIikpO1xuICAgIGNvbnN0IHZ1VGltZW91dCA9IHBhcnNlQ29uZmlnPG51bWJlcj4oXG4gICAgICAgIGdldFZhbHVlQ29uZmlnKFwiYmFja2VuZC52dS5mcmF1ZC5hcGkuZmluZ2VycHJpbnQudGltZW91dFwiKSxcbiAgICApO1xuICAgIC8vVE9ETzogd2lsbCBiZSBjaGFuZ2VkIHdoZW4gYnQgY29uZmlndXJhdGlvbiB2YXJpYWJsZXMgYXJlIHVuaWZpZWRcbiAgICBjb25zdCBiYW50b3RhbCA9IHBhcnNlQ29uZmlnPGJvb2xlYW4+KGdldFZhbHVlQ29uZmlnKFwiYmFja2VuZC5zcGEuZGVwb3NpdHMuYmFudG90YWwuZmxhZ1wiKSk7XG5cbiAgICBjb25zdCBmaWx0ZXJlZEFzc3VyYW5jZUl0ZW1zQXZhaWxhYmxlID0gaXRlbXNSZWNpcmN1bGF0aW9uLmZsYXRNYXAoKHsgaHJlZiwgdGV4dCB9KSA9PiB7XG4gICAgICAgIGlmICghKGhyZWYgaW4gbGVnYWN5RmVhdHVyZXMpKSByZXR1cm4gW107XG4gICAgICAgIGNvbnN0IHsgdXJsLCBhdmFpbGFibGVGZWF0dXJlLCBoYXNQZXJtaXNzaW9uIH0gPSBsZWdhY3lGZWF0dXJlc1tocmVmXTtcbiAgICAgICAgaWYgKCFhdmFpbGFibGVGZWF0dXJlIHx8ICFoYXNQZXJtaXNzaW9uKSByZXR1cm4gW107XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWQ6IGhyZWYsXG4gICAgICAgICAgICAgICAgaHJlZjogZ2V0TGVnYWN5UGF0aChocmVmLCB1cmwpLFxuICAgICAgICAgICAgICAgIHRleHQsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdO1xuICAgIH0pO1xuXG4gICAgLy8gZmV0Y2ggY2FtcGFpZ25zIHRhcmdldGVkIGZvciBteSBjdXJyZW50IHVzZXIvZW52aXJvbm1lbnRcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIXRva2VuIHx8ICFpc0NhbXBhaWduc1dpZGdldEVuYWJsZWQpIHJldHVybjtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICAhZmV0Y2hlZENhbXBhaWducyAmJlxuICAgICAgICAgICAgIWZldGNoaW5nQ2FtcGFpZ25zICYmXG4gICAgICAgICAgICAhc3lzdGVtRXJyb3JDYW1wYWlnbiAmJlxuICAgICAgICAgICAgIWJ1c2luZXNzRXJyb3JDYW1wYWlnblxuICAgICAgICApXG4gICAgICAgICAgICBkaXNwYXRjaChGZXRjaGVyU2xpY2VDYW1wYWlnbnMubGlzdENhbXBhaWduc0ZvcldpZGdldCh7IHRva2VuIH0pKTtcblxuICAgICAgICBpZiAoaXNDYW1wYWlnblJldHJ5RW5hYmxlZCAmJiAhY2FtcGFpZ25SZXRyeURvbmUgJiYgZmV0Y2hlZENhbXBhaWducykge1xuICAgICAgICAgICAgZGlzcGF0Y2goRmV0Y2hlclNsaWNlQ2FtcGFpZ25zLmxpc3RDYW1wYWlnbnNGb3JXaWRnZXQoeyB0b2tlbiB9KSk7XG4gICAgICAgICAgICBzZXRDYW1wYWlnblJldHJ5RG9uZSh0cnVlKTtcbiAgICAgICAgfVxuICAgIH0sIFtcbiAgICAgICAgYnVzaW5lc3NFcnJvckNhbXBhaWduLFxuICAgICAgICBjYW1wYWlnblJldHJ5RG9uZSxcbiAgICAgICAgZGlzcGF0Y2gsXG4gICAgICAgIGZldGNoZWRDYW1wYWlnbnMsXG4gICAgICAgIGZldGNoaW5nQ2FtcGFpZ25zLFxuICAgICAgICBpc0NhbXBhaWduUmV0cnlFbmFibGVkLFxuICAgICAgICBpc0NhbXBhaWduc1dpZGdldEVuYWJsZWQsXG4gICAgICAgIHN5c3RlbUVycm9yQ2FtcGFpZ24sXG4gICAgICAgIHRva2VuLFxuICAgIF0pO1xuXG4gICAgY29uc3QgYXNzaWduT1RQID0gUmVhY3QudXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgICAgICBpZiAoIXRva2VuKSByZXR1cm47XG4gICAgICAgIGxldCB2YWxpZGF0aW9uVHlwZSA9IExpbmtPVFBPcGVyYXRpb24uT1RQTU9CSUxFO1xuICAgICAgICBpZiAoY29uZGl0aW9uVG9rZW5TZWN1cmVEZXZpY2UpIHZhbGlkYXRpb25UeXBlID0gTGlua09UUE9wZXJhdGlvbi5PVFBNT0JJTEU7XG4gICAgICAgIGlmIChjb25kaXRpb25Ub2tlbk5vdEFibGVEZXZpY2UpIHZhbGlkYXRpb25UeXBlID0gTGlua09UUE9wZXJhdGlvbi5PVFBTTVM7XG4gICAgICAgIGF3YWl0IGRpc3BhdGNoKFxuICAgICAgICAgICAgRmV0Y2hlclNsaWNlUHJlZmVyZW5jZXMubGlua09UUCh7XG4gICAgICAgICAgICAgICAgYWNjZXNzVG9rZW46IHRva2VuLFxuICAgICAgICAgICAgICAgIGRldmljZU1vZGVsLFxuICAgICAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlLFxuICAgICAgICAgICAgICAgIHVuaXF1ZURldmljZUlkOiB1bmlxdWVEZXZpY2VJRCxcbiAgICAgICAgICAgICAgICBpc1NhZmVEZXZpY2VFbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpc1ZVRW5hYmxlZDogaXNWVUZpbmdlcnByaW50RW5hYmxlZCAmJiBpc1ZVU2Vjb25kRmFjdG9yRW5hYmxlZCxcbiAgICAgICAgICAgICAgICB1cmw6IHZ1VXJsLFxuICAgICAgICAgICAgICAgIHRpbWVvdXQ6IHZ1VGltZW91dCxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICApO1xuICAgICAgICBuYXZpZ2F0ZSh1cmxUb2tlblRpY2tldCk7XG4gICAgfSwgW1xuICAgICAgICB0b2tlbixcbiAgICAgICAgY29uZGl0aW9uVG9rZW5TZWN1cmVEZXZpY2UsXG4gICAgICAgIGNvbmRpdGlvblRva2VuTm90QWJsZURldmljZSxcbiAgICAgICAgZGlzcGF0Y2gsXG4gICAgICAgIGRldmljZU1vZGVsLFxuICAgICAgICB1bmlxdWVEZXZpY2VJRCxcbiAgICAgICAgaXNWVUZpbmdlcnByaW50RW5hYmxlZCxcbiAgICAgICAgaXNWVVNlY29uZEZhY3RvckVuYWJsZWQsXG4gICAgICAgIG5hdmlnYXRlLFxuICAgICAgICB1cmxUb2tlblRpY2tldCxcbiAgICAgICAgdnVVcmwsXG4gICAgICAgIHZ1VGltZW91dCxcbiAgICBdKTtcblxuICAgIC8vIENvbnRyb2wgbG9nb3V0IGNvbmZpcm1hdGlvbjogSWYgYW55IG1vZGFsIGlzIG9wZW4gKGV4Y2VwdCBUWUMpIHdlIHNldCB0aGUgdmFyaWFibGUgaXNIb21lTW9kYWxBY3RpdmUgdG8gdHJ1ZVxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHNob3dFbWFpbE1vZGFsIHx8XG4gICAgICAgICAgICBzaG93RW1haWxVbmF2YWlsYWJsZU1vZGFsIHx8XG4gICAgICAgICAgICBzaG93TU9ET01vZGFsIHx8XG4gICAgICAgICAgICBzaG93TW9kYWxVbmxvY2tlZEFibGVEZXZpY2UgfHxcbiAgICAgICAgICAgIHNob3dUb2tlbk1vZGFsTm90QWJsZURldmljZSB8fFxuICAgICAgICAgICAgc2hvd1Rva2VuTW9kYWxOb3RTZWN1cmVEZXZpY2UgfHxcbiAgICAgICAgICAgIHNob3dUb2tlbk1vZGFsU2VjdXJlRGV2aWNlXG4gICAgICAgICkge1xuICAgICAgICAgICAgZGlzcGF0Y2goQWN0aW9uU2xpY2VTZXNzaW9uLnNldElzSG9tZU1vZGFsQWN0aXZlKHRydWUpKTtcbiAgICAgICAgfVxuICAgIH0sIFtcbiAgICAgICAgZGlzcGF0Y2gsXG4gICAgICAgIHNob3dFbWFpbE1vZGFsLFxuICAgICAgICBzaG93RW1haWxVbmF2YWlsYWJsZU1vZGFsLFxuICAgICAgICBzaG93TU9ET01vZGFsLFxuICAgICAgICBzaG93TW9kYWxVbmxvY2tlZEFibGVEZXZpY2UsXG4gICAgICAgIHNob3dUb2tlbk1vZGFsTm90QWJsZURldmljZSxcbiAgICAgICAgc2hvd1Rva2VuTW9kYWxOb3RTZWN1cmVEZXZpY2UsXG4gICAgICAgIHNob3dUb2tlbk1vZGFsU2VjdXJlRGV2aWNlLFxuICAgIF0pO1xuXG4gICAgLy8gUHJlc2VudCBtb2RhbHMgYWNjb3JkaW5nIHRvIHByaW9yaXRpemVkIGxpc3RcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoY29uZGl0aW9uUHJlc2VudE1vZGFscykgcmV0dXJuO1xuICAgICAgICBsZXQgbW9kYWxQcmlvcml0eWVzTGlzdDogc3RyaW5nW10gfCB1bmRlZmluZWQgPSBbXTtcbiAgICAgICAgaWYgKGlzRGVza3RvcCkgbW9kYWxQcmlvcml0eWVzTGlzdCA9IHJldGFpbERlc2t0b3A/LnNwbGl0KFwiO1wiKTtcbiAgICAgICAgaWYgKCFpc0Rlc2t0b3ApIG1vZGFsUHJpb3JpdHllc0xpc3QgPSByZXRhaWxNb2JpbGU/LnNwbGl0KFwiO1wiKTtcbiAgICAgICAgaWYgKG1vZGFsUHJpb3JpdHllc0xpc3QpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG4gICAgICAgICAgICBtb2RhbFByaW9yaXR5ZXNMaXN0LmV2ZXJ5KChtb2RhbFByaW9yaXR5KSA9PiB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChtb2RhbFByaW9yaXR5KSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgS0VZX1RPS0VOOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9uY2VQZXJTZXNzaW9uTW9kYWwpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNUb2tlbml6YXRpb24gfHwgIWlzQXZhaWxhYmxlQ2hlY2tUb2tlbkFjdGl2aXR5KSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKEFjdGlvblNsaWNlU2Vzc2lvbi5zZXRPbmNlUGVyU2Vzc2lvbk1vZGFsKHRydWUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb25kaXRpb25VbmxvY2tlZERldmljZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFNob3dNb2RhbFVubG9ja2VkQWJsZURldmljZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uZGl0aW9uVG9rZW5TZWN1cmVEZXZpY2UpIHNldFNob3dUb2tlbk1vZGFsU2VjdXJlRGV2aWNlKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmRpdGlvblRva2VuTm90U2VjdXJlRGV2aWNlKSBzZXRTaG93VG9rZW5Nb2RhbE5vdFNlY3VyZURldmljZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb25kaXRpb25Ub2tlbk5vdEFibGVEZXZpY2UpIHNldFNob3dUb2tlbk1vZGFsTm90QWJsZURldmljZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBLRVlfRU1BSUw6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob25jZVBlclNlc3Npb25Nb2RhbCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb25kaXRpb25FbWFpbCB8fCAhaXNBdmFpbGFibGVDaGVja0VtYWlsQWN0aXZpdHkpIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goQWN0aW9uU2xpY2VTZXNzaW9uLnNldE9uY2VQZXJTZXNzaW9uTW9kYWwodHJ1ZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzQXZhaWxhYmxlTW9kaWZ5VXNlckRhdGFBY3Rpdml0eSkgc2V0U2hvd0VtYWlsTW9kYWwodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzQXZhaWxhYmxlTW9kaWZ5VXNlckRhdGFBY3Rpdml0eSkgc2V0U2hvd0VtYWlsVW5hdmFpbGFibGVNb2RhbCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBLRVlfTU9ETzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvbmNlUGVyU2Vzc2lvbk1vZGFsKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbmRpdGlvbk1PRE8gfHwgIWlzQXZhaWxhYmxlQ2hlY2tNb2RvQWN0aXZpdHkpIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goQWN0aW9uU2xpY2VTZXNzaW9uLnNldE9uY2VQZXJTZXNzaW9uTW9kYWwodHJ1ZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0U2hvd01PRE9Nb2RhbCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBLRVlfVEVSTVNfQ09ORElUSU9OUzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvbmNlUGVyU2Vzc2lvbk1vZGFsKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzQWNjZXB0VGVybXNBbmRDb25kaXRpb25zIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzQWNjZXB0VGVybXNBbmRDb25kaXRpb25zID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhaXNBdmFpbGFibGVUeWNBY3Rpdml0eVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIHNldE9uY2VQZXJTZXNzaW9uTW9kYWwgaXMgZGVsYXllZCB1bnRpbCB0aGUgdGVybXMgYW5kIGNvbmRpdGlvbnMgYXJlIGFjY2VwdGVkXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRTaG93VGVybXNBbmRDb25kaXRpb25zTW9kYWwodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sIFtcbiAgICAgICAgY29uZGl0aW9uRW1haWwsXG4gICAgICAgIGNvbmRpdGlvblByZXNlbnRNb2RhbHMsXG4gICAgICAgIGNvbmRpdGlvbk1PRE8sXG4gICAgICAgIGNvbmRpdGlvblRva2VuTm90QWJsZURldmljZSxcbiAgICAgICAgY29uZGl0aW9uVG9rZW5Ob3RTZWN1cmVEZXZpY2UsXG4gICAgICAgIGNvbmRpdGlvblRva2VuU2VjdXJlRGV2aWNlLFxuICAgICAgICBjb25kaXRpb25VbmxvY2tlZERldmljZSxcbiAgICAgICAgZGlzcGF0Y2gsXG4gICAgICAgIGhhc0FjY2VwdFRlcm1zQW5kQ29uZGl0aW9ucyxcbiAgICAgICAgaGFzVG9rZW5pemF0aW9uLFxuICAgICAgICBpc0F2YWlsYWJsZUNoZWNrRW1haWxBY3Rpdml0eSxcbiAgICAgICAgaXNBdmFpbGFibGVDaGVja01vZG9BY3Rpdml0eSxcbiAgICAgICAgaXNBdmFpbGFibGVDaGVja1Rva2VuQWN0aXZpdHksXG4gICAgICAgIGlzQXZhaWxhYmxlTW9kaWZ5VXNlckRhdGFBY3Rpdml0eSxcbiAgICAgICAgaXNBdmFpbGFibGVUeWNBY3Rpdml0eSxcbiAgICAgICAgaXNEZXNrdG9wLFxuICAgICAgICBvbmNlUGVyU2Vzc2lvbk1vZGFsLFxuICAgICAgICByZXRhaWxEZXNrdG9wLFxuICAgICAgICByZXRhaWxNb2JpbGUsXG4gICAgXSk7XG5cbiAgICAvLyBmZXRjaCBpcyBlbWFpbCBuZWVkIHRvIGJlIHJlZnJlc2hlZFxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmICghdG9rZW4gfHwgIWlzQXZhaWxhYmxlQ2hlY2tFbWFpbEFjdGl2aXR5KSByZXR1cm47XG4gICAgICAgIGRpc3BhdGNoKEZldGNoZXJTbGljZVByZWZlcmVuY2VzLmNoZWNrRW1haWxOZWVkc1JlZnJlc2hlZCh7IGFjY2Vzc1Rva2VuOiB0b2tlbiB9KSk7XG4gICAgfSwgW2Rpc3BhdGNoLCBpc0F2YWlsYWJsZUNoZWNrRW1haWxBY3Rpdml0eSwgdG9rZW5dKTtcblxuICAgIC8qIGZldGNoIGlmIHRoZSBlbnZpcm9ubWVudCBoYXMgYWNjZXB0ZWQgdGVybXMgYW5kIGNvbmRpdGlvbnMgYW5kIGNyZWF0aW9uRGF0ZSAqL1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmICghdG9rZW4gfHwgIWlzQXZhaWxhYmxlVHljQWN0aXZpdHkpIHJldHVybjtcbiAgICAgICAgZGlzcGF0Y2goRmV0Y2hlclNsaWNlU2Vzc2lvbi5nZXRDcmVhdGlvbkRhdGUoeyB0b2tlbiB9KSk7XG4gICAgICAgIGRpc3BhdGNoKEZldGNoZXJTbGljZVNlc3Npb24uZ2V0QWNjZXB0VGVybXNBbmRDb25kaXRpb25zKHsgdG9rZW4gfSkpO1xuICAgIH0sIFtkaXNwYXRjaCwgaXNBdmFpbGFibGVUeWNBY3Rpdml0eSwgdG9rZW5dKTtcblxuICAgIC8vIERpc3BsYXlzIFRvYXN0cyBvbiBlbWFpbCBhbmQgVHlDIHVwZGF0ZXNcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIXByZWZlcmVuY2VzRXJyb3IgJiYgc2hvd1RvYXN0RW1haWwpXG4gICAgICAgICAgICBkaXNwYXRjaChcbiAgICAgICAgICAgICAgICBBY3Rpb25TbGljZVRvYXN0LnNldCh7XG4gICAgICAgICAgICAgICAgICAgIGtpbmQ6IFwiU1VDQ0VTU1wiLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1dWlkOiBcInNwYS5lbWFpbC5tb2RhbC5jb25maXJtLmFsZXJ0XCIsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBEVVJBVElPTl9NLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgaWYgKHNob3dUb2FzdFN1Y2Nlc3NUZXJtcykge1xuICAgICAgICAgICAgZGlzcGF0Y2goXG4gICAgICAgICAgICAgICAgQWN0aW9uU2xpY2VUb2FzdC5zZXQoe1xuICAgICAgICAgICAgICAgICAgICBraW5kOiBcIlNVQ0NFU1NcIixcbiAgICAgICAgICAgICAgICAgICAgdGV4dDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXVpZDogXCJzcGEudGVybXMuc3VjY2Vzcy50aXRsZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZTogYDxiPiR7bWVzYWdnZVRlcm1zVG9hc3R9PC9iPjxicj5gLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogRFVSQVRJT05fTSxcbiAgICAgICAgICAgICAgICAgICAgaXNIb21lQWN0aXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH0sIFtkaXNwYXRjaCwgbWVzYWdnZVRlcm1zVG9hc3QsIHByZWZlcmVuY2VzRXJyb3IsIHNob3dUb2FzdEVtYWlsLCBzaG93VG9hc3RTdWNjZXNzVGVybXNdKTtcblxuICAgIGlmIChpc0xvYWRpbmdUb1ByZXNlbnRNb2RhbCB8fCBmZXRjaGluZ0NhbXBhaWducyB8fCBmZXRjaGluZ1Byb21vdGlvbnMgfHwgaXNVbmtub3duKSB7XG4gICAgICAgIHJldHVybiA8TG9hZGluZyAvPjtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9e1J1bGVzLmZpcnN0V2lkZ2V0c0NvbHVtblJldGFpbH0+XG4gICAgICAgICAgICAgICAge2lzQWN0aW9uc1dpZGdldEFjdGl2ZSAmJiAoXG4gICAgICAgICAgICAgICAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxXaWRnZXRBY3Rpb25zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9TY2FuPXtkb1NjYW59XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNCYW50b3RhbEVuYWJsZWQ9e2JhbnRvdGFsfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zPXtpc0Rlc2t0b3AgfHwgaXNXZWJNb2JpbGUgPyBpdGVtc0FjdGlvbnNEZXNrdG9wIDogaXRlbXNBY3Rpb25zfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhbmRpbmdQYXRoPXt1cmxMYW5kaW5nfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZ2FjeVBhdGg9e3VybExlZ2FjeX1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U2VwYXJhdG9yIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICAgICAgICAgKX1cblxuICAgICAgICAgICAgICAgIHtpc0NhbXBhaWduc1dpZGdldEVuYWJsZWQgJiYgaXRlbXNDYW1wYWlnbnMubGVuZ3RoID4gWkVSTyAmJiAoXG4gICAgICAgICAgICAgICAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxXaWRnZXRDYW1wYWlnbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0ZldGNoaW5nQ2FtcGFpZ25zPXtmZXRjaGluZ0NhbXBhaWduc31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtcz17aXRlbXNDYW1wYWlnbnN9XG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFNlcGFyYXRvciAvPlxuICAgICAgICAgICAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICAgICAgICl9XG5cbiAgICAgICAgICAgICAgICB7aGFzUHJvbW90aW9uSXRlbXMgJiYgKFxuICAgICAgICAgICAgICAgICAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8V2lkZ2V0UHJvbW90aW9uc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzRmV0Y2hpbmdQcm9tb3Rpb25zPXtmZXRjaGluZ1Byb21vdGlvbnN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM9e3Byb21vdGlvbkl0ZW1zfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPVwic3BhLndpZGdldC5wcm9tb3Rpb25zLnRpdGxlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U2VwYXJhdG9yIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgICAgIDxzZWN0aW9uPlxuICAgICAgICAgICAgICAgIHtpc0luc3VyYW5jZVdpZGdldEFjdGl2ZSAmJiBmaWx0ZXJlZEFzc3VyYW5jZUl0ZW1zQXZhaWxhYmxlPy5sZW5ndGggPiBaRVJPICYmIChcbiAgICAgICAgICAgICAgICAgICAgPFdpZGdldFJlY2lyY3VsYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zPXtmaWx0ZXJlZEFzc3VyYW5jZUl0ZW1zQXZhaWxhYmxlfVxuICAgICAgICAgICAgICAgICAgICAgICAgbGVnYWN5UGF0aD17dXJsTGVnYWN5fVxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJzcGEud2lkZ2V0LnJlY2lyY3VsYXRpb24ucGVyc29uLnRpdGxlXCJcbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApfVxuXG4gICAgICAgICAgICAgICAge2lzQ2hhdEVvV2lkZ2V0QWN0aXZlICYmIChcbiAgICAgICAgICAgICAgICAgICAgPENoYXRDYXJkXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b249e3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dWlkOiBcInNwYS5jdXN0b21lci5zdXBwb3J0LmNoYXQuZW8uYnV0dG9uLnRpdGxlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dD17e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV1aWQ6IFwic3BhLmN1c3RvbWVyLnN1cHBvcnQuY2hhdC5lby50ZXh0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsRXh0ZXJuYWxDaGF0PXt1cmxFeHRlcm5hbENoYXRFb31cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgICAgey8qIE1PRE8gbW9kYWwgKi99XG4gICAgICAgICAgICA8TW9kYWxNb2RvIHNldFNob3dNb2RhbD17c2V0U2hvd01PRE9Nb2RhbH0gc2hvd01vZGFsPXtzaG93TU9ET01vZGFsfSAvPlxuICAgICAgICAgICAgey8qIEVtYWlsIG1vZGFsICovfVxuICAgICAgICAgICAgPE1vZGFsRW1haWxcbiAgICAgICAgICAgICAgICBlbWFpbD17ZW1haWx9XG4gICAgICAgICAgICAgICAgaGFuZGxlRW1haWxNb2RhbD17aGFuZGxlRW1haWxNb2RhbH1cbiAgICAgICAgICAgICAgICBzZXRTaG93TW9kYWw9e3NldFNob3dFbWFpbE1vZGFsfVxuICAgICAgICAgICAgICAgIHNob3dNb2RhbD17c2hvd0VtYWlsTW9kYWx9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgey8qIEVtYWlsIHVuYXZhaWxhYmxlICovfVxuICAgICAgICAgICAgPE1vZGFsRW1haWxVbmF2YWlsYWJsZVxuICAgICAgICAgICAgICAgIHNldFNob3dNb2RhbD17c2V0U2hvd0VtYWlsVW5hdmFpbGFibGVNb2RhbH1cbiAgICAgICAgICAgICAgICBzaG93TW9kYWw9e3Nob3dFbWFpbFVuYXZhaWxhYmxlTW9kYWx9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgey8qIFAxIFRva2VuIG1vZGFsIChTZWN1cmUgRGV2aWNlKSAqL31cbiAgICAgICAgICAgIDxNb2RhbFRva2VuU2VjdXJlRGV2aWNlXG4gICAgICAgICAgICAgICAgYXNzaWduT1RQPXthc3NpZ25PVFB9XG4gICAgICAgICAgICAgICAgc2V0U2hvd01vZGFsPXtzZXRTaG93VG9rZW5Nb2RhbFNlY3VyZURldmljZX1cbiAgICAgICAgICAgICAgICBzaG93TW9kYWw9e3Nob3dUb2tlbk1vZGFsU2VjdXJlRGV2aWNlfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIHsvKiBQMiBUb2tlbiBtb2RhbCAoTm90IHNlY3VyZSBEZXZpY2UpICovfVxuICAgICAgICAgICAgPE1vZGFsVG9rZW5Ob3RTZWN1cmVEZXZpY2VcbiAgICAgICAgICAgICAgICBzZXRTaG93TW9kYWw9e3NldFNob3dUb2tlbk1vZGFsTm90U2VjdXJlRGV2aWNlfVxuICAgICAgICAgICAgICAgIHNob3dNb2RhbD17c2hvd1Rva2VuTW9kYWxOb3RTZWN1cmVEZXZpY2V9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgey8qIFAzIFRva2VuIG1vZGFsIChOb3QgYWJsZSBkZXZpY2UpICovfVxuICAgICAgICAgICAgPE1vZGFsVG9rZW5Ob3RBYmxlRGV2aWNlXG4gICAgICAgICAgICAgICAgYXNzaWduT1RQPXthc3NpZ25PVFB9XG4gICAgICAgICAgICAgICAgc2V0U2hvd01vZGFsPXtzZXRTaG93VG9rZW5Nb2RhbE5vdEFibGVEZXZpY2V9XG4gICAgICAgICAgICAgICAgc2hvd01vZGFsPXtzaG93VG9rZW5Nb2RhbE5vdEFibGVEZXZpY2V9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgey8qIE1vZGFsICh1bmxvY2tlZCBkZXZpY2UpICovfVxuICAgICAgICAgICAgPE1vZGFsVW5sb2NrZWREZXZpY2VcbiAgICAgICAgICAgICAgICBzZXRTaG93TW9kYWw9e3NldFNob3dNb2RhbFVubG9ja2VkQWJsZURldmljZX1cbiAgICAgICAgICAgICAgICBzaG93TW9kYWw9e3Nob3dNb2RhbFVubG9ja2VkQWJsZURldmljZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICB7LyogQ3VzdG9tZXIgU3VwcG9ydCAtIENoYXQgTW9kYWwgKi99XG4gICAgICAgICAgICA8Q2hhdE1vZGFsIC8+XG4gICAgICAgICAgICB7LyogVGVybXMgYW5kIENvbmRpdGlvbnMgTW9kYWwgKi99XG4gICAgICAgICAgICA8TW9kYWxUZXJtc0FuZENvbmRpdGlvbnNcbiAgICAgICAgICAgICAgICBoYW5kbGVBY2NlcHRUZXJtc0FuZENvbmRpdGlvbnM9e2hhbmRsZUFjY2VwdFRlcm1zQW5kQ29uZGl0aW9uc31cbiAgICAgICAgICAgICAgICBzZXRTaG93TW9kYWw9e3NldFNob3dUZXJtc0FuZENvbmRpdGlvbnNNb2RhbH1cbiAgICAgICAgICAgICAgICBzaG93TW9kYWw9e3Nob3dUZXJtc0FuZENvbmRpdGlvbnNNb2RhbH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgKTtcblxuICAgIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZUVtYWlsTW9kYWwoKSB7XG4gICAgICAgIGlmICghdG9rZW4gfHwgIWVtYWlsKSByZXR1cm47XG4gICAgICAgIGF3YWl0IGRpc3BhdGNoKFxuICAgICAgICAgICAgRmV0Y2hlclNsaWNlUHJlZmVyZW5jZXMudXBkYXRlTGF0ZXN0TWFpbERhdGVBY3Rpdml0eSh7XG4gICAgICAgICAgICAgICAgYWNjZXNzVG9rZW46IHRva2VuLFxuICAgICAgICAgICAgICAgIG1haWw6IGVtYWlsLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICk7XG4gICAgICAgIHNldFNob3dUb2FzdEVtYWlsKHRydWUpO1xuICAgICAgICBkaXNwYXRjaChBY3Rpb25TbGljZVNlc3Npb24uc2V0SXNIb21lTW9kYWxBY3RpdmUoZmFsc2UpKTtcbiAgICAgICAgc2V0U2hvd0VtYWlsTW9kYWwoZmFsc2UpO1xuICAgIH1cblxuICAgIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZUFjY2VwdFRlcm1zQW5kQ29uZGl0aW9ucygpIHtcbiAgICAgICAgaWYgKCF0b2tlbikgcmV0dXJuO1xuICAgICAgICBkaXNwYXRjaChBY3Rpb25TbGljZVNlc3Npb24uc2V0T25jZVBlclNlc3Npb25Nb2RhbCh0cnVlKSk7XG4gICAgICAgIGF3YWl0IGRpc3BhdGNoKEZldGNoZXJTbGljZVNlc3Npb24uc2V0QWNjZXB0VGVybXNBbmRDb25kaXRpb25zKHsgdG9rZW4gfSkpO1xuICAgICAgICBzZXRzaG93VG9hc3RTdWNjZXNzVGVybXModHJ1ZSk7XG4gICAgICAgIGRpc3BhdGNoKEFjdGlvblNsaWNlU2Vzc2lvbi5zZXRJc0hvbWVNb2RhbEFjdGl2ZShmYWxzZSkpO1xuICAgICAgICBzZXRTaG93VGVybXNBbmRDb25kaXRpb25zTW9kYWwoZmFsc2UpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1hcENhbXBhaWducyhjYW1wYWlnbjogTlNBUElDYW1wYWlnbnMuQ2FtcGFpZ24pIHtcbiAgICAgICAgY29uc3QgeyBpZCwgLi4ucmVzdCB9ID0gY2FtcGFpZ247XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjYW1wYWlnbklkOiBpZCxcbiAgICAgICAgICAgIC4uLnJlc3QsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgYXN5bmMgZnVuY3Rpb24gZG9TY2FuKCkge1xuICAgICAgICBpZiAoIXRva2VuKSByZXR1cm47XG4gICAgICAgIGlmICghdmFsaWRhdGVVc2VyKSB7XG4gICAgICAgICAgICBkaXNwYXRjaChGZXRjaGVyU2xpY2VNb2RvLnZhbGlkYXRlVXNlcih7IHRva2VuIH0pKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWhhc0ZpbmlzaGVkTW9kb09uYm9hcmRpbmcgJiYgdmFsaWRhdGVVc2VyKSB7XG4gICAgICAgICAgICBuYXZpZ2F0ZSh1cmxQcmVzZW50YXRpb25Nb2RvKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBkaXNwYXRjaChBY3Rpb25TbGljZU1vZG9RclBheW1lbnQuY2xlYW4oKSk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgc2NhbihzY2FuVGl0bGUpO1xuICAgICAgICBpZiAoIXJlc3BvbnNlIHx8ICFyZXNwb25zZS52YWx1ZSkgcmV0dXJuO1xuICAgICAgICBkaXNwYXRjaChBY3Rpb25TbGljZU1vZG9RclBheW1lbnQucXJDb2RlKHJlc3BvbnNlLnZhbHVlKSk7XG4gICAgICAgIG5hdmlnYXRlKHVybFFyUGF5bWVudCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJAcGtnL3JlYWN0XCI7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tIFwiQGFwcC9iYW5jb24tZGF0YVwiO1xuaW1wb3J0IHtcbiAgICBGZXRjaGVyU2xpY2VQcm9tb3Rpb25zLFxuICAgIFNlbGVjdG9yU2xpY2VQcm9tb3Rpb25zLFxufSBmcm9tIFwiQGFwcC9iYW5jb24tZGF0YS9zbGljZXMvcHJvbW90aW9uc1wiO1xuaW1wb3J0IHsgU2VsZWN0b3JTbGljZVNlc3Npb24sIHVzZVBlcm1pc3Npb25GZWF0dXJlIH0gZnJvbSBcIkBhcHAvYmFuY29uLWRhdGEvc2xpY2VzL3Nlc3Npb25cIjtcbmltcG9ydCB7IHBhcnNlQ29uZmlnIH0gZnJvbSBcIn4vdXRpbHMvY29uZmlnVXRpbHNcIjtcbmltcG9ydCB7IHVzZVBlcnNpc3RvciB9IGZyb20gXCJAcGtnL3JlYWN0LXN0b3J5Ym9vay9Db21wb25lbnQvUGVyc2lzdG9yXCI7XG5pbXBvcnQgeyBTUEFfV0lER0VUX1BST01PVElPTlMsIFpFUk8gfSBmcm9tIFwiQGFwcC9iYW5jb24tZGF0YS9jb25zdGFudHNcIjtcblxuLyoqXG4gKiBGZXRjaGVzIHByb21vdGlvbnNcbiAqIEByZXR1cm5zXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlR2V0UHJvbW90aW9ucygpIHtcbiAgICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gICAgY29uc3QgeyBnZXRWYWx1ZUNvbmZpZyB9ID0gdXNlUGVyc2lzdG9yKCk7XG4gICAgY29uc3QgZmV0Y2hpbmdQcm9tb3Rpb25zID0gdXNlU2VsZWN0b3IoU2VsZWN0b3JTbGljZVByb21vdGlvbnMuZmV0Y2hpbmcpO1xuICAgIGNvbnN0IHByb21vdGlvbnNSZXRyeUVuYWJsZWQgPSB1c2VTZWxlY3RvcihTZWxlY3RvclNsaWNlUHJvbW90aW9ucy5pc1JldHJ5RW5hYmxlZCk7XG4gICAgY29uc3QgdG9rZW4gPSB1c2VTZWxlY3RvcihTZWxlY3RvclNsaWNlU2Vzc2lvbi50b2tlbik7XG4gICAgY29uc3QgcHJvbW90aW9uSXRlbXMgPSB1c2VTZWxlY3RvcihTZWxlY3RvclNsaWNlUHJvbW90aW9ucy5wcm9tb3Rpb25zKTtcbiAgICBjb25zdCBpc1Byb21vdGlvbnNXaWRnZXRQZXJtaXNzaW9uRW5hYmxlZCA9IHVzZVBlcm1pc3Npb25GZWF0dXJlKFNQQV9XSURHRVRfUFJPTU9USU9OUyk7XG5cbiAgICBjb25zdCBpc1Byb21vdGlvbldpZGdldEVuYWJsZWQgPSBwYXJzZUNvbmZpZzxib29sZWFuPihcbiAgICAgICAgZ2V0VmFsdWVDb25maWcoXCJzcGEud2lkZ2V0LnByb21vdGlvbnMuYWN0aXZlXCIpLFxuICAgICk7XG5cbiAgICAvLyBmZXRjaCBwcm9tb3Rpb25zIGxpc3RcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIWlzUHJvbW90aW9uV2lkZ2V0RW5hYmxlZCB8fCAhaXNQcm9tb3Rpb25zV2lkZ2V0UGVybWlzc2lvbkVuYWJsZWQpIHJldHVybjtcbiAgICAgICAgaWYgKCF0b2tlbiB8fCBmZXRjaGluZ1Byb21vdGlvbnMgfHwgIXByb21vdGlvbnNSZXRyeUVuYWJsZWQpIHJldHVybjtcbiAgICAgICAgZGlzcGF0Y2goRmV0Y2hlclNsaWNlUHJvbW90aW9ucy5nZXRQcm9tb3Rpb25zKHsgYWNjZXNzVG9rZW46IHRva2VuIH0pKTtcbiAgICB9LCBbXG4gICAgICAgIGRpc3BhdGNoLFxuICAgICAgICBmZXRjaGluZ1Byb21vdGlvbnMsXG4gICAgICAgIGlzUHJvbW90aW9uV2lkZ2V0RW5hYmxlZCxcbiAgICAgICAgaXNQcm9tb3Rpb25zV2lkZ2V0UGVybWlzc2lvbkVuYWJsZWQsXG4gICAgICAgIHByb21vdGlvbnNSZXRyeUVuYWJsZWQsXG4gICAgICAgIHRva2VuLFxuICAgIF0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgcHJvbW90aW9uSXRlbXMsXG4gICAgICAgIGhhc1Byb21vdGlvbkl0ZW1zOiBwcm9tb3Rpb25JdGVtcy5sZW5ndGggPiBaRVJPLFxuICAgIH07XG59XG4iXSwic291cmNlUm9vdCI6IiJ9
//# sourceMappingURL=32.1460711a.chunk.js.map