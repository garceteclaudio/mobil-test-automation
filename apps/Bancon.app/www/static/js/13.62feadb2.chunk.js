(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[13],{494:function(e,t,n){"use strict";n.d(t,"a",(function(){return j}));var a=n(2),o=n(19),c=n(16),r=n(11),i=n(50),s=n(41),l=n(488),E=n(498),d=n.n(E),u=n(10),T=["id","name","methods","defaultValue","pattern","withSuggestions","onChange","onBlur"],O=d.a.NAME_INPUT_FIELD,b=d.a.TYPE_INPUT_FIELD,_=r.b.memo((function(e){var t,n=r.b.useState(!1),l=Object(c.a)(n,2),E=l[0],d=l[1],_=e.id,j=e.name,P=e.methods,m=e.defaultValue,p=e.pattern,N=e.withSuggestions,M=void 0===N||N,f=e.onChange,A=e.onBlur,C=Object(o.a)(e,T),h=P.register,R=P.formState,x=P.setValue,I=P.clearErrors,L=R.errors,g="".concat(j),D=L[j];return r.b.useEffect((function(){m&&x(g,m),m||x(g,void 0),M&&d(!0)}),[m,g,x,M,d]),Object(u.jsx)(s.a,{name:O,type:b,children:Object(u.jsx)(i.TextField,Object(a.a)(Object(a.a)(Object(a.a)(Object(a.a)(Object(a.a)({id:_||j},m&&{defaultValue:m}),D&&{error:null===(t=D.message)||void 0===t?void 0:t.toString()}),h(g,{onChange:function(e){f&&f(e);I([g])},onBlur:A})),C),{},{autoComplete:M?"on":"off",pattern:p,onKeyDown:function(e){e.target.value||E||d(!0)}}))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function j(e){var t=l.a.useContext();return Object(u.jsx)(_,Object(a.a)({methods:t},e))}j.displayName=O},498:function(e,t,n){e.exports={NAME_INPUT_FIELD:"InputField",TYPE_INPUT_FIELD:"Element"}},517:function(e,t,n){"use strict";n.d(t,"a",(function(){return j}));var a=n(2),o=n(19),c=n(11),r=n(50),i=n(41),s=n(488),l=n(529),E=n.n(l),d=n(10),u=["id","name","autoFocus","methods","withSuggestions","onChange"],T=E.a.NAME_INPUT_PASSWORD,O=E.a.TYPE_INPUT_PASSWORD,b={id:T},_=c.b.memo((function(e){var t,n=e.id,c=e.name,s=e.autoFocus,l=e.methods,E=e.withSuggestions,b=void 0===E||E,_=e.onChange,j=Object(o.a)(e,u),P=l.register,m=l.formState,p=l.clearErrors,N=m.errors,M="".concat(c),f=N[c];return Object(d.jsx)(i.a,{name:T,type:O,children:Object(d.jsx)(r.PasswordField,Object(a.a)(Object(a.a)(Object(a.a)({autoComplete:b?"on":"off",autoFocus:s,id:n||c},f&&{error:null===(t=f.message)||void 0===t?void 0:t.toString()}),P(M,{required:!0,onChange:function(e){_&&_(e);p([M])}})),j))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function j(e){var t=s.a.useContext();return Object(d.jsx)(_,Object(a.a)({methods:t},e))}j.displayName=T,j.defaultProps=b},529:function(e,t,n){e.exports={NAME_INPUT_PASSWORD:"InputPassword",TYPE_INPUT_PASSWORD:"Element"}},609:function(e,t,n){"use strict";n.d(t,"a",(function(){return Ue}));var a=n(2),o=n(16),c=n(19),r=n(11),i=n(41),s=n(39),l=n(99),E=n(74),d=n(8),u=n(157),T=n(33),O=n(187),b=n(38),_=n(488),j=n(87),P=n(6),m=n(69),p=n(80),N=n(82),M=n(490),f=n(51),A=n(79),C=n(270),h=n(751),R=n.n(h),x=n(752),I=n.n(x),L=n(517),g=n(50),D=n(753),F=n.n(D),S=n(10),v=F.a.NAME_INPUT_PIN,k=F.a.TYPE_INPUT_PIN;function Y(e){var t=Object(b.c)().textGet;return Object(S.jsx)(i.a,{name:v,type:k,children:Object(S.jsx)(L.a,Object(a.a)({autoCapitalize:"off",autoCorrect:"off",label:t({uuid:"spa.pin.label"}),maxLength:P.M,name:"pin",regexPattern:P.tb,spellCheck:!1,start:Object(S.jsx)(g.Icon,{name:"tokenPadlock"}),withSuggestions:!1},e))})}Y.displayName=v,Y.defaultProps={};var U=n(36),H=n(754),y=n.n(H),V=n(494),B=n(755),w=n.n(B),K=w.a.NAME_INPUT_OTP,G=w.a.TYPE_INPUT_OTP;function q(e){var t=Object(b.c)().textGet,n=Object(U.i)().isMobile,c=r.b.useState(!1),s=Object(o.a)(c,2),u=s[0],T=s[1],O=Object(d.c)(j.c.otpType),_=Object(d.c)(j.c.countSendOtpSMS),m=Object(l.a)().getValueConfig,p=Object(j.e)(),N=p.isSeedPresent,M=p.softToken,f=Object(A.d)().showSuccessToast,C=Object(E.a)(m("safeway.otps.soft.length")),h=r.b.useState(P.D),R=Object(o.a)(h,2),x=R[0],I=R[1],L=O===P.Lb,D=r.b.useCallback((function(){if(!n||!L||!N)return I(P.D),void T(!1);I(M),T(!0)}),[n,L,M,N]);return r.b.useEffect((function(){D()}),[D]),r.b.useEffect((function(){_>P.Sb&&f("spa.modal.otp.success.sendCode")}),[_,f]),Object(S.jsx)(i.a,{name:K,type:G,children:O?Object(S.jsxs)(r.b.Fragment,{children:[!L&&Object(S.jsx)(b.b,{uuid:"spa.modal.otp.text.sendCode"}),Object(S.jsx)("div",{className:u?y.a.hiddenInput:P.D,children:Object(S.jsx)(V.a,Object(a.a)({autoCapitalize:"off",autoComplete:"off",autoCorrect:"off",defaultValue:x,label:t({uuid:"spa.modal.otp.label"}),maxLength:C,name:"otp",regexPattern:P.tb,spellCheck:!1,start:Object(S.jsx)(g.Icon,{name:"tokenPadlock"})},e))})]}):Object(S.jsx)(b.b,{uuid:"spa.otp.not.assign"})})}q.displayName=K,q.defaultProps={};var X=n(756),W=n.n(X),z=["credential"],J=W.a.NAME_INPUTCREDENTIAL,Q=W.a.TYPE_INPUTCREDENTIAL;function Z(e){var t=e.credential,n=Object(c.a)(e,z),o=Object(b.c)().textGet,r={otp:Object(S.jsx)(q,{}),pin:Object(S.jsx)(Y,{}),password:Object(S.jsx)(L.a,{label:o({uuid:"spa.credential.password.label"}),maxLength:P.H,name:"password",spellCheck:!1})};return Object(S.jsx)(i.a,Object(a.a)(Object(a.a)({},n),{},{name:J,type:Q,children:r[t]}))}Z.defaultProps={};var $=["isModalVisible","handleModal","isLoading"],ee=I.a.NAME_MODAL_CREDENTIAL,te=I.a.TYPE_MODAL_CREDENTIAL;function ne(e){var t=e,n=t.isModalVisible,o=t.handleModal,s=t.isLoading,l=Object(c.a)(t,$),E=Object(d.b)(),O=Object(p.g)(),b=Object(f.sb)(f.kb),m=P.yb.SOFT_TOKEN,h=Object(d.c)(T.e.token),x=Object(d.c)(j.c.otpType),I=Object(d.c)(j.c.countSendOtpSMS),L=Object(d.c)(u.c.credential),g=x===P.Lb,D=I>P.Sb?"spa.modal.otp.button.resendCode":"spa.modal.otp.button.sendCode",F=_.a.useContext(),v=F.unregister,k=F.clearErrors;return r.b.useEffect((function(){return function(){v(L),k(),E(A.a.clean()),E(j.a.cleanModalOTP())}}),[E,v,k,L]),Object(S.jsx)(i.a,Object(a.a)(Object(a.a)({name:ee,tag:"section",type:te},l),{},{children:Object(S.jsxs)(M.a,{open:n,title:"spa.modal.".concat(L,".title"),onClose:o,children:[!s&&Object(S.jsxs)(r.b.Fragment,{children:[Object(S.jsx)(M.a.Body,{children:Object(S.jsx)(Z,{credential:L})}),Object(S.jsx)(M.a.Footer,{children:Object(S.jsxs)("div",{className:R.a.footer,children:[function(e){switch(e){case"otp":return x?Object(S.jsxs)(r.b.Fragment,{children:[!g&&Object(S.jsx)(N.a,{label:{uuid:D},onClick:U}),Object(S.jsx)(N.a,{label:{uuid:"spa.modal.otp.accept.button"},type:"submit"})]}):Object(S.jsx)(N.a,{label:{uuid:"spa.otp.not.assign.button"},onClick:Y});case"password":case"pin":return Object(S.jsx)(N.a,{label:{uuid:"spa.global.accept"},type:"submit"});default:return}}(L),Object(S.jsx)(N.a,{label:{uuid:"spa.modal.otp.cancel.button"},variant:"outlined",onClick:o})]})})]}),s&&Object(S.jsx)(C.a,{})]})}));function Y(){o(),O(b.replace(f.c,m))}function U(){h&&E(j.b.sendOtpOverSms({accessToken:h}))}}ne.defaultProps={isLoading:!1};var ae=n(84),oe=n(757),ce=n.n(oe),re=n(758),ie=n.n(re),se=["id","name","label","onCompleted"],le=ie.a.NAME_INPUT_TOKEN_FIELD,Ee=ie.a.TYPE_INPUT_TOKEN_FIELD,de={label:P.D,onCompleted:function(){},placeholder:P.D},ue=r.b.memo((function(e){var t=e.id,n=e.name,s=e.label,l=e.onCompleted,E=Object(c.a)(e,se),d=r.b.useState(P.D),u=Object(o.a)(d,2),T=u[0],O=u[1];return Object(S.jsxs)(i.a,{name:le,type:Ee,children:[Object(S.jsx)(g.TokenField,Object(a.a)({id:t||P.D,label:s||P.D,onChange:function(e){var t=e.toString();t!==T&&(O(t),l&&l(t))}},E)),Object(S.jsx)(V.a,{className:ce.a.hideInput,defaultValue:T,label:P.D,name:n})]})}));function Te(e){var t=_.a.useContext();return Object(S.jsx)(ue,Object(a.a)({methods:t},e))}Te.defaultProps=de;var Oe=n(136),be=n(759),_e=n.n(be),je=n(760),Pe=n.n(je),me=["visible","isLoading","handleCancel","isSubmitToken"],pe=Pe.a.NAME_TOKEN_CREDENTIAL,Ne=Pe.a.TYPE_TOKEN_CREDENTIAL;function Me(e){var t=e,n=t.visible,o=t.isLoading,s=t.handleCancel,T=t.isSubmitToken,O=Object(c.a)(t,me),j=Object(d.b)(),p=Object(d.c)(m.c.isDesktop),f=Object(l.a)().getValueConfig,A=Object(E.a)(f("safeway.otps.soft.length")),h=Object(d.c)(u.c.isOtpRequiredError),R=Object(d.c)(u.c.isOtpLengthError),x=_.a.useContext(),I=x.clearErrors,L=x.unregister;return r.b.useEffect((function(){n||(L("otp"),I())}),[n,L,I]),Object(S.jsxs)(i.a,Object(a.a)(Object(a.a)({},O),{},{name:pe,tag:"section",type:Ne,children:[n&&Object(S.jsxs)("div",{className:_e.a.tokenContainer,children:[Object(S.jsxs)("div",{className:_e.a.tokenContent,children:[Object(S.jsx)(g.Icon,{className:_e.a.icon,name:"lockPadlock",size:"large",stroke:"primary"}),Object(S.jsx)(b.b,{className:_e.a.title,tag:"h5",uuid:"spa.credential.token.title"}),Object(S.jsx)(b.b,{className:_e.a.text,uuid:"spa.credential.token.text"}),Object(S.jsx)(Te,{name:"otp",placeholder:P.D,tokenLength:Number(A),onCompleted:function(e){Object(ae.b)(),I(),h&&e&&j(u.a.setOtpRequiredError(!1));R&&e.length===Number(A)&&j(u.a.setOtpLengthError(!1))}})]}),Object(S.jsxs)("div",{className:_e.a.tokenButtons,children:[Object(S.jsx)(N.a,{label:{uuid:"spa.credential.token.button.confirm"},type:"submit"}),Object(S.jsx)(N.a,{label:{uuid:"spa.credential.token.button.cancel"},variant:"text",onClick:s})]}),p&&Object(S.jsx)(Oe.a,{uuid:"tokenExample"})]}),Object(S.jsx)(M.a,{open:o&&(n||T),children:Object(S.jsxs)(M.a.Body,{children:[Object(S.jsx)(C.a,{name:"padlockToken"}),Object(S.jsx)(b.b,{align:"center",className:_e.a.textLoading,color:"gray-dark",uuid:"spa.credential.token.loading"})]})})]}))}var fe=n(761),Ae=n.n(fe),Ce=n(762),he=n.n(Ce),Re=he.a.NAME_SIGN_AND_ACCEPT,xe=he.a.TYPE_SIGN_AND_ACCEPT;function Ie(e){var t=e.message;return Object(S.jsx)(i.a,Object(a.a)(Object(a.a)({},e),{},{name:Re,type:xe,children:Object(S.jsxs)("div",{className:Ae.a.signAndAcceptContent,children:[Object(S.jsx)(b.b,{className:Ae.a.title,tag:"h5",uuid:"spa.suppliers.generatePayment.signAndAccept.title"}),Object(S.jsx)(b.b,{className:Ae.a.text,children:Object(S.jsx)("span",{dangerouslySetInnerHTML:{__html:t}})})]})}))}Ie.defaultProps={};var Le=n(763),ge=n.n(Le),De=n(764),Fe=n.n(De),Se=["children","idActivityToRead","schema","onSubmit","isLoading","callbackValidate","newTokenCredential","onCredentialCancel","descriptionSignAndAccept"],ve=Fe.a.NAME_FORM_CREDENTIAL,ke=Fe.a.TYPE_FORM_CREDENTIAL,Ye={callbackValidate:void 0,descriptionSignAndAccept:P.D,isLoading:!1,newTokenCredential:!1,onCredentialCancel:void 0};function Ue(e){var t=e,n=t.children,p=t.idActivityToRead,N=t.schema,M=t.onSubmit,f=t.isLoading,A=t.callbackValidate,C=t.newTokenCredential,h=t.onCredentialCancel,R=t.descriptionSignAndAccept,x=Object(c.a)(t,Se),I=Object(d.b)(),L=Object(b.c)().textGet,g=Object(d.c)(m.c.isMobile),D=Object(j.e)(),F=D.isSeedPresent,v=D.softToken,k=r.b.useState(!1),Y=Object(o.a)(k,2),U=Y[0],H=Y[1],y=Object(d.c)(T.e.token),V=Object(l.a)().getValueConfig,B=Object(E.a)(V("safeway.otps.soft.length")),w=L({uuid:"spa.modal.otp.error",replace:String(B)}),K=L({uuid:"spa.generic.field.error.required"}),G=L({uuid:"spa.generic.field.error.incorrectData"}),q=Object(d.c)(u.c.credential),X=Object(d.c)(j.c.otpType),W=Object(d.c)(u.c.isOtpFormTokenVisible),z=r.b.useState(P.D),J=Object(o.a)(z,2),Q=J[0],Z=J[1],$=Object(d.c)(u.c.isResetCredential),ee=X===P.Lb,te=r.b.useCallback((function(){Z(g&&ee&&F?v:P.D)}),[g,ee,v,F]);r.b.useEffect((function(){te()}),[te]),r.b.useEffect((function(){return function(){I(u.a.setOtpFormTokenVisible(!1))}}),[I]);var ae=r.b.useMemo((function(){return"otp"===q&&ee&&C}),[q,ee,C]),oe=r.b.useMemo((function(){return Boolean(ae&&Q)}),[ae,Q]),ce=r.b.useMemo((function(){return Boolean(W||U)}),[W,U]),re={otp:s.e.object({otp:Object(s.c)((function(e){return e?(Object(O.s)(String(e),B)||I(u.a.setOtpLengthError(!0)),Object(O.d)(Object(O.m)(B),w)):(I(u.a.setOtpRequiredError(!0)),Object(O.d)(s.e.string.required(),K))}))}),pin:s.e.object({pin:Object(O.n)({textErrorRequired:K,textErrorData:G})}),password:s.e.object({password:Object(O.d)(s.e.string.required(),K)}),default:s.e.object({})},ie=q&&ce?q:"default",se=Object(s.a)(N,re[ie]);r.b.useEffect((function(){y&&I(u.b.getCredential({token:y,idActivityToRead:p}))}),[I,y,p]);var le=r.b.useCallback((function(){I(u.a.setOtpFormTokenVisible(!1)),H(!1)}),[I]);return r.b.useEffect((function(){$&&(le(),I(u.a.setIsResetCredential(!1)))}),[$,le,I]),Object(S.jsx)(i.a,{name:ve,tag:"section",type:ke,children:Object(S.jsxs)(_.a,Object(a.a)(Object(a.a)({schema:se,onSubmit:function(e){if(A&&!A(e))return;if(ce||oe)return oe?void M(Object(a.a)(Object(a.a)({},e),{},{otp:Q})):void M(e);if(ae)return void de();Ee()}},x),{},{children:[Object(S.jsx)("div",{className:W?ge.a.hidden:P.D,children:n}),R&&W&&Object(S.jsx)(Ie,{message:R}),Object(S.jsx)(Me,{handleCancel:de,isLoading:f,isSubmitToken:oe,visible:W}),U&&Object(S.jsx)(ne,{handleModal:Ee,isLoading:f,isModalVisible:U})]}))});function Ee(){h&&h(),H(!U)}function de(){h&&h(),I(u.a.setOtpFormTokenVisible(!W))}}Ue.defaultProps=Ye},751:function(e,t,n){e.exports={NAME_MODAL_CREDENTIAL:"ModalCredential",TYPE_MODAL_CREDENTIAL:"Page",NAME_INPUTCREDENTIAL:"InputCredential",TYPE_INPUTCREDENTIAL:"Element",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",footer:"_rules_footer__2BOq0"}},752:function(e,t,n){e.exports={NAME_MODAL_CREDENTIAL:"ModalCredential",TYPE_MODAL_CREDENTIAL:"Page"}},753:function(e,t,n){e.exports={NAME_INPUT_PIN:"InputPin",TYPE_INPUT_PIN:"Element"}},754:function(e,t,n){e.exports={NAME_INPUT_OTP:"InputOTP",TYPE_INPUT_OTP:"Element",NAME_INPUT_FIELD:"InputField",TYPE_INPUT_FIELD:"Element",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",hiddenInput:"_rules_hiddenInput__2ErA8"}},755:function(e,t,n){e.exports={NAME_INPUT_OTP:"InputOTP",TYPE_INPUT_OTP:"Element"}},756:function(e,t,n){e.exports={NAME_INPUTCREDENTIAL:"InputCredential",TYPE_INPUTCREDENTIAL:"Element"}},757:function(e,t,n){e.exports={NAME_INPUT_TOKEN_FIELD:"InputTokenField",TYPE_INPUT_TOKEN_FIELD:"Element",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",hideInput:"_rules_hideInput__1hgfP"}},758:function(e,t,n){e.exports={NAME_INPUT_TOKEN_FIELD:"InputTokenField",TYPE_INPUT_TOKEN_FIELD:"Element"}},759:function(e,t,n){e.exports={NAME_TOKEN_CREDENTIAL:"TokenCredential",TYPE_TOKEN_CREDENTIAL:"Page",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",tokenContainer:"_rules_tokenContainer__13cE1",tokenContent:"_rules_tokenContent__d109W",icon:"_rules_icon__2xM8n",title:"_rules_title__2_fbq",text:"_rules_text__14rPq",tokenButtons:"_rules_tokenButtons__2NN5b",textLoading:"_rules_textLoading__IwL3t"}},760:function(e,t,n){e.exports={NAME_TOKEN_CREDENTIAL:"TokenCredential",TYPE_TOKEN_CREDENTIAL:"Page"}},761:function(e,t,n){e.exports={NAME_SIGN_AND_ACCEPT:"SignAndAccept",TYPE_SIGN_AND_ACCEPT:"Element",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",signAndAcceptContent:"_rules_signAndAcceptContent__34N2G",title:"_rules_title__1o7HG",text:"_rules_text__3HvY8"}},762:function(e,t,n){e.exports={NAME_SIGN_AND_ACCEPT:"SignAndAccept",TYPE_SIGN_AND_ACCEPT:"Element"}},763:function(e,t,n){e.exports={NAME_FORM_CREDENTIAL:"FormCredential",TYPE_FORM_CREDENTIAL:"Page",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",hidden:"_rules_hidden__hTDXa"}},764:function(e,t,n){e.exports={NAME_FORM_CREDENTIAL:"FormCredential",TYPE_FORM_CREDENTIAL:"Page"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=13.62feadb2.chunk.js.map