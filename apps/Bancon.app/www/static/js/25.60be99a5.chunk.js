(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[25],{196:function(e,t,a){"use strict";a.r(t),a.d(t,"default",(function(){return m}));a(11);var n=a(74),i=a(99),c=a(6),o=a(524),r=a(8),d=a(150),u=a(336),b=a(337),s=a(338),j=a(339),l=a(340),p=a(341),f=a(378),O=a(10);function m(){var e=Object(i.a)().getValueConfig,t=Object(r.c)(d.d.isStep1),a=Object(r.c)(d.d.isStep1Pep),m=Object(r.c)(d.d.isStep2),g=Object(r.c)(d.d.isStep2SO),h=Object(r.c)(d.d.isStep3),x=Object(r.c)(d.d.isStep3RF),v=Object(n.a)(e("backend.webservices.core.version.target.Cliente_ActualizarDatosCalificacion"))===c.zb.BANTOTAL;return Object(O.jsx)(o.b,{steps:{step1:{condition:t,component:u.default},step2:{condition:!v&&a,component:b.default},step2BT:{condition:v&&a,component:s.default},step3:{condition:m,component:j.default},step4:{condition:g,component:l.default},step5:{condition:h,component:p.default},step6:{condition:x,component:f.default}}})}},336:function(e,t,a){"use strict";a.r(t),a.d(t,"default",(function(){return h}));var n=a(11),i=a(38),c=a(82),o=a(489),r=a(488),d=a(507),u=a(187),b=a(39),s=a(150),j=a(149),l=a(8),p=a(506),f=a(147),O=a(431),m=a.n(O),g=a(10);function h(){var e=Object(l.b)(),t=Object(i.c)().textGet,a=t({uuid:"spa.generic.field.error.required"}),O=t({uuid:"spa.onboarding.ddjj.form.radio.yes"}),h=t({uuid:"spa.onboarding.ddjj.form.radio.no"}),x=Object(l.c)(s.d.isPep)?O:h,v=Object(l.c)(f.c.exchangeToken),S=b.e.object({isPEP:Object(u.d)(b.e.string.required(),a)}),P=n.b.useCallback((function(){e(j.a.cleanPersonalData())}),[e]);return Object(g.jsx)(o.a,{"header-onBack":P,children:Object(g.jsx)("section",{children:Object(g.jsxs)(r.a,{schema:S,onSubmit:function(t){if(!v)return;var a=t.isPEP===O;e(s.c.updateStatus({exchangeToken:v,status:a?s.a.PEP_YES:s.a.PEP_NO})),e(s.b.setIsPep(a))},children:[Object(g.jsxs)("header",{children:[Object(g.jsx)(i.b,{tag:"h1",uuid:"spa.onboarding.ddjj.pep.title"}),Object(g.jsx)(i.b,{tag:"h2",uuid:"spa.onboarding.ddjj.pep.step1"})]}),Object(g.jsx)(i.b,{tag:"span",uuid:"spa.onboarding.ddjj.pep.label"}),Object(g.jsxs)(p.a,{name:"isPEP",value:x,children:[Object(g.jsx)(d.a,{id:"isPEP-".concat(O),label:O,name:"isPEP",value:O}),Object(g.jsx)(d.a,{id:"isPEP-".concat(h),label:h,name:"isPEP",value:h})]}),Object(g.jsx)("div",{className:m.a.infoContainer,children:Object(g.jsx)(i.b,{tag:"p",uuid:"spa.onboarding.ddjj.pep.info"})}),Object(g.jsx)(c.a,{label:{uuid:"spa.onboarding.ddjj.form.continue"},type:"submit"})]})})})}},337:function(e,t,a){"use strict";a.r(t),a.d(t,"default",(function(){return S}));a(11);var n=a(38),i=a(82),c=a(489),o=a(488),r=a(503),d=a(507),u=a(494),b=a(270),s=a(187),j=a(39),l=a(99),p=a(506),f=a(8),O=a(150),m=a(147),g=a(6),h=a(431),x=a.n(h),v=a(10);function S(){var e=Object(f.b)(),t=Object(n.c)().textGet,a=t({uuid:"spa.generic.field.error.required"}),h=Object(l.a)().getValueConfig,S=Object(f.c)(m.c.exchangeToken),P=Object(f.c)(O.d.fetching),y=Object(f.c)(O.d.publicPositionDeclaration),E=Object(f.c)(O.d.publicPositionType),D=Object(f.c)(O.d.publicPosition),T=g.H,F=g.Sb,C=t({uuid:"spa.onboarding.error.exceeds.maximum.allowed",replace:"".concat(T)}),k=j.e.object({declaration:Object(s.d)(j.e.string.required(),a),publicFunctionary:Object(s.d)(j.e.string.required(),a),publicPosition:Object(j.c)((function(e){return e?Object(s.d)(j.e.string.ofLength(F,T),C):Object(s.d)(j.e.string.required(),a)}))}),N=function(){var e=t({uuid:"spa.onboarding.ddjj.pep.form.combo.1"}),a=t({uuid:"spa.onboarding.ddjj.pep.form.combo.2"});return[{id:"pep",value:e},{id:"family",value:a}].map((function(e){var t=e.id,a=e.value;return{isDisabled:!1,value:t,label:a,searchKey:a}}))}(),_=N.find((function(e){return e.value===y}));return P?Object(v.jsx)(b.a,{}):Object(v.jsx)(c.a,{"header-onBack":function(){e(O.b.cleanPepDeclaration())},children:Object(v.jsx)("section",{children:Object(v.jsxs)(o.a,{schema:k,onSubmit:function(t){if(!S)return;e(O.c.updateStatus({status:O.a.PEP_FINISHED,exchangeToken:S})),e(O.b.pepDeclaration(t))},children:[Object(v.jsx)("header",{children:Object(v.jsx)(n.b,{tag:"h1",uuid:"spa.onboarding.ddjj.pep.form.title"})}),Object(v.jsx)("div",{className:x.a.formContainer,children:Object(v.jsx)(r.a,{defaultOption:_,id:"declaration",label:t({uuid:"spa.onboarding.ddjj.pep.form.label.1"}),name:"declaration",options:N})}),Object(v.jsxs)("div",{className:x.a.formContainer,children:[Object(v.jsx)(n.b,{tag:"p",uuid:"spa.onboarding.ddjj.pep.form.label.2.pep"}),Object(v.jsx)(p.a,{name:"publicFunctionary",value:E,children:"".concat(h("onboarding.ddjj.pep.form.label.2.types")).split("|").map((function(e){var a=t({uuid:"spa.onboarding.ddjj.pep.form.label.2.type.".concat(e)});return Object(v.jsx)(d.a,{id:"publicFunctionary-".concat(a),label:a,name:"publicFunctionary",value:e},a)}))})]}),Object(v.jsx)("div",{className:x.a.formContainer,children:Object(v.jsx)(u.a,{defaultValue:D,id:"publicPosition",label:t({uuid:"spa.onboarding.ddjj.pep.form.label.3.pep"}),name:"publicPosition"})}),Object(v.jsx)(i.a,{label:{uuid:"spa.onboarding.ddjj.form.continue"},type:"submit"})]})})})}},338:function(e,t,a){"use strict";a.r(t),a.d(t,"default",(function(){return D}));var n=a(2),i=a(16),c=a(11),o=a(38),r=a(82),d=a(489),u=a(488),b=a(503),s=a(507),j=a(494),l=a(566),p=a(270),f=a(187),O=a(39),m=a(99),g=a(506),h=a(8),x=a(150),v=a(147),S=a(6),P=a(431),y=a.n(P),E=a(10);function D(){var e=Object(h.b)(),t=Object(o.c)().textGet,a=Object(m.a)().getValueConfig,P=c.b.useState(!1),D=Object(i.a)(P,2),T=D[0],F=D[1],C=Object(h.c)(v.c.exchangeToken),k=Object(h.c)(x.d.fetching),N=Object(h.c)(x.d.publicPositionDeclarationBT),_=Object(h.c)(x.d.publicPositionType),A=Object(h.c)(x.d.publicPosition),I=Object(h.c)(x.d.entitiesPEP),q=Object(h.c)(x.d.publicChargeEntity),R=Object(h.c)(x.d.publicChargeDateStart),B=Object(h.c)(x.d.publicChargeEntityOther),V=S.Gb,w=S.Sb,Y="Otro",G=new Date,L=new Date((new Date).setFullYear((new Date).getFullYear()-S.Cb)),K=t({uuid:"spa.generic.field.error.required"}),H=t({uuid:"spa.onboarding.error.exceeds.maximum.allowed",replace:"".concat(V)}),M=t({uuid:"spa.onboarding.ddjj.pep.form.label.1"}),U=t(T?{uuid:"spa.onboarding.ddjj.pep.form.label.3.family"}:{uuid:"spa.onboarding.ddjj.pep.form.label.3.pep"}),z=t({uuid:"spa.onboarding.ddjj.pep.form.label.4.pep"}),J=t({uuid:"spa.onboarding.ddjj.pep.form.label.5.pep"}),Q=t({uuid:"spa.onboarding.ddjj.pep.form.label.6.pep"}),W=c.b.useState(!1),X=Object(i.a)(W,2),Z=X[0],$=X[1];c.b.useEffect((function(){C&&e(x.c.getEntitiesPEP({exchangeToken:C}))}),[e,C]);var ee=O.e.object({declarationBT:Object(f.d)(O.e.string.required(),K),publicFunctionary:Object(f.d)(O.e.string.required(),K),publicPosition:Object(O.c)((function(e){return String(e)&&e?String(e).trim()?Object(f.d)(O.e.string.ofLength(w,V),H):Object(f.d)(Object(f.l)(),K):Object(f.d)(O.e.string.required(),K)})),clientAdditionalDataFunctionaryPublicDateStart:Object(f.d)(O.e.date(),K),clientAdditionalDataFunctionaryPublicChargeEntity:Object(f.d)(O.e.string.required(),K),clientAdditionalDataFunctionaryPublicChargeEntityOther:Object(O.c)((function(e,t){var a,n=t.branch[S.Sb].clientAdditionalDataFunctionaryPublicChargeEntity;if((null===(a=I.find((function(e){return e.value===n})))||void 0===a?void 0:a.value)===Y){if(!String(e)||!e)return Object(f.d)(O.e.string.required(),K);if(!String(e).trim())return Object(f.d)(Object(f.l)(),K)}return O.e.any()}))}),te=function(){var e=t({uuid:"spa.onboarding.ddjj.pep.form.combo.1"}),a=t({uuid:"spa.onboarding.ddjj.pep.form.combo.2"}),n=t({uuid:"spa.onboarding.ddjj.pep.form.combo.3"});return[{id:S.hb,value:e},{id:S.Kb,value:a},{id:S.Ib,value:n}].map((function(e){var t=e.id,a=e.value;return{isDisabled:!1,value:t,label:a,searchKey:a}}))}(),ae=te.find((function(e){return e.value===N})),ne=I.find((function(e){return e.value===q}));return k?Object(E.jsx)(p.a,{}):Object(E.jsx)(d.a,{"header-onBack":function(){e(x.b.cleanPepDeclaration())},children:Object(E.jsx)("section",{children:Object(E.jsxs)(u.a,{schema:ee,onSubmit:function(t){if(!C)return;var a=t.clientAdditionalDataFunctionaryPublicDateStart.toString(),i=Object(n.a)(Object(n.a)({},t),{},{clientAdditionalDataFunctionaryPublicDateStart:a});e(x.c.updateStatus({status:x.a.PEP_FINISHED,exchangeToken:C})),e(x.b.pepDeclarationBT(i))},children:[Object(E.jsx)("header",{children:Object(E.jsx)(o.b,{tag:"h1",uuid:"spa.onboarding.ddjj.pep.form.title"})}),Object(E.jsx)("div",{className:y.a.formContainer,children:Object(E.jsx)(b.a,{defaultOption:ae,label:M,name:"declarationBT",options:te,onSelectOption:function(e){var t=e.value,a=t===S.Kb||t===S.Ib;F(a)}})}),Object(E.jsxs)("div",{className:y.a.formContainer,children:[Object(E.jsx)(o.b,{tag:"p",uuid:T?"spa.onboarding.ddjj.pep.form.label.2.family":"spa.onboarding.ddjj.pep.form.label.2.pep"}),Object(E.jsx)(g.a,{name:"publicFunctionary",value:_,children:"".concat(a("onboarding.ddjj.pep.form.label.2.types")).split(S.lb).map((function(e){var a=t({uuid:"spa.onboarding.ddjj.pep.form.label.2.type.".concat(e)});return Object(E.jsx)(s.a,{id:"publicFunctionary-".concat(a),label:a,name:"publicFunctionary",value:e},a)}))})]}),Object(E.jsx)("div",{className:y.a.formContainer,children:Object(E.jsx)(j.a,{defaultValue:A,label:U,name:"publicPosition"})}),Object(E.jsx)("div",{className:y.a.formContainer,children:Object(E.jsx)(l.a,{hasMonthYearDropDown:!0,defaultValue:R,label:z,maxDate:G,minDate:L,name:"clientAdditionalDataFunctionaryPublicDateStart"})}),Object(E.jsx)("div",{className:y.a.formContainer,children:Object(E.jsx)(b.a,{defaultOption:ne,label:J,name:"clientAdditionalDataFunctionaryPublicChargeEntity",options:I.map((function(e){var t=e.label,a=e.value;return{value:a,label:t,searchKey:a}})),onSelectOption:function(e){if(e.value===Y)return void $(!0);$(!1)}})}),Z&&Object(E.jsx)("div",{className:y.a.formContainer,children:Object(E.jsx)(j.a,{defaultValue:B,label:Q,name:"clientAdditionalDataFunctionaryPublicChargeEntityOther"})}),Object(E.jsx)(r.a,{label:{uuid:"spa.onboarding.ddjj.form.continue"},type:"submit"})]})})})}},339:function(e,t,a){"use strict";a.r(t),a.d(t,"default",(function(){return h}));var n=a(11),i=a(38),c=a(82),o=a(489),r=a(488),d=a(507),u=a(187),b=a(39),s=a(150),j=a(8),l=a(506),p=a(147),f=a(270),O=a(431),m=a.n(O),g=a(10);function h(){var e=Object(j.b)(),t=Object(i.c)().textGet,a=Object(j.c)(s.d.fetching),O=t({uuid:"spa.generic.field.error.required"}),h=t({uuid:"spa.onboarding.ddjj.form.radio.yes"}),x=t({uuid:"spa.onboarding.ddjj.form.radio.no"}),v=Object(j.c)(s.d.isSubject)?h:x,S=Object(j.c)(p.c.exchangeToken),P=b.e.object({isSubject:Object(u.d)(b.e.string.required(),O)}),y=n.b.useCallback((function(){e(s.b.cleanPepDeclaration())}),[e]);return a?Object(g.jsx)(f.a,{}):Object(g.jsx)(o.a,{"header-onBack":y,children:Object(g.jsx)("section",{children:Object(g.jsxs)(r.a,{schema:P,onSubmit:function(t){if(!S)return;var a=t.isSubject===h;e(s.c.updateStatus({status:a?s.a.SO_YES:s.a.SO_NO,exchangeToken:S})),e(s.b.setIsSubject(a))},children:[Object(g.jsxs)("header",{children:[Object(g.jsx)(i.b,{tag:"h1",uuid:"spa.onboarding.ddjj.so.title"}),Object(g.jsx)(i.b,{tag:"h2",uuid:"spa.onboarding.ddjj.so.step"})]}),Object(g.jsx)(i.b,{tag:"span",uuid:"spa.onboarding.ddjj.so.label"}),Object(g.jsxs)(l.a,{name:"isSubject",value:v,children:[Object(g.jsx)(d.a,{id:"isSubject-".concat(h),label:h,name:"isSubject",value:h}),Object(g.jsx)(d.a,{id:"isSubject-".concat(x),label:x,name:"isSubject",value:x})]}),Object(g.jsx)("div",{className:m.a.infoContainer,children:Object(g.jsx)(i.b,{tag:"p",uuid:"spa.onboarding.ddjj.so.info"})}),Object(g.jsx)(c.a,{label:{uuid:"spa.onboarding.ddjj.form.continue"},type:"submit"})]})})})}},340:function(e,t,a){"use strict";a.r(t),a.d(t,"default",(function(){return g}));a(11);var n=a(38),i=a(82),c=a(489),o=a(488),r=a(503),d=a(187),u=a(39),b=a(99),s=a(8),j=a(150),l=a(147),p=a(270),f=a(431),O=a.n(f),m=a(10);function g(){var e=Object(s.b)(),t=Object(n.c)().textGet,a=t({uuid:"spa.generic.field.error.required"}),f=Object(b.a)().getValueConfig,g=Object(s.c)(l.c.exchangeToken),h=Object(s.c)(j.d.fetching),x=Object(s.c)(j.d.subjectType),v=u.e.object({subjectType:Object(d.d)(u.e.string.required(),a)}),S="".concat(f("onboarding.ddjj.so.form.label.types")).split("|").map((function(e){return{value:t({uuid:"spa.onboarding.ddjj.so.form.combo.".concat(e)}),id:e}})).map((function(e){var t=e.id,a=e.value;return{isDisabled:!1,value:t,label:a,searchKey:a}})),P=S.find((function(e){return e.value===x}));return h?Object(m.jsx)(p.a,{}):Object(m.jsx)(c.a,{"header-onBack":function(){e(j.b.cleanSubjectType())},children:Object(m.jsx)("section",{children:Object(m.jsxs)(o.a,{schema:v,onSubmit:function(t){if(!g)return;e(j.c.updateStatus({status:j.a.SO_FINISHED,exchangeToken:g})),e(j.b.setSubjectType(t))},children:[Object(m.jsx)("header",{children:Object(m.jsx)(n.b,{tag:"h1",uuid:"spa.onboarding.ddjj.so.form.title"})}),Object(m.jsx)("div",{className:O.a.formContainer,children:Object(m.jsx)(r.a,{defaultOption:P,id:"subjectType",label:t({uuid:"spa.onboarding.ddjj.so.form.label"}),name:"subjectType",options:S})}),Object(m.jsx)(i.a,{label:{uuid:"spa.onboarding.ddjj.form.continue"},type:"submit"})]})})})}},341:function(e,t,a){"use strict";a.r(t),a.d(t,"default",(function(){return h}));var n=a(11),i=a(38),c=a(82),o=a(489),r=a(488),d=a(507),u=a(187),b=a(39),s=a(150),j=a(8),l=a(506),p=a(147),f=a(270),O=a(431),m=a.n(O),g=a(10);function h(){var e=Object(j.b)(),t=Object(i.c)().textGet,a=t({uuid:"spa.generic.field.error.required"}),O=t({uuid:"spa.onboarding.ddjj.form.radio.yes"}),h=t({uuid:"spa.onboarding.ddjj.form.radio.no"}),x=Object(j.c)(s.d.hasRF)?O:h,v=Object(j.c)(p.c.exchangeToken),S=Object(j.c)(s.d.fetching),P=b.e.object({hasRF:Object(u.d)(b.e.string.required(),a)}),y=n.b.useCallback((function(){e(s.b.cleanSubjectType())}),[e]);return S?Object(g.jsx)(f.a,{}):Object(g.jsx)(o.a,{"header-onBack":y,children:Object(g.jsx)("section",{children:Object(g.jsxs)(r.a,{schema:P,onSubmit:function(t){if(!v)return;var a=t.hasRF===O;e(s.c.updateStatus({status:a?s.a.RF_YES:s.a.RF_NO,exchangeToken:v})),e(s.b.setHasRF(a))},children:[Object(g.jsxs)("header",{children:[Object(g.jsx)(i.b,{tag:"h1",uuid:"spa.onboarding.ddjj.rf.title"}),Object(g.jsx)(i.b,{tag:"h2",uuid:"spa.onboarding.ddjj.rf.step"})]}),Object(g.jsx)(i.b,{tag:"span",uuid:"spa.onboarding.ddjj.rf.label"}),Object(g.jsxs)(l.a,{name:"hasRF",value:x,children:[Object(g.jsx)(d.a,{id:"hasRF-".concat(O),label:O,name:"hasRF",value:O}),Object(g.jsx)(d.a,{id:"hasRF-".concat(h),label:h,name:"hasRF",value:h})]}),Object(g.jsx)("div",{className:m.a.infoContainer,children:Object(g.jsx)(i.b,{tag:"p",uuid:"spa.onboarding.ddjj.rf.info"})}),Object(g.jsx)(c.a,{label:{uuid:"spa.onboarding.ddjj.form.continue"},type:"submit"})]})})})}},524:function(e,t,a){"use strict";a.d(t,"a",(function(){return u})),a.d(t,"b",(function(){return b}));var n=a(2),i=a(16),c=a(11),o=a(531),r=a.n(o),d=a(10),u=r.a.NAME_STEPPER;r.a.TYPE_STEPPER;function b(e){var t=e,a=t.steps,o=t.handleFallback,r=t.handleChangeStep,u=Object.entries(a).filter((function(e){return Boolean(e[1].condition)})).map((function(e){var t=Object(i.a)(e,2),a=t[0],c=t[1],o=c.component;return Object(d.jsx)(o,Object(n.a)({},c.props||{}),a)}),{}).shift(),b=c.b.useState(null===u||void 0===u?void 0:u.key),s=Object(i.a)(b,2),j=s[0],l=s[1];return c.b.useEffect((function(){!u&&o&&o()}),[o,u]),c.b.useEffect((function(){j!==(null===u||void 0===u?void 0:u.key)&&r&&r(),l(null===u||void 0===u?void 0:u.key)}),[j,r,null===u||void 0===u?void 0:u.key]),u||null}b.displayName=u,b.defaultProps={handleChangeStep:function(){},handleFallback:function(){}}},531:function(e,t,a){e.exports={NAME_STEPPER:"Stepper",TYPE_STEPPER:"Element"}},566:function(e,t,a){"use strict";a.d(t,"a",(function(){return O}));var n=a(2),i=a(19),c=a(11),o=a(50),r=a(41),d=a(488),u=a(567),b=a.n(u),s=a(10),j=["id","name","methods","onChange","defaultValue"],l=b.a.NAME_INPUT_DATE_FIELD,p=b.a.TYPE_INPUT_DATE_FIELD,f=c.b.memo((function(e){var t=e.id,a=e.name,d=e.methods,u=e.onChange,b=e.defaultValue,f=Object(i.a)(e,j),O=d.register,m=d.formState,g=d.setValue,h=d.clearErrors,x=m.errors,v="".concat(a),S=x[a];return c.b.useEffect((function(){g(v,b||void 0)}),[b,v,g]),Object(s.jsx)(r.a,{name:l,type:p,children:Object(s.jsx)(o.DateField,Object(n.a)(Object(n.a)(Object(n.a)({id:t||a},S&&{error:String(S.message)}),O(v)),{},{onChange:function(e){g(v,e),h([v]),u&&u(e)}},f))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function O(e){var t=d.a.useContext();return Object(s.jsx)(f,Object(n.a)({methods:t},e))}O.displayName=l},567:function(e,t,a){e.exports={NAME_INPUT_DATE_FIELD:"InputDateField",TYPE_INPUT_DATE_FIELD:"Element"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=25.60be99a5.chunk.js.map