(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[83,295],{217:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return E}));var a=n(16),c=n(11),s=n(497),o=n(38),i=n(532),r=n(6),l=n(51),u=n(8),d=n(117),b=n(33),j=n(270),p=n(500),m=n(50),O=n(136),f=n(472),x=n.n(f),h=n(10);function E(){var e=c.b.useState(void 0),t=Object(a.a)(e,2),n=t[0],f=t[1],E=c.b.useState(r.D),v=Object(a.a)(E,2),T=v[0],g=v[1],_=c.b.useState(r.D),k=Object(a.a)(_,2),N=k[0],y=k[1],M=c.b.useState(r.D),I=Object(a.a)(M,2),w=I[0],A=I[1],P=Object(l.qb)(),R=Object(l.sb)(l.n),D=Object(o.c)().textGet,S=Object(u.c)(d.c.sendMoneyResponse),F=Object(u.c)(d.c.sendMoneyRecieverInfo),L=Object(u.c)(d.c.sendMoneyOriginInfo),C=Object(u.c)(b.e.userFullName),U=Object(u.c)(b.e.documentNumber);c.b.useEffect((function(){if(S){var e="FINISHED"===S.status;f(e),g(e?"spa.modo.send.money.ticket.success.title":"spa.modo.send.money.ticket.rejected.title"),y(e?"spa.modo.send.money.ticket.success.description":"spa.modo.send.money.ticket.rejected.description"),A(e?"spa.modo.send.money.ticket.succesful.label":"spa.modo.send.money.ticket.rejected.label")}else P(R)}),[P,S,R]);var B=D({uuid:"spa.modo.send.money.title"}),H=Object(h.jsxs)(m.Box,{flex:!0,align:"baseline",children:[Object(h.jsx)(o.b,{"aria-label":B,tag:"h1",uuid:"spa.modo.send.money.title.short"}),Object(h.jsx)(O.a,{"aria-hidden":!0,alt:"modo",uuid:"logoModo"})]});return void 0===n?Object(h.jsx)(j.a,{}):Object(h.jsx)(s.a,{withFooter:!0,className:x.a.moneySentOk,hasNotifications:!1,children:Object(h.jsx)(i.a,{hasModoLogo:!0,isDownloadable:!0,isShareable:!0,buttonText:"spa.form.accept",handleButton:function(){P(R)},idTransaction:null===S||void 0===S?void 0:S.idTransaction,responseDescription:N,responseTitle:T,titleText:H,transactionStatus:null===S||void 0===S?void 0:S.status,children:Object(h.jsxs)("ul",{children:[Object(h.jsxs)("li",{children:[Object(h.jsx)(o.b,{tag:"span",uuid:"spa.modo.send.money.ticket.code"}),Object(h.jsx)(o.b,{className:x.a.ticketInfo,tag:"span",children:null===S||void 0===S?void 0:S.idTransactionShort})]}),Object(h.jsxs)("li",{children:[Object(h.jsx)(o.b,{tag:"span",uuid:"spa.modo.send.money.ticket.status"}),Object(h.jsx)(o.b,{className:x.a.ticketInfo,tag:"span",children:D({uuid:w})})]}),Object(h.jsxs)("li",{children:[Object(h.jsx)(o.b,{tag:"span",uuid:"spa.modo.send.money.ticket.date"}),Object(h.jsx)(o.b,{className:x.a.ticketInfo,tag:"span",children:null===S||void 0===S?void 0:S.paymentDate})]}),(null===S||void 0===S?void 0:S.requestNumber)&&Object(h.jsxs)("li",{children:[Object(h.jsx)(o.b,{tag:"span",uuid:"spa.modo.send.money.ticket.number"}),Object(h.jsx)(o.b,{className:x.a.ticketInfo,tag:"span",children:null===S||void 0===S?void 0:S.requestNumber})]}),Object(h.jsx)("li",{children:Object(h.jsx)(o.b,{className:x.a.subtitle,uuid:"spa.modo.send.money.info.subtitle1"})}),Object(h.jsxs)("li",{children:[Object(h.jsx)(o.b,{tag:"span",uuid:"spa.modo.send.money.ticket.name"}),Object(h.jsx)(o.b,{className:x.a.ticketInfo,tag:"span",children:C})]}),Object(h.jsxs)("li",{children:[Object(h.jsx)(o.b,{tag:"span",uuid:"spa.modo.send.money.ticket.cuit"}),Object(h.jsx)(o.b,{className:x.a.ticketInfo,tag:"span",children:U})]}),Object(h.jsxs)("li",{children:[Object(h.jsx)(o.b,{tag:"span",uuid:"spa.modo.send.money.ticket.account"}),Object(h.jsx)(o.b,{className:x.a.ticketInfo,tag:"span",children:null===L||void 0===L?void 0:L.debitAccount})]}),Object(h.jsxs)("li",{children:[Object(h.jsx)(o.b,{tag:"span",uuid:"spa.modo.send.money.ticket.amount"}),Object(h.jsx)(o.b,{className:x.a.ticketInfo,tag:"span",children:L&&Object(p.a)({currency:r.b,amount:L.amount})})]}),Object(h.jsx)("li",{children:Object(h.jsx)(o.b,{className:x.a.subtitle,uuid:"spa.modo.send.money.info.subtitle2"})}),Object(h.jsxs)("li",{children:[Object(h.jsx)(o.b,{tag:"span",uuid:"spa.modo.send.money.ticket.name"}),Object(h.jsx)(o.b,{className:x.a.ticketInfo,tag:"span",children:null===F||void 0===F?void 0:F.name})]}),Object(h.jsxs)("li",{children:[Object(h.jsx)(o.b,{tag:"span",uuid:"spa.modo.send.money.ticket.phone"}),Object(h.jsx)(o.b,{className:x.a.ticketInfo,tag:"span",children:null===F||void 0===F?void 0:F.phoneNumber})]}),Object(h.jsxs)("li",{children:[Object(h.jsx)(o.b,{tag:"span",uuid:"spa.modo.send.money.ticket.concept"}),Object(h.jsx)(o.b,{className:x.a.ticketInfo,tag:"span",uuid:"spa.modo.send.money.ticket.".concat(null===L||void 0===L?void 0:L.concept)})]}),Object(h.jsxs)("li",{children:[Object(h.jsx)(o.b,{tag:"span",uuid:"spa.modo.send.money.ticket.motive"}),Object(h.jsx)(o.b,{className:x.a.ticketInfo,tag:"span",children:null===L||void 0===L?void 0:L.motive})]})]})})})}},472:function(e,t,n){e.exports={NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_FORM:"Form",TYPE_FORM:"Element",moneySentOk:"_rules_moneySentOk__1ntgK",subtitle:"_rules_subtitle__n44c1",ticketInfo:"_rules_ticketInfo__dBDA4"}},499:function(e,t,n){"use strict";n.d(t,"a",(function(){return j}));var a=n(0),c=n(5);function s(e){var t=e.filename,n=e.path,a=e.flags;return new Promise((function(e,c){var s;function o(e){c(e)}(s=window.cordova.file[n],new Promise((function(e,t){window.resolveLocalFileSystemURL(s,(function(t){e(t)}),(function(e){t(e)}))}))).then((function(n){var c=n;c.getFile(t,a,(function(t){var n=new FileReader;t.createWriter((function(a){e({fileEntry:t,dirEntry:c,fileReader:n,fileWriter:a,fileWrite:function(e){return new Promise((function(t,n){a.onwriteend=function(){return t(a)},a.onerror=function(e){return n(e)},a.write(e)}))},fileRemove:function(){return new Promise((function(e,n){t.remove((function(){return e(!0)}),(function(e){return n(e)}))}))}})}),o)}),o)}))}))}var o=n(36),i=n(26),r=n(28);function l(){return u.apply(this,arguments)}function u(){return(u=Object(c.a)(Object(a.a)().mark((function e(){var t;return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(i.c)();case 2:if(e.sent&&cordova.plugins){e.next=5;break}throw i.a.CORDOVA_UNAVAILABLE;case 5:if(t=cordova.plugins.fileOpener2){e.next=8;break}throw i.a.PLUGIN_UNAVAILABLE;case 8:return e.abrupt("return",t);case 9:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function d(e){return b.apply(this,arguments)}function b(){return b=Object(c.a)(Object(a.a)().mark((function e(t){var n,c,s,o,u;return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.contentType,c=t.fileName,s=t.withDialog,e.next=3,Object(i.c)();case 3:if(e.sent){e.next=6;break}throw i.a.CORDOVA_UNAVAILABLE;case 6:return e.next=8,l();case 8:return o=e.sent,u=s?o.open:o.showOpenWithDialog,e.abrupt("return",new Promise((function(e,t){try{u(c,n,{success:function(){e({code:r.a.SUCCESS,value:!0})},error:function(e){function t(t){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}((function(e){t("boolean"===typeof e?new r.b(r.a.ERROR,o.open.name,r.c):new r.b(r.a.ERROR,o.open.name,e.message))}))})}catch(a){t(new r.b(r.a.ERROR_UNKNOWN,o.open.name,r.c))}})));case 11:case"end":return e.stop()}}),e)}))),b.apply(this,arguments)}function j(){var e=Object(o.i)(),t=e.isDesktop,n=e.isUnknown,i=e.platform;function r(e){var t=e.split(".").pop();return"png"===t||"jpg"===t||"gif"===t||"bmp"===t?"image/".concat(t):"pdf"===t?"application/".concat(t):"doc"===t||"docx"===t?"application/msword":"ppt"===t||"pptx"===t?"application/vnd.ms-powerpoint":"xls"===t||"xlsx"===t?"application/vnd.ms-excel":"xlsm"===t?"application/vnd.ms-excel.sheet.macroEnabled.12":"txt"===t?"text/plain":"zip"===t?"application/zip":void 0}return function(){var e=Object(c.a)(Object(a.a)().mark((function e(c,l){var u,b,j,p,m,O,f;return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(u=i===o.b.CORDOVA_ANDROID,!(b=r(c))){e.next=19;break}if(!t&&!n){e.next=9;break}return(j=document.createElement("a")).href=window.URL.createObjectURL(l),j.download=c,j.click(),e.abrupt("return");case 9:return e.next=11,s({filename:c,path:u?"externalApplicationStorageDirectory":"dataDirectory",flags:{create:!0,exclusive:!1}});case 11:return p=e.sent,m=p.fileWrite,O=p.fileEntry,e.next=16,m(l);case 16:return f={contentType:b,fileName:O.nativeURL,withDialog:!0},e.next=19,d(f);case 19:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}()}},501:function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));var a=512,c=0;function s(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:a,s=window.atob(e),o=[],i=c;i<s.length;i+=n){for(var r=s.slice(i,i+n),l=new Array(r.length),u=c;u<r.length;u++)l[u]=r.charCodeAt(u);o.push(new Uint8Array(l))}return new Blob(o,{type:t})}},508:function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var a=n(6);function c(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"pdf";if("string"===typeof e&&e.trim()){var n=e.trim().toLowerCase().replace(/[^a-zA-Z0-9]/g,a.Nb);return"".concat(n,".").concat(t)}var c=new Date,s=c.getMonth()+a.fb,o=(s<a.Fb?a.Ub:a.D)+s,i=c.getDate(),r=(i<a.Fb?a.Ub:a.D)+i;return"".concat(c.getFullYear(),"_").concat(o,"_").concat(r,".").concat(t)}},532:function(e,t,n){"use strict";n.d(t,"a",(function(){return y}));var a=n(16),c=n(11),s=n(41),o=n(36),i=n(50),r=n(6),l=n(8),u=n(33),d=n(271),b=n(501),j=n(154),p=n(499),m=n(38),O=n(82),f=n(533),x=n.n(f),h=n(534),E=n.n(h),v=n(508),T=n(270),g=n(10),_=E.a.NAME_TICKET,k=E.a.TYPE_TICKET,N={hasModoLogo:!1,isDownloadable:!1,isShareable:!1,navigateButton:{},responseDescription:r.D};function y(e){var t=e,n=t.idTransaction,r=t.buttonText,f=t.children,h=t.className,E=t.transactionStatus,N=t.responseTitle,y=t.responseDescription,M=t.navigateButton,I=t.hasModoLogo,w=t.titleText,A=t.handleButton,P=t.isDownloadable,R=t.isShareable,D=Object(l.b)(),S=Object(p.a)(),F=Object(o.i)().isDesktop,L=c.b.useState(!1),C=Object(a.a)(L,2),U=C[0],B=C[1],H=c.b.useState(!1),Y=Object(a.a)(H,2),z=Y[0],V=Y[1],K=Object(l.c)(u.e.token),G=Object(l.c)(j.c.fetching),W=Object(l.c)(j.c.fetchedFile),X=Object(l.c)(j.c.filename),q=Object(l.c)(j.c.content),J=P||R,Z=Object(v.a)(X),Q="string"===typeof w;c.b.useEffect((function(){D(j.a.clean())}),[D]),c.b.useEffect((function(){(z||U)&&K&&(W||X||q?(X&&q&&(U&&(S(Z,Object(b.a)(q)),B(!1)),z&&(Object(d.a)({options:{message:X,subject:X},files:[{fileName:Z,base64File:q}]}),V(!1))),D(j.a.setFetchedFile(!1))):D(j.b.generatePdf({token:K,idTransaction:n})))}),[q,D,U,W,X,Z,S,n,z,K]);var $={FINISHED:Object(g.jsx)(i.Icon,{name:"success",size:"large",stroke:"success"}),PROCESSING:Object(g.jsx)(i.Icon,{name:"clock",size:"large",stroke:"info"}),PENDING:Object(g.jsx)(i.Icon,{name:"clock",size:"large",stroke:"info"}),FAILED:Object(g.jsx)(i.Icon,{name:"error",size:"large",stroke:"error"}),ANNULED:Object(g.jsx)(i.Icon,{name:"warning",size:"large",stroke:"warning"}),RETURNED:Object(g.jsx)(i.Icon,{name:"warning",size:"large",stroke:"warning"})};return G?Object(g.jsx)(T.a,{}):Object(g.jsxs)(s.a,{className:h,name:_,tag:"section",type:k,children:[Object(g.jsx)("header",{children:Q?Object(g.jsx)(m.b,{className:x.a.title,fallback:w,tag:"h1",uuid:w}):w}),Object(g.jsxs)("section",{children:[J&&Object(g.jsxs)("div",{className:x.a.actions,children:[R&&!F&&Object(g.jsx)(O.a,{icon:"share",kind:"icon",label:{uuid:"spa.a11y.buttons.share"},size:"small",variant:"text",onClick:function(){V(!0)}}),P&&Object(g.jsx)(O.a,{icon:"download",kind:"icon",label:{uuid:"spa.a11y.buttons.download"},size:"small",variant:"text",onClick:function(){B(!0)}})]}),Object(g.jsx)("div",{className:x.a.responseIcon,children:$[E]}),Object(g.jsx)(m.b,{className:x.a.responseTitle,fallback:N,tag:"h2",uuid:N}),y&&Object(g.jsx)(m.b,{className:x.a.responseDescription,tag:"h3",uuid:y}),(null===M||void 0===M?void 0:M.label)&&(null===M||void 0===M?void 0:M.handleClick)&&Object(g.jsx)(O.a,{className:x.a.navigateButton,kind:"plain",label:M.label,type:"button",onClick:M.handleClick}),f,I&&Object(g.jsx)("div",{className:x.a.responseIcon,children:Object(g.jsx)(i.Icon,{name:"modo"})})]}),Object(g.jsx)("footer",{children:Object(g.jsx)(O.a,{label:{uuid:r},onClick:A})})]})}y.defaultProps=N},533:function(e,t,n){e.exports={NAME_TICKET:"Ticket",TYPE_TICKET:"Section",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_IMAGE:"Image",TYPE_IMAGE:"Element",title:"_rules_title__1SNPA",actions:"_rules_actions__30efJ",responseIcon:"_rules_responseIcon__1McyH",responseTitle:"_rules_responseTitle__3H3Id",responseDescription:"_rules_responseDescription__1NvkT",navigateButton:"_rules_navigateButton__Dlve9"}},534:function(e,t,n){e.exports={NAME_TICKET:"Ticket",TYPE_TICKET:"Section"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=83.63a58189.chunk.js.map