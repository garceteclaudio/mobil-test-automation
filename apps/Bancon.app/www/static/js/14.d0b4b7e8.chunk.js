(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[14,80,167,199],{488:function(e,t,r){"use strict";r.d(t,"a",(function(){return T}));var n=r(2),a=r(16),o=r(19),c=r(11),s=r(502),i=r(505),u=r(41),d=r(6),l=r(79),b=r(8),m=r(493),E=r.n(m),f=r(10),O=["ariaLabel","ariaLabelledby","schema","onSubmit","children","warnings","isRequiredToast","isResetForm"],h=E.a.NAME_FORM,j=E.a.TYPE_FORM;function T(e){var t=e,r=t.ariaLabel,m=t.ariaLabelledby,E=t.schema,T=t.onSubmit,_=t.children,p=t.warnings,g=t.isRequiredToast,N=t.isResetForm,A=Object(o.a)(t,O),P=Object(b.b)(),S=Object(s.e)({resolver:Object(i.a)(E)}),M=S.handleSubmit,R=S.setError,C=S.formState.errors,v=S.reset,L=Object.keys(C),x=c.b.useState(!1),I=Object(a.a)(x,2),w=I[0],F=I[1],y=c.b.useCallback((function(){g&&w&&P(l.a.set({kind:"ERROR",text:{uuid:"spa.form.field.generic.error"},duration:d.w})),F(!1)}),[P,g,w]),Y=c.b.useCallback((function(){v()}),[v]);return c.b.useEffect((function(){p&&Object.keys(p.data).map((function(e){var t=e.startsWith(d.Nb)?e.slice(d.fb):e;return R(t,{message:p.data[e]},{shouldFocus:!1}),null})),L.length>d.Sb&&y(),N&&Y()}),[L.length,N,Y,R,y,p]),Object(f.jsx)(s.b,Object(n.a)(Object(n.a)(Object(n.a)({},S),A),{},{children:Object(f.jsx)(u.a,{noValidate:!0,"aria-label":r,"aria-labelledby":m,name:h,tag:"form",type:j,onSubmit:M(T,(function(){return F(!w)})),children:_})}))}T.useContext=s.f,T.defaultProps={isRequiredToast:!0,isResetForm:!1,warnings:null}},489:function(e,t,r){"use strict";r.d(t,"a",(function(){return h}));var n=r(2),a=r(19),o=(r(11),r(41)),c=r(136),s=r(82),i=r(38),u=r(101),d=r(491),l=r.n(d),b={name:l.a.NAME_EXTERNAL_CONTAINER,type:l.a.TYPE_EXTERNAL_CONTAINER,showLogo:!1},m=r(492),E=r.n(m),f=r(10),O=["header-onBack","header-title","children","name","type","headerClassName","showLogo"];function h(e){var t=e,r=t["header-onBack"],d=t["header-title"],l=t.children,b=t.name,m=t.type,h=t.headerClassName,j=t.showLogo,T=Object(a.a)(t,O),_=Boolean(r||d),p=Object(o.c)(!d&&E.a.onlyRow,h),g=Object(o.c)(j&&E.a.step1Logo),N=Object(o.c)(j&&E.a.hasLogo);return Object(f.jsxs)(u.a,{children:[j&&Object(f.jsx)("div",{className:g,children:Object(f.jsx)(c.a,{alt:"logo",uuid:"logo150Login"})}),Object(f.jsx)(o.a,Object(n.a)(Object(n.a)({name:b,tag:"article",type:m},T),{},{children:Object(f.jsxs)("article",{className:N,children:[_&&Object(f.jsxs)("header",{className:p,children:[r&&Object(f.jsx)(s.a,{icon:"left",kind:"icon",label:{uuid:"spa.a11y.buttons.back"},size:"medium",variant:"text",onClick:r}),d&&Object(f.jsx)(i.b,{tag:"h5",uuid:d})]}),l]})}))]})}h.defaultProps=b},491:function(e,t,r){e.exports={NAME_EXTERNAL_CONTAINER:"ContainerExternal",TYPE_EXTERNAL_CONTAINER:"Container"}},492:function(e,t,r){e.exports={NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_LINK:"Link",TYPE_LINK:"Element",NAME_IMAGE:"Image",TYPE_IMAGE:"Element",NAME_XS:"xs",NAME_SM:"sm",NAME_MD:"md",NAME_LG:"lg",NAME_EXTERNAL_CONTAINER:"ContainerExternal",TYPE_EXTERNAL_CONTAINER:"Container",hasLogo:"_rules_hasLogo__AxHGK",onlyRow:"_rules_onlyRow__1im8h",step1Logo:"_rules_step1Logo__3LNq5"}},493:function(e,t,r){e.exports={NAME_FORM:"Form",TYPE_FORM:"Element"}},494:function(e,t,r){"use strict";r.d(t,"a",(function(){return h}));var n=r(2),a=r(19),o=r(16),c=r(11),s=r(50),i=r(41),u=r(488),d=r(498),l=r.n(d),b=r(10),m=["id","name","methods","defaultValue","pattern","withSuggestions","onChange","onBlur"],E=l.a.NAME_INPUT_FIELD,f=l.a.TYPE_INPUT_FIELD,O=c.b.memo((function(e){var t,r=c.b.useState(!1),u=Object(o.a)(r,2),d=u[0],l=u[1],O=e.id,h=e.name,j=e.methods,T=e.defaultValue,_=e.pattern,p=e.withSuggestions,g=void 0===p||p,N=e.onChange,A=e.onBlur,P=Object(a.a)(e,m),S=j.register,M=j.formState,R=j.setValue,C=j.clearErrors,v=M.errors,L="".concat(h),x=v[h];return c.b.useEffect((function(){T&&R(L,T),T||R(L,void 0),g&&l(!0)}),[T,L,R,g,l]),Object(b.jsx)(i.a,{name:E,type:f,children:Object(b.jsx)(s.TextField,Object(n.a)(Object(n.a)(Object(n.a)(Object(n.a)(Object(n.a)({id:O||h},T&&{defaultValue:T}),x&&{error:null===(t=x.message)||void 0===t?void 0:t.toString()}),S(L,{onChange:function(e){N&&N(e);C([L])},onBlur:A})),P),{},{autoComplete:g?"on":"off",pattern:_,onKeyDown:function(e){e.target.value||d||l(!0)}}))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function h(e){var t=u.a.useContext();return Object(b.jsx)(O,Object(n.a)({methods:t},e))}h.displayName=E},498:function(e,t,r){e.exports={NAME_INPUT_FIELD:"InputField",TYPE_INPUT_FIELD:"Element"}},515:function(e,t,r){"use strict";r.d(t,"a",(function(){return h}));var n=r(2),a=r(16),o=r(19),c=r(11),s=r(50),i=r(41),u=r(488),d=r(520),l=r.n(d),b=r(10),m=["id","name","methods","onChange","isChecked"],E=l.a.NAME_INPUT_CHECKBOX,f=l.a.TYPE_INPUT_CHECKBOX,O=c.b.memo((function(e){var t,r=e.id,u=e.name,d=e.methods,l=e.onChange,O=e.isChecked,h=Object(o.a)(e,m),j=c.b.useState(O),T=Object(a.a)(j,2),_=T[0],p=T[1],g=d.register,N=d.formState,A=d.setValue,P=d.clearErrors,S=N.errors,M="".concat(u);c.b.useEffect((function(){void 0!==O&&(p(O),A(M,O,{shouldValidate:!0}))}),[O,M,A]);var R=S[u];return Object(b.jsx)(i.a,{name:E,type:f,children:Object(b.jsx)(s.Checkbox,Object(n.a)(Object(n.a)(Object(n.a)({id:r||u},R&&{error:null===(t=R.message)||void 0===t?void 0:t.toString()}),g(M)),{},{isChecked:_,onChange:function(e){var t=!_;p(t),A(M,t),l&&l(e),P([M])}},h))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function h(e){var t=u.a.useContext();return Object(b.jsx)(O,Object(n.a)({methods:t},e))}h.displayName=E},517:function(e,t,r){"use strict";r.d(t,"a",(function(){return h}));var n=r(2),a=r(19),o=r(11),c=r(50),s=r(41),i=r(488),u=r(529),d=r.n(u),l=r(10),b=["id","name","autoFocus","methods","withSuggestions","onChange"],m=d.a.NAME_INPUT_PASSWORD,E=d.a.TYPE_INPUT_PASSWORD,f={id:m},O=o.b.memo((function(e){var t,r=e.id,o=e.name,i=e.autoFocus,u=e.methods,d=e.withSuggestions,f=void 0===d||d,O=e.onChange,h=Object(a.a)(e,b),j=u.register,T=u.formState,_=u.clearErrors,p=T.errors,g="".concat(o),N=p[o];return Object(l.jsx)(s.a,{name:m,type:E,children:Object(l.jsx)(c.PasswordField,Object(n.a)(Object(n.a)(Object(n.a)({autoComplete:f?"on":"off",autoFocus:i,id:r||o},N&&{error:null===(t=N.message)||void 0===t?void 0:t.toString()}),j(g,{required:!0,onChange:function(e){O&&O(e);_([g])}})),h))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function h(e){var t=i.a.useContext();return Object(l.jsx)(O,Object(n.a)({methods:t},e))}h.displayName=m,h.defaultProps=f},520:function(e,t,r){e.exports={NAME_INPUT_CHECKBOX:"InputCheckbox",TYPE_INPUT_CHECKBOX:"Element"}},522:function(e,t,r){"use strict";r.d(t,"a",(function(){return n})),r.d(t,"c",(function(){return a})),r.d(t,"e",(function(){return o})),r.d(t,"d",(function(){return c})),r.d(t,"f",(function(){return s})),r.d(t,"b",(function(){return i}));var n="AR1B",a=15,o=function(e){return e===n},c=function(e){return"AR1C"===e},s=function(e){return"0005"===e},i={"0005":a,AR1C:11,AR1B:11}},529:function(e,t,r){e.exports={NAME_INPUT_PASSWORD:"InputPassword",TYPE_INPUT_PASSWORD:"Element"}},530:function(e,t,r){"use strict";r.d(t,"a",(function(){return u}));var n=r(30),a=r(6),o=r(187),c=r(522),s=r(39),i=r(74);function u(e,t,r,u){var d=Object(i.a)(t("core.password.minLength")),l=Object(i.a)(t("core.password.maxLength")),b=e({uuid:"spa.generic.accessData.error.documentNumberInPassword"}),m=e({uuid:"spa.generic.accessData.error.userInPassword"}),E=e({uuid:"spa.password.error.tooSmall",replace:"".concat(d)}),f=e({uuid:"spa.password.error.tooBig",replace:"".concat(l)}),O=e({uuid:"spa.generic.field.error.required"}),h=Object(o.d)(s.e.string.required(),O),j=[Object(o.d)(s.e.string.ofLength(d),E),Object(o.d)(s.e.string.ofLength(a.fb,l),f),Object(s.b)("document number in password",(function(e){if(!r)return!0;var t=e;var n=r.number,o=r.type===c.a?(s=n,s.slice(a.Jb,a.ab)):n;var s;return!t.includes(o)||b})),Object(s.b)("username in password",(function(e){return!u||(!e.includes(u)||m)})),Object(s.b)("required chars",(function(r){if(r&&T("repeatedCharacters")){var n,o,c=r,s=Object(i.a)(t("spa.password.repeatedCharacters.maximum")),u=null===(n=c.match(/(\w)\1+/g))||void 0===n?void 0:n.find((function(e){return e.length>=s})),d=null===(o=c.match(/([0-9]{3,})/g))||void 0===o?void 0:o.some((function(e){return function(e,t){if(e.length===a.fb)return!1;for(var r=e.charCodeAt(a.Sb),n=a.Sb,o=a.Sb,c=a.fb;c<e.length;c++){var s=e.charCodeAt(c);n>=a.Sb&&(r===a.cb&&s===a.Tb||r+a.fb===s)?n++:n<=a.Sb&&(r===a.Tb&&s===a.cb||r-a.fb===s)?n--:(o=Math.max(Math.abs(n)+a.fb,o),n=a.Sb),r=s}return Math.max(Math.abs(n)+a.fb,o)>=t}(e,s)}));return u?e({uuid:"spa.password.error.repeatedCharacters",replace:"".concat(s)}):!d||e({uuid:"spa.password.error.consecutiveNumbers",replace:"".concat(s)})}return h}))].concat(Object(n.a)(["atLeastOneDigit","atLeastOneLowercaseChar","atLeastOneUppercaseChar"].filter(T).map((function(r){var n=Object(i.a)(t("spa.password.".concat(r,".regex"))),a=e({uuid:"spa.password.error.".concat(r)});return Object(o.d)(s.e.string.match(new RegExp(n)),a)}))));return Object(s.c)((function(e){var t=j.find((function(t){return!Object(s.d)(e,t)}));return e&&t?t:h}));function T(e){return Object(i.a)(t("spa.password.".concat(e,".enabled")))}}},568:function(e,t,r){"use strict";r.d(t,"a",(function(){return j}));var n=r(2),a=r(19),o=(r(11),r(41)),c=r(50),s=r(6),i=r(604),u=r.n(i),d=r(605),l=r.n(d),b=r(488),m=r(38),E=r(10),f=["buttonLabel","modalTitle","name","options","selectedAvatar","uuidError","uuidLabel"],O=l.a.NAME_SECURITY_SEAL,h=l.a.TYPE_SECURITY_SEAL;function j(e){var t=e,r=t.buttonLabel,i=t.modalTitle,d=t.name,l=t.options,j=t.selectedAvatar,T=t.uuidError,_=t.uuidLabel,p=Object(a.a)(t,f),g=b.a.useContext(),N=Object(m.c)().textGet,A=g.register,P=g.formState,S=g.setValue,M=P.errors,R="".concat(d),C=Object.values(l),v=M[d]&&!j,L=N({uuid:T});return Object(E.jsxs)(o.a,{name:O,type:h,children:[Object(E.jsx)(c.SecurityImage,Object(n.a)(Object(n.a)(Object(n.a)({},p),{},{buttonLabel:r,modalTitle:i,options:C,onChooseImage:function(e){var t=l.findIndex((function(t){return t.src===e})),r=t!==s.ab?t+s.fb:t;S(R,r||void 0)},onClose:function(){var e=l.findIndex((function(e){return e.src===j})),t=e!==s.ab?e+s.fb:e;S(R,t||void 0)}},A(R)),{},{children:Object(E.jsx)(c.Badge,{color:"primary",name:"camera",placement:"br",size:"small",children:Object(E.jsx)(c.Avatar,{alt:N({uuid:"login.step2.imageAlt"}),color:"dark-green",name:j?void 0:"user",size:"large",src:j})})})),!v&&Object(E.jsx)(m.b,{uuid:_}),v&&Object(E.jsx)(c.Legend,{className:u.a.errorSecurityImage,variant:"error",children:L})]})}j.defaultProps={}},604:function(e,t,r){e.exports={NAME_SECURITY_SEAL:"SecuritySeal",TYPE_SECURITY_SEAL:"Element",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",errorSecurityImage:"_rules_errorSecurityImage__3LvFw"}},605:function(e,t,r){e.exports={NAME_SECURITY_SEAL:"SecuritySeal",TYPE_SECURITY_SEAL:"Element"}},607:function(e,t,r){"use strict";r.d(t,"a",(function(){return c}));var n=r(187),a=r(39),o=r(74);function c(e,t){var r=Object(o.a)(t("username.maxLength")),c=Object(o.a)(t("username.minLength")),s=Object(o.a)(t("username.pattern")),i=e({uuid:"spa.generic.field.error.required"}),u=e({uuid:"spa.username.error.insecure"}),d=[Object(n.d)(a.e.string.ofLength(c,r),u),Object(n.d)(a.e.string.match(new RegExp(s||"[a-zA-Z0-9@_\\.-]*")),u)];return Object(a.c)((function(e){var t=d.find((function(t){return!Object(a.d)(e,t)}));return e&&t?t:Object(n.d)(a.e.string.required(),i)}))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFuY29yLWNvbXBvbmVudHMvRWxlbWVudC9Gb3JtL2luZGV4LnRzeCIsIndlYnBhY2s6Ly8vLi4vYmFuY29yLWNvbXBvbmVudHMvQ29udGFpbmVyL0Jhc2VFeHRlcm5hbC90eXBlcy50cyIsIndlYnBhY2s6Ly8vLi4vYmFuY29yLWNvbXBvbmVudHMvQ29udGFpbmVyL0Jhc2VFeHRlcm5hbC9pbmRleC50c3giLCJ3ZWJwYWNrOi8vLy4uL2JhbmNvci1jb21wb25lbnRzL0NvbnRhaW5lci9CYXNlRXh0ZXJuYWwvX2luZGV4LnNjc3MiLCJ3ZWJwYWNrOi8vLy4uL2JhbmNvci1jb21wb25lbnRzL0NvbnRhaW5lci9CYXNlRXh0ZXJuYWwvX3J1bGVzLm1vZHVsZS5zY3NzIiwid2VicGFjazovLy8uLi9iYW5jb3ItY29tcG9uZW50cy9FbGVtZW50L0Zvcm0vX2luZGV4LnNjc3MiLCJ3ZWJwYWNrOi8vLy4uL2JhbmNvci1jb21wb25lbnRzL0VsZW1lbnQvRm9ybS9JbnB1dC9pbmRleC50c3giLCJ3ZWJwYWNrOi8vLy4uL2JhbmNvci1jb21wb25lbnRzL0VsZW1lbnQvRm9ybS9JbnB1dC9faW5kZXguc2NzcyIsIndlYnBhY2s6Ly8vLi4vYmFuY29yLWNvbXBvbmVudHMvRWxlbWVudC9Gb3JtL0lucHV0Q2hlY2tib3gvaW5kZXgudHN4Iiwid2VicGFjazovLy8uLi9iYW5jb3ItY29tcG9uZW50cy9FbGVtZW50L0Zvcm0vSW5wdXRQYXNzd29yZC9pbmRleC50c3giLCJ3ZWJwYWNrOi8vLy4uL2JhbmNvci1jb21wb25lbnRzL0VsZW1lbnQvRm9ybS9JbnB1dENoZWNrYm94L19pbmRleC5zY3NzIiwid2VicGFjazovLy8uLi9iYW5jb3ItY29tcG9uZW50cy9TZWN0aW9ucy9Eb2N1bWVudC9kb2N1bWVudFV0aWxzLnRzIiwid2VicGFjazovLy8uLi9iYW5jb3ItY29tcG9uZW50cy9FbGVtZW50L0Zvcm0vSW5wdXRQYXNzd29yZC9faW5kZXguc2NzcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvcGFzc3dvcmRWYWxpZGF0b3IudHN4Iiwid2VicGFjazovLy8uLi9iYW5jb3ItY29tcG9uZW50cy9FbGVtZW50L1NlY3VyaXR5U2VhbC9pbmRleC50c3giLCJ3ZWJwYWNrOi8vLy4uL2JhbmNvci1jb21wb25lbnRzL0VsZW1lbnQvU2VjdXJpdHlTZWFsL19ydWxlcy5tb2R1bGUuc2NzcyIsIndlYnBhY2s6Ly8vLi4vYmFuY29yLWNvbXBvbmVudHMvRWxlbWVudC9TZWN1cml0eVNlYWwvX2luZGV4LnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL3VzZXJuYW1lVmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbIk5BTUVfRk9STSIsIk5hbWVzcGFjZSIsIlRZUEVfRk9STSIsIkZvcm0iLCJwcm9wcyIsIl9yZWYiLCJhcmlhTGFiZWwiLCJhcmlhTGFiZWxsZWRieSIsInNjaGVtYSIsIm9uU3VibWl0IiwiY2hpbGRyZW4iLCJ3YXJuaW5ncyIsImlzUmVxdWlyZWRUb2FzdCIsImlzUmVzZXRGb3JtIiwicmVzdCIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsIl9leGNsdWRlZCIsImRpc3BhdGNoIiwidXNlRGlzcGF0Y2giLCJtZXRob2RzIiwidXNlRm9ybSIsInJlc29sdmVyIiwic3VwZXJzdHJ1Y3RSZXNvbHZlciIsImhhbmRsZVN1Ym1pdCIsInNldEVycm9yIiwiZXJyb3JzIiwiZm9ybVN0YXRlIiwicmVzZXQiLCJlcnJvckRhdGEiLCJPYmplY3QiLCJrZXlzIiwiX1JlYWN0JHVzZVN0YXRlIiwiUmVhY3QiLCJ1c2VTdGF0ZSIsIl9SZWFjdCR1c2VTdGF0ZTIiLCJfc2xpY2VkVG9BcnJheSIsInNob3dUb2FzdCIsInNldFNob3dUb2FzdCIsInNob3dSZXF1aXJlZFRvYXN0IiwidXNlQ2FsbGJhY2siLCJBY3Rpb25TbGljZVRvYXN0Iiwic2V0Iiwia2luZCIsInRleHQiLCJ1dWlkIiwiZHVyYXRpb24iLCJEVVJBVElPTl9NIiwicmVzZXRJbnB1dHMiLCJ1c2VFZmZlY3QiLCJkYXRhIiwibWFwIiwia2V5IiwibmV3S2V5Iiwic3RhcnRzV2l0aCIsIlVOREVSU0NPUkUiLCJzbGljZSIsIk9ORSIsIm1lc3NhZ2UiLCJzaG91bGRGb2N1cyIsImxlbmd0aCIsIlpFUk8iLCJfanN4IiwiRm9ybVByb3ZpZGVyIiwiX29iamVjdFNwcmVhZCIsIkNvbXBvbmVudCIsIm5vVmFsaWRhdGUiLCJuYW1lIiwidGFnIiwidHlwZSIsInVzZUNvbnRleHQiLCJ1c2VGb3JtQ29udGV4dCIsImRlZmF1bHRQcm9wcyIsIkRFRl9CQVNFRVhURVJOQUxfQ09OVEFJTkVSIiwiTkFNRV9FWFRFUk5BTF9DT05UQUlORVIiLCJUWVBFX0VYVEVSTkFMX0NPTlRBSU5FUiIsInNob3dMb2dvIiwiQmFzZUV4dGVybmFsQ29udGFpbmVyIiwiaGVhZGVySGFuZGxlciIsImhlYWRlclRpdGxlIiwiaGVhZGVyQ2xhc3NOYW1lIiwiaGFzSGVhZGVyIiwiQm9vbGVhbiIsImhlYWRlckNsYXNzTmFtZXMiLCJnZXRDbGFzc05hbWUiLCJSdWxlcyIsIm9ubHlSb3ciLCJjb250YWluZXJMb2dvQ2xhc3NOYW1lIiwic3RlcDFMb2dvIiwiY29udGFpbmVyQ2xhc3NOYW1lIiwiaGFzTG9nbyIsIl9qc3hzIiwiQmFzZU1haW5Db250YWluZXIiLCJjbGFzc05hbWUiLCJJbWFnZSIsImFsdCIsIkJ1dHRvbiIsImljb24iLCJsYWJlbCIsInNpemUiLCJ2YXJpYW50Iiwib25DbGljayIsIlRleHQiLCJtb2R1bGUiLCJleHBvcnRzIiwiTkFNRV9JTlBVVF9GSUVMRCIsIlRZUEVfSU5QVVRfRklFTEQiLCJJbnB1dEZpZWxkTWVtb2l6ZWQiLCJtZW1vIiwiX2lucHV0RXJyb3IkbWVzc2FnZSIsImhhc1N1Z2dlc3Rpb25zIiwic2V0aGFzU3VnZ2VzdGlvbnMiLCJpZCIsImRlZmF1bHRWYWx1ZSIsInBhdHRlcm4iLCJfcHJvcHMkd2l0aFN1Z2dlc3Rpb24iLCJ3aXRoU3VnZ2VzdGlvbnMiLCJvbkNoYW5nZSIsIm9uQmx1ciIsInJlZ2lzdGVyIiwic2V0VmFsdWUiLCJjbGVhckVycm9ycyIsInJlZ2lzdGVyTmFtZSIsImNvbmNhdCIsImlucHV0RXJyb3IiLCJ1bmRlZmluZWQiLCJUZXh0RmllbGQiLCJlcnJvciIsInRvU3RyaW5nIiwiZXZlbnQiLCJhdXRvQ29tcGxldGUiLCJvbktleURvd24iLCJ0YXJnZXQiLCJ2YWx1ZSIsInByZXZQcm9wcyIsIm5leHRQcm9wcyIsImRpcnR5RmllbGRzIiwiSW5wdXRGaWVsZCIsImRpc3BsYXlOYW1lIiwiTkFNRV9JTlBVVF9DSEVDS0JPWCIsIlRZUEVfSU5QVVRfQ0hFQ0tCT1giLCJJbnB1dENoZWNrYm94TWVtb2l6ZWQiLCJpc0NoZWNrZWQiLCJjaGVja2VkIiwic2V0Q2hlY2tlZCIsInNob3VsZFZhbGlkYXRlIiwiQ2hlY2tib3giLCJlIiwiY2hlY2siLCJJbnB1dENoZWNrYm94IiwiTkFNRV9JTlBVVF9QQVNTV09SRCIsIlRZUEVfSU5QVVRfUEFTU1dPUkQiLCJERUZfSU5QVVRfUEFTU1dPUkQiLCJJbnB1dFBhc3N3b3JkTWVtb2l6ZWQiLCJhdXRvRm9jdXMiLCJQYXNzd29yZEZpZWxkIiwicmVxdWlyZWQiLCJJbnB1dFBhc3N3b3JkIiwiQ1VJVCIsIlBBU1NQT1JUX01BWF9MRU5HVEgiLCJpc0N1aXRUeXBlIiwicHJvcCIsImlzQ0RJVHlwZSIsImlzUGFzc3BvcnRUeXBlIiwiRE9DVU1FTlRTX01BWF9MRU5HVEgiLCJBUjFDIiwiQVIxQiIsImdldFBhc3N3b3JkVmFsaWRhdG9yIiwidGV4dEdldCIsImdldFZhbHVlQ29uZmlnIiwiZG9jdW1lbnROdW1iZXIiLCJ1c2VybmFtZSIsInBhc3N3b3JkTWluTGVuZ3RoIiwicGFyc2VDb25maWciLCJwYXNzd29yZE1heExlbmd0aCIsInBhc3N3b3JkVmFsaWRhdGVFcnJvclBhc3N3b3JkIiwicGFzc3dvcmRWYWxpZGF0ZUVycm9yVXNlciIsInRleHRFcnJvck1pbkxlbmd0aCIsInJlcGxhY2UiLCJ0ZXh0RXJyb3JNYXhMZW5ndGgiLCJ0ZXh0RXJyb3JSZXF1aXJlZCIsInJlcXVpcmVkVmFsaWRhdGlvbiIsIkN1c3RvbUVycm9yIiwiVHlwZSIsInN0cmluZyIsInZhbGlkYXRvcnMiLCJvZkxlbmd0aCIsIkRlZmluZSIsInZhbHVlVG9WYWxpZGF0ZSIsInZhbHVlQXNTdHJpbmciLCJudW1iZXIiLCJkb2N1bWVudE51bWJlclRvVmFsaWRhdGUiLCJjdWl0IiwiVFdPIiwiTUlOVVNfT05FIiwiaW5jbHVkZXMiLCJlbmFibGVWYWxpZGF0aW9uRmlsdGVyIiwiX3ZhbHVlQXNTdHJpbmckbWF0Y2giLCJfdmFsdWVBc1N0cmluZyRtYXRjaDIiLCJyZXF1aXJlZENoYXJzIiwiZXhpc3RzUmVwZWF0ZWRDaGFyYWN0ZXJzIiwibWF0Y2giLCJmaW5kIiwiZXhpc3RzQ29uc2VjdXRpdmVEaWdpdHMiLCJzb21lIiwiY2hhcnNUb0NvdW50IiwiZmlyc3RDaGFyIiwiY2hhckNvZGVBdCIsInNlcXVlbmNlQ291bnRlciIsIm1heFNlcXVlbmNlQ291bnRlciIsImkiLCJjdXJyZW50Q2hhciIsIk5JTkVfQ09ERV9QT0lOVCIsIlpFUk9fQ09ERV9QT0lOVCIsIk1hdGgiLCJtYXgiLCJhYnMiLCJ2YWx1ZUlzQURpZ2l0U2VxdWVuY2UiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJmaWx0ZXIiLCJyZWdleCIsIlJlZ0V4cCIsIkR5bmFtaWMiLCJmYWlsZWRWYWxpZGF0b3IiLCJ4IiwiSXMiLCJOQU1FX1NFQ1VSSVRZX1NFQUwiLCJUWVBFX1NFQ1VSSVRZX1NFQUwiLCJTZWN1cml0eVNlYWwiLCJidXR0b25MYWJlbCIsIm1vZGFsVGl0bGUiLCJvcHRpb25zIiwic2VsZWN0ZWRBdmF0YXIiLCJ1dWlkRXJyb3IiLCJ1dWlkTGFiZWwiLCJ1c2VUZXh0Iiwib3B0aW9uc0ZvckRTIiwidmFsdWVzIiwiZXJyb3JTZWN1cml0eUltYWdlIiwidGV4dEVycm9yIiwiU2VjdXJpdHlJbWFnZSIsIm9uQ2hvb3NlSW1hZ2UiLCJzcmMiLCJpbmRleCIsImZpbmRJbmRleCIsInNlY0ltZyIsIm9uQ2xvc2UiLCJCYWRnZSIsImNvbG9yIiwicGxhY2VtZW50IiwiQXZhdGFyIiwiTGVnZW5kIiwiZ2V0VXNlcm5hbWVWYWxpZGF0b3IiLCJ1c2VybmFtZU1heExlbmd0aCIsInVzZXJuYW1lTWluTGVuZ3RoIiwidXNlck5hbWVQYXR0ZXJuIiwidGV4dEVycm9yVXNlck5vdFNlY3VyZSJdLCJtYXBwaW5ncyI6IndYQWNlQSxFQUF5QkMsSUFBekJELFVBQVdFLEVBQWNELElBQWRDLFVBMEJuQixTQUFTQyxFQUEwQkMsR0FDdEMsSUFBQUMsRUFVSUQsRUFUQUUsRUFBU0QsRUFBVEMsVUFDQUMsRUFBY0YsRUFBZEUsZUFDQUMsRUFBTUgsRUFBTkcsT0FDQUMsRUFBUUosRUFBUkksU0FDQUMsRUFBUUwsRUFBUkssU0FDQUMsRUFBUU4sRUFBUk0sU0FDQUMsRUFBZVAsRUFBZk8sZ0JBQ0FDLEVBQVdSLEVBQVhRLFlBQ0dDLEVBQUlDLFlBQUFWLEVBQUFXLEdBRUxDLEVBQVdDLGNBRVhDLEVBQVVDLFlBQVEsQ0FDcEJDLFNBQVVDLFlBQW9CZCxLQUc5QmUsRUFJQUosRUFKQUksYUFDQUMsRUFHQUwsRUFIQUssU0FDYUMsRUFFYk4sRUFGQU8sVUFBYUQsT0FDYkUsRUFDQVIsRUFEQVEsTUFHRUMsRUFBWUMsT0FBT0MsS0FBS0wsR0FDOUJNLEVBQWtDQyxJQUFNQyxVQUFTLEdBQU1DLEVBQUFDLFlBQUFKLEVBQUEsR0FBaERLLEVBQVNGLEVBQUEsR0FBRUcsRUFBWUgsRUFBQSxHQUd4QkksRUFBb0JOLElBQU1PLGFBQVksV0FDcEMzQixHQUFtQndCLEdBQ25CbkIsRUFDSXVCLElBQWlCQyxJQUFJLENBQ2pCQyxLQUFNLFFBQ05DLEtBQU0sQ0FDRkMsS0FBTSxnQ0FFVkMsU0FBVUMsT0FHdEJULEdBQWEsRUFDakIsR0FBRyxDQUFDcEIsRUFBVUwsRUFBaUJ3QixJQUV6QlcsRUFBY2YsSUFBTU8sYUFBWSxXQUNsQ1osR0FDSixHQUFHLENBQUNBLElBZ0JKLE9BZEFLLElBQU1nQixXQUFVLFdBQ1JyQyxHQUNBa0IsT0FB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RUFBV2lCLE1BQUssU0FBQ3NCLEdBQUMsT0FBTUMsWUFBRzVGLEVBQU8yRixFQUFFLElBQzVELE9BQUkzRixHQUFTMEYsRUFDRkEsRUFFSnpDLFlBQVlDLElBQUtDLE9BQU81QixXQUFZd0IsRUFDL0MsR0FDSixDIiwiZmlsZSI6InN0YXRpYy9qcy8xNC5kMGI0YjdlOC5jaHVuay5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwiQHBrZy9yZWFjdFwiO1xuaW1wb3J0IHsgdXNlRm9ybSwgRm9ybVByb3ZpZGVyLCB1c2VGb3JtQ29udGV4dCB9IGZyb20gXCJyZWFjdC1ob29rLWZvcm1cIjtcbmltcG9ydCB7IHN1cGVyc3RydWN0UmVzb2x2ZXIgfSBmcm9tIFwiQGhvb2tmb3JtL3Jlc29sdmVycy9zdXBlcnN0cnVjdFwiO1xuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSBcIkBwa2cvcmVhY3Qtc3Rvcnlib29rL0NvbXBvbmVudFwiO1xuaW1wb3J0IHR5cGUgeyBJbmZlciwgQW55U3RydWN0IH0gZnJvbSBcIkBwa2cvdXRpbHMvc2NoZW1hXCI7XG5pbXBvcnQgdHlwZSB7IFByb3BFbGVtZW50LCBQcm9wRGVmYXVsdHMsIFByb3BUeXBlcyB9IGZyb20gXCJAcGtnL3JlYWN0LXN0b3J5Ym9vay9Db21wb25lbnRcIjtcblxuaW1wb3J0IHR5cGUgeyBOU0FQSUVycm9yIH0gZnJvbSBcIkBhcHAvYmFuY29uLWRhdGEvYXBpL2Vycm9yL19uYW1lc3BhY2VcIjtcbmltcG9ydCB7IERVUkFUSU9OX00sIE9ORSwgVU5ERVJTQ09SRSwgWkVSTyB9IGZyb20gXCJAYXBwL2JhbmNvbi1kYXRhL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgQWN0aW9uU2xpY2VUb2FzdCB9IGZyb20gXCJAYXBwL2JhbmNvbi1kYXRhL3NsaWNlcy90b2FzdFwiO1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2ggfSBmcm9tIFwiQGFwcC9iYW5jb24tZGF0YVwiO1xuXG5pbXBvcnQgTmFtZXNwYWNlIGZyb20gXCIuL19pbmRleC5zY3NzXCI7XG5cbmV4cG9ydCBjb25zdCB7IE5BTUVfRk9STSwgVFlQRV9GT1JNIH0gPSBOYW1lc3BhY2U7XG5cbmV4cG9ydCB0eXBlIE9taXRQcm9wSUQ8VD4gPSBPbWl0PFQsIEV4Y2x1ZGU8a2V5b2YgUHJvcEVsZW1lbnQsIFwiaWRcIj4+O1xuXG5leHBvcnQgdHlwZSBQcm9wRFM8RFM+ID0gT21pdDxEUywga2V5b2YgUmVhY3QuSW5wdXRIVE1MQXR0cmlidXRlczxIVE1MSW5wdXRFbGVtZW50PiB8IFwib25DaGFuZ2VcIj47XG5cbmV4cG9ydCB0eXBlIFByb3BGb3JtPFMgZXh0ZW5kcyBBbnlTdHJ1Y3Q+ID0gUHJvcEVsZW1lbnQgJiB7XG4gICAgYXJpYUxhYmVsOiBzdHJpbmc7XG4gICAgYXJpYUxhYmVsbGVkYnk6IHN0cmluZztcbiAgICBzY2hlbWE6IFM7XG4gICAgb25TdWJtaXQ6IChkYXRhOiBJbmZlcjxTPikgPT4gdm9pZDtcbiAgICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlO1xuICAgIHdhcm5pbmdzPzogTlNBUElFcnJvci5TY2hlbWEgfCBudWxsO1xuICAgIC8vIFdoZW4gdGhlcmUncyBhbiBlcnJvciB3ZSBzaG93IGEgdG9hc3Qgd2l0aCBhbiBlcnJvciBtZXNzYWdlXG4gICAgaXNSZXF1aXJlZFRvYXN0PzogYm9vbGVhbjtcbiAgICAvLyBXaGVuIHlvdSB3YW50IHRvIHJlc2V0IGFsbCBpbnB1dCB2YWx1ZXNcbiAgICBpc1Jlc2V0Rm9ybT86IGJvb2xlYW47XG59O1xuXG5leHBvcnQgY29uc3QgREVGX0ZPUk06IFByb3BEZWZhdWx0czxQcm9wRm9ybTxBbnlTdHJ1Y3Q+PiA9IHtcbiAgICBpc1JlcXVpcmVkVG9hc3Q6IHRydWUsXG4gICAgaXNSZXNldEZvcm06IGZhbHNlLFxuICAgIHdhcm5pbmdzOiBudWxsLFxufTtcblxuZXhwb3J0IHR5cGUgUHJvcFR5cGVzRm9ybSA9IFByb3BUeXBlczxQcm9wRm9ybTxBbnlTdHJ1Y3Q+LCB0eXBlb2YgREVGX0ZPUk0+O1xuZXhwb3J0IGZ1bmN0aW9uIEZvcm08UyBleHRlbmRzIEFueVN0cnVjdD4ocHJvcHM6IFByb3BGb3JtPFM+KSB7XG4gICAgY29uc3Qge1xuICAgICAgICBhcmlhTGFiZWwsXG4gICAgICAgIGFyaWFMYWJlbGxlZGJ5LFxuICAgICAgICBzY2hlbWEsXG4gICAgICAgIG9uU3VibWl0LFxuICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgd2FybmluZ3MsXG4gICAgICAgIGlzUmVxdWlyZWRUb2FzdCxcbiAgICAgICAgaXNSZXNldEZvcm0sXG4gICAgICAgIC4uLnJlc3RcbiAgICB9ID0gcHJvcHMgYXMgUHJvcFR5cGVzRm9ybTtcbiAgICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG5cbiAgICBjb25zdCBtZXRob2RzID0gdXNlRm9ybSh7XG4gICAgICAgIHJlc29sdmVyOiBzdXBlcnN0cnVjdFJlc29sdmVyKHNjaGVtYSksXG4gICAgfSk7XG4gICAgY29uc3Qge1xuICAgICAgICBoYW5kbGVTdWJtaXQsXG4gICAgICAgIHNldEVycm9yLFxuICAgICAgICBmb3JtU3RhdGU6IHsgZXJyb3JzIH0sXG4gICAgICAgIHJlc2V0LFxuICAgIH0gPSBtZXRob2RzO1xuXG4gICAgY29uc3QgZXJyb3JEYXRhID0gT2JqZWN0LmtleXMoZXJyb3JzKTtcbiAgICBjb25zdCBbc2hvd1RvYXN0LCBzZXRTaG93VG9hc3RdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IHJlc2V0VG9hc3QgPSAoKSA9PiBzZXRTaG93VG9hc3QoIXNob3dUb2FzdCk7XG5cbiAgICBjb25zdCBzaG93UmVxdWlyZWRUb2FzdCA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgaWYgKGlzUmVxdWlyZWRUb2FzdCAmJiBzaG93VG9hc3QpXG4gICAgICAgICAgICBkaXNwYXRjaChcbiAgICAgICAgICAgICAgICBBY3Rpb25TbGljZVRvYXN0LnNldCh7XG4gICAgICAgICAgICAgICAgICAgIGtpbmQ6IFwiRVJST1JcIixcbiAgICAgICAgICAgICAgICAgICAgdGV4dDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXVpZDogXCJzcGEuZm9ybS5maWVsZC5nZW5lcmljLmVycm9yXCIsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBEVVJBVElPTl9NLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgc2V0U2hvd1RvYXN0KGZhbHNlKTtcbiAgICB9LCBbZGlzcGF0Y2gsIGlzUmVxdWlyZWRUb2FzdCwgc2hvd1RvYXN0XSk7XG5cbiAgICBjb25zdCByZXNldElucHV0cyA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgcmVzZXQoKTtcbiAgICB9LCBbcmVzZXRdKTtcblxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmICh3YXJuaW5ncykge1xuICAgICAgICAgICAgT2JqZWN0LmtleXMod2FybmluZ3MuZGF0YSkubWFwKChrZXkpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdLZXkgPSBrZXkuc3RhcnRzV2l0aChVTkRFUlNDT1JFKSA/IGtleS5zbGljZShPTkUpIDoga2V5O1xuICAgICAgICAgICAgICAgIHNldEVycm9yKG5ld0tleSwgeyBtZXNzYWdlOiB3YXJuaW5ncy5kYXRhW2tleV0gfSwgeyBzaG91bGRGb2N1czogZmFsc2UgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3JEYXRhLmxlbmd0aCA+IFpFUk8pIHNob3dSZXF1aXJlZFRvYXN0KCk7XG4gICAgICAgIGlmIChpc1Jlc2V0Rm9ybSkge1xuICAgICAgICAgICAgcmVzZXRJbnB1dHMoKTtcbiAgICAgICAgfVxuICAgIH0sIFtlcnJvckRhdGEubGVuZ3RoLCBpc1Jlc2V0Rm9ybSwgcmVzZXRJbnB1dHMsIHNldEVycm9yLCBzaG93UmVxdWlyZWRUb2FzdCwgd2FybmluZ3NdKTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxGb3JtUHJvdmlkZXIgey4uLm1ldGhvZHN9IHsuLi5yZXN0fT5cbiAgICAgICAgICAgIDxDb21wb25lbnRcbiAgICAgICAgICAgICAgICBub1ZhbGlkYXRlXG4gICAgICAgICAgICAgICAgYXJpYS1sYWJlbD17YXJpYUxhYmVsfVxuICAgICAgICAgICAgICAgIGFyaWEtbGFiZWxsZWRieT17YXJpYUxhYmVsbGVkYnl9XG4gICAgICAgICAgICAgICAgbmFtZT17TkFNRV9GT1JNfVxuICAgICAgICAgICAgICAgIHRhZz1cImZvcm1cIlxuICAgICAgICAgICAgICAgIHR5cGU9e1RZUEVfRk9STX1cbiAgICAgICAgICAgICAgICBvblN1Ym1pdD17aGFuZGxlU3VibWl0KG9uU3VibWl0LCByZXNldFRvYXN0KX0+XG4gICAgICAgICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICAgICAgPC9Db21wb25lbnQ+XG4gICAgICAgIDwvRm9ybVByb3ZpZGVyPlxuICAgICk7XG59XG5cbkZvcm0udXNlQ29udGV4dCA9IHVzZUZvcm1Db250ZXh0O1xuRm9ybS5kZWZhdWx0UHJvcHMgPSBERUZfRk9STTtcbiIsImltcG9ydCB0eXBlIHsgUHJvcFR5cGVzLCBQcm9wRWxlbWVudCwgUHJvcERlZmF1bHRzIH0gZnJvbSBcIkBwa2cvcmVhY3Qtc3Rvcnlib29rL0NvbXBvbmVudFwiO1xuaW1wb3J0IE5hbWVzcGFjZSBmcm9tIFwiLi9faW5kZXguc2Nzc1wiO1xuXG5leHBvcnQgY29uc3QgeyBOQU1FX0VYVEVSTkFMX0NPTlRBSU5FUiwgVFlQRV9FWFRFUk5BTF9DT05UQUlORVIgfSA9IE5hbWVzcGFjZTtcblxuZXhwb3J0IHR5cGUgUHJvcEhlYWRlckV4dGVybmFsQ29udGFpbmVyID0ge1xuICAgIFwiaGVhZGVyLW9uQmFja1wiPzogKCkgPT4gdm9pZDtcbiAgICBcImhlYWRlci10aXRsZVwiPzogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgUHJvcEJhc2VFeHRlcm5hbENvbnRhaW5lciA9IFByb3BFbGVtZW50ICYge1xuICAgIGNoaWxkcmVuOiBOb25OdWxsYWJsZTxQcm9wRWxlbWVudFtcImNoaWxkcmVuXCJdPjsgLy8gbWFrZSBjaGlsZHJlbiByZXF1aXJlZFxuICAgIG5hbWU/OiBzdHJpbmc7XG4gICAgdHlwZT86IHN0cmluZztcbiAgICBoZWFkZXJDbGFzc05hbWU/OiBzdHJpbmc7XG4gICAgc2hvd0xvZ28/OiBib29sZWFuO1xufSAmIFByb3BIZWFkZXJFeHRlcm5hbENvbnRhaW5lcjtcblxuZXhwb3J0IGNvbnN0IERFRl9CQVNFRVhURVJOQUxfQ09OVEFJTkVSOiBQcm9wRGVmYXVsdHM8XG4gICAgT21pdDxQcm9wQmFzZUV4dGVybmFsQ29udGFpbmVyLCBrZXlvZiBQcm9wSGVhZGVyRXh0ZXJuYWxDb250YWluZXIgfCBcImhlYWRlckNsYXNzTmFtZVwiPlxuPiA9IHtcbiAgICBuYW1lOiBOQU1FX0VYVEVSTkFMX0NPTlRBSU5FUixcbiAgICB0eXBlOiBUWVBFX0VYVEVSTkFMX0NPTlRBSU5FUixcbiAgICBzaG93TG9nbzogZmFsc2UsXG59O1xuXG5leHBvcnQgdHlwZSBQcm9wVHlwZXNCYXNlRXh0ZXJuYWxDb250YWluZXIgPSBQcm9wVHlwZXM8XG4gICAgUHJvcEJhc2VFeHRlcm5hbENvbnRhaW5lcixcbiAgICB0eXBlb2YgREVGX0JBU0VFWFRFUk5BTF9DT05UQUlORVJcbj47XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcIkBwa2cvcmVhY3RcIjtcbmltcG9ydCB7IENvbXBvbmVudCwgZ2V0Q2xhc3NOYW1lIH0gZnJvbSBcIkBwa2cvcmVhY3Qtc3Rvcnlib29rL0NvbXBvbmVudFwiO1xuXG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gXCIuLi8uLi9FbGVtZW50L0ltYWdlXCI7XG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tIFwiLi4vLi4vRWxlbWVudC9CdXR0b25cIjtcbmltcG9ydCB7IFRleHQgfSBmcm9tIFwiLi4vLi4vRWxlbWVudC9UZXh0XCI7XG5cbmltcG9ydCB7IEJhc2VNYWluQ29udGFpbmVyIH0gZnJvbSBcIi4uL0Jhc2VNYWluXCI7XG5pbXBvcnQgeyBERUZfQkFTRUVYVEVSTkFMX0NPTlRBSU5FUiB9IGZyb20gXCIuL3R5cGVzXCI7XG5pbXBvcnQgdHlwZSB7IFByb3BCYXNlRXh0ZXJuYWxDb250YWluZXIsIFByb3BUeXBlc0Jhc2VFeHRlcm5hbENvbnRhaW5lciB9IGZyb20gXCIuL3R5cGVzXCI7XG5cbmltcG9ydCBSdWxlcyBmcm9tIFwiLi9fcnVsZXMubW9kdWxlLnNjc3NcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIEJhc2VFeHRlcm5hbENvbnRhaW5lcihwcm9wczogUHJvcEJhc2VFeHRlcm5hbENvbnRhaW5lcikge1xuICAgIGNvbnN0IHtcbiAgICAgICAgXCJoZWFkZXItb25CYWNrXCI6IGhlYWRlckhhbmRsZXIsXG4gICAgICAgIFwiaGVhZGVyLXRpdGxlXCI6IGhlYWRlclRpdGxlLFxuICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgbmFtZSxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgaGVhZGVyQ2xhc3NOYW1lLFxuICAgICAgICBzaG93TG9nbyxcbiAgICAgICAgLi4ucmVzdFxuICAgIH0gPSBwcm9wcyBhcyBQcm9wVHlwZXNCYXNlRXh0ZXJuYWxDb250YWluZXI7XG5cbiAgICBjb25zdCBoYXNIZWFkZXIgPSBCb29sZWFuKGhlYWRlckhhbmRsZXIgfHwgaGVhZGVyVGl0bGUpO1xuICAgIGNvbnN0IGhlYWRlckNsYXNzTmFtZXMgPSBnZXRDbGFzc05hbWUoIWhlYWRlclRpdGxlICYmIFJ1bGVzLm9ubHlSb3csIGhlYWRlckNsYXNzTmFtZSk7XG4gICAgY29uc3QgY29udGFpbmVyTG9nb0NsYXNzTmFtZSA9IGdldENsYXNzTmFtZShzaG93TG9nbyAmJiBSdWxlcy5zdGVwMUxvZ28pO1xuICAgIGNvbnN0IGNvbnRhaW5lckNsYXNzTmFtZSA9IGdldENsYXNzTmFtZShzaG93TG9nbyAmJiBSdWxlcy5oYXNMb2dvKTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxCYXNlTWFpbkNvbnRhaW5lcj5cbiAgICAgICAgICAgIHtzaG93TG9nbyAmJiAoXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NvbnRhaW5lckxvZ29DbGFzc05hbWV9PlxuICAgICAgICAgICAgICAgICAgICA8SW1hZ2UgYWx0PVwibG9nb1wiIHV1aWQ9XCJsb2dvMTUwTG9naW5cIiAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDxDb21wb25lbnQgbmFtZT17bmFtZX0gdGFnPVwiYXJ0aWNsZVwiIHR5cGU9e3R5cGV9IHsuLi5yZXN0fT5cbiAgICAgICAgICAgICAgICA8YXJ0aWNsZSBjbGFzc05hbWU9e2NvbnRhaW5lckNsYXNzTmFtZX0+XG4gICAgICAgICAgICAgICAgICAgIHtoYXNIZWFkZXIgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgPGhlYWRlciBjbGFzc05hbWU9e2hlYWRlckNsYXNzTmFtZXN9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtoZWFkZXJIYW5kbGVyICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbj1cImxlZnRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2luZD1cImljb25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9e3sgdXVpZDogXCJzcGEuYTExeS5idXR0b25zLmJhY2tcIiB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZT1cIm1lZGl1bVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYW50PVwidGV4dFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXtoZWFkZXJIYW5kbGVyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2hlYWRlclRpdGxlICYmIDxUZXh0IHRhZz1cImg1XCIgdXVpZD17aGVhZGVyVGl0bGV9IC8+fVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9oZWFkZXI+XG4gICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgICAgICAgICA8L2FydGljbGU+XG4gICAgICAgICAgICA8L0NvbXBvbmVudD5cbiAgICAgICAgPC9CYXNlTWFpbkNvbnRhaW5lcj5cbiAgICApO1xufVxuQmFzZUV4dGVybmFsQ29udGFpbmVyLmRlZmF1bHRQcm9wcyA9IERFRl9CQVNFRVhURVJOQUxfQ09OVEFJTkVSO1xuIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcIk5BTUVfRVhURVJOQUxfQ09OVEFJTkVSXCI6XCJDb250YWluZXJFeHRlcm5hbFwiLFwiVFlQRV9FWFRFUk5BTF9DT05UQUlORVJcIjpcIkNvbnRhaW5lclwifTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wiTkFNRV9USEVNRVBMQVRGT1JNXCI6XCJUaGVtZVBsYXRmb3JtXCIsXCJUWVBFX1RIRU1FUExBVEZPUk1cIjpcIkJ1bmRsZVwiLFwiTkFNRV9DT05TVU1FUl9USEVNRVBMQVRGT1JNXCI6XCJUaGVtZVBsYXRmb3JtQ29uc3VtZXJcIixcIlRZUEVfQ09OU1VNRVJfVEhFTUVQTEFURk9STVwiOlwiRWxlbWVudFwiLFwiTkFNRV9QUk9WSURFUl9USEVNRVBMQVRGT1JNXCI6XCJUaGVtZVBsYXRmb3JtUHJvdmlkZXJcIixcIlRZUEVfUFJPVklERVJfVEhFTUVQTEFURk9STVwiOlwiUHJvdmlkZXJcIixcIk5BTUVfVEVYVFwiOlwiVGV4dFwiLFwiVFlQRV9URVhUXCI6XCJFbGVtZW50XCIsXCJOQU1FX0JVVFRPTlwiOlwiQnV0dG9uXCIsXCJUWVBFX0JVVFRPTlwiOlwiRWxlbWVudFwiLFwiTkFNRV9MSU5LXCI6XCJMaW5rXCIsXCJUWVBFX0xJTktcIjpcIkVsZW1lbnRcIixcIk5BTUVfSU1BR0VcIjpcIkltYWdlXCIsXCJUWVBFX0lNQUdFXCI6XCJFbGVtZW50XCIsXCJOQU1FX1hTXCI6XCJ4c1wiLFwiTkFNRV9TTVwiOlwic21cIixcIk5BTUVfTURcIjpcIm1kXCIsXCJOQU1FX0xHXCI6XCJsZ1wiLFwiTkFNRV9FWFRFUk5BTF9DT05UQUlORVJcIjpcIkNvbnRhaW5lckV4dGVybmFsXCIsXCJUWVBFX0VYVEVSTkFMX0NPTlRBSU5FUlwiOlwiQ29udGFpbmVyXCIsXCJoYXNMb2dvXCI6XCJfcnVsZXNfaGFzTG9nb19fQXhIR0tcIixcIm9ubHlSb3dcIjpcIl9ydWxlc19vbmx5Um93X18xaW04aFwiLFwic3RlcDFMb2dvXCI6XCJfcnVsZXNfc3RlcDFMb2dvX18zTE5xNVwifTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wiTkFNRV9GT1JNXCI6XCJGb3JtXCIsXCJUWVBFX0ZPUk1cIjpcIkVsZW1lbnRcIn07IiwiaW1wb3J0IFJlYWN0IGZyb20gXCJAcGtnL3JlYWN0XCI7XG5pbXBvcnQgeyBUZXh0RmllbGQgfSBmcm9tIFwiQGFwcC9iYW5jb24tdWlcIjtcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gXCJAcGtnL3JlYWN0LXN0b3J5Ym9vay9Db21wb25lbnRcIjtcbmltcG9ydCB0eXBlIHsgVXNlRm9ybVJldHVybiB9IGZyb20gXCJyZWFjdC1ob29rLWZvcm1cIjtcbmltcG9ydCB0eXBlIHsgUHJvcERlZmF1bHRzLCBQcm9wVHlwZXMgfSBmcm9tIFwiQHBrZy9yZWFjdC1zdG9yeWJvb2svQ29tcG9uZW50XCI7XG5pbXBvcnQgdHlwZSB7IFByb3BzIGFzIFRleHRGaWVsZFByb3BzIH0gZnJvbSBcIkBhcHAvYmFuY29uLXVpL2Rpc3QvY29tcG9uZW50cy9UZXh0RmllbGRcIjtcbmltcG9ydCB0eXBlIHsgT21pdFByb3BJRCwgUHJvcERTIH0gZnJvbSBcIi4uXCI7XG5pbXBvcnQgeyBGb3JtIH0gZnJvbSBcIi4uXCI7XG5pbXBvcnQgTmFtZXNwYWNlIGZyb20gXCIuL19pbmRleC5zY3NzXCI7XG5cbmV4cG9ydCBjb25zdCB7IE5BTUVfSU5QVVRfRklFTEQsIFRZUEVfSU5QVVRfRklFTEQgfSA9IE5hbWVzcGFjZTtcblxuZXhwb3J0IHR5cGUgT25PZmZUeXBlID0gXCJvblwiIHwgXCJvZmZcIjtcblxuZXhwb3J0IHR5cGUgUHJvcElucHV0RmllbGQgPSBQcm9wRFM8VGV4dEZpZWxkUHJvcHM+ICYge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBpZD86IHN0cmluZztcbiAgICBkZWZhdWx0VmFsdWU/OiBzdHJpbmc7XG4gICAgbWF4TGVuZ3RoPzogbnVtYmVyO1xuICAgIHBhdHRlcm4/OiBzdHJpbmc7XG4gICAgb25DaGFuZ2U/OiBSZWFjdC5DaGFuZ2VFdmVudEhhbmRsZXI8SFRNTElucHV0RWxlbWVudD47XG4gICAgb25Gb2N1cz86IChlOiBSZWFjdC5Gb2N1c0V2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB2b2lkO1xuICAgIG9uQmx1cj86IChlOiBSZWFjdC5Gb2N1c0V2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB2b2lkO1xuICAgIHdpdGhTdWdnZXN0aW9ucz86IGJvb2xlYW47XG4gICAgZGlzYWJsZWQ/OiBib29sZWFuO1xuICAgIGF1dG9Db21wbGV0ZT86IE9uT2ZmVHlwZTtcbiAgICBhdXRvQ2FwaXRhbGl6ZT86IE9uT2ZmVHlwZTtcbiAgICBhdXRvQ29ycmVjdD86IE9uT2ZmVHlwZTtcbiAgICBzcGVsbENoZWNrPzogYm9vbGVhbjtcbiAgICBjbGFzc05hbWU/OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgY29uc3QgREVGX0lOUFVUX0ZJRUxEOiBQcm9wRGVmYXVsdHM8XG4gICAgUHJvcElucHV0RmllbGQsXG4gICAgT21pdFByb3BJRDxQcm9wSW5wdXRGaWVsZD4gfCBrZXlvZiBQcm9wRFM8VGV4dEZpZWxkUHJvcHM+XG4+ID0geyBpZDogTkFNRV9JTlBVVF9GSUVMRCB9O1xuXG50eXBlIFByb3BJbnB1dEZpZWxkTWVtb2l6ZWQgPSBQcm9wSW5wdXRGaWVsZCAmIHtcbiAgICBtZXRob2RzOiBVc2VGb3JtUmV0dXJuO1xufTtcblxuY29uc3QgSW5wdXRGaWVsZE1lbW9pemVkID0gUmVhY3QubWVtbyhcbiAgICAocHJvcHM6IFByb3BJbnB1dEZpZWxkTWVtb2l6ZWQpID0+IHtcbiAgICAgICAgY29uc3QgW2hhc1N1Z2dlc3Rpb25zLCBzZXRoYXNTdWdnZXN0aW9uc10gPSBSZWFjdC51c2VTdGF0ZTxib29sZWFuPihmYWxzZSk7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIG1ldGhvZHMsXG4gICAgICAgICAgICBkZWZhdWx0VmFsdWUsXG4gICAgICAgICAgICBwYXR0ZXJuLFxuICAgICAgICAgICAgd2l0aFN1Z2dlc3Rpb25zID0gdHJ1ZSxcbiAgICAgICAgICAgIG9uQ2hhbmdlLFxuICAgICAgICAgICAgb25CbHVyLFxuICAgICAgICAgICAgLi4ucmVzdFxuICAgICAgICB9ID0gcHJvcHM7XG4gICAgICAgIGNvbnN0IHsgcmVnaXN0ZXIsIGZvcm1TdGF0ZSwgc2V0VmFsdWUsIGNsZWFyRXJyb3JzIH0gPSBtZXRob2RzO1xuICAgICAgICBjb25zdCB7IGVycm9ycyB9ID0gZm9ybVN0YXRlO1xuXG4gICAgICAgIGNvbnN0IHJlZ2lzdGVyTmFtZSA9IGAke25hbWV9YCBhcyBjb25zdDtcbiAgICAgICAgY29uc3QgaW5wdXRFcnJvciA9IGVycm9yc1tuYW1lXTtcbiAgICAgICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgICAgIGlmIChkZWZhdWx0VmFsdWUpIHNldFZhbHVlKHJlZ2lzdGVyTmFtZSwgZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgICAgIGlmICghZGVmYXVsdFZhbHVlKSBzZXRWYWx1ZShyZWdpc3Rlck5hbWUsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICBpZiAod2l0aFN1Z2dlc3Rpb25zKSBzZXRoYXNTdWdnZXN0aW9ucyh0cnVlKTtcbiAgICAgICAgfSwgW2RlZmF1bHRWYWx1ZSwgcmVnaXN0ZXJOYW1lLCBzZXRWYWx1ZSwgd2l0aFN1Z2dlc3Rpb25zLCBzZXRoYXNTdWdnZXN0aW9uc10pO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8Q29tcG9uZW50IG5hbWU9e05BTUVfSU5QVVRfRklFTER9IHR5cGU9e1RZUEVfSU5QVVRfRklFTER9PlxuICAgICAgICAgICAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgICAgICAgICAgICAgaWQ9e2lkIHx8IG5hbWV9XG4gICAgICAgICAgICAgICAgICAgIHsuLi4oZGVmYXVsdFZhbHVlICYmIHsgZGVmYXVsdFZhbHVlIH0pfVxuICAgICAgICAgICAgICAgICAgICB7Li4uKGlucHV0RXJyb3IgJiYgeyBlcnJvcjogaW5wdXRFcnJvci5tZXNzYWdlPy50b1N0cmluZygpIH0pfVxuICAgICAgICAgICAgICAgICAgICB7Li4ucmVnaXN0ZXIocmVnaXN0ZXJOYW1lLCB7IG9uQ2hhbmdlOiByZXNldEVycm9ycywgb25CbHVyIH0pfVxuICAgICAgICAgICAgICAgICAgICB7Li4ucmVzdH1cbiAgICAgICAgICAgICAgICAgICAgYXV0b0NvbXBsZXRlPXt3aXRoU3VnZ2VzdGlvbnMgPyBcIm9uXCIgOiBcIm9mZlwifVxuICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuPXtwYXR0ZXJufVxuICAgICAgICAgICAgICAgICAgICBvbktleURvd249e2hpZGVTdWdnZXN0aW9uc31cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9Db21wb25lbnQ+XG4gICAgICAgICk7XG5cbiAgICAgICAgZnVuY3Rpb24gcmVzZXRFcnJvcnMoZXZlbnQ6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSB7XG4gICAgICAgICAgICBpZiAob25DaGFuZ2UpIG9uQ2hhbmdlKGV2ZW50KTtcbiAgICAgICAgICAgIGNsZWFyRXJyb3JzKFtyZWdpc3Rlck5hbWVdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGhpZGVTdWdnZXN0aW9ucyhldmVudDogUmVhY3QuRm9ybUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KTogdm9pZCB7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gZXZlbnQudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgICAgICAgICBjb25zdCB7IHZhbHVlIH0gPSBlbGVtZW50O1xuICAgICAgICAgICAgaWYgKCF2YWx1ZSAmJiAhaGFzU3VnZ2VzdGlvbnMpIHNldGhhc1N1Z2dlc3Rpb25zKHRydWUpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICAocHJldlByb3BzLCBuZXh0UHJvcHMpID0+XG4gICAgICAgIHByZXZQcm9wcy5tZXRob2RzLmZvcm1TdGF0ZS5lcnJvcnMgPT09IG5leHRQcm9wcy5tZXRob2RzLmZvcm1TdGF0ZS5lcnJvcnMgJiZcbiAgICAgICAgcHJldlByb3BzLm1ldGhvZHMuZm9ybVN0YXRlLmRpcnR5RmllbGRzW3ByZXZQcm9wcy5uYW1lXSAhPT1cbiAgICAgICAgICAgIG5leHRQcm9wcy5tZXRob2RzLmZvcm1TdGF0ZS5kaXJ0eUZpZWxkc1tuZXh0UHJvcHMubmFtZV0sXG4pO1xuZXhwb3J0IGZ1bmN0aW9uIElucHV0RmllbGQocHJvcHM6IFByb3BUeXBlczxQcm9wSW5wdXRGaWVsZCwgdHlwZW9mIERFRl9JTlBVVF9GSUVMRD4pIHtcbiAgICBjb25zdCBtZXRob2RzID0gRm9ybS51c2VDb250ZXh0KCk7XG5cbiAgICByZXR1cm4gPElucHV0RmllbGRNZW1vaXplZCBtZXRob2RzPXttZXRob2RzfSB7Li4ucHJvcHN9IC8+O1xufVxuXG5JbnB1dEZpZWxkLmRpc3BsYXlOYW1lID0gTkFNRV9JTlBVVF9GSUVMRDtcbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJOQU1FX0lOUFVUX0ZJRUxEXCI6XCJJbnB1dEZpZWxkXCIsXCJUWVBFX0lOUFVUX0ZJRUxEXCI6XCJFbGVtZW50XCJ9OyIsImltcG9ydCBSZWFjdCBmcm9tIFwiQHBrZy9yZWFjdFwiO1xuaW1wb3J0IHsgQ2hlY2tib3ggfSBmcm9tIFwiQGFwcC9iYW5jb24tdWlcIjtcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gXCJAcGtnL3JlYWN0LXN0b3J5Ym9vay9Db21wb25lbnRcIjtcbmltcG9ydCB0eXBlIHsgUHJvcERlZmF1bHRzLCBQcm9wVHlwZXMgfSBmcm9tIFwiQHBrZy9yZWFjdC1zdG9yeWJvb2svQ29tcG9uZW50XCI7XG5pbXBvcnQgdHlwZSB7IFByb3BzIGFzIENoZWNrYm94UHJvcHMgfSBmcm9tIFwiQGFwcC9iYW5jb24tdWkvZGlzdC9jb21wb25lbnRzL0NoZWNrYm94XCI7XG5pbXBvcnQgdHlwZSB7IFVzZUZvcm1SZXR1cm4gfSBmcm9tIFwicmVhY3QtaG9vay1mb3JtXCI7XG5pbXBvcnQgdHlwZSB7IE9taXRQcm9wSUQsIFByb3BEUyB9IGZyb20gXCIuLlwiO1xuaW1wb3J0IHsgRm9ybSB9IGZyb20gXCIuLlwiO1xuaW1wb3J0IE5hbWVzcGFjZSBmcm9tIFwiLi9faW5kZXguc2Nzc1wiO1xuXG5leHBvcnQgY29uc3QgeyBOQU1FX0lOUFVUX0NIRUNLQk9YLCBUWVBFX0lOUFVUX0NIRUNLQk9YIH0gPSBOYW1lc3BhY2U7XG5cbmV4cG9ydCB0eXBlIFByb3BJbnB1dENoZWNrYm94ID0gUHJvcERTPENoZWNrYm94UHJvcHM+ICYge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBpZD86IHN0cmluZztcbiAgICBvbkNoYW5nZT86ICgoZXZlbnQ6IFJlYWN0LkZvcm1FdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4gdm9pZCkgfCB1bmRlZmluZWQ7XG59O1xuXG5leHBvcnQgY29uc3QgREVGX0lOUFVUX0NIRUNLQk9YOiBQcm9wRGVmYXVsdHM8XG4gICAgUHJvcElucHV0Q2hlY2tib3gsXG4gICAgT21pdFByb3BJRDxQcm9wSW5wdXRDaGVja2JveD4gfCBrZXlvZiBQcm9wRFM8Q2hlY2tib3hQcm9wcz5cbj4gPSB7IGlkOiBOQU1FX0lOUFVUX0NIRUNLQk9YLCBpc0NoZWNrZWQ6IGZhbHNlIH07XG5cbnR5cGUgUHJvcElucHV0Q2hlY2tib3hNZW1vaXplZCA9IFByb3BJbnB1dENoZWNrYm94ICYge1xuICAgIG1ldGhvZHM6IFVzZUZvcm1SZXR1cm47XG59O1xuXG5jb25zdCBJbnB1dENoZWNrYm94TWVtb2l6ZWQgPSBSZWFjdC5tZW1vKFxuICAgIChwcm9wczogUHJvcElucHV0Q2hlY2tib3hNZW1vaXplZCkgPT4ge1xuICAgICAgICBjb25zdCB7IGlkLCBuYW1lLCBtZXRob2RzLCBvbkNoYW5nZSwgaXNDaGVja2VkLCAuLi5yZXN0IH0gPSBwcm9wcztcbiAgICAgICAgY29uc3QgW2NoZWNrZWQsIHNldENoZWNrZWRdID0gUmVhY3QudXNlU3RhdGUoaXNDaGVja2VkKTtcbiAgICAgICAgY29uc3QgeyByZWdpc3RlciwgZm9ybVN0YXRlLCBzZXRWYWx1ZSwgY2xlYXJFcnJvcnMgfSA9IG1ldGhvZHM7XG4gICAgICAgIGNvbnN0IHsgZXJyb3JzIH0gPSBmb3JtU3RhdGU7XG5cbiAgICAgICAgY29uc3QgcmVnaXN0ZXJOYW1lID0gYCR7bmFtZX1gIGFzIGNvbnN0O1xuXG4gICAgICAgIC8vIHVwZGF0ZSBjaGVja2VkIHN0YXRlIHdoZW4gaXNDaGVja2VkIHByb3AgY2hhbmdlXG4gICAgICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoaXNDaGVja2VkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBzZXRDaGVja2VkKGlzQ2hlY2tlZCk7XG4gICAgICAgICAgICAgICAgc2V0VmFsdWUocmVnaXN0ZXJOYW1lLCBpc0NoZWNrZWQsIHsgc2hvdWxkVmFsaWRhdGU6IHRydWUgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIFtpc0NoZWNrZWQsIHJlZ2lzdGVyTmFtZSwgc2V0VmFsdWVdKTtcblxuICAgICAgICBjb25zdCBpbnB1dEVycm9yID0gZXJyb3JzW25hbWVdO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8Q29tcG9uZW50IG5hbWU9e05BTUVfSU5QVVRfQ0hFQ0tCT1h9IHR5cGU9e1RZUEVfSU5QVVRfQ0hFQ0tCT1h9PlxuICAgICAgICAgICAgICAgIDxDaGVja2JveFxuICAgICAgICAgICAgICAgICAgICBpZD17aWQgfHwgbmFtZX1cbiAgICAgICAgICAgICAgICAgICAgey4uLihpbnB1dEVycm9yICYmIHsgZXJyb3I6IGlucHV0RXJyb3IubWVzc2FnZT8udG9TdHJpbmcoKSB9KX1cbiAgICAgICAgICAgICAgICAgICAgey4uLnJlZ2lzdGVyKHJlZ2lzdGVyTmFtZSl9XG4gICAgICAgICAgICAgICAgICAgIGlzQ2hlY2tlZD17Y2hlY2tlZH1cbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGVjayA9ICFjaGVja2VkO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0Q2hlY2tlZChjaGVjayk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRWYWx1ZShyZWdpc3Rlck5hbWUsIGNoZWNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvbkNoYW5nZSkgb25DaGFuZ2UoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhckVycm9ycyhbcmVnaXN0ZXJOYW1lXSk7XG4gICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgIHsuLi5yZXN0fVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0NvbXBvbmVudD5cbiAgICAgICAgKTtcbiAgICB9LFxuICAgIChwcmV2UHJvcHMsIG5leHRQcm9wcykgPT5cbiAgICAgICAgcHJldlByb3BzLm1ldGhvZHMuZm9ybVN0YXRlLmVycm9ycyA9PT0gbmV4dFByb3BzLm1ldGhvZHMuZm9ybVN0YXRlLmVycm9ycyAmJlxuICAgICAgICBwcmV2UHJvcHMubWV0aG9kcy5mb3JtU3RhdGUuZGlydHlGaWVsZHNbcHJldlByb3BzLm5hbWVdICE9PVxuICAgICAgICAgICAgbmV4dFByb3BzLm1ldGhvZHMuZm9ybVN0YXRlLmRpcnR5RmllbGRzW25leHRQcm9wcy5uYW1lXSxcbik7XG5cbmV4cG9ydCBmdW5jdGlvbiBJbnB1dENoZWNrYm94KHByb3BzOiBQcm9wVHlwZXM8UHJvcElucHV0Q2hlY2tib3gsIHR5cGVvZiBERUZfSU5QVVRfQ0hFQ0tCT1g+KSB7XG4gICAgY29uc3QgbWV0aG9kcyA9IEZvcm0udXNlQ29udGV4dCgpO1xuXG4gICAgcmV0dXJuIDxJbnB1dENoZWNrYm94TWVtb2l6ZWQgbWV0aG9kcz17bWV0aG9kc30gey4uLnByb3BzfSAvPjtcbn1cblxuSW5wdXRDaGVja2JveC5kaXNwbGF5TmFtZSA9IE5BTUVfSU5QVVRfQ0hFQ0tCT1g7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcIkBwa2cvcmVhY3RcIjtcbmltcG9ydCB7IFBhc3N3b3JkRmllbGQgfSBmcm9tIFwiQGFwcC9iYW5jb24tdWlcIjtcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gXCJAcGtnL3JlYWN0LXN0b3J5Ym9vay9Db21wb25lbnRcIjtcbmltcG9ydCB0eXBlIHsgUHJvcERlZmF1bHRzLCBQcm9wVHlwZXMgfSBmcm9tIFwiQHBrZy9yZWFjdC1zdG9yeWJvb2svQ29tcG9uZW50XCI7XG5pbXBvcnQgdHlwZSB7IFByb3BzIGFzIFBhc3N3b3JkRmllbGRQcm9wcyB9IGZyb20gXCJAYXBwL2JhbmNvbi11aS9kaXN0L2NvbXBvbmVudHMvUGFzc3dvcmRGaWVsZFwiO1xuaW1wb3J0IHR5cGUgeyBVc2VGb3JtUmV0dXJuIH0gZnJvbSBcInJlYWN0LWhvb2stZm9ybVwiO1xuaW1wb3J0IHR5cGUgeyBPbWl0UHJvcElELCBQcm9wRFMgfSBmcm9tIFwiLi5cIjtcbmltcG9ydCB7IEZvcm0gfSBmcm9tIFwiLi5cIjtcbmltcG9ydCBOYW1lc3BhY2UgZnJvbSBcIi4vX2luZGV4LnNjc3NcIjtcblxuZXhwb3J0IGNvbnN0IHsgTkFNRV9JTlBVVF9QQVNTV09SRCwgVFlQRV9JTlBVVF9QQVNTV09SRCB9ID0gTmFtZXNwYWNlO1xuXG50eXBlIE9uT2ZmVHlwZSA9IFwib25cIiB8IFwib2ZmXCI7XG5cbmV4cG9ydCB0eXBlIFByb3BJbnB1dFBhc3N3b3JkID0gUHJvcERTPFBhc3N3b3JkRmllbGRQcm9wcz4gJiB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGlkPzogc3RyaW5nO1xuICAgIGF1dG9Gb2N1cz86IGJvb2xlYW47XG4gICAgb25DaGFuZ2U/OiBSZWFjdC5DaGFuZ2VFdmVudEhhbmRsZXI8SFRNTElucHV0RWxlbWVudD47XG4gICAgbWF4TGVuZ3RoPzogbnVtYmVyO1xuICAgIHdpdGhTdWdnZXN0aW9ucz86IGJvb2xlYW47XG4gICAgYXV0b0NhcGl0YWxpemU/OiBPbk9mZlR5cGU7XG4gICAgYXV0b0NvcnJlY3Q/OiBPbk9mZlR5cGU7XG4gICAgc3BlbGxDaGVjaz86IGJvb2xlYW47XG59O1xuXG5leHBvcnQgY29uc3QgREVGX0lOUFVUX1BBU1NXT1JEOiBQcm9wRGVmYXVsdHM8XG4gICAgUHJvcElucHV0UGFzc3dvcmQsXG4gICAgT21pdFByb3BJRDxQcm9wSW5wdXRQYXNzd29yZD4gfCBrZXlvZiBQcm9wRFM8UGFzc3dvcmRGaWVsZFByb3BzPlxuPiA9IHsgaWQ6IE5BTUVfSU5QVVRfUEFTU1dPUkQgfTtcblxudHlwZSBQcm9wSW5wdXRQYXNzd29yZE1lbW9pemVkID0gUHJvcElucHV0UGFzc3dvcmQgJiB7XG4gICAgbWV0aG9kczogVXNlRm9ybVJldHVybjtcbn07XG5cbmNvbnN0IElucHV0UGFzc3dvcmRNZW1vaXplZCA9IFJlYWN0Lm1lbW8oXG4gICAgKHByb3BzOiBQcm9wSW5wdXRQYXNzd29yZE1lbW9pemVkKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgaWQsIG5hbWUsIGF1dG9Gb2N1cywgbWV0aG9kcywgd2l0aFN1Z2dlc3Rpb25zID0gdHJ1ZSwgb25DaGFuZ2UsIC4uLnJlc3QgfSA9IHByb3BzO1xuICAgICAgICBjb25zdCB7IHJlZ2lzdGVyLCBmb3JtU3RhdGUsIGNsZWFyRXJyb3JzIH0gPSBtZXRob2RzO1xuICAgICAgICBjb25zdCB7IGVycm9ycyB9ID0gZm9ybVN0YXRlO1xuXG4gICAgICAgIGNvbnN0IHJlZ2lzdGVyTmFtZSA9IGAke25hbWV9YCBhcyBjb25zdDtcbiAgICAgICAgY29uc3QgaW5wdXRFcnJvciA9IGVycm9yc1tuYW1lXTtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPENvbXBvbmVudCBuYW1lPXtOQU1FX0lOUFVUX1BBU1NXT1JEfSB0eXBlPXtUWVBFX0lOUFVUX1BBU1NXT1JEfT5cbiAgICAgICAgICAgICAgICA8UGFzc3dvcmRGaWVsZFxuICAgICAgICAgICAgICAgICAgICBhdXRvQ29tcGxldGU9e3dpdGhTdWdnZXN0aW9ucyA/IFwib25cIiA6IFwib2ZmXCJ9XG4gICAgICAgICAgICAgICAgICAgIGF1dG9Gb2N1cz17YXV0b0ZvY3VzfVxuICAgICAgICAgICAgICAgICAgICBpZD17aWQgfHwgbmFtZX1cbiAgICAgICAgICAgICAgICAgICAgey4uLihpbnB1dEVycm9yICYmIHsgZXJyb3I6IGlucHV0RXJyb3IubWVzc2FnZT8udG9TdHJpbmcoKSB9KX1cbiAgICAgICAgICAgICAgICAgICAgey4uLnJlZ2lzdGVyKHJlZ2lzdGVyTmFtZSwgeyByZXF1aXJlZDogdHJ1ZSwgb25DaGFuZ2U6IHJlc2V0RXJyb3JzIH0pfVxuICAgICAgICAgICAgICAgICAgICB7Li4ucmVzdH1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9Db21wb25lbnQ+XG4gICAgICAgICk7XG4gICAgICAgIGZ1bmN0aW9uIHJlc2V0RXJyb3JzKGV2ZW50OiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50Pikge1xuICAgICAgICAgICAgaWYgKG9uQ2hhbmdlKSBvbkNoYW5nZShldmVudCk7XG4gICAgICAgICAgICBjbGVhckVycm9ycyhbcmVnaXN0ZXJOYW1lXSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIChwcmV2UHJvcHMsIG5leHRQcm9wcykgPT5cbiAgICAgICAgcHJldlByb3BzLm1ldGhvZHMuZm9ybVN0YXRlLmVycm9ycyA9PT0gbmV4dFByb3BzLm1ldGhvZHMuZm9ybVN0YXRlLmVycm9ycyAmJlxuICAgICAgICBwcmV2UHJvcHMubWV0aG9kcy5mb3JtU3RhdGUuZGlydHlGaWVsZHNbcHJldlByb3BzLm5hbWVdICE9PVxuICAgICAgICAgICAgbmV4dFByb3BzLm1ldGhvZHMuZm9ybVN0YXRlLmRpcnR5RmllbGRzW25leHRQcm9wcy5uYW1lXSxcbik7XG5cbmV4cG9ydCBmdW5jdGlvbiBJbnB1dFBhc3N3b3JkKHByb3BzOiBQcm9wVHlwZXM8UHJvcElucHV0UGFzc3dvcmQsIHR5cGVvZiBERUZfSU5QVVRfUEFTU1dPUkQ+KSB7XG4gICAgY29uc3QgbWV0aG9kcyA9IEZvcm0udXNlQ29udGV4dCgpO1xuXG4gICAgcmV0dXJuIDxJbnB1dFBhc3N3b3JkTWVtb2l6ZWQgbWV0aG9kcz17bWV0aG9kc30gey4uLnByb3BzfSAvPjtcbn1cblxuSW5wdXRQYXNzd29yZC5kaXNwbGF5TmFtZSA9IE5BTUVfSU5QVVRfUEFTU1dPUkQ7XG5JbnB1dFBhc3N3b3JkLmRlZmF1bHRQcm9wcyA9IERFRl9JTlBVVF9QQVNTV09SRDtcbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJOQU1FX0lOUFVUX0NIRUNLQk9YXCI6XCJJbnB1dENoZWNrYm94XCIsXCJUWVBFX0lOUFVUX0NIRUNLQk9YXCI6XCJFbGVtZW50XCJ9OyIsImNvbnN0IFBBU1NQT1JUID0gXCIwMDA1XCIgYXMgY29uc3Q7XG5jb25zdCBDREkgPSBcIkFSMUNcIiBhcyBjb25zdDtcbmV4cG9ydCBjb25zdCBDVUlUID0gXCJBUjFCXCIgYXMgY29uc3Q7XG5cbmV4cG9ydCBjb25zdCBQQVNTUE9SVF9NQVhfTEVOR1RIID0gMTU7XG5leHBvcnQgY29uc3QgQ1VJVF9NQVhfTEVOR1RIID0gMTE7XG5leHBvcnQgY29uc3QgQ0RJX01BWF9MRU5HVEggPSAxMTtcblxuZXhwb3J0IGNvbnN0IGlzQ3VpdFR5cGUgPSAocHJvcDogdW5rbm93bikgPT4gcHJvcCA9PT0gQ1VJVDtcbmV4cG9ydCBjb25zdCBpc0NESVR5cGUgPSAocHJvcDogdW5rbm93bikgPT4gcHJvcCA9PT0gQ0RJO1xuZXhwb3J0IGNvbnN0IGlzUGFzc3BvcnRUeXBlID0gKHByb3A6IHVua25vd24pID0+IHByb3AgPT09IFBBU1NQT1JUO1xuXG5leHBvcnQgY29uc3QgRE9DVU1FTlRTX01BWF9MRU5HVEggPSB7XG4gICAgXCIwMDA1XCI6IFBBU1NQT1JUX01BWF9MRU5HVEgsXG4gICAgQVIxQzogQ0RJX01BWF9MRU5HVEgsXG4gICAgQVIxQjogQ1VJVF9NQVhfTEVOR1RILFxufTtcblxuZXhwb3J0IHR5cGUgRG9jdW1lbnRzID0ga2V5b2YgdHlwZW9mIERPQ1VNRU5UU19NQVhfTEVOR1RIO1xuIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcIk5BTUVfSU5QVVRfUEFTU1dPUkRcIjpcIklucHV0UGFzc3dvcmRcIixcIlRZUEVfSU5QVVRfUEFTU1dPUkRcIjpcIkVsZW1lbnRcIn07IiwiaW1wb3J0IHtcbiAgICBNSU5VU19PTkUsXG4gICAgTklORV9DT0RFX1BPSU5ULFxuICAgIE9ORSxcbiAgICBaRVJPLFxuICAgIFpFUk9fQ09ERV9QT0lOVCxcbiAgICBUV08sXG59IGZyb20gXCJAYXBwL2JhbmNvbi1kYXRhL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgQ3VzdG9tRXJyb3IgfSBmcm9tIFwiQGFwcC9iYW5jb24tZGF0YS92YWxpZGF0aW9uc1wiO1xuaW1wb3J0IHsgQ1VJVCB9IGZyb20gXCJAYXBwL2JhbmNvci1jb21wb25lbnRzL1NlY3Rpb25zL0RvY3VtZW50L2RvY3VtZW50VXRpbHNcIjtcbmltcG9ydCB0eXBlIHsgU3RydWN0IH0gZnJvbSBcIkBwa2cvdXRpbHMvc2NoZW1hXCI7XG5pbXBvcnQgeyBEZWZpbmUsIER5bmFtaWMsIElzLCBUeXBlIH0gZnJvbSBcIkBwa2cvdXRpbHMvc2NoZW1hXCI7XG5pbXBvcnQgeyBwYXJzZUNvbmZpZyB9IGZyb20gXCJ+L3V0aWxzL2NvbmZpZ1V0aWxzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQYXNzd29yZFZhbGlkYXRvcihcbiAgICB0ZXh0R2V0OiAoYXJnOiB7IHV1aWQ6IHN0cmluZzsgcmVwbGFjZT86IHN0cmluZyB8IHN0cmluZ1tdIH0pID0+IHN0cmluZyxcbiAgICBnZXRWYWx1ZUNvbmZpZzogKHM6IHN0cmluZykgPT4gdW5rbm93bixcbiAgICBkb2N1bWVudE51bWJlcj86IHsgbnVtYmVyOiBzdHJpbmc7IHR5cGU6IHN0cmluZyB9LFxuICAgIHVzZXJuYW1lPzogc3RyaW5nLFxuKSB7XG4gICAgY29uc3QgcGFzc3dvcmRNaW5MZW5ndGggPSBwYXJzZUNvbmZpZzxudW1iZXI+KGdldFZhbHVlQ29uZmlnKFwiY29yZS5wYXNzd29yZC5taW5MZW5ndGhcIikpO1xuICAgIGNvbnN0IHBhc3N3b3JkTWF4TGVuZ3RoID0gcGFyc2VDb25maWc8bnVtYmVyPihnZXRWYWx1ZUNvbmZpZyhcImNvcmUucGFzc3dvcmQubWF4TGVuZ3RoXCIpKTtcblxuICAgIGNvbnN0IHBhc3N3b3JkVmFsaWRhdGVFcnJvclBhc3N3b3JkID0gdGV4dEdldCh7XG4gICAgICAgIHV1aWQ6IFwic3BhLmdlbmVyaWMuYWNjZXNzRGF0YS5lcnJvci5kb2N1bWVudE51bWJlckluUGFzc3dvcmRcIixcbiAgICB9KTtcblxuICAgIGNvbnN0IHBhc3N3b3JkVmFsaWRhdGVFcnJvclVzZXIgPSB0ZXh0R2V0KHtcbiAgICAgICAgdXVpZDogXCJzcGEuZ2VuZXJpYy5hY2Nlc3NEYXRhLmVycm9yLnVzZXJJblBhc3N3b3JkXCIsXG4gICAgfSk7XG5cbiAgICBjb25zdCB0ZXh0RXJyb3JNaW5MZW5ndGggPSB0ZXh0R2V0KHtcbiAgICAgICAgdXVpZDogXCJzcGEucGFzc3dvcmQuZXJyb3IudG9vU21hbGxcIixcbiAgICAgICAgcmVwbGFjZTogYCR7cGFzc3dvcmRNaW5MZW5ndGh9YCxcbiAgICB9KTtcbiAgICBjb25zdCB0ZXh0RXJyb3JNYXhMZW5ndGggPSB0ZXh0R2V0KHtcbiAgICAgICAgdXVpZDogXCJzcGEucGFzc3dvcmQuZXJyb3IudG9vQmlnXCIsXG4gICAgICAgIHJlcGxhY2U6IGAke3Bhc3N3b3JkTWF4TGVuZ3RofWAsXG4gICAgfSk7XG5cbiAgICBjb25zdCB0ZXh0RXJyb3JSZXF1aXJlZCA9IHRleHRHZXQoeyB1dWlkOiBcInNwYS5nZW5lcmljLmZpZWxkLmVycm9yLnJlcXVpcmVkXCIgfSk7XG4gICAgY29uc3QgcmVxdWlyZWRWYWxpZGF0aW9uID0gQ3VzdG9tRXJyb3IoVHlwZS5zdHJpbmcucmVxdWlyZWQoKSwgdGV4dEVycm9yUmVxdWlyZWQpO1xuXG4gICAgY29uc3QgbG9naW5WYWxpZGF0aW9uS2V5cyA9IFtcbiAgICAgICAgXCJhdExlYXN0T25lRGlnaXRcIixcbiAgICAgICAgXCJhdExlYXN0T25lTG93ZXJjYXNlQ2hhclwiLFxuICAgICAgICBcImF0TGVhc3RPbmVVcHBlcmNhc2VDaGFyXCIsXG4gICAgXTtcblxuICAgIGNvbnN0IHZhbGlkYXRvcnM6IFN0cnVjdDxzdHJpbmcsIHVua25vd24+W10gPSBbXG4gICAgICAgIEN1c3RvbUVycm9yKFR5cGUuc3RyaW5nLm9mTGVuZ3RoKHBhc3N3b3JkTWluTGVuZ3RoKSwgdGV4dEVycm9yTWluTGVuZ3RoKSxcbiAgICAgICAgQ3VzdG9tRXJyb3IoVHlwZS5zdHJpbmcub2ZMZW5ndGgoT05FLCBwYXNzd29yZE1heExlbmd0aCksIHRleHRFcnJvck1heExlbmd0aCksXG4gICAgICAgIERlZmluZTxzdHJpbmc+KFwiZG9jdW1lbnQgbnVtYmVyIGluIHBhc3N3b3JkXCIsIHZhbGlkYXRlRG9jdW1lbnROdW1iZXJJblBhc3N3b3JkKSxcbiAgICAgICAgRGVmaW5lPHN0cmluZz4oXCJ1c2VybmFtZSBpbiBwYXNzd29yZFwiLCB2YWxpZGF0ZVVzZXJuYW1lSW5QYXNzd29yZCksXG4gICAgICAgIERlZmluZTxzdHJpbmc+KFwicmVxdWlyZWQgY2hhcnNcIiwgdmFsaWRhdGVSZXBlYXRlZENoYXJzKSxcbiAgICAgICAgLi4ubG9naW5WYWxpZGF0aW9uS2V5cy5maWx0ZXIoZW5hYmxlVmFsaWRhdGlvbkZpbHRlcikubWFwKGNyZWF0ZUN1c3RvbVJlZ2V4RXJyb3IpLFxuICAgIF07XG5cbiAgICByZXR1cm4gRHluYW1pYygodmFsdWUpID0+IHtcbiAgICAgICAgY29uc3QgZmFpbGVkVmFsaWRhdG9yID0gdmFsaWRhdG9ycy5maW5kKCh4KSA9PiAhSXModmFsdWUsIHgpKTtcbiAgICAgICAgaWYgKHZhbHVlICYmIGZhaWxlZFZhbGlkYXRvcikge1xuICAgICAgICAgICAgcmV0dXJuIGZhaWxlZFZhbGlkYXRvcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVxdWlyZWRWYWxpZGF0aW9uO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gdmFsaWRhdGVEb2N1bWVudE51bWJlckluUGFzc3dvcmQodmFsdWVUb1ZhbGlkYXRlOiB1bmtub3duKSB7XG4gICAgICAgIGlmICghZG9jdW1lbnROdW1iZXIpIHJldHVybiB0cnVlO1xuXG4gICAgICAgIGNvbnN0IHZhbHVlQXNTdHJpbmcgPSB2YWx1ZVRvVmFsaWRhdGUgYXMgc3RyaW5nO1xuXG4gICAgICAgIGZ1bmN0aW9uIGN1aXRUb0RuaShjdWl0OiBzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBjdWl0LnNsaWNlKFRXTywgTUlOVVNfT05FKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHsgbnVtYmVyLCB0eXBlIH0gPSBkb2N1bWVudE51bWJlcjtcbiAgICAgICAgY29uc3QgZG9jdW1lbnROdW1iZXJUb1ZhbGlkYXRlID0gdHlwZSA9PT0gQ1VJVCA/IGN1aXRUb0RuaShudW1iZXIpIDogbnVtYmVyO1xuXG4gICAgICAgIGlmICh2YWx1ZUFzU3RyaW5nLmluY2x1ZGVzKGRvY3VtZW50TnVtYmVyVG9WYWxpZGF0ZSkpIHJldHVybiBwYXNzd29yZFZhbGlkYXRlRXJyb3JQYXNzd29yZDtcblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB2YWxpZGF0ZVVzZXJuYW1lSW5QYXNzd29yZCh2YWx1ZVRvVmFsaWRhdGU6IHVua25vd24pIHtcbiAgICAgICAgaWYgKCF1c2VybmFtZSkgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgY29uc3QgdmFsdWVBc1N0cmluZyA9IHZhbHVlVG9WYWxpZGF0ZSBhcyBzdHJpbmc7XG5cbiAgICAgICAgaWYgKHZhbHVlQXNTdHJpbmcuaW5jbHVkZXModXNlcm5hbWUpKSByZXR1cm4gcGFzc3dvcmRWYWxpZGF0ZUVycm9yVXNlcjtcblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB2YWxpZGF0ZVJlcGVhdGVkQ2hhcnModmFsdWVUb1ZhbGlkYXRlOiB1bmtub3duKSB7XG4gICAgICAgIGlmICh2YWx1ZVRvVmFsaWRhdGUgJiYgZW5hYmxlVmFsaWRhdGlvbkZpbHRlcihcInJlcGVhdGVkQ2hhcmFjdGVyc1wiKSkge1xuICAgICAgICAgICAgY29uc3QgdmFsdWVBc1N0cmluZyA9IHZhbHVlVG9WYWxpZGF0ZSBhcyBzdHJpbmc7XG4gICAgICAgICAgICBjb25zdCByZXF1aXJlZENoYXJzID0gcGFyc2VDb25maWc8bnVtYmVyPihcbiAgICAgICAgICAgICAgICBnZXRWYWx1ZUNvbmZpZyhcInNwYS5wYXNzd29yZC5yZXBlYXRlZENoYXJhY3RlcnMubWF4aW11bVwiKSxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGNvbnN0IHJlcGVhdGVkQ2hhcnNSZWdleCA9IC8oXFx3KVxcMSsvZztcbiAgICAgICAgICAgIGNvbnN0IGNvbnNlY3V0aXZlRGlnaXRzUmVnZXggPSAvKFswLTldezMsfSkvZztcblxuICAgICAgICAgICAgY29uc3QgZXhpc3RzUmVwZWF0ZWRDaGFyYWN0ZXJzID0gdmFsdWVBc1N0cmluZ1xuICAgICAgICAgICAgICAgIC5tYXRjaChyZXBlYXRlZENoYXJzUmVnZXgpXG4gICAgICAgICAgICAgICAgPy5maW5kKCh2YWx1ZSkgPT4gdmFsdWUubGVuZ3RoID49IHJlcXVpcmVkQ2hhcnMpO1xuXG4gICAgICAgICAgICBjb25zdCBleGlzdHNDb25zZWN1dGl2ZURpZ2l0cyA9IHZhbHVlQXNTdHJpbmdcbiAgICAgICAgICAgICAgICAubWF0Y2goY29uc2VjdXRpdmVEaWdpdHNSZWdleClcbiAgICAgICAgICAgICAgICA/LnNvbWUoKHZhbHVlKSA9PiB2YWx1ZUlzQURpZ2l0U2VxdWVuY2UodmFsdWUsIHJlcXVpcmVkQ2hhcnMpKTtcblxuICAgICAgICAgICAgaWYgKGV4aXN0c1JlcGVhdGVkQ2hhcmFjdGVycylcbiAgICAgICAgICAgICAgICByZXR1cm4gdGV4dEdldCh7XG4gICAgICAgICAgICAgICAgICAgIHV1aWQ6IFwic3BhLnBhc3N3b3JkLmVycm9yLnJlcGVhdGVkQ2hhcmFjdGVyc1wiLFxuICAgICAgICAgICAgICAgICAgICByZXBsYWNlOiBgJHtyZXF1aXJlZENoYXJzfWAsXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChleGlzdHNDb25zZWN1dGl2ZURpZ2l0cylcbiAgICAgICAgICAgICAgICByZXR1cm4gdGV4dEdldCh7XG4gICAgICAgICAgICAgICAgICAgIHV1aWQ6IFwic3BhLnBhc3N3b3JkLmVycm9yLmNvbnNlY3V0aXZlTnVtYmVyc1wiLFxuICAgICAgICAgICAgICAgICAgICByZXBsYWNlOiBgJHtyZXF1aXJlZENoYXJzfWAsXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXF1aXJlZFZhbGlkYXRpb247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdmFsdWVJc0FEaWdpdFNlcXVlbmNlKHZhbHVlOiBzdHJpbmcsIGNoYXJzVG9Db3VudDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IE9ORSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBsZXQgZmlyc3RDaGFyID0gdmFsdWUuY2hhckNvZGVBdChaRVJPKTtcbiAgICAgICAgbGV0IHNlcXVlbmNlQ291bnRlcjogbnVtYmVyID0gWkVSTztcbiAgICAgICAgbGV0IG1heFNlcXVlbmNlQ291bnRlcjogbnVtYmVyID0gWkVSTztcbiAgICAgICAgZm9yIChsZXQgaSA9IE9ORTsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50Q2hhciA9IHZhbHVlLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgc2VxdWVuY2VDb3VudGVyID49IFpFUk8gJiZcbiAgICAgICAgICAgICAgICAoKGZpcnN0Q2hhciA9PT0gTklORV9DT0RFX1BPSU5UICYmIGN1cnJlbnRDaGFyID09PSBaRVJPX0NPREVfUE9JTlQpIHx8XG4gICAgICAgICAgICAgICAgICAgIGZpcnN0Q2hhciArIE9ORSA9PT0gY3VycmVudENoYXIpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBzZXF1ZW5jZUNvdW50ZXIrKztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgc2VxdWVuY2VDb3VudGVyIDw9IFpFUk8gJiZcbiAgICAgICAgICAgICAgICAoKGZpcnN0Q2hhciA9PT0gWkVST19DT0RFX1BPSU5UICYmIGN1cnJlbnRDaGFyID09PSBOSU5FX0NPREVfUE9JTlQpIHx8XG4gICAgICAgICAgICAgICAgICAgIGZpcnN0Q2hhciAtIE9ORSA9PT0gY3VycmVudENoYXIpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBzZXF1ZW5jZUNvdW50ZXItLTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbWF4U2VxdWVuY2VDb3VudGVyID0gTWF0aC5tYXgoTWF0aC5hYnMoc2VxdWVuY2VDb3VudGVyKSArIE9ORSwgbWF4U2VxdWVuY2VDb3VudGVyKTtcbiAgICAgICAgICAgICAgICBzZXF1ZW5jZUNvdW50ZXIgPSBaRVJPO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmlyc3RDaGFyID0gY3VycmVudENoYXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KE1hdGguYWJzKHNlcXVlbmNlQ291bnRlcikgKyBPTkUsIG1heFNlcXVlbmNlQ291bnRlcikgPj0gY2hhcnNUb0NvdW50O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVuYWJsZVZhbGlkYXRpb25GaWx0ZXIoa2V5OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlQ29uZmlnPGJvb2xlYW4+KGdldFZhbHVlQ29uZmlnKGBzcGEucGFzc3dvcmQuJHtrZXl9LmVuYWJsZWRgKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlQ3VzdG9tUmVnZXhFcnJvcihrZXk6IHN0cmluZykge1xuICAgICAgICBjb25zdCByZWdleCA9IHBhcnNlQ29uZmlnPHN0cmluZz4oZ2V0VmFsdWVDb25maWcoYHNwYS5wYXNzd29yZC4ke2tleX0ucmVnZXhgKSk7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSB0ZXh0R2V0KHsgdXVpZDogYHNwYS5wYXNzd29yZC5lcnJvci4ke2tleX1gIH0pO1xuICAgICAgICByZXR1cm4gQ3VzdG9tRXJyb3IoVHlwZS5zdHJpbmcubWF0Y2gobmV3IFJlZ0V4cChyZWdleCkpLCBtZXNzYWdlKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcIkBwa2cvcmVhY3RcIjtcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gXCJAcGtnL3JlYWN0LXN0b3J5Ym9vay9Db21wb25lbnRcIjtcbmltcG9ydCB0eXBlIHsgUHJvcERlZmF1bHRzLCBQcm9wVHlwZXMgfSBmcm9tIFwiQHBrZy9yZWFjdC1zdG9yeWJvb2svQ29tcG9uZW50XCI7XG5cbmltcG9ydCB7IEF2YXRhciwgQmFkZ2UsIExlZ2VuZCwgU2VjdXJpdHlJbWFnZSB9IGZyb20gXCJAYXBwL2JhbmNvbi11aVwiO1xuXG5pbXBvcnQgdHlwZSB7IFByb3BzIGFzIFByb3BTZWN1cml0eUltYWdlIH0gZnJvbSBcIkBhcHAvYmFuY29uLXVpL2Rpc3QvY29tcG9uZW50cy9TZWN1cml0eUltYWdlXCI7XG5pbXBvcnQgdHlwZSB7IFNlY3VyaXR5SW1hZ2VzIH0gZnJvbSBcIkBhcHAvYmFuY29uLXVpL2Rpc3QvY29tcG9uZW50cy9TZWN1cml0eUltYWdlL1NlY3VyaXR5SW1hZ2UudHlwZXNcIjtcbmltcG9ydCB7IE9ORSwgTUlOVVNfT05FIH0gZnJvbSBcIkBhcHAvYmFuY29uLWRhdGEvY29uc3RhbnRzXCI7XG5pbXBvcnQgUnVsZXMgZnJvbSBcIi4vX3J1bGVzLm1vZHVsZS5zY3NzXCI7XG5pbXBvcnQgTmFtZXNwYWNlIGZyb20gXCIuL19pbmRleC5zY3NzXCI7XG5pbXBvcnQgeyBGb3JtIH0gZnJvbSBcIi4uL0Zvcm1cIjtcbmltcG9ydCB7IFRleHQsIHVzZVRleHQgfSBmcm9tIFwiLi4vVGV4dFwiO1xuXG5leHBvcnQgY29uc3QgeyBOQU1FX1NFQ1VSSVRZX1NFQUwsIFRZUEVfU0VDVVJJVFlfU0VBTCB9ID0gTmFtZXNwYWNlO1xuXG5leHBvcnQgdHlwZSBQcm9wU2VjdXJpdHlTZWFsID0gT21pdDxcbiAgICBQcm9wU2VjdXJpdHlJbWFnZSxcbiAgICBrZXlvZiBSZWFjdC5IVE1MQXR0cmlidXRlczxIVE1MRWxlbWVudD4gfCBcIm9uQ2xvc2VcIiB8IFwib3B0aW9uc1wiXG4+ICYge1xuICAgIGJ1dHRvbkxhYmVsOiBzdHJpbmc7XG4gICAgc2VsZWN0ZWRBdmF0YXI6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgb3B0aW9uczogU2VjdXJpdHlJbWFnZXNbXTtcbiAgICB1dWlkTGFiZWw6IHN0cmluZztcbiAgICB1dWlkRXJyb3I6IHN0cmluZztcbn07XG5cbmV4cG9ydCBjb25zdCBERUZfU0VDVVJJVFlfU0VBTDogUHJvcERlZmF1bHRzPE9taXQ8UHJvcFNlY3VyaXR5U2VhbCwgXCJvbkNob29zZUltYWdlXCI+PiA9IHt9O1xuXG5leHBvcnQgdHlwZSBQcm9wVHlwZXNTZWN1cml0eVNlYWwgPSBQcm9wVHlwZXM8UHJvcFNlY3VyaXR5U2VhbCwgdHlwZW9mIERFRl9TRUNVUklUWV9TRUFMPjtcbi8vVE9ETzogY2hlY2sgcHJvcCB0eXBlIGZvciB0ZXh0cyBkYXRhLCBzdHJpbmcgb3IgcmVhY3Qgbm9kZVxuZXhwb3J0IGZ1bmN0aW9uIFNlY3VyaXR5U2VhbChwcm9wczogUHJvcFNlY3VyaXR5U2VhbCkge1xuICAgIGNvbnN0IHtcbiAgICAgICAgYnV0dG9uTGFiZWwsXG4gICAgICAgIG1vZGFsVGl0bGUsXG4gICAgICAgIG5hbWUsXG4gICAgICAgIG9wdGlvbnMsXG4gICAgICAgIHNlbGVjdGVkQXZhdGFyLFxuICAgICAgICB1dWlkRXJyb3IsXG4gICAgICAgIHV1aWRMYWJlbCxcbiAgICAgICAgLi4ucmVzdFxuICAgIH0gPSBwcm9wcyBhcyBQcm9wVHlwZXNTZWN1cml0eVNlYWw7XG4gICAgY29uc3QgbWV0aG9kcyA9IEZvcm0udXNlQ29udGV4dCgpO1xuICAgIGNvbnN0IHsgdGV4dEdldCB9ID0gdXNlVGV4dCgpO1xuICAgIGNvbnN0IHsgcmVnaXN0ZXIsIGZvcm1TdGF0ZSwgc2V0VmFsdWUgfSA9IG1ldGhvZHM7XG4gICAgY29uc3QgeyBlcnJvcnMgfSA9IGZvcm1TdGF0ZTtcbiAgICBjb25zdCByZWdpc3Rlck5hbWUgPSBgJHtuYW1lfWAgYXMgY29uc3Q7XG4gICAgY29uc3Qgb3B0aW9uc0ZvckRTID0gT2JqZWN0LnZhbHVlcyhvcHRpb25zKTtcbiAgICBjb25zdCBlcnJvclNlY3VyaXR5SW1hZ2UgPSBlcnJvcnNbbmFtZV0gJiYgIXNlbGVjdGVkQXZhdGFyO1xuICAgIGNvbnN0IHRleHRFcnJvciA9IHRleHRHZXQoeyB1dWlkOiB1dWlkRXJyb3IgfSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8Q29tcG9uZW50IG5hbWU9e05BTUVfU0VDVVJJVFlfU0VBTH0gdHlwZT17VFlQRV9TRUNVUklUWV9TRUFMfT5cbiAgICAgICAgICAgIDxTZWN1cml0eUltYWdlXG4gICAgICAgICAgICAgICAgey4uLnJlc3R9XG4gICAgICAgICAgICAgICAgYnV0dG9uTGFiZWw9e2J1dHRvbkxhYmVsfVxuICAgICAgICAgICAgICAgIG1vZGFsVGl0bGU9e21vZGFsVGl0bGV9XG4gICAgICAgICAgICAgICAgb3B0aW9ucz17b3B0aW9uc0ZvckRTfVxuICAgICAgICAgICAgICAgIG9uQ2hvb3NlSW1hZ2U9e29uQ2hvb3NlSW1hZ2V9XG4gICAgICAgICAgICAgICAgb25DbG9zZT17aGFuZGxlQ2xvc2V9XG4gICAgICAgICAgICAgICAgey4uLnJlZ2lzdGVyKHJlZ2lzdGVyTmFtZSl9PlxuICAgICAgICAgICAgICAgIDxCYWRnZSBjb2xvcj1cInByaW1hcnlcIiBuYW1lPVwiY2FtZXJhXCIgcGxhY2VtZW50PVwiYnJcIiBzaXplPVwic21hbGxcIj5cbiAgICAgICAgICAgICAgICAgICAgPEF2YXRhclxuICAgICAgICAgICAgICAgICAgICAgICAgYWx0PXt0ZXh0R2V0KHsgdXVpZDogXCJsb2dpbi5zdGVwMi5pbWFnZUFsdFwiIH0pfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9XCJkYXJrLWdyZWVuXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9eyFzZWxlY3RlZEF2YXRhciA/IFwidXNlclwiIDogdW5kZWZpbmVkfVxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZT1cImxhcmdlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz17c2VsZWN0ZWRBdmF0YXJ9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9CYWRnZT5cbiAgICAgICAgICAgIDwvU2VjdXJpdHlJbWFnZT5cblxuICAgICAgICAgICAgeyFlcnJvclNlY3VyaXR5SW1hZ2UgJiYgPFRleHQgdXVpZD17dXVpZExhYmVsfSAvPn1cbiAgICAgICAgICAgIHtlcnJvclNlY3VyaXR5SW1hZ2UgJiYgKFxuICAgICAgICAgICAgICAgIDxMZWdlbmQgY2xhc3NOYW1lPXtSdWxlcy5lcnJvclNlY3VyaXR5SW1hZ2V9IHZhcmlhbnQ9XCJlcnJvclwiPlxuICAgICAgICAgICAgICAgICAgICB7dGV4dEVycm9yfVxuICAgICAgICAgICAgICAgIDwvTGVnZW5kPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgPC9Db21wb25lbnQ+XG4gICAgKTtcblxuICAgIGZ1bmN0aW9uIGhhbmRsZUNsb3NlKCkge1xuICAgICAgICAvKiogSWYgaXRzIGNsb3NlZCwgaXQgc2V0cyB0aGUgdmFsdWUgYmFjayB0byB0aGUgc2VsZWN0ZWRBdmF0YXIgb3IgaWYgdGhlcmUgaXNudCwgaXQgc2V0cyBpdCB1bmRlZmluZWQgKi9cbiAgICAgICAgY29uc3QgaW5kZXggPSBvcHRpb25zLmZpbmRJbmRleCgoc2VjSW1nKSA9PiBzZWNJbWcuc3JjID09PSBzZWxlY3RlZEF2YXRhcik7XG4gICAgICAgIC8vIEJlY2F1c2UgdGhlIGluZGV4IGlzIDAgYmFzZWQgYW5kIHRoZSBzZWN1cml0eSBzZWFsc1xuICAgICAgICAvLyBzdGFydCBmcm9tIDEsIHdlIGFkZCAxIHRvIGFjY291bnQgZm9yIHRoaXNcbiAgICAgICAgY29uc3Qga2V5ID0gaW5kZXggIT09IE1JTlVTX09ORSA/IGluZGV4ICsgT05FIDogaW5kZXg7XG4gICAgICAgIHNldFZhbHVlKHJlZ2lzdGVyTmFtZSwga2V5IHx8IHVuZGVmaW5lZCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25DaG9vc2VJbWFnZShzcmM6IHN0cmluZykge1xuICAgICAgICBjb25zdCBpbmRleCA9IG9wdGlvbnMuZmluZEluZGV4KChzZWNJbWcpID0+IHNlY0ltZy5zcmMgPT09IHNyYyk7XG4gICAgICAgIC8vIEJlY2F1c2UgdGhlIGluZGV4IGlzIDAgYmFzZWQgYW5kIHRoZSBzZWN1cml0eSBzZWFsc1xuICAgICAgICAvLyBzdGFydCBmcm9tIE9ORSwgd2UgYWRkIDEgdG8gYWNjb3VudCBmb3IgdGhpc1xuICAgICAgICBjb25zdCBrZXkgPSBpbmRleCAhPT0gTUlOVVNfT05FID8gaW5kZXggKyBPTkUgOiBpbmRleDtcbiAgICAgICAgc2V0VmFsdWUocmVnaXN0ZXJOYW1lLCBrZXkgfHwgdW5kZWZpbmVkKTtcbiAgICB9XG59XG5cblNlY3VyaXR5U2VhbC5kZWZhdWx0UHJvcHMgPSBERUZfU0VDVVJJVFlfU0VBTDtcbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJOQU1FX1NFQ1VSSVRZX1NFQUxcIjpcIlNlY3VyaXR5U2VhbFwiLFwiVFlQRV9TRUNVUklUWV9TRUFMXCI6XCJFbGVtZW50XCIsXCJOQU1FX1RIRU1FUExBVEZPUk1cIjpcIlRoZW1lUGxhdGZvcm1cIixcIlRZUEVfVEhFTUVQTEFURk9STVwiOlwiQnVuZGxlXCIsXCJOQU1FX0NPTlNVTUVSX1RIRU1FUExBVEZPUk1cIjpcIlRoZW1lUGxhdGZvcm1Db25zdW1lclwiLFwiVFlQRV9DT05TVU1FUl9USEVNRVBMQVRGT1JNXCI6XCJFbGVtZW50XCIsXCJOQU1FX1BST1ZJREVSX1RIRU1FUExBVEZPUk1cIjpcIlRoZW1lUGxhdGZvcm1Qcm92aWRlclwiLFwiVFlQRV9QUk9WSURFUl9USEVNRVBMQVRGT1JNXCI6XCJQcm92aWRlclwiLFwiZXJyb3JTZWN1cml0eUltYWdlXCI6XCJfcnVsZXNfZXJyb3JTZWN1cml0eUltYWdlX18zTHZGd1wifTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wiTkFNRV9TRUNVUklUWV9TRUFMXCI6XCJTZWN1cml0eVNlYWxcIixcIlRZUEVfU0VDVVJJVFlfU0VBTFwiOlwiRWxlbWVudFwifTsiLCJpbXBvcnQgeyBDdXN0b21FcnJvciB9IGZyb20gXCJAYXBwL2JhbmNvbi1kYXRhL3ZhbGlkYXRpb25zXCI7XG5pbXBvcnQgdHlwZSB7IFN0cnVjdCB9IGZyb20gXCJAcGtnL3V0aWxzL3NjaGVtYVwiO1xuaW1wb3J0IHsgRHluYW1pYywgSXMsIFR5cGUgfSBmcm9tIFwiQHBrZy91dGlscy9zY2hlbWFcIjtcbmltcG9ydCB7IHBhcnNlQ29uZmlnIH0gZnJvbSBcIn4vdXRpbHMvY29uZmlnVXRpbHNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFVzZXJuYW1lVmFsaWRhdG9yKFxuICAgIHRleHRHZXQ6IChhcmc6IHsgdXVpZDogc3RyaW5nOyByZXBsYWNlPzogc3RyaW5nIHwgc3RyaW5nW10gfSkgPT4gc3RyaW5nLFxuICAgIGdldFZhbHVlQ29uZmlnOiAoczogc3RyaW5nKSA9PiB1bmtub3duLFxuKSB7XG4gICAgY29uc3QgdXNlcm5hbWVNYXhMZW5ndGggPSBwYXJzZUNvbmZpZzxudW1iZXI+KGdldFZhbHVlQ29uZmlnKFwidXNlcm5hbWUubWF4TGVuZ3RoXCIpKTtcbiAgICBjb25zdCB1c2VybmFtZU1pbkxlbmd0aCA9IHBhcnNlQ29uZmlnPG51bWJlcj4oZ2V0VmFsdWVDb25maWcoXCJ1c2VybmFtZS5taW5MZW5ndGhcIikpO1xuICAgIGNvbnN0IHVzZXJOYW1lUGF0dGVybiA9IHBhcnNlQ29uZmlnPHN0cmluZz4oZ2V0VmFsdWVDb25maWcoXCJ1c2VybmFtZS5wYXR0ZXJuXCIpKTtcbiAgICBjb25zdCB0ZXh0RXJyb3JSZXF1aXJlZCA9IHRleHRHZXQoeyB1dWlkOiBcInNwYS5nZW5lcmljLmZpZWxkLmVycm9yLnJlcXVpcmVkXCIgfSk7XG4gICAgY29uc3QgdGV4dEVycm9yVXNlck5vdFNlY3VyZSA9IHRleHRHZXQoe1xuICAgICAgICB1dWlkOiBcInNwYS51c2VybmFtZS5lcnJvci5pbnNlY3VyZVwiLFxuICAgIH0pO1xuXG4gICAgY29uc3QgdmFsaWRhdG9yczogU3RydWN0PHN0cmluZywgdW5rbm93bj5bXSA9IFtcbiAgICAgICAgQ3VzdG9tRXJyb3IoXG4gICAgICAgICAgICBUeXBlLnN0cmluZy5vZkxlbmd0aCh1c2VybmFtZU1pbkxlbmd0aCwgdXNlcm5hbWVNYXhMZW5ndGgpLFxuICAgICAgICAgICAgdGV4dEVycm9yVXNlck5vdFNlY3VyZSxcbiAgICAgICAgKSxcbiAgICAgICAgQ3VzdG9tRXJyb3IoXG4gICAgICAgICAgICBUeXBlLnN0cmluZy5tYXRjaChuZXcgUmVnRXhwKHVzZXJOYW1lUGF0dGVybiB8fCBcIlthLXpBLVowLTlAX1xcXFwuLV0qXCIpKSxcbiAgICAgICAgICAgIHRleHRFcnJvclVzZXJOb3RTZWN1cmUsXG4gICAgICAgICksXG4gICAgXTtcblxuICAgIHJldHVybiBEeW5hbWljKCh2YWx1ZSkgPT4ge1xuICAgICAgICBjb25zdCBmYWlsZWRWYWxpZGF0b3IgPSB2YWxpZGF0b3JzLmZpbmQoKHgpID0+ICFJcyh2YWx1ZSwgeCkpO1xuICAgICAgICBpZiAodmFsdWUgJiYgZmFpbGVkVmFsaWRhdG9yKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFpbGVkVmFsaWRhdG9yO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBDdXN0b21FcnJvcihUeXBlLnN0cmluZy5yZXF1aXJlZCgpLCB0ZXh0RXJyb3JSZXF1aXJlZCk7XG4gICAgfSk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9
//# sourceMappingURL=14.d0b4b7e8.chunk.js.map