(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[109,275],{205:function(e,t,a){"use strict";a.r(t),a.d(t,"default",(function(){return H}));var i=a(0),n=a(5),c=a(2),s=a(16),o=a(11),r=a(41),d=a(39),l=a(80),u=a(6),b=a(100),p=a(69),j=a(187),O=a(148),f=a(79),m=a(33),_=a(8),v=a(50),h=a(82),x=a(38),T=a(500),E=a(504),A=a(488),D=a(523),g=a(270),R=a(497),M=a(499),N=a(508),y=a(501),P=a(271),w=a(51),S=a(153),k=a(83),U=a(322),B=a(321),I=a(323),C=a(436),F=a.n(C),L=a(10);function H(){var e=o.b.useState(!1),t=Object(s.a)(e,2),a=t[0],C=t[1],H=o.b.useState(!1),q=Object(s.a)(H,2),Y=q[0],G=q[1],z=o.b.useState(!1),V=Object(s.a)(z,2),X=V[0],J=V[1],Q=Object(_.b)(),K=Object(l.g)(),Z=Object(x.c)().textGet,W=Object(M.a)(),$=Object(w.sb)(w.l),ee=Object(w.sb)(w.m),te=Object(w.sb)(w.i),ae=Object(_.c)(m.e.token),ie=Object(_.c)(O.c.requestHoldingDetails),ne=Object(_.c)(p.c.isMobile),ce=Object(_.c)(O.c.holdingDetails),se=Object(_.c)(O.c.fetched),oe=Object(_.c)(O.c.hasUpdateAlias),re=Object(_.c)(O.c.hasErrorsUpdateAlias),de=Object(_.c)(O.c.hasErrorsRemoveAutomaticRenewal),le=Object(_.c)(O.c.idTransactionRemoveAutoRenewalDeposit),ue=Object(_.c)(O.c.showRemoveAutomaticRenovationButton),be=Object(_.c)(O.c.idTransactionPrecancelUVAHolding),pe=Object(_.c)(O.c.PDF),je=Object(_.c)(O.c.fileName),Oe=Object(_.c)(O.c.holdingsTypeActive),fe=Object(N.a)(je),me=Object(_.c)(S.c.transaction),_e=Object(r.c)(ne&&F.a.shareButton),ve=Z({uuid:"spa.deposits.detail.edit"}),he=Z({uuid:"spa.generic.field.error.required"}),xe=Z({uuid:"spa.toast.success"}),Te=d.e.object({alias:Object(j.d)(d.e.string.required(),he)}),Ee=(null===ce||void 0===ce?void 0:ce.type)===u.q,Ae=Ee&&Oe,De=(null===me||void 0===me?void 0:me.idTransactionStatus)===k.e.STATUS_PENDING_SIGNATURE||(null===me||void 0===me?void 0:me.idTransactionStatus)===k.e.STATUS_PENDING;o.b.useEffect((function(){ae&&ie&&Q(O.b.getHoldingDetails(Object(c.a)(Object(c.a)({},ie),{},{token:ae})))}),[Q,ae,ie]),o.b.useEffect((function(){oe&&Q(f.a.set({kind:"SUCCESS",text:{uuid:"spa.deposits.edit.tag.success",replace:"<b>".concat(xe,"</b><br>")},duration:u.v}))}),[Q,oe,xe]),o.b.useEffect((function(){re&&Q(f.a.set({kind:"ERROR",text:{uuid:"spa.deposits.edit.tag.error"},duration:u.v}))}),[Q,re]),o.b.useEffect((function(){de&&Q(f.a.set({kind:"ERROR",text:{uuid:"spa.deposits.edit.renewal.error"},duration:u.v}))}),[Q,de]),o.b.useEffect((function(){return function(){Q(O.a.cleanHasUpdateAlias()),Q(O.a.cleanHasErrorsUpdateAlias()),Q(O.a.cleanHasErrorsRemoveAutomaticRenewal())}}),[Q]),o.b.useEffect((function(){le&&ae&&Q(S.b.readTransaction({accessToken:ae,idTransaction:le}))}),[Q,le,ae]),o.b.useEffect((function(){le&&me&&K(De?ee:$)}),[le,De,K,$,me,ee]),o.b.useEffect((function(){be&&K(ee)}),[be,K,ee]);var ge=o.b.useCallback((function(){Q(O.a.cleanFetched())}),[Q]);return o.b.useEffect((function(){return function(){return ge()}}),[ge]),se?Object(L.jsxs)(R.a,{withoutBox:!0,className:F.a.holdingDetail,"header-onBack":function(){Q(O.a.cleanFetched()),K(te)},children:[Object(L.jsx)(D.a,{}),Object(L.jsx)(x.b,{className:F.a.title,tag:"h1",uuid:"spa.deposits.detail.title"}),Object(L.jsxs)("section",{className:F.a.edit,children:[Object(L.jsxs)("div",{children:[Object(L.jsx)(x.b,{className:F.a.editTitle,uuid:"spa.deposits.detail.received.amount"}),Object(L.jsx)(T.a,{amount:null===ce||void 0===ce?void 0:ce.finalAmount}),Object(L.jsx)(x.b,{className:F.a.depositAlias,children:(null===ce||void 0===ce?void 0:ce.productAlias)||(null===ce||void 0===ce?void 0:ce.description)})]}),Object(L.jsxs)("div",{className:F.a.editActions,children:[Object(L.jsxs)(h.a,{ariaLabel:{uuid:"spa.deposits.detail.edit"},kind:"plain",label:{uuid:"spa.deposits.detail.edit"},onClick:Me,children:[Object(L.jsx)(v.Avatar,{alt:Z({uuid:"spa.deposits.detail.edit"}),color:"purple",name:"edit",size:"small",variant:"square"}),Object(L.jsx)(x.b,{tag:"span",uuid:"spa.deposits.detail.edit"})]}),Ae&&Object(L.jsxs)(h.a,{ariaLabel:{uuid:"spa.deposits.detail.pre.cancel"},kind:"plain",label:{uuid:"spa.deposits.detail.pre.cancel"},onClick:ye,children:[Object(L.jsx)(v.Avatar,{alt:Z({uuid:"spa.deposits.detail.pre.cancel"}),color:"error",name:"close",size:"small",variant:"square"}),Object(L.jsx)(x.b,{tag:"span",uuid:"spa.deposits.detail.pre.cancel"})]})]})]}),Object(L.jsxs)("section",{className:F.a.info,children:[Object(L.jsxs)("div",{children:[(null===ce||void 0===ce?void 0:ce.dueDate)&&Object(L.jsxs)("div",{children:[Object(L.jsx)(x.b,{uuid:"spa.deposits.detail.expiration"}),Object(L.jsx)(E.a,{date:ce.dueDate,formatParams:{format:b.a.SHORT}})]}),Object(L.jsxs)("div",{children:[Object(L.jsx)(x.b,{uuid:"spa.deposits.detail.invested.amount"}),Object(L.jsx)(T.a,{amount:null===ce||void 0===ce?void 0:ce.initialBalance})]}),Object(L.jsxs)("div",{children:[Object(L.jsx)(x.b,{uuid:"spa.deposits.detail.gained.interest"}),Object(L.jsx)(T.a,{amount:null===ce||void 0===ce?void 0:ce.rate})]})]}),Object(L.jsxs)("div",{className:F.a.infoRenewal,children:[Object(L.jsxs)("div",{children:[Object(L.jsx)(x.b,{uuid:"spa.deposits.detail.expiration.action"}),Object(L.jsx)(x.b,{className:F.a.infoTotalRenewal,uuid:"backend.investments.renovationType.".concat(null===ce||void 0===ce?void 0:ce.renovationType)})]}),ue&&!Ee&&Object(L.jsx)("div",{children:Object(L.jsx)(v.Chip,{variant:"light",onClick:Ne,children:Object(L.jsx)(x.b,{tag:"span",uuid:"spa.deposits.detail.edit.expiration.action"})})})]})]}),Object(L.jsxs)("section",{className:F.a.infoDeposit,children:[Object(L.jsxs)("div",{children:[Object(L.jsx)(x.b,{uuid:"spa.deposits.detail.term"}),Object(L.jsx)(x.b,{replace:String(null===ce||void 0===ce?void 0:ce.deadline),uuid:"spa.deposits.interestByTerms.days"})]}),Object(L.jsxs)("div",{children:[Object(L.jsx)(x.b,{children:Object(L.jsx)("abbr",{title:Z({uuid:"spa.deposits.detail.tna.a11y"}),children:Object(L.jsx)(x.b,{tag:"span",uuid:"spa.deposits.detail.tna"})})}),Object(L.jsx)(x.b,{children:null===ce||void 0===ce?void 0:ce.tna})]}),(null===ce||void 0===ce?void 0:ce.openDate)&&Object(L.jsxs)("div",{children:[Object(L.jsx)(x.b,{uuid:"spa.deposits.detail.valid.since"}),Object(L.jsx)(E.a,{date:null===ce||void 0===ce?void 0:ce.openDate,formatParams:{format:b.a.SHORT}})]}),Object(L.jsxs)("div",{children:[Object(L.jsx)(x.b,{uuid:"spa.deposits.detail.accreditation.account"}),Object(L.jsx)(x.b,{children:null===ce||void 0===ce?void 0:ce.accountNumAccred})]}),Object(L.jsxs)("div",{children:[Object(L.jsx)(x.b,{children:Object(L.jsx)("abbr",{title:Z({uuid:"spa.deposits.detail.number.a11y"}),children:Object(L.jsx)(x.b,{tag:"span",uuid:"spa.deposits.detail.number"})})}),Object(L.jsx)(x.b,{children:null===ce||void 0===ce?void 0:ce.number})]}),Object(L.jsxs)("div",{children:[Object(L.jsx)(x.b,{uuid:"spa.deposits.detail.channel"}),Object(L.jsx)(x.b,{children:null===ce||void 0===ce?void 0:ce.channel})]})]}),Object(L.jsx)("div",{className:F.a.shareDownload,children:Object(L.jsxs)(h.a,{ariaLabel:Se(),className:_e,kind:"plain",label:Se(),onClick:ne?function(){if(!pe)return;Object(P.a)({options:{message:je,subject:je},files:[{fileName:fe,base64File:pe}]})}:function(){if(!pe)return;W(fe,Object(y.a)(pe))},children:[Object(L.jsx)(v.Avatar,{alt:Se(),color:ne?"green":"blue",name:ne?"share":"download",size:"small",variant:"square"}),Object(L.jsx)(x.b,{tag:"span",uuid:ne?"spa.deposits.detail.share.receipt":"spa.deposits.detail.download.receipt"})]})}),Object(L.jsx)(A.a,{ariaLabel:ve,schema:Te,onSubmit:function(e){return Re.apply(this,arguments)},children:Object(L.jsx)(U.EditTag,{handleEditor:Me,showEditor:a})}),Object(L.jsx)(B.EditExpirationAction,{handleConfirmation:function(){return Pe.apply(this,arguments)},handleDialog:Ne,showDialog:Y}),Object(L.jsx)(I.PreCancel,{handleDialog:ye,handlePreCancel:function(){return we.apply(this,arguments)},isPreCancellationAvailable:function(){if(null===ce||void 0===ce||!ce.openDate)return;var e=ce.openDate.split("T")[u.Sb],t=new Date(e),a=new Date;return Math.ceil((a.getTime()-t.getTime())/(u.xb*u.bb*u.bb*u.k))>u.Gb}(),showDialog:X})]}):Object(L.jsx)(g.a,{a11yMsg:Z({uuid:"spa.deposits.a11y.detail.loading"})});function Re(){return(Re=Object(n.a)(Object(i.a)().mark((function e(t){var a,n;return Object(i.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(ae&&ce){e.next=2;break}return e.abrupt("return");case 2:return a=ce.idProduct,n=t.alias,Q(O.a.cleanHasUpdateAlias()),e.next=7,Q(O.b.updateAlias({token:ae,alias:n,idProduct:a}));case 7:Me();case 8:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Me(){C(!a)}function Ne(){G(!Y)}function ye(){J(!X)}function Pe(){return(Pe=Object(n.a)(Object(i.a)().mark((function e(){return Object(i.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(ae&&ce){e.next=2;break}return e.abrupt("return");case 2:return e.next=4,Q(O.b.removeAutomaticRenewal({token:ae,idDeposit:ce.idProduct,accountLabel:ce.accountLabel,amount:{currency:ce.currency,quantity:String(ce.initialBalance)},channel:ce.channel,certificateCode:ce.number,constituteDate:ce.openDate,creditAccount:{value:ce.creditAccountId},debitAccount:{value:ce.debitAccountId},depositType:ce.type,endDate:ce.dueDate,fixedTermDepositURI:ce.fixedTermDepositURI,interest:{currency:ce.currency,quantity:String(ce.rate)},labelDeposit:ce.label,renovationType:ce.renovationType,tem:Number(ce.tem),term:String(ce.deadline),tna:ce.tna}));case 4:G(!Y);case 5:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function we(){return(we=Object(n.a)(Object(i.a)().mark((function e(){return Object(i.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(ae&&ce){e.next=2;break}return e.abrupt("return");case 2:return e.next=4,Q(O.b.precancelUVAHolding({idProduct:ce.idProduct,number:ce.number,token:ae,accountLabel:ce.accountLabel,amount:{currency:ce.currency,quantity:String(ce.initialBalance)},channel:ce.channel,certificateCode:ce.number,constituteDate:ce.openDate,creditAccount:{value:ce.creditAccountId},debitAccount:{value:ce.debitAccountId},depositType:ce.type,endDate:ce.dueDate,finalAmount:{currency:ce.currency,quantity:String(ce.finalAmount)},fixedTermDepositURI:ce.fixedTermDepositURI,interest:{currency:ce.currency,quantity:String(ce.rate)},renovationType:ce.renovationType,tem:Number(ce.tem),term:String(ce.deadline),tna:ce.tna,tea:ce.tea}));case 4:J(!X);case 5:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Se(){return Z(ne?{uuid:"spa.deposits.detail.share.receipt"}:{uuid:"spa.deposits.detail.download.receipt"})}}},436:function(e,t,a){e.exports={NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_AMOUNT_FORMATTER:"AmountFormatter",TYPE_AMOUNT_FORMATTER:"Element",NAME_DATETIME:"DateTime",TYPE_DATETIME:"Element",NAME_INPUT_FIELD:"InputField",TYPE_INPUT_FIELD:"Element",NAME_XS:"xs",NAME_SM:"sm",NAME_MD:"md",NAME_LG:"lg",holdingDetail:"_rules_holdingDetail__1wnGO",title:"_rules_title__3R5PK",edit:"_rules_edit__3zMqL",editActions:"_rules_editActions__E_RrD",editTitle:"_rules_editTitle__36dgC",info:"_rules_info__2av-S",infoRenewal:"_rules_infoRenewal__xKQCa",infoTotalRenewal:"_rules_infoTotalRenewal__aPoP6",infoDeposit:"_rules_infoDeposit__3RQvF",shareDownload:"_rules_shareDownload__4TCOt",shareButton:"_rules_shareButton__3Su54",editModal:"_rules_editModal__2kVgg",inlineInput:"_rules_inlineInput__qjygz",editBottomSheetTitle:"_rules_editBottomSheetTitle__2hx0X",description:"_rules_description__2QF8B",editModalButtons:"_rules_editModalButtons__15h8J",editBottomSheetButton:"_rules_editBottomSheetButton__7aYOp"}},508:function(e,t,a){"use strict";a.d(t,"a",(function(){return n}));var i=a(6);function n(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"pdf";if("string"===typeof e&&e.trim()){var a=e.trim().toLowerCase().replace(/[^a-zA-Z0-9]/g,i.Nb);return"".concat(a,".").concat(t)}var n=new Date,c=n.getMonth()+i.fb,s=(c<i.Fb?i.Ub:i.D)+c,o=n.getDate(),r=(o<i.Fb?i.Ub:i.D)+o;return"".concat(n.getFullYear(),"_").concat(s,"_").concat(r,".").concat(t)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=109.2d0255ca.chunk.js.map