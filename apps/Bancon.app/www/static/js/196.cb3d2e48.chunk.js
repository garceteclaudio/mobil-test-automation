(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[196,218,301],{309:function(e,t,n){"use strict";n.r(t),n.d(t,"HeadData",(function(){return a})),n.d(t,"StateColumn",(function(){return i})),n.d(t,"TrashColumn",(function(){return l})),n.d(t,"FileErrorHeadData",(function(){return o}));var r=n(6),a=[{id:"paymentBatchDate",label:"spa.suppliers.voidMultiplePayments.tableHead.date",numeric:!1,align:"left"},{id:"paymentBatchFile",label:"spa.suppliers.voidMultiplePayments.tableHead.fileName",numeric:!1,align:"left"},{id:"paymentBatchBankAccountCBUReceiver",label:"spa.suppliers.voidMultiplePayments.tableHead.recipientCBU",numeric:!1,align:"left"},{id:"paymentBatchReference",label:"spa.suppliers.voidMultiplePayments.tableHead.paymentReference",numeric:!1,align:"left"},{id:"paymentBatchTotalAmount",label:"spa.suppliers.voidMultiplePayments.tableHead.amount",numeric:!0,align:"right"}],i={id:"paymentStatus",label:"spa.suppliers.voidMultiplePayments.tableHead.opState",numeric:!1,align:"left"},l={id:"trash",label:r.Ub,numeric:!1,align:"right"},o=[{id:"row",label:"spa.suppliers.generatePayment.filePayment.errorTable.row",numeric:!0,align:"left"},{id:"cbuFrom",label:"spa.suppliers.generatePayment.filePayment.errorTable.originCBU",numeric:!1,align:"left"},{id:"cbuTo",label:"spa.suppliers.voidMultiplePayments.tableHead.recipientCBU",numeric:!1,align:"left"},{id:"amount",label:"spa.suppliers.voidMultiplePayments.tableHead.amount",numeric:!0,align:"right"},{id:"date",label:"spa.suppliers.voidMultiplePayments.tableHead.date",numeric:!1,align:"left"},{id:"reference",label:"spa.suppliers.voidMultiplePayments.tableHead.paymentReference",numeric:!1,align:"left"},{id:"email",label:"spa.suppliers.generatePayment.filePayment.errorTable.email",numeric:!1,align:"left"},{id:"error",label:"spa.suppliers.generatePayment.filePayment.errorTable.error",numeric:!1,align:"left"}]},398:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return R}));var r=n(2),a=n(16),i=n(11),l=n(8),o=n(137),c=n(33),u=n(100),s=n(51),p=n(501),f=n(508),m=n(499),b=n(79),d=n(6),_=n(38),O=n(270),E=n(50),v=n(82),j=n(500),y=n(504),P=n(497),T=n(55),g=n(309),h=n(438),x=n.n(h),w=n(10);function R(){var e=i.b.useState([]),t=Object(a.a)(e,2),n=t[0],h=t[1],R=i.b.useState([]),A=Object(a.a)(R,2),M=A[0],N=A[1],C=i.b.useState(!1),D=Object(a.a)(C,2),F=D[0],U=D[1],k=Object(b.d)().showToast,S=Object(_.c)().textGet,B=Object(l.b)(),H=Object(s.qb)(),I=Object(m.a)(),L=i.b.useCallback((function(e){return e?e.map((function(e){var t=Object(u.h)(e.date),n=Object(u.g)(t)?Object(w.jsx)(y.a,{date:Object(u.h)(e.date),formatParams:{format:u.a.SHORT}}):Object(w.jsx)("span",{className:x.a.dateColumn,children:e.date});return{id:"".concat(e.row,"-").concat(e.error),row:Number(e.row),amount:e.amount!==d.D?Object(w.jsx)(j.a,{amount:Number(e.amount)}):d.j,date:e.date!==d.D?n:d.j,cbuFrom:e.cbuFrom||d.j,cbuTo:e.cbuTo||d.j,email:e.email||d.j,reference:e.reference||d.j,error:e.error}})):[]}),[]),Y=Object(l.c)(c.e.token),G=Object(l.c)(o.c.dataPaymentPre),V=null===G||void 0===G?void 0:G.nameFile,W=Object(l.c)(o.c.paymentErrorFilename),z=Object(l.c)(o.c.paymentErrorFileContent),J=null===G||void 0===G?void 0:G.listError;return i.b.useEffect((function(){var e=g.FileErrorHeadData.map((function(e){return Object(r.a)(Object(r.a)({},e),{},{label:S({uuid:e.label})})}));return h(e),function(){return h([])}}),[S]),i.b.useEffect((function(){var e=null===G||void 0===G?void 0:G.transfersSuppliersError;return N(L(e)),function(){return N([])}}),[G,L]),i.b.useEffect((function(){if(J){var e=J>d.Gb,t="spa.suppliers.generatePayment.filePayment.error.notification.".concat(e?"more30":"less30");k({kind:"WARNING",message:t})}}),[J,k]),i.b.useEffect((function(){if(F&&Y)if(W||z)W&&z&&(I(W,Object(p.a)(z)),U(!1));else{var e=S({uuid:"spa.suppliers.generatePayment.filePayment.error.fileName",replace:null===V||void 0===V?void 0:V.split(d.t)[d.Sb]}),t=null===V||void 0===V?void 0:V.split(d.t)[d.fb],n=Object(f.a)(e,t),r=JSON.stringify(null===G||void 0===G?void 0:G.transfersSuppliersError);B(o.b.downloadPaymentErrorFile({token:Y,fileName:n,transferSuppliers:r}))}}),[F,V,I,B,Y,W,z,null===G||void 0===G?void 0:G.transfersSuppliersError,S]),J?Object(w.jsx)(P.a,{className:x.a.filePaymentError,"header-onBack":X,children:J>d.Gb?Object(w.jsxs)(i.b.Fragment,{children:[Object(w.jsx)(_.b,{tag:"h2",uuid:"spa.suppliers.generatePayment.filePayment.errorTable.title"}),Object(w.jsx)(E.Alert,{isOutline:!0,className:x.a.alert,variant:"warning",children:Object(w.jsxs)(E.Box,{flex:!0,align:"center",justify:"center",children:[Object(w.jsx)(E.Box,{flex:!0,mr:d.Jb,children:Object(w.jsx)(E.Icon,{name:"warning",size:"small",stroke:"warning"})}),Object(w.jsx)(_.b,{uuid:"spa.suppliers.generatePayment.filePayment.error.notification.toVisualize"}),Object(w.jsx)(v.a,{className:x.a.downloadErrorfile,kind:"plain",label:{uuid:"spa.suppliers.generatePayment.filePayment.error.notification.here"},onClick:q})]})}),Object(w.jsx)(E.Box,{flex:!0,mt:d.fb,self:"center",children:Object(w.jsx)(v.a,{label:{uuid:"spa.form.back"},onClick:X})})]}):Object(w.jsxs)(i.b.Fragment,{children:[Object(w.jsx)(E.EnhancedTable,{className:x.a.fileErrorTable,headData:n,id:"filePaymentErrors",pagination:{count:(null===G||void 0===G?void 0:G.listError)||d.Sb},rowsData:M,title:S({uuid:"spa.suppliers.generatePayment.filePayment.errorTable.title"})}),Object(w.jsx)(E.Box,{flex:!0,mt:d.fb,self:"center",children:Object(w.jsx)(v.a,{label:{uuid:"spa.form.back"},onClick:X})})]})}):Object(w.jsx)(O.a,{});function X(){B(o.a.cleanDataPaymentPre()),B(o.a.paymentType(T.e)),H(s.a)}function q(){U(!0)}}},438:function(e,t,n){e.exports={NAME_FORM:"Form",TYPE_FORM:"Element",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_RADIO_GROUP:"RadioGroup",TYPE_RADIO_GROUP:"Element",NAME_INPUT_RADIO:"InputRadio",TYPE_INPUT_RADIO:"Element",NAME_AMOUNT_FORMATTER:"AmountFormatter",TYPE_AMOUNT_FORMATTER:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_DATETIME:"DateTime",TYPE_DATETIME:"Element",Container:"_rules_Container__cZIyp",footer:"_rules_footer__vxKyY",detail:"_rules_detail__29WXH",filePaymentError:"_rules_filePaymentError__3lTfQ",fileErrorTable:"_rules_fileErrorTable__2GlC5",dateColumn:"_rules_dateColumn__2Pzan",alert:"_rules_alert__21TPm",fileConfirmation:"_rules_fileConfirmation__3sAfY",fileConfirmationSection:"_rules_fileConfirmationSection__3tpIR",fileConfirmationTitle:"_rules_fileConfirmationTitle__3nRgq",payments:"_rules_payments__1nqsS",value:"_rules_value__QUtyA",separator:"_rules_separator__35z5X",generatePaymentsTicket:"_rules_generatePaymentsTicket__3GU1J",validateModalFooter:"_rules_validateModalFooter__1UAAr"}},499:function(e,t,n){"use strict";n.d(t,"a",(function(){return m}));var r=n(0),a=n(5);function i(e){var t=e.filename,n=e.path,r=e.flags;return new Promise((function(e,a){var i;function l(e){a(e)}(i=window.cordova.file[n],new Promise((function(e,t){window.resolveLocalFileSystemURL(i,(function(t){e(t)}),(function(e){t(e)}))}))).then((function(n){var a=n;a.getFile(t,r,(function(t){var n=new FileReader;t.createWriter((function(r){e({fileEntry:t,dirEntry:a,fileReader:n,fileWriter:r,fileWrite:function(e){return new Promise((function(t,n){r.onwriteend=function(){return t(r)},r.onerror=function(e){return n(e)},r.write(e)}))},fileRemove:function(){return new Promise((function(e,n){t.remove((function(){return e(!0)}),(function(e){return n(e)}))}))}})}),l)}),l)}))}))}var l=n(36),o=n(26),c=n(28);function u(){return s.apply(this,arguments)}function s(){return(s=Object(a.a)(Object(r.a)().mark((function e(){var t;return Object(r.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(o.c)();case 2:if(e.sent&&cordova.plugins){e.next=5;break}throw o.a.CORDOVA_UNAVAILABLE;case 5:if(t=cordova.plugins.fileOpener2){e.next=8;break}throw o.a.PLUGIN_UNAVAILABLE;case 8:return e.abrupt("return",t);case 9:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function p(e){return f.apply(this,arguments)}function f(){return f=Object(a.a)(Object(r.a)().mark((function e(t){var n,a,i,l,s;return Object(r.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.contentType,a=t.fileName,i=t.withDialog,e.next=3,Object(o.c)();case 3:if(e.sent){e.next=6;break}throw o.a.CORDOVA_UNAVAILABLE;case 6:return e.next=8,u();case 8:return l=e.sent,s=i?l.open:l.showOpenWithDialog,e.abrupt("return",new Promise((function(e,t){try{s(a,n,{success:function(){e({code:c.a.SUCCESS,value:!0})},error:function(e){function t(t){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}((function(e){t("boolean"===typeof e?new c.b(c.a.ERROR,l.open.name,c.c):new c.b(c.a.ERROR,l.open.name,e.message))}))})}catch(r){t(new c.b(c.a.ERROR_UNKNOWN,l.open.name,c.c))}})));case 11:case"end":return e.stop()}}),e)}))),f.apply(this,arguments)}function m(){var e=Object(l.i)(),t=e.isDesktop,n=e.isUnknown,o=e.platform;function c(e){var t=e.split(".").pop();return"png"===t||"jpg"===t||"gif"===t||"bmp"===t?"image/".concat(t):"pdf"===t?"application/".concat(t):"doc"===t||"docx"===t?"application/msword":"ppt"===t||"pptx"===t?"application/vnd.ms-powerpoint":"xls"===t||"xlsx"===t?"application/vnd.ms-excel":"xlsm"===t?"application/vnd.ms-excel.sheet.macroEnabled.12":"txt"===t?"text/plain":"zip"===t?"application/zip":void 0}return function(){var e=Object(a.a)(Object(r.a)().mark((function e(a,u){var s,f,m,b,d,_,O;return Object(r.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(s=o===l.b.CORDOVA_ANDROID,!(f=c(a))){e.next=19;break}if(!t&&!n){e.next=9;break}return(m=document.createElement("a")).href=window.URL.createObjectURL(u),m.download=a,m.click(),e.abrupt("return");case 9:return e.next=11,i({filename:a,path:s?"externalApplicationStorageDirectory":"dataDirectory",flags:{create:!0,exclusive:!1}});case 11:return b=e.sent,d=b.fileWrite,_=b.fileEntry,e.next=16,d(u);case 16:return O={contentType:f,fileName:_.nativeURL,withDialog:!0},e.next=19,p(O);case 19:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}()}},501:function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=512,a=0;function i(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:r,i=window.atob(e),l=[],o=a;o<i.length;o+=n){for(var c=i.slice(o,o+n),u=new Array(c.length),s=a;s<c.length;s++)u[s]=c.charCodeAt(s);l.push(new Uint8Array(u))}return new Blob(l,{type:t})}},508:function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));var r=n(6);function a(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"pdf";if("string"===typeof e&&e.trim()){var n=e.trim().toLowerCase().replace(/[^a-zA-Z0-9]/g,r.Nb);return"".concat(n,".").concat(t)}var a=new Date,i=a.getMonth()+r.fb,l=(i<r.Fb?r.Ub:r.D)+i,o=a.getDate(),c=(o<r.Fb?r.Ub:r.D)+o;return"".concat(a.getFullYear(),"_").concat(l,"_").concat(c,".").concat(t)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=196.cb3d2e48.chunk.js.map