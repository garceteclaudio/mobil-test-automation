(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[64,291],{214:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return k}));var a=n(2),r=n(0),o=n(5),c=n(16),i=n(11),u=n(39),s=n(187),d=n(488),l=n(38),b=n(82),m=n(270),f=n(99),O=n(8),j=n(156),p=n(117),E=n(33),h=n(65),v=n(79),g=n(603),_=n(602),P=n(497),T=n(51),R=n(74),A=n(773),y=n(565),N=n(6),I=n(3),S=n(519),x=n(50),M=n(136),C=n(449),U=n.n(C),F=n(10);function k(){var e=Object(T.qb)(),t=Object(O.b)(),n=Object(f.a)().getValueConfig,C=i.b.useState(!1),k=Object(c.a)(C,2),D=k[0],L=k[1],w=Object(T.sb)(T.n),B=Object(T.sb)(T.A),V=Object(T.sb)(T.lb),q=Object(T.sb)(T.mb),Y=Object(T.sb)(T.C),H=Object(O.c)(j.c.qrInfo),G=Object(O.c)(p.c.deepLinkQrInfo),Q=Object(O.c)(j.c.qrCode),J=Object(O.c)(j.c.qrPending),W=Object(O.c)(j.c.notifyNotPay),K=Object(O.c)(j.c.notifyAlreadyProcessed),X=Object(O.c)(j.c.invalidQr),Z=Object(O.c)(j.c.hasSelectedCardWithFinancingPlan),z=Object(O.c)(j.c.paymentDetail),$=Object(O.c)(j.c.encryptedCvv),ee=Object(O.c)(j.c.hasCards),te=Object(O.c)(j.c.hasAccounts),ne=Object(O.c)(j.c.isPaymentWithCard),ae=Object(O.c)(j.c.isQrOpen),re=Object(O.c)(j.c.fetching),oe=Object(O.c)(j.c.warning),ce=Object(O.c)(E.e.token),ie=Object(O.c)(p.c.validateUser),ue=Object(O.c)(p.c.hasFinishedModoOnboarding),se=Object(R.a)(n("landmarks.location.default")).split("|"),de=Object(c.a)(se,2),le=de[0],be=de[1],me=Object(R.a)(n("modo.payment.qr.input.cvv")),fe=i.b.useState(),Oe=Object(c.a)(fe,2),je=Oe[0],pe=Oe[1];Object(g.a)(Boolean(G));var Ee=i.b.useCallback(Object(o.a)(Object(r.a)().mark((function e(){var t;return Object(r.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(_.a)();case 2:t=e.sent,pe(t.value);case 4:case"end":return e.stop()}}),e)}))),[]);i.b.useEffect((function(){Ee()}),[Ee]),i.b.useEffect((function(){if(ce&&!re&&!H){if(G){if(t(p.b.validateUser({token:ce})),!ue&&ie)return void e(Y,{replace:!0});L(!0)}if(t(j.b.parseQr({token:ce,qrResult:G||Q,latitude:le,longitude:be})),X)return e(w),void t(v.a.set({kind:"ERROR",text:{uuid:"spa.modo.parseQR.BilleteraElectronica_ConsultarQr.error.0007"},duration:N.v}));J||K?e(V):W&&e(B)}}),[re,ce,G,t,Q,le,be,J,w,X,K,W,e,B,ue,ie,Y,V,H]);var he=i.b.useCallback((function(){if(ce&&H){var n=H,a=n.financingPlans,r=n.cards,o=n.transactionAmount;if(a){r.length||e(B);var c=r.filter((function(e){var t=e.isDebitCard,n=e.printedName;return!t&&n!==N.nb})).map((function(e){return e.tokenId}));t(j.b.financingPlans({token:ce,codeQR:Q,latitude:le,longitude:be,medioPagoTokenId:c,amount:o}))}}}),[ce,H,e,B,t,Q,le,be]);i.b.useEffect((function(){ae||he()}),[ae,he]),i.b.useEffect((function(){if(H){var t=H,n=t.cards,a=t.accounts;n.length||a.length||e(B)}}),[t,ce,H,e,B]),i.b.useEffect((function(){z&&e(q)}),[z,q,e]),i.b.useEffect((function(){var e=(null===oe||void 0===oe?void 0:oe.code)===I.k;oe&&!e&&t(h.a.add({id:oe.code,message:oe.message}))}),[oe,t]);var ve=Object(l.c)().textGet,ge=ve({uuid:"spa.modo.pay.qr.title"}),_e=ve({uuid:"spa.generic.field.error.required"}),Pe=ve({uuid:"spa.modo.pay.qr.cvv.error"}),Te=ve({uuid:"spa.modo.pay.amount.empty.error"}),Re=Object(R.a)(n("safeway.otps.soft.length")),Ae=ve({uuid:"spa.modal.otp.error",replace:String(Re)}),ye=Object(y.c)(Re,Ae,_e);if(re||!H||G&&!D)return Object(F.jsx)(m.a,{});var Ne=H,Ie=Ne.transactionAmount,Se=Ne.amountAvailable,xe=ve({uuid:"spa.modo.pay.amount.error",replace:[N.b,String(Se)]}),Me=u.e.object(Object(a.a)(Object(a.a)({},ae&&{amount:Object(u.c)((function(e){return String(e)?Object(s.o)(u.e.number(),Se,xe):Object(s.d)(u.e.number(),Te)}))}),{},{payment:Object(s.d)(u.e.string.required(),_e),paymentCard:Object(u.c)((function(){return ne&&ee?Object(s.d)(u.e.string.required(),_e):u.e.any()})),paymentAccount:Object(u.c)((function(){return ne||!te?u.e.any():Object(s.d)(u.e.string.required(),_e)})),financingOption:Object(u.c)((function(){return ne&&Z?Object(s.d)(u.e.string.required(),_e):u.e.any()})),cvv:Object(u.c)((function(e){return!$&&ee&&ne&&me?e?Object(s.d)(Object(s.e)(),Pe):Object(s.d)(u.e.number(),_e):u.e.any()})),otp:ye})),Ce=!ae&&Ie>Se,Ue=ve({uuid:"spa.a11y.currency.ARS"}),Fe=ve({uuid:"spa.modo.pay.qr.invalid.payment",replace:['<strong aria-label="'.concat(Ie," ").concat(Ue,'">').concat(Object(S.a)(Ie),"</strong>"),'<strong aria-label="'.concat(Se," ").concat(Ue,'">').concat(Object(S.a)(Se),"</strong>")]});return Object(F.jsxs)(P.a,{withFooter:!0,className:U.a.transactionInformation,hasNotifications:!1,"header-onBack":Le,children:[Object(F.jsx)("header",{children:Object(F.jsxs)(x.Box,{flex:!0,align:"baseline",children:[Object(F.jsx)(l.b,{"aria-label":ge,tag:"h1",uuid:"spa.modo.pay.qr.title.short"}),Object(F.jsx)(M.a,{"aria-hidden":!0,alt:"modo",uuid:"logoModo"})]})}),Ce?Object(F.jsxs)(i.b.Fragment,{children:[Object(F.jsx)(l.b,{className:U.a.textInfo,children:Object(F.jsx)("span",{dangerouslySetInnerHTML:{__html:Fe}})}),Object(F.jsx)(b.a,{className:U.a.backButton,label:{uuid:"spa.form.back"},onClick:Le})]}):Object(F.jsx)(d.a,{schema:Me,warnings:oe,onSubmit:function(e){return ke.apply(this,arguments)},children:Object(F.jsx)(A.a,{handleBack:Le,latitude:(null===je||void 0===je?void 0:je.coords.latitude)&&String(null===je||void 0===je?void 0:je.coords.latitude)||le,longitude:(null===je||void 0===je?void 0:je.coords.longitude)&&String(null===je||void 0===je?void 0:je.coords.longitude)||be,qrInfo:H})})]});function ke(){return(ke=Object(o.a)(Object(r.a)().mark((function e(n){var a,o,c,i,u,s,d,l,b,m;return Object(r.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(ce){e.next=2;break}return e.abrupt("return");case 2:return a=n.paymentCard,o=n.paymentAccount,c=n.amount,i=n.cvv,u=n.financingOption,s=n.otp,l=(d=H).transactionCurrency,b=d.merchantName,m=ee&&ne,e.next=7,t(j.b.sendQrPayment({_otp:s,token:ce,commerce:b,cvv:De(m,String(i)),codeQR:G||Q,latitude:(null===je||void 0===je?void 0:je.coords.latitude)&&String(null===je||void 0===je?void 0:je.coords.latitude)||le,longitude:(null===je||void 0===je?void 0:je.coords.longitude)&&String(null===je||void 0===je?void 0:je.coords.longitude)||be,cardSelector:m?String(a):null,accountSelector:te&&!ne?String(o):null,planSelector:Z?String(u):null,amount:{currency:l,quantity:ae?Number(c):Ie}}));case 7:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function De(e,t){return e&&!$?t:$||null}function Le(){t(j.a.clean()),e(w)}}},449:function(e,t,n){e.exports={NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_IMAGE:"Image",TYPE_IMAGE:"Element",transactionInformation:"_rules_transactionInformation__WcJov",textInfo:"_rules_textInfo__Uw1F2",backButton:"_rules_backButton__Im3mH",qrPaymentDetail:"_rules_qrPaymentDetail__JxZB-",paymentInfo:"_rules_paymentInfo__3HqZs",refund:"_rules_refund__1mWKX",redirectMessage:"_rules_redirectMessage__2VKty"}},494:function(e,t,n){"use strict";n.d(t,"a",(function(){return p}));var a=n(2),r=n(19),o=n(16),c=n(11),i=n(50),u=n(41),s=n(488),d=n(498),l=n.n(d),b=n(10),m=["id","name","methods","defaultValue","pattern","withSuggestions","onChange","onBlur"],f=l.a.NAME_INPUT_FIELD,O=l.a.TYPE_INPUT_FIELD,j=c.b.memo((function(e){var t,n=c.b.useState(!1),s=Object(o.a)(n,2),d=s[0],l=s[1],j=e.id,p=e.name,E=e.methods,h=e.defaultValue,v=e.pattern,g=e.withSuggestions,_=void 0===g||g,P=e.onChange,T=e.onBlur,R=Object(r.a)(e,m),A=E.register,y=E.formState,N=E.setValue,I=E.clearErrors,S=y.errors,x="".concat(p),M=S[p];return c.b.useEffect((function(){h&&N(x,h),h||N(x,void 0),_&&l(!0)}),[h,x,N,_,l]),Object(b.jsx)(u.a,{name:f,type:O,children:Object(b.jsx)(i.TextField,Object(a.a)(Object(a.a)(Object(a.a)(Object(a.a)(Object(a.a)({id:j||p},h&&{defaultValue:h}),M&&{error:null===(t=M.message)||void 0===t?void 0:t.toString()}),A(x,{onChange:function(e){P&&P(e);I([x])},onBlur:T})),R),{},{autoComplete:_?"on":"off",pattern:v,onKeyDown:function(e){e.target.value||d||l(!0)}}))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function p(e){var t=s.a.useContext();return Object(b.jsx)(j,Object(a.a)({methods:t},e))}p.displayName=f},498:function(e,t,n){e.exports={NAME_INPUT_FIELD:"InputField",TYPE_INPUT_FIELD:"Element"}},506:function(e,t,n){"use strict";n.d(t,"a",(function(){return p}));var a=n(2),r=n(19),o=n(11),c=n(50),i=n(41),u=n(488),s=n(509),d=n.n(s),l=n(10),b=["id","name","children","methods","value","onChange"],m=d.a.NAME_RADIO_GROUP,f=d.a.TYPE_RADIO_GROUP,O={id:m},j=o.b.memo((function(e){var t=e.id,n=e.name,u=e.children,s=e.methods,d=e.value,O=e.onChange,j=Object(r.a)(e,b),p=s.formState,E=s.setValue,h=p.errors[n];return o.b.useEffect((function(){d&&E(n,d,{shouldValidate:!0})}),[d,n,E]),Object(l.jsx)(i.a,{name:m,type:f,children:Object(l.jsx)(c.RadioGroup,Object(a.a)(Object(a.a)(Object(a.a)({id:t,name:n,value:d,onChange:function(e){E(n,e.target.value),O&&O(e)}},h&&{error:String(h.message)}),j),{},{children:u}))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function p(e){var t=u.a.useContext();return Object(l.jsx)(j,Object(a.a)({methods:t},e))}p.defaultProps=O},507:function(e,t,n){"use strict";n.d(t,"a",(function(){return p}));var a=n(2),r=n(19),o=n(11),c=n(50),i=n(41),u=n(488),s=n(510),d=n.n(s),l=(n(511),n(10)),b=["id","name","methods","onChange"],m=d.a.NAME_INPUT_RADIO,f=d.a.TYPE_INPUT_RADIO,O={id:m},j=o.b.memo((function(e){var t=e.id,n=e.name,o=e.methods,u=e.onChange,s=Object(r.a)(e,b),d=o.register,O=o.formState,j=o.clearErrors,p=O.errors,E="".concat(n),h=p[n];return Object(l.jsx)(i.a,{name:m,type:f,children:Object(l.jsx)(c.Radio,Object(a.a)(Object(a.a)(Object(a.a)({id:t},h&&{error:String(h.message)}),d(E)),{},{name:n,onChange:function(e){u&&u(e),j([E])}},s))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function p(e){var t=u.a.useContext();return Object(l.jsx)(j,Object(a.a)({methods:t},e))}p.defaultProps=O},509:function(e,t,n){e.exports={NAME_RADIO_GROUP:"RadioGroup",TYPE_RADIO_GROUP:"Element"}},510:function(e,t,n){e.exports={NAME_INPUT_RADIO:"InputRadio",TYPE_INPUT_RADIO:"Element"}},511:function(e,t,n){e.exports={NAME_INPUT_RADIO:"InputRadio",TYPE_INPUT_RADIO:"Element",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider"}},512:function(e,t,n){"use strict";n.d(t,"a",(function(){return p}));var a=n(2),r=n(19),o=n(11),c=n(50),i=n(41),u=n(488),s=n(514),d=n.n(s),l=n(10),b=["id","name","methods","defaultValue","onChange","valueAsNumber"],m=d.a.NAME_INPUT_NUMBER,f=d.a.TYPE_INPUT_NUMBER,O={id:m,valueAsNumber:!0},j=o.b.memo((function(e){var t,n=e.id,u=e.name,s=e.methods,d=e.defaultValue,O=e.onChange,j=e.valueAsNumber,p=Object(r.a)(e,b),E=s.register,h=s.formState,v=s.getValues,g=s.setValue,_=s.clearErrors,P=h.errors,T="".concat(u),R=v()[T],A=P[u];return o.b.useEffect((function(){d&&g(T,d,{shouldValidate:!0}),d||g(T,void 0)}),[d,T,g]),Object(l.jsx)(i.a,{name:m,type:f,children:Object(l.jsx)(c.NumberField,Object(a.a)(Object(a.a)(Object(a.a)(Object(a.a)({},d&&{defaultValue:d}),{},{id:n||u},A&&{error:null===(t=A.message)||void 0===t?void 0:t.toString()}),E(T,{onChange:function(e){O&&O(e);_([T])},valueAsNumber:j})),{},{value:R},p))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function p(e){var t=u.a.useContext();return Object(l.jsx)(j,Object(a.a)({methods:t},e))}p.displayName=m,p.defaultProps=O},514:function(e,t,n){e.exports={NAME_INPUT_NUMBER:"InputNumber",TYPE_INPUT_NUMBER:"Element"}},602:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return b}));var a=n(0),r=n(16),o=n(5),c=n(11),i=n(26),u=n(28),s="geoLocation";function d(e){return l.apply(this,arguments)}function l(){return(l=Object(o.a)(Object(a.a)().mark((function e(t){return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(i.c)();case 2:if(e.sent){e.next=5;break}throw i.a.CORDOVA_UNAVAILABLE;case 5:if(navigator.geolocation){e.next=7;break}throw{code:i.a.PLUGIN_UNAVAILABLE,message:"Plugin unavailable"};case 7:return e.abrupt("return",new Promise((function(e,n){try{navigator.geolocation.getCurrentPosition((function(t){e({code:u.a.SUCCESS,value:t})}),(function(e){n(new u.b(u.a.ERROR,s,e.message,e))}),t)}catch(a){n(new u.b(u.a.ERROR,s,u.c,a))}})));case 8:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function b(e){var t=c.b.useState(),n=Object(r.a)(t,2),i=n[0],s=n[1],l=c.b.useState(),b=Object(r.a)(l,2),m=b[0],f=b[1],O=c.b.useState(),j=Object(r.a)(O,2),p=j[0],E=j[1];return c.b.useEffect((function(){!function(e){h.apply(this,arguments)}(e)}),[e]),c.b.useEffect((function(){var e;(e=i)&&Boolean(e.code)?E(i):f(i)}),[i]),{position:m,error:p};function h(){return(h=Object(o.a)(Object(a.a)().mark((function e(t){var n,r;return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,d(t);case 3:n=e.sent,s(n.value),e.next=10;break;case 7:e.prev=7,e.t0=e.catch(0),e.t0 instanceof u.b&&(r=e.t0.getErrorObject(),s(r));case 10:case"end":return e.stop()}}),e,null,[[0,7]])})))).apply(this,arguments)}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=64.17790107.chunk.js.map