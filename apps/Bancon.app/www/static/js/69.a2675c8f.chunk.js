(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[69,300],{220:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return S}));var a=n(11),r=n(51),c=n(39),o=n(187),s=n(152),u=n(33),i=n(8),d=n(6),m=n(100),E=n(270),l=n(488),b=n(82),_=n(38),T=n(497),f=n(781),O=n(784),j=n(841),A=n(50),N=n(160),P=n(41),h=n(451),M=n.n(h),p=n(10);function S(){var e=Object(r.qb)(),t=Object(i.b)(),n=Object(_.c)().textGet,h=Object(i.c)(u.e.token),S=Object(i.c)(s.c.contractId),g=Object(i.c)(s.c.fetchedPayments),I=Object(i.c)(s.c.fetchingPayments),C=Object(i.c)(N.c.fetching),R=Object(i.c)(s.c.paymentIds),y=Object(i.c)(s.c.warning),F=Object(i.c)(N.c.completedVoidPayment),U=n({uuid:"spa.generic.field.error.required"}),x=Object(r.sb)(r.db),L=Object(r.sb)(r.T),v=Object(i.c)(s.c.debitAccount),D=Object(i.c)(s.c.accounts),B=Object(i.c)(s.c.fetchedAccounts),Y=Object(i.c)(s.c.queriedBySearchButton),V=Object(i.c)(s.c.isAdhered),H=c.e.object({dateFrom:Object(o.d)(c.e.date(),U),dateTo:Object(o.d)(c.e.date(),U),conceptPay:Object(o.d)(c.e.string.required(),U),bankAccountCBU:Object(o.d)(c.e.string.orUndefined(),U),paymentReference:Object(o.d)(c.e.string.orUndefined(),U),status:Object(o.d)(c.e.string.orUndefined(),U),paymentFilename:Object(o.d)(c.e.string.orUndefined(),U),transferNumber:Object(o.d)(c.e.string.orUndefined(),U)}),k=B&&D.length>d.Sb,w=Y&&I;return a.b.useEffect((function(){return function(){t(s.a.cleanData())}}),[t]),a.b.useEffect((function(){F?e(x):V||e(L)}),[F,t,e,x,V,L]),a.b.useEffect((function(){h&&!B&&(t(s.b.getAccounts({token:h})),S||t(s.b.contractId({token:h})))}),[h,D,t,B,S]),C||!B?Object(p.jsx)(E.a,{}):Object(p.jsx)(T.a,{withoutBox:!0,className:Object(P.c)(M.a.consultPayments,w&&M.a.loading),"header-onBack":K,children:w?Object(p.jsx)(E.a,{}):Object(p.jsxs)(a.b.Fragment,{children:[Object(p.jsx)(f.a,{}),Object(p.jsx)(A.Card,{className:M.a.cardContainer,children:k?Object(p.jsxs)(l.a,{schema:H,warnings:y,onSubmit:q,children:[Object(p.jsx)(O.a,{}),Object(p.jsxs)("footer",{children:[Object(p.jsx)(b.a,{label:{uuid:"spa.form.cancel"},variant:"outlined",onClick:K}),Object(p.jsx)(b.a,{label:{uuid:"spa.form.search"},type:"submit"})]})]}):Object(p.jsx)(_.b,{className:M.a.title,uuid:"spa.suppliers.payment.without.accounts"})}),g&&Object(p.jsx)(j.a,{})]})});function q(e){if(h){var n=e.dateFrom,a=e.dateTo,r=e.status,c=e.conceptPay,o=e.paymentFilename,u=e.paymentReference,i=e.bankAccountCBU,m=e.transferNumber,E=X(n),l=X(a);!function(e,n,a,r,c,o,u,i){var m=s.a.conceptPay,E=s.a.dateFrom,l=s.a.dateTo,b=s.a.paymentReference,_=s.a.paymentStatus,T=s.a.paymentFilename,f=s.a.bankAccountCBU,O=s.a.transferNumber;t(m(a)),t(E(e)),t(l(n)),t(b(c)),t(_(r||d.D)),t(T(o)),t(f(u)),t(O(i))}(E,l,c,r,u,o,i,m),R.length&&t(s.a.paymentIds([])),t(s.a.cleanPayments()),t(s.b.consultPayments({token:h,status:r,conceptPay:c,paymentFilename:o,paymentReference:u,debitAccount:v,contractId:S,transferNumber:m,lastBatch:d.Ub,requestDateFrom:E,requestDateTo:l})),t(s.a.queriedBySearchButton(!0))}}function X(e){return Object(m.c)(e,{format:m.a.SHORT}).split("/").reverse().join("-")}function K(){e(r.a)}}},451:function(e,t,n){e.exports={NAME_BASEINTERNAL_CONTAINER:"BaseInternalContainer",TYPE_BASEINTERNAL_CONTAINER:"Container",NAME_AMOUNT_FORMATTER:"AmountFormatter",TYPE_AMOUNT_FORMATTER:"Element",NAME_INPUT_CHECKBOX:"InputCheckbox",TYPE_INPUT_CHECKBOX:"Element",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_DATETIME:"DateTime",TYPE_DATETIME:"Element",NAME_XS:"xs",NAME_SM:"sm",NAME_MD:"md",NAME_LG:"lg",consultPayments:"_rules_consultPayments__3wAw5",agreement:"_rules_agreement__2Lo-n",cardContainer:"_rules_cardContainer__182Ku",subtitleDate:"_rules_subtitleDate__3dVup",agreementTitle:"_rules_agreementTitle__7neCu",agreementDescription:"_rules_agreementDescription__18QQh",labelAgreement:"_rules_labelAgreement__1fiR7",detail:"_rules_detail__6HUKH",loading:"_rules_loading__9VIE-"}},494:function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var a=n(2),r=n(19),c=n(16),o=n(11),s=n(50),u=n(41),i=n(488),d=n(498),m=n.n(d),E=n(10),l=["id","name","methods","defaultValue","pattern","withSuggestions","onChange","onBlur"],b=m.a.NAME_INPUT_FIELD,_=m.a.TYPE_INPUT_FIELD,T=o.b.memo((function(e){var t,n=o.b.useState(!1),i=Object(c.a)(n,2),d=i[0],m=i[1],T=e.id,f=e.name,O=e.methods,j=e.defaultValue,A=e.pattern,N=e.withSuggestions,P=void 0===N||N,h=e.onChange,M=e.onBlur,p=Object(r.a)(e,l),S=O.register,g=O.formState,I=O.setValue,C=O.clearErrors,R=g.errors,y="".concat(f),F=R[f];return o.b.useEffect((function(){j&&I(y,j),j||I(y,void 0),P&&m(!0)}),[j,y,I,P,m]),Object(E.jsx)(u.a,{name:b,type:_,children:Object(E.jsx)(s.TextField,Object(a.a)(Object(a.a)(Object(a.a)(Object(a.a)(Object(a.a)({id:T||f},j&&{defaultValue:j}),F&&{error:null===(t=F.message)||void 0===t?void 0:t.toString()}),S(y,{onChange:function(e){h&&h(e);C([y])},onBlur:M})),p),{},{autoComplete:P?"on":"off",pattern:A,onKeyDown:function(e){e.target.value||d||m(!0)}}))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function f(e){var t=i.a.useContext();return Object(E.jsx)(T,Object(a.a)({methods:t},e))}f.displayName=b},498:function(e,t,n){e.exports={NAME_INPUT_FIELD:"InputField",TYPE_INPUT_FIELD:"Element"}},512:function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var a=n(2),r=n(19),c=n(11),o=n(50),s=n(41),u=n(488),i=n(514),d=n.n(i),m=n(10),E=["id","name","methods","defaultValue","onChange","valueAsNumber"],l=d.a.NAME_INPUT_NUMBER,b=d.a.TYPE_INPUT_NUMBER,_={id:l,valueAsNumber:!0},T=c.b.memo((function(e){var t,n=e.id,u=e.name,i=e.methods,d=e.defaultValue,_=e.onChange,T=e.valueAsNumber,f=Object(r.a)(e,E),O=i.register,j=i.formState,A=i.getValues,N=i.setValue,P=i.clearErrors,h=j.errors,M="".concat(u),p=A()[M],S=h[u];return c.b.useEffect((function(){d&&N(M,d,{shouldValidate:!0}),d||N(M,void 0)}),[d,M,N]),Object(m.jsx)(s.a,{name:l,type:b,children:Object(m.jsx)(o.NumberField,Object(a.a)(Object(a.a)(Object(a.a)(Object(a.a)({},d&&{defaultValue:d}),{},{id:n||u},S&&{error:null===(t=S.message)||void 0===t?void 0:t.toString()}),O(M,{onChange:function(e){_&&_(e);P([M])},valueAsNumber:T})),{},{value:p},f))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function f(e){var t=u.a.useContext();return Object(m.jsx)(T,Object(a.a)({methods:t},e))}f.displayName=l,f.defaultProps=_},514:function(e,t,n){e.exports={NAME_INPUT_NUMBER:"InputNumber",TYPE_INPUT_NUMBER:"Element"}},523:function(e,t,n){"use strict";n.d(t,"a",(function(){return O}));var a=n(2),r=n(16),c=n(19),o=n(11),s=n(41),u=n(6),i=n(38),d=n(525),m=n.n(d),E=n(526),l=n.n(E),b=n(10),_=["a11yMessage","className"],T=l.a.NAME_ACCESSIBLE_LOADER_STATUS,f=l.a.TYPE_ACCESSIBLE_LOADER_STATUS;function O(e){var t=e,n=t.a11yMessage,d=t.className,E=Object(c.a)(t,_),l=Object(s.c)(d,m.a.fetchedIndicator),O=o.b.useState(!1),j=Object(r.a)(O,2),A=j[0],N=j[1];return o.b.useEffect((function(){var e=setTimeout((function(){N(!0)}),u.y);return function(){return clearTimeout(e)}}),[]),A?null:Object(b.jsx)(s.a,Object(a.a)(Object(a.a)({},E),{},{className:l,name:T,type:f,children:Object(b.jsx)(i.b,{"aria-live":"polite",role:"status",tag:"span",uuid:n})}))}O.defaultProps={a11yMessage:"spa.a11y.loaded"}},525:function(e,t,n){e.exports={NAME_ACCESSIBLE_LOADER_STATUS:"AccessibleLoaderStatus",TYPE_ACCESSIBLE_LOADER_STATUS:"Element",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",fetchedIndicator:"_rules_fetchedIndicator__2_ji8"}},526:function(e,t,n){e.exports={NAME_ACCESSIBLE_LOADER_STATUS:"AccessibleLoaderStatus",TYPE_ACCESSIBLE_LOADER_STATUS:"Element"}},566:function(e,t,n){"use strict";n.d(t,"a",(function(){return T}));var a=n(2),r=n(19),c=n(11),o=n(50),s=n(41),u=n(488),i=n(567),d=n.n(i),m=n(10),E=["id","name","methods","onChange","defaultValue"],l=d.a.NAME_INPUT_DATE_FIELD,b=d.a.TYPE_INPUT_DATE_FIELD,_=c.b.memo((function(e){var t=e.id,n=e.name,u=e.methods,i=e.onChange,d=e.defaultValue,_=Object(r.a)(e,E),T=u.register,f=u.formState,O=u.setValue,j=u.clearErrors,A=f.errors,N="".concat(n),P=A[n];return c.b.useEffect((function(){O(N,d||void 0)}),[d,N,O]),Object(m.jsx)(s.a,{name:l,type:b,children:Object(m.jsx)(o.DateField,Object(a.a)(Object(a.a)(Object(a.a)({id:t||n},P&&{error:String(P.message)}),T(N)),{},{onChange:function(e){O(N,e),j([N]),i&&i(e)}},_))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function T(e){var t=u.a.useContext();return Object(m.jsx)(_,Object(a.a)({methods:t},e))}T.displayName=l},567:function(e,t,n){e.exports={NAME_INPUT_DATE_FIELD:"InputDateField",TYPE_INPUT_DATE_FIELD:"Element"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=69.a2675c8f.chunk.js.map