(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[253],{161:function(n,t,r){"use strict";function e(){return Date.now().toString(36)+Math.random().toString(36).substr(2,5)}r.d(t,"a",(function(){return e}))},254:function(n,t,r){"use strict";r.d(t,"b",(function(){return i})),r.d(t,"a",(function(){return a}));var e=r(9),o=r(2),u=["FINGER","GENERIC","FACE","NO_HARDWARE","NO_AVAILABLE"],c=["DONE_RIGHT","DONE_WRONG","CANCELED","LOCKOUT_TEMP","LOCKOUT_PERM"];d(["INTERNAL","UNKNOWN","ARGS"],"ERROR_");function i(){var n=d(u,"DETECT_"),t={CODE:n,isAvailable:!1,code:NaN,error:void 0};return l()?new Promise((function(r,e){try{if(!window.cordova)return;window.cordova.plugins.biometry.detect((function(e){return r(Object(o.a)(Object(o.a)({},t),{},{code:e,isAvailable:[n.FACE,n.FINGER,n.GENERIC].includes(e)}))}),(function(n){var u=f(n);return u?r(Object(o.a)(Object(o.a)({},t),{},{code:n,error:new Error(u)})):e(new Error("Could not find code: ".concat(n)))}))}catch(u){e(u)}})):Promise.resolve(t)}function a(n){var t=d(c,"AUTH_"),r={isAuthenticated:!1,isUnidentified:!1,isInternalError:!1,isLockedTemporarly:!1,isLockedPermanently:!1,cancelled:!1,code:NaN,error:void 0,CODE:t};if(!l())return Promise.resolve(r);var e=function(n,r){n({isAuthenticated:r===t.DONE_RIGHT,isUnidentified:r===t.DONE_WRONG,isLockedTemporarly:r===t.LOCKOUT_TEMP,isLockedPermanently:r===t.LOCKOUT_PERM,isInternalError:!1,cancelled:r===t.CANCELED,code:r,error:void 0,CODE:t})},o=function(n,r,e){var o=f(e);return o?n({isAuthenticated:!1,isUnidentified:!1,isInternalError:!0,isLockedTemporarly:!1,isLockedPermanently:!1,cancelled:e===t.CANCELED,code:e,error:o,CODE:t}):r(new Error("Could not find code: ".concat(e)))};return new Promise((function(t,r){try{if(!window.cordova)return;window.cordova.plugins.biometry.auth(n,e.bind(null,t),o.bind(null,t,r))}catch(u){r(u)}}))}function f(n){if(!l()||!window.cordova)return null;var t=window.cordova.plugins.biometry,r=Object.entries(t.CODE).find((function(t){return t[1]===n}));return!!r&&r[0]}function l(){var n,t;return Boolean(null===(n=window.cordova)||void 0===n||null===(t=n.plugins)||void 0===t?void 0:t.biometry)}function d(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return n.reduce((function(n,r){return Object(o.a)(Object(o.a)({},n),{},Object(e.a)({},r,l()?window.cordova.plugins.biometry.CODE["".concat(t).concat(r)]:NaN))}),{})}},26:function(n,t,r){"use strict";r.d(t,"b",(function(){return e})),r.d(t,"a",(function(){return o})),r.d(t,"c",(function(){return u}));var e=Boolean(window.cordova),o={CORDOVA_UNAVAILABLE:-1,PLUGIN_UNAVAILABLE:-2,UNKNOWN:0,PLATFORM_NOT_SUPPORTED:-3};function u(){return new Promise((function(n){e?document.addEventListener("deviceready",(function(){return n(!0)})):n(!1)}))}},293:function(n,t,r){"use strict";r.d(t,"a",(function(){return o}));var e=r(26);function o(){return new Promise((function(n){e.b||n(null),Object(e.c)().then((function(){n(navigator.splashscreen)}))}))}},36:function(n,t,r){"use strict";r.d(t,"h",(function(){return d})),r.d(t,"a",(function(){return s})),r.d(t,"c",(function(){return N})),r.d(t,"d",(function(){return E})),r.d(t,"e",(function(){return v})),r.d(t,"b",(function(){return m})),r.d(t,"g",(function(){return A})),r.d(t,"i",(function(){return R})),r.d(t,"f",(function(){return y}));r(9);var e=r(0),o=r(16),u=r(5),c=r(11),i=r(26),a={ANDROID:"Android",IOS:"iOS",IPAD:"iPadOS"};function f(){return l.apply(this,arguments)}function l(){return(l=Object(u.a)(Object(e.a)().mark((function n(){var t;return Object(e.a)().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,Object(i.c)();case 2:if(n.sent&&cordova.plugins){n.next=5;break}throw i.a.CORDOVA_UNAVAILABLE;case 5:if(t=cordova.plugins.info){n.next=8;break}throw i.a.PLUGIN_UNAVAILABLE;case 8:return n.abrupt("return",t);case 9:case"end":return n.stop()}}),n)})))).apply(this,arguments)}function d(n){return"number"===typeof n&&Object.values(i.a).some((function(t){return t===n}))}function s(){return O.apply(this,arguments)}function O(){return(O=Object(u.a)(Object(e.a)().mark((function n(){var t,r;return Object(e.a)().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.prev=0,n.next=3,f();case 3:return t=n.sent,n.next=6,t.get();case 6:return r=n.sent,n.abrupt("return",r);case 10:if(n.prev=10,n.t0=n.catch(0),!(n.t0 instanceof Error)){n.next=14;break}return n.abrupt("return",i.a.UNKNOWN);case 14:return n.abrupt("return",n.t0);case 15:case"end":return n.stop()}}),n,null,[[0,10]])})))).apply(this,arguments)}var p=":",b="app",N="android",E="ios",v="iPadOS",m={UNKNOWN:"unknown",BROWSER_MOBILE:"".concat("www").concat(p).concat("mobile"),BROWSER_DESKTOP:"".concat("www").concat(p).concat("desktop"),CORDOVA_ANDROID:"".concat(b).concat(p).concat(N),CORDOVA_IOS:"".concat(b).concat(p).concat(E),CORDOVA_IPAD:"".concat(b).concat(p).concat(v)},w={maxWidth:640};function A(n){return h.apply(this,arguments)}function h(){return(h=Object(u.a)(Object(e.a)().mark((function n(t){var r,o,u,c,i;return Object(e.a)().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return r=(t||{}).maxWidth,o=void 0===r?w.maxWidth:r,n.next=3,s();case 3:if(!d(u=n.sent)){n.next=8;break}return c="ontouchstart"in document.documentElement,i=window.matchMedia("only screen and (max-width: ".concat(o,"px)")).matches,n.abrupt("return",c&&i?m.BROWSER_MOBILE:m.BROWSER_DESKTOP);case 8:n.t0=u.osName,n.next=n.t0===a.ANDROID?11:n.t0===a.IOS?12:n.t0===a.IPAD?13:14;break;case 11:return n.abrupt("return",m.CORDOVA_ANDROID);case 12:case 13:return n.abrupt("return",m.CORDOVA_IOS);case 14:return n.abrupt("return",m.UNKNOWN);case 15:case"end":return n.stop()}}),n)})))).apply(this,arguments)}function R(){var n=c.b.useState(m.UNKNOWN),t=Object(o.a)(n,2),r=t[0],i=t[1];return c.b.useEffect((function(){!function(){a.apply(this,arguments)}()}),[]),y(r);function a(){return(a=Object(u.a)(Object(e.a)().mark((function n(){var t;return Object(e.a)().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,A();case 2:t=n.sent,i(t);case 4:case"end":return n.stop()}}),n)})))).apply(this,arguments)}}function y(n){var t=n===m.BROWSER_DESKTOP,r=n===m.BROWSER_MOBILE;return{platform:n,isMobile:n===m.CORDOVA_ANDROID||n===m.CORDOVA_IOS,isDesktop:t,isWebMobile:r,isUnknown:n===m.UNKNOWN}}},39:function(n,t,r){"use strict";r.d(t,"e",(function(){return e})),r.d(t,"b",(function(){return A})),r.d(t,"c",(function(){return h})),r.d(t,"d",(function(){return R})),r.d(t,"a",(function(){return y}));var e={};r.r(e),r.d(e,"any",(function(){return E})),r.d(e,"never",(function(){return v})),r.d(e,"union",(function(){return m})),r.d(e,"intersection",(function(){return w})),r.d(e,"array",(function(){return i})),r.d(e,"boolean",(function(){return a})),r.d(e,"date",(function(){return f})),r.d(e,"func",(function(){return l})),r.d(e,"instance",(function(){return d})),r.d(e,"map",(function(){return s})),r.d(e,"number",(function(){return O})),r.d(e,"object",(function(){return p})),r.d(e,"set",(function(){return b})),r.d(e,"string",(function(){return N}));var o=r(13),u=r(155),c=r.n(u);function i(n){return n?o.array(n):o.array()}function a(){return o.boolean()}function f(){return o.date()}function l(){return o.func()}function d(n){return o.instance(n)}function s(n,t){return o.map(n,t)}function O(){return o.number()}function p(n){return n?o.object(n):o.object()}function b(n){return o.set(n)}function N(){return o.string()}i.orUndefined=function(n){return n?o.optional(o.array(n)):o.optional(o.array())},i.orNull=function(n){return n?o.nullable(o.array(n)):o.nullable(o.array())},i.empty=function(n){return n?o.empty(i(n)):o.empty(i())},i.equals=function(n){return o.refine(o.array(),"equals",(function(t){return c()(n,t)}))},i.ofLength=function(n,t){return o.refine(o.array(),"array of length<".concat(n).concat(t?",".concat(t):"",">"),(function(r){var e=r.length>=n;return t?e&&r.length<=t:e}))},a.orUndefined=function(){return o.optional(a())},a.orNull=function(){return o.nullable(a())},a.equals=function(n){return o.literal(n)},f.orUndefined=function(){return o.optional(f())},f.orNull=function(){return o.nullable(f())},f.equals=function(n){return o.refine(o.date(),"equals",(function(t){return t.getTime()===n.getTime()}))},l.orUndefined=function(){return o.optional(l())},l.orNull=function(){return o.nullable(l())},d.orUndefined=function(n){return o.optional(d(n))},d.orNull=function(n){return o.nullable(o.instance(n))},s.orUndefined=function(n,t){return o.optional(o.map(n,t))},s.orNull=function(n,t){return o.nullable(o.map(n,t))},O.orUndefined=function(){return o.optional(O())},O.orNull=function(){return o.nullable(O())},O.equals=function(n){return o.literal(n)},p.orUndefined=function(n){return n?o.optional(o.object(n)):o.optional(p())},p.orNull=function(n){return n?o.nullable(o.object(n)):o.nullable(p())},p.equals=function(n){return o.refine(o.object(),"equals",(function(t){return c()(n,t)}))},p.record=function(n,t){return o.record(n,t)},b.orUndefined=function(n){return o.optional(b(n))},b.orNull=function(n){return o.nullable(b(n))},N.orUndefined=function(){return o.optional(N())},N.orNull=function(){return o.nullable(N())},N.equals=function(n){return o.literal(n)},N.empty=function(){return o.empty(N())},N.required=function(){return o.nonempty(N())},N.match=function(n){return o.pattern(N(),n)},N.ofLength=function(n,t){return o.refine(o.string(),"string of length<".concat(n).concat(t?",".concat(t):"",">"),(function(r){var e=r.length>=n;return t?e&&r.length<=t:e}))};var E=o.any,v=o.never,m=o.union,w=o.intersection,A=o.define,h=o.dynamic,R=(o.defaulted,o.mask,o.optional,o.assert,o.coerce,o.validate,o.lazy,o.union,o.intersection,o.object,o.is),y=o.assign}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=main~e3c5d225.c74714ea.chunk.js.map