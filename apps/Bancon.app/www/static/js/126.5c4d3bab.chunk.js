(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[126,271],{401:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return D}));n(11);var r=n(542),i=n(38),u=n(187),o=n(497),a=n(488),c=n(8),l=n(33),f=n(80),s=n(99),d=n(41),_=n(50),b=n(82),p=n(571),m=n(6),O=n(729),j=n.n(O),v=n(730),h=n.n(v),M=n(10),y=j.a.NAME_TERM_FORM,P=j.a.TYPE_TERM_FORM;function T(e){var t=e,n=t.max,r=t.min,u=a.a.useContext().getValues,o=Object(i.c)().textGet;return Object(M.jsx)(d.a,{name:y,tag:"section",type:P,children:Object(M.jsxs)(_.Card,{className:h.a.wrapperTermForm,children:[Object(M.jsx)("header",{children:Object(M.jsx)(i.b,{className:h.a.title,id:"card-title",tag:"h1",uuid:"spa.deposits.add.term.title"})}),Object(M.jsxs)("section",{className:h.a.content,children:[Object(M.jsx)(p.a,{currency:m.D,decimalScale:m.Sb,label:o({uuid:"spa.deposits.amount.label"}),name:"customTerm",thousandSeparator:m.D}),Object(M.jsx)(i.b,{className:h.a.info,replace:[String(r),String(n)],tag:"h6",uuid:"spa.deposits.add.term.min.max"})]}),Object(M.jsx)("footer",{children:Object(M.jsx)(b.a,{inline:!0,className:h.a.submitButton,disabled:function(){var e=u().customTerm;return Boolean(!e)}(),label:{uuid:"spa.form.accept"},type:"submit"})})]})})}var E=n(148),g=n(74),N=n(51),A=n(610),S=n(444),R=n.n(S);function D(){var e=Object(i.c)().textGet,t=Object(s.a)().getValueConfig,n=Object(c.b)(),d=Object(f.g)(),_=Object(N.sb)(N.k),b=Object(g.a)(t("backend.spa.deposits.v13")),p=Object(g.a)(t("backend.spa.deposits.v14")),m=Object(g.a)(t("backend.spa.deposits.v15")),O=Object(c.c)(E.c.depositAmountAccountData),j=Object(c.c)(E.c.productChannelSelected),v=Object(c.c)(E.c.instructionSelected),h=Object(c.c)(E.c.isProductSelectedUVA)?p:b,y=e({uuid:"spa.deposits.add.term.min",replace:[String(h)]}),P=e({uuid:"spa.deposits.add.term.max",replace:[String(m)]}),S=e({uuid:"spa.generic.field.error.required"}),D=r.Type.object({customTerm:Object(r.Dynamic)((function(e){return String(e)?Object(u.i)(r.Type.string(),h,m,y,P):Object(u.d)(r.Type.string(),S)}))}),U=Object(c.c)(l.e.token);return Object(M.jsx)(o.a,{withoutBox:!0,className:R.a.addTerm,"header-onBack":function(){d(f.a)},children:Object(M.jsx)(a.a,{ariaLabelledby:"card-title",schema:D,onSubmit:function(e){var t=e.customTerm;if(!U||!t||!j||!O)return;n(E.a.setFetched(!1)),n(E.b.simulate({token:U,term:String(Object(A.a)(t)),amount:O.amount,debitAccount:O.account,productId:j.productId,productClassId:j.productClassId,renovationType:v})),n(E.a.simulateSingleTerm(!0)),d(_)},children:Object(M.jsx)(T,{max:m,min:h})})})}},444:function(e,t,n){e.exports={NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_AMOUNT_FORMATTER:"AmountFormatter",TYPE_AMOUNT_FORMATTER:"Element",NAME_FORM:"Form",TYPE_FORM:"Element",NAME_INPUT_RADIO:"InputRadio",TYPE_INPUT_RADIO:"Element",NAME_XS:"xs",NAME_SM:"sm",NAME_MD:"md",NAME_LG:"lg",interestByTerms:"_rules_interestByTerms__3VuB1",depositList:"_rules_depositList__3YfQV",terms:"_rules_terms__38sI7",tna:"_rules_tna__2IlW-",receive:"_rules_receive__2nQNL",addTerm:"_rules_addTerm__Ybq_Z"}},542:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),u=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Assign=t.Is=t.Object=t.AND=t.OR=t.ValidateLazy=t.Validate=t.Coerce=t.Assert=t.Optional=t.Strip=t.Set=t.Dynamic=t.Define=t.Type=t.SuperStruct=void 0;var o=u(n(13));t.SuperStruct=u(n(13)),t.Type=u(n(543)),t.Define=o.define,t.Dynamic=o.dynamic,t.Set=o.defaulted,t.Strip=o.mask,t.Optional=o.optional,t.Assert=o.assert,t.Coerce=o.coerce,t.Validate=o.validate,t.ValidateLazy=o.lazy,t.OR=o.union,t.AND=o.intersection,t.Object=o.object,t.Is=o.is,t.Assign=o.assign},543:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),u=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.string=t.set=t.object=t.number=t.map=t.instance=t.func=t.date=t.boolean=t.array=t.intersection=t.union=t.never=t.any=void 0;var o=u(n(13));t.any=o.any,t.never=o.never,t.union=o.union,t.intersection=o.intersection;var a=n(544);Object.defineProperty(t,"array",{enumerable:!0,get:function(){return a.array}});var c=n(545);Object.defineProperty(t,"boolean",{enumerable:!0,get:function(){return c.boolean}});var l=n(546);Object.defineProperty(t,"date",{enumerable:!0,get:function(){return l.date}});var f=n(547);Object.defineProperty(t,"func",{enumerable:!0,get:function(){return f.func}});var s=n(548);Object.defineProperty(t,"instance",{enumerable:!0,get:function(){return s.instance}});var d=n(549);Object.defineProperty(t,"map",{enumerable:!0,get:function(){return d.map}});var _=n(550);Object.defineProperty(t,"number",{enumerable:!0,get:function(){return _.number}});var b=n(551);Object.defineProperty(t,"object",{enumerable:!0,get:function(){return b.object}});var p=n(552);Object.defineProperty(t,"set",{enumerable:!0,get:function(){return p.set}});var m=n(553);Object.defineProperty(t,"string",{enumerable:!0,get:function(){return m.string}})},544:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),u=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.array=void 0;var a=o(n(155)),c=u(n(13));function l(e){return e?c.array(e):c.array()}t.array=l,l.orUndefined=function(e){return e?c.optional(c.array(e)):c.optional(c.array())},l.orNull=function(e){return e?c.nullable(c.array(e)):c.nullable(c.array())},l.empty=function(e){return e?c.empty(l(e)):c.empty(l())},l.equals=function(e){return c.refine(c.array(),"equals",(function(t){return(0,a.default)(e,t)}))},l.ofLength=function(e,t){return c.refine(c.array(),"array of length<".concat(e).concat(t?",".concat(t):"",">"),(function(n){var r=n.length>=e;return t?r&&n.length<=t:r}))}},545:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),u=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.boolean=void 0;var o=u(n(13));function a(){return o.boolean()}t.boolean=a,a.orUndefined=function(){return o.optional(a())},a.orNull=function(){return o.nullable(a())},a.equals=function(e){return o.literal(e)}},546:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),u=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.date=void 0;var o=u(n(13));function a(){return o.date()}t.date=a,a.orUndefined=function(){return o.optional(a())},a.orNull=function(){return o.nullable(a())},a.equals=function(e){return o.refine(o.date(),"equals",(function(t){return t.getTime()===e.getTime()}))}},547:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),u=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.func=void 0;var o=u(n(13));function a(){return o.func()}t.func=a,a.orUndefined=function(){return o.optional(a())},a.orNull=function(){return o.nullable(a())}},548:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),u=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.instance=void 0;var o=u(n(13));function a(e){return o.instance(e)}t.instance=a,a.orUndefined=function(e){return o.optional(a(e))},a.orNull=function(e){return o.nullable(o.instance(e))}},549:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),u=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.map=void 0;var o=u(n(13));function a(e,t){return o.map(e,t)}t.map=a,a.orUndefined=function(e,t){return o.optional(o.map(e,t))},a.orNull=function(e,t){return o.nullable(o.map(e,t))}},550:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),u=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.number=void 0;var o=u(n(13));function a(){return o.number()}t.number=a,a.orUndefined=function(){return o.optional(a())},a.orNull=function(){return o.nullable(a())},a.equals=function(e){return o.literal(e)}},551:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),u=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.object=void 0;var a=o(n(155)),c=u(n(13));function l(e){return e?c.object(e):c.object()}t.object=l,l.orUndefined=function(e){return e?c.optional(c.object(e)):c.optional(l())},l.orNull=function(e){return e?c.nullable(c.object(e)):c.nullable(l())},l.equals=function(e){return c.refine(c.object(),"equals",(function(t){return(0,a.default)(e,t)}))},l.record=function(e,t){return c.record(e,t)}},552:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),u=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.set=void 0;var o=u(n(13));function a(e){return o.set(e)}t.set=a,a.orUndefined=function(e){return o.optional(a(e))},a.orNull=function(e){return o.nullable(a(e))}},553:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),u=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.string=void 0;var o=u(n(13));function a(){return o.string()}t.string=a,a.orUndefined=function(){return o.optional(a())},a.orNull=function(){return o.nullable(a())},a.equals=function(e){return o.literal(e)},a.empty=function(){return o.empty(a())},a.required=function(){return o.nonempty(a())},a.match=function(e){return o.pattern(a(),e)},a.ofLength=function(e,t){return o.refine(o.string(),"string of length<".concat(e).concat(t?",".concat(t):"",">"),(function(n){var r=n.length>=e;return t?r&&n.length<=t:r}))}},571:function(e,t,n){"use strict";n.d(t,"a",(function(){return O}));var r=n(2),i=n(19),u=n(11),o=n(50),a=n(41),c=n(488),l=n(572),f=n.n(l),s=n(10),d=["id","name","methods","defaultValue","onChange"],_=f.a.NAME_INPUT_AMOUNT,b=f.a.TYPE_INPUT_AMOUNT,p={id:_},m=u.b.memo((function(e){var t,n=e.id,c=e.name,l=e.methods,f=e.defaultValue,p=e.onChange,m=Object(i.a)(e,d),O=l.register,j=l.formState,v=l.setValue,h=l.clearErrors,M=j.errors,y="".concat(c),P=M[c];return u.b.useEffect((function(){f&&v(y,f,{shouldValidate:!0}),f||v(y,void 0)}),[f,y,v]),Object(s.jsx)(a.a,{name:_,type:b,children:Object(s.jsx)(o.OversizedAmountField,Object(r.a)(Object(r.a)(Object(r.a)(Object(r.a)({id:n||c},f&&{defaultValue:f}),P&&{error:null===(t=P.message)||void 0===t?void 0:t.toString()}),O(y,{onChange:function(e){p&&p(e);h([y])}})),m))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function O(e){var t=c.a.useContext();return Object(s.jsx)(m,Object(r.a)({methods:t},e))}O.displayName=_,O.defaultProps=p},572:function(e,t,n){e.exports={NAME_INPUT_AMOUNT:"InputAmount",TYPE_INPUT_AMOUNT:"Element"}},610:function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(2),i=n(6),u={decimalSeparator:i.e,thousandSeparator:i.sb};function o(e,t){var n=Object(r.a)(Object(r.a)({},u),t),o=n.decimalSeparator,a=n.thousandSeparator;return e?Number(e.replace(a,i.D).replace(o,i.t)):i.Sb}},729:function(e,t,n){e.exports={NAME_TERM_FORM:"TermForm",TYPE_TERM_FORM:"Section"}},730:function(e,t,n){e.exports={NAME_TERM_FORM:"TermForm",TYPE_TERM_FORM:"Section",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_INPUT_AMOUNT:"InputAmount",TYPE_INPUT_AMOUNT:"Element",NAME_XS:"xs",NAME_SM:"sm",NAME_MD:"md",NAME_LG:"lg",wrapperTermForm:"_rules_wrapperTermForm__eDs2O",title:"_rules_title__3BU0y",content:"_rules_content__3Bk3L",info:"_rules_info__3yZ8J",submitButton:"_rules_submitButton__3nQlu"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=126.5c4d3bab.chunk.js.map