(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[42],{554:function(e,t,a){"use strict";a.d(t,"a",(function(){return l}));var n=a(39),r=a(187),i=a(6);function l(e){var t=e.textErrorRequired,a=e.textErrorEmail,l=e.textErrorMaxLength,c=e.emailMaxLength,s=e.emailValidationRegex,u=[Object(r.d)(n.e.string.ofLength(i.fb,c),l),Object(r.d)(Object(r.h)(s),a)];return Object(n.c)((function(e){var a=u.find((function(t){return!Object(n.d)(e,t)}));return e&&a?a:Object(r.d)(n.e.string.required(),t)}))}},677:function(e,t,a){e.exports={NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_INPUT_FIELD:"InputField",TYPE_INPUT_FIELD:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",title:"_rules_title__2e1af",supplierPaymentOrderContainer:"_rules_supplierPaymentOrderContainer__-Br5u",supplierPaymentOrder:"_rules_supplierPaymentOrder__1ME3_",emailTitle:"_rules_emailTitle__3aWQc",supplierEmailContainer:"_rules_supplierEmailContainer__3gCZE",supplierDataContainer:"_rules_supplierDataContainer__2xa-1",supplierDataTitle:"_rules_supplierDataTitle__2p8zS",supplierDataContent:"_rules_supplierDataContent__3qbKV",newSupplierButton:"_rules_newSupplierButton__1QTiR"}},680:function(e,t,a){"use strict";a.d(t,"a",(function(){return u}));a(11);var n=a(38),r=a(50),i=[{id:"Nombre",label:"Nombre",numeric:!1,align:"center"},{id:"Email",label:"Email",numeric:!1,align:"center"},{id:"Fecha de pago",label:"Fecha de pago",numeric:!1,align:"center"},{id:"Monto",label:"Monto",numeric:!0,align:"center"},{id:"action",label:"",numeric:!1,align:"center"}],l=a(634),c=a.n(l),s=a(10);function u(e){var t=e,a=t.title,l=t.children;return Object(s.jsx)("div",{children:Object(s.jsx)(r.Accordion,{className:c.a.accordion,children:Object(s.jsxs)(r.Accordion.Item,{children:[Object(s.jsx)(r.Accordion.Summary,{className:c.a.accordionSummary,children:Object(s.jsx)(n.b,{uuid:a})}),Object(s.jsx)(r.Accordion.Details,{className:c.a.accordionDetails,children:Object(s.jsx)(r.Table.Container,{component:"div",children:Object(s.jsxs)(r.Table,{stripe:!0,children:[Object(s.jsx)(r.Table.Head,{children:Object(s.jsx)(r.Table.Row,{children:i.map((function(e){return Object(s.jsx)(r.Table.Cell,{children:e.label},e.id)}))})}),Object(s.jsx)(r.Table.Body,{children:l})]})})})]})})})}},801:function(e,t,a){"use strict";a.d(t,"a",(function(){return D}));var n=a(30),r=a(2),i=a(16),l=a(11),c=a(8),s=a(137),u=a(6),p=a(100),o=a(50),b=a(38),d=a(82),j=a(490),m=a(488),O=a(566),f=a(512),x=a(500),v=a(680),h=a(634),T=a.n(h),y=a(10);function D(){var e,t=l.b.useState(!1),a=Object(i.a)(t,2),h=a[0],D=a[1],E=l.b.useState(u.D),N=Object(i.a)(E,2),g=N[0],_=N[1],C=l.b.useState(u.D),P=Object(i.a)(C,2),A=P[0],S=P[1],k=l.b.useState([]),M=Object(i.a)(k,2),R=M[0],B=M[1],w=m.a.useContext().reset,I=Object(b.c)().textGet,F=Object(c.b)(),L=Object(c.c)(s.c.deletedOrders),U=Object(c.c)(s.c.cleanTransferFields),H=Object(c.c)(s.c.account),Y=Object(c.c)(s.c.supplier),G=Object(c.c)(s.c.transferTable),J=Object(c.c)(s.c.transfer),V=Object(c.c)(s.c.getGeneratePaymentPreData),q=Object(c.c)(s.c.getSuppliersAccounts),z=null===q||void 0===q||null===(e=q.find((function(e){return e.accountNumber===(null===Y||void 0===Y?void 0:Y.supplerAccount)})))||void 0===e?void 0:e.email,K=Boolean(null===R||void 0===R?void 0:R.length)&&(null===J||void 0===J?void 0:J.setTransferTable),Q=new Date,X="transfer-remove-button";l.b.useEffect((function(){L&&G&&(B(G),F(s.a.setDeletedOrders(!1)))}),[F,L,G]),l.b.useEffect((function(){F(s.a.transferTable(R))}),[F,R]),l.b.useEffect((function(){return function(){F(s.a.transferTable([])),F(s.a.cleanAccount())}}),[F]);var W=!(null!==H&&void 0!==H&&H.accountLabel)||!(null!==J&&void 0!==J&&J.paymentAmount)||Number(null===J||void 0===J?void 0:J.paymentAmount)<=u.Sb||!(null!==Y&&void 0!==Y&&Y.paymentReference)||!Y.supplier;return Object(y.jsxs)("div",{className:T.a.transferDataContainer,children:[Object(y.jsx)(b.b,{className:T.a.title,uuid:"spa.supplier.transfer.title"}),Object(y.jsxs)("div",{className:T.a.transferDataContainerRow,children:[Object(y.jsx)(O.a,{cleanData:U,filterDate:function(e){return e>new Date((new Date).setDate((new Date).getDate()-u.fb))&&e<new Date((new Date).setMonth((new Date).getMonth()+u.fb))},id:"paymentDate",label:I({uuid:"spa.supplier.transfer.date"}),name:"paymentDate",startDate:Q,onChange:function(e){var t=Object(p.c)(e,{defaultResult:"/",format:p.a.SHORT}),a=Object(r.a)(Object(r.a)({},J),{},{paymentDate:t});F(s.a.transfer(a))},onResetField:function(){F(s.a.cleanTransferFields(!1))}}),Object(y.jsx)(f.a,{fixedDecimalScale:!0,allowNegative:!1,decimalScale:u.Jb,decimalSeparator:u.t,label:I({uuid:"spa.supplier.transfer.amount"}),name:"amount",prefixCode:function(){if(H)return H.accountCurrency===u.r.ARS?u.b:u.Pb;return u.D}(),onChange:function(e){var t=e.target.value,a=Object(r.a)(Object(r.a)({},J),{},{paymentAmount:t});F(s.a.transfer(a))}})]}),Object(y.jsxs)(d.a,{className:T.a.addTransferButton,disabled:W,label:{uuid:"spa.supplier.transfer.add"},type:"button",variant:"solid",onClick:function(){if(!H||!J||!Y)return;var e=H.accountLabel,t=J.paymentDate,a=J.paymentAmount,i=Y.paymentReference,l=Y.supplier,c=Y.sendEmail,p=Y.supplierEmail,o=Y.supplierCBU,b=u.D;Z(!0);var d=R.findIndex((function(e){return e.reference===i&&e.supplierName===l})),j=d>u.ab,m={key:j?String(Number(null===V||void 0===V?void 0:V.length)+u.fb):u.hb,sendEmail:c,supplierEmail:p,paymentDate:t,paymentReference:i,paymentAmount:a};j?(!function(e,t){var a=Object(n.a)(R),i=Object(r.a)({},a[t]);i.transferData=[].concat(Object(n.a)(i.transferData),[e]),a[t]=i,B(a)}(m,d),b=R[d].key):b=function(e){if(!H||!Y)return u.D;var t=Y.paymentReference,a=Y.supplier,r=Y.supplierCBU,i=(Math.random()+u.fb).toString(u.Ab),l=[].concat(Object(n.a)(R),[{key:i,supplierName:a,reference:t,supplierCBU:r,debitAccount:null===H||void 0===H?void 0:H.accountNumber,transferData:[e]}]);return B(l),i}(m);(function(e,t,a,r,i,l,c,p,o){F(s.a.generatePaymentPreData({dataGeneratePayment:[].concat(Object(n.a)(null!==V&&void 0!==V?V:[]),[{key:e,account:null===t||void 0===t?void 0:t.split(u.C)[3],name:a,cbu:r,reference:i,email:l?c:u.D,amount:p,date:o}])}))})("".concat(b,"|").concat(m.key),e,l,o,i,c,p,a,t),F(s.a.cleanOnAddTransfer()),w((function(e){return Object(r.a)(Object(r.a)({},e),{},{referencePayment:u.D,amount:u.D,account:e.account,supplier:e.supplier})}))},children:[Object(y.jsx)(o.Icon,{name:"plus",size:"small",stroke:"white"}),Object(y.jsx)(b.b,{tag:"span",uuid:"spa.supplier.transfer.add"})]}),K&&Object(y.jsx)(v.a,{title:"spa.supplier.transfers",children:R.map((function(e){return e.transferData.map((function(t){return Object(y.jsxs)(o.Table.Row,{children:[Object(y.jsx)(o.Table.Cell,{children:e.supplierName}),Object(y.jsx)(o.Table.Cell,{children:t.supplierEmail||z}),Object(y.jsx)(o.Table.Cell,{children:t.paymentDate}),Object(y.jsx)(o.Table.Cell,{children:Object(y.jsx)(x.a,{amount:t.paymentAmount&&parseFloat(t.paymentAmount)})}),Object(y.jsx)(o.Table.Cell,{align:"right",padding:"none",children:Object(y.jsx)(d.a,{icon:"trash",kind:"icon",label:I({uuid:"spa.supplier.discard"}),type:"button",onClick:function(){return a=String(t.key),n=e.key,D(!0),_(a),void S(n);var a,n}},t.key)})]},t.key)}))}))}),h&&Object(y.jsxs)(j.a,{closeOnBgTap:!1,hasCloseIcon:!1,initialFocusElementId:X,open:h,title:"spa.supplier.transfer.modal.title",children:[Object(y.jsx)(j.a.Body,{children:Object(y.jsx)(b.b,{uuid:"spa.supplier.transfer.modal.body"})}),Object(y.jsx)(j.a.Footer,{children:Object(y.jsxs)("footer",{className:T.a.footer,children:[Object(y.jsx)(d.a,{inline:!0,label:{uuid:"spa.form.cancel"},type:"button",variant:"outlined",onClick:$}),Object(y.jsx)(d.a,{inline:!0,"data-focus-id":X,label:{uuid:"spa.supplier.remove"},type:"button",onClick:function(){(function(e,t){var a=R.map((function(a){if(a.key===t){var n=a.transferData.filter((function(t){return t.key!==e}));return Object(r.a)(Object(r.a)({},a),{},{transferData:n})}return a})).filter((function(e){return e.transferData.length!==u.Sb}));Z((null===a||void 0===a?void 0:a.length)>G.length||JSON.stringify(a)!==JSON.stringify(G)),B(a),F(s.a.setDeletedTransfers(!0)),F(s.a.transferTable(a));var n=null===V||void 0===V?void 0:V.filter((function(a){return a.key!=="".concat(t,"|").concat(e)}));F(s.a.generatePaymentPreData({dataGeneratePayment:n}))})(g,A),$()}})]})})]})]});function Z(e){var t=Object(r.a)(Object(r.a)({},J),{},{setTransferTable:e});F(s.a.transfer(t))}function $(){D(!1)}}},850:function(e,t,a){"use strict";a.d(t,"a",(function(){return T}));var n=a(2),r=a(11),i=a(8),l=a(137),c=a(51),s=a(518),u=a(50),p=a(33),o=a(503),b=a(494),d=a(515),j=a(38),m=a(82),O=a(6),f=a(677),x=a.n(f),v=a(10);function h(e){var t=e.supplier;return Object(v.jsxs)("ul",{className:x.a.supplierDataContainer,children:[Object(v.jsxs)("li",{children:[Object(v.jsx)(j.b,{className:x.a.supplierDataTitle,uuid:"spa.supplier.CBU"}),Object(v.jsx)(j.b,{className:x.a.supplierDataContent,children:t.supplierCBU})]}),Object(v.jsxs)("li",{children:[Object(v.jsx)(j.b,{className:x.a.supplierDataTitle,uuid:"spa.supplier.account"}),Object(v.jsx)(j.b,{className:x.a.supplierDataContent,children:t.supplerAccount})]}),Object(v.jsxs)("li",{children:[Object(v.jsx)(j.b,{className:x.a.supplierDataTitle,uuid:"spa.supplier.bank"}),Object(v.jsx)(j.b,{className:x.a.supplierDataContent,children:t.supplierBank})]}),Object(v.jsxs)("li",{children:[Object(v.jsx)(j.b,{className:x.a.supplierDataTitle,uuid:"spa.supplier.name"}),Object(v.jsx)(j.b,{className:x.a.supplierDataContent,children:t.supplier})]}),Object(v.jsxs)("li",{children:[Object(v.jsx)(j.b,{className:x.a.supplierDataTitle,uuid:"spa.supplier.cuit"}),Object(v.jsx)(j.b,{className:x.a.supplierDataContent,children:t.supplierCUIT})]}),Object(v.jsxs)("li",{children:[Object(v.jsx)(j.b,{className:x.a.supplierDataTitle,uuid:"spa.supplier.sameOrigin"}),Object(v.jsx)(j.b,{className:x.a.supplierDataTitle,uuid:t.sameOrigin?"spa.supplier.yes":"spa.supplier.no"})]})]})}function T(e){var t,a=e.title,f=Object(j.c)().textGet,T=Object(i.b)(),y=Object(i.c)(l.c.supplier),D=Object(i.c)(l.c.account),E=Object(i.c)(l.c.getSuppliersAccounts),N=null===E||void 0===E||null===(t=E.find((function(e){return e.accountNumber===(null===y||void 0===y?void 0:y.supplerAccount)})))||void 0===t?void 0:t.email,g=Object(i.c)(p.e.token),_=Object(c.qb)(),C=Object(c.sb)(c.r);return r.b.useEffect((function(){g&&T(l.b.getSuppliersAccounts({token:g}))}),[g,T]),r.b.useEffect((function(){return function(){T(l.a.supplier(void 0))}}),[T]),Object(v.jsxs)("section",{children:[Object(v.jsx)(j.b,{className:x.a.title,uuid:a}),Object(v.jsxs)("div",{className:x.a.supplierPaymentOrderContainer,children:[Object(v.jsxs)("div",{className:x.a.supplierPaymentOrder,children:[Object(v.jsx)(o.a,{label:f({uuid:"spa.supplier"}),name:"supplier",options:E?E.map((function(e){var t=e.recipientName,a=e.idTransferAccount,n=e.accountNumber;return{label:Object(v.jsx)("div",{children:Object(v.jsx)(j.b,{tag:"p",children:t})}),value:n,searchKey:a}})):[],onSelectOption:function(e){var t=(null!==E&&void 0!==E?E:[]).find((function(t){return t.idTransferAccount===e.searchKey}));if(t){var a=Object(n.a)(Object(n.a)({},y),{},{supplier:String(t.recipientName),supplierCBU:t.cbuAlias,supplerAccount:t.accountNumber,supplierCUIT:t.cuit,supplierBank:t.bankName,supplierEmail:t.email,sameOrigin:t.accountNumber===(null===D||void 0===D?void 0:D.accountNumber)});T(l.a.supplier(a))}}}),Object(v.jsx)("div",{children:Object(v.jsx)(b.a,{helper:f({uuid:"spa.supplier.referencePayment.helper"}),id:"referencePayment",label:f({uuid:"spa.supplier.referencePayment"}),maxLength:60,name:"referencePayment",regexPattern:O.ub,onChange:function(e){var t=Object(n.a)(Object(n.a)({},y),{},{paymentReference:String(e.target.value)});T(l.a.supplier(t))}})})]}),Object(v.jsx)("div",{className:x.a.newSupplierButton,children:Object(v.jsxs)(m.a,{className:x.a.linkButton,label:{uuid:"spa.paymentSuppliers.newSupplier"},type:"button",variant:"text",onClick:function(){_(Object(s.a)(C,"legacy.menu.transfers.manage.lists.spa"))},children:[Object(v.jsx)(u.Icon,{className:x.a.alertIcon,name:"plus",size:"small",stroke:"primary"}),Object(v.jsx)(j.b,{tag:"span",uuid:"spa.paymentSuppliers.newSupplier"})]})}),(null===y||void 0===y?void 0:y.supplier)&&Object(v.jsx)(h,{supplier:y}),Object(v.jsx)(j.b,{className:x.a.emailTitle,uuid:"spa.onboarding.step2.email.label"}),Object(v.jsxs)("div",{className:x.a.supplierEmailContainer,children:[Object(v.jsx)(d.a,{label:Object(v.jsx)("div",{children:Object(v.jsx)(j.b,{uuid:"spa.supplier.email"})}),name:"email",onChange:function(){var e=Object(n.a)(Object(n.a)({},y),{},{sendEmail:!(null!==y&&void 0!==y&&y.sendEmail)});T(l.a.supplier(e))}}),(null===y||void 0===y?void 0:y.sendEmail)&&Object(v.jsx)(b.a,{defaultValue:N,id:"emailInput",label:f({uuid:"spa.supplier.email.inputLabel"}),name:"emailInput",onChange:function(e){var t=e.target.value,a=Object(n.a)(Object(n.a)({},y),{},{supplierEmail:t});T(l.a.supplier(a))}})]})]})]})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=42.c2b14f18.chunk.js.map