(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[71,199],{489:function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var a=n(2),r=n(19),o=(n(11),n(41)),c=n(136),s=n(82),i=n(38),u=n(101),l=n(491),E=n.n(l),p={name:E.a.NAME_EXTERNAL_CONTAINER,type:E.a.TYPE_EXTERNAL_CONTAINER,showLogo:!1},b=n(492),O=n.n(b),f=n(10),_=["header-onBack","header-title","children","name","type","headerClassName","showLogo"];function d(e){var t=e,n=t["header-onBack"],l=t["header-title"],E=t.children,p=t.name,b=t.type,d=t.headerClassName,A=t.showLogo,m=Object(r.a)(t,_),h=Boolean(n||l),T=Object(o.c)(!l&&O.a.onlyRow,d),M=Object(o.c)(A&&O.a.step1Logo),N=Object(o.c)(A&&O.a.hasLogo);return Object(f.jsxs)(u.a,{children:[A&&Object(f.jsx)("div",{className:M,children:Object(f.jsx)(c.a,{alt:"logo",uuid:"logo150Login"})}),Object(f.jsx)(o.a,Object(a.a)(Object(a.a)({name:p,tag:"article",type:b},m),{},{children:Object(f.jsxs)("article",{className:N,children:[h&&Object(f.jsxs)("header",{className:T,children:[n&&Object(f.jsx)(s.a,{icon:"left",kind:"icon",label:{uuid:"spa.a11y.buttons.back"},size:"medium",variant:"text",onClick:n}),l&&Object(f.jsx)(i.b,{tag:"h5",uuid:l})]}),E]})}))]})}d.defaultProps=p},491:function(e,t,n){e.exports={NAME_EXTERNAL_CONTAINER:"ContainerExternal",TYPE_EXTERNAL_CONTAINER:"Container"}},492:function(e,t,n){e.exports={NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_LINK:"Link",TYPE_LINK:"Element",NAME_IMAGE:"Image",TYPE_IMAGE:"Element",NAME_XS:"xs",NAME_SM:"sm",NAME_MD:"md",NAME_LG:"lg",NAME_EXTERNAL_CONTAINER:"ContainerExternal",TYPE_EXTERNAL_CONTAINER:"Container",hasLogo:"_rules_hasLogo__AxHGK",onlyRow:"_rules_onlyRow__1im8h",step1Logo:"_rules_step1Logo__3LNq5"}},602:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return p}));var a=n(0),r=n(16),o=n(5),c=n(11),s=n(26),i=n(28),u="geoLocation";function l(e){return E.apply(this,arguments)}function E(){return(E=Object(o.a)(Object(a.a)().mark((function e(t){return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(s.c)();case 2:if(e.sent){e.next=5;break}throw s.a.CORDOVA_UNAVAILABLE;case 5:if(navigator.geolocation){e.next=7;break}throw{code:s.a.PLUGIN_UNAVAILABLE,message:"Plugin unavailable"};case 7:return e.abrupt("return",new Promise((function(e,n){try{navigator.geolocation.getCurrentPosition((function(t){e({code:i.a.SUCCESS,value:t})}),(function(e){n(new i.b(i.a.ERROR,u,e.message,e))}),t)}catch(a){n(new i.b(i.a.ERROR,u,i.c,a))}})));case 8:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function p(e){var t=c.b.useState(),n=Object(r.a)(t,2),s=n[0],u=n[1],E=c.b.useState(),p=Object(r.a)(E,2),b=p[0],O=p[1],f=c.b.useState(),_=Object(r.a)(f,2),d=_[0],A=_[1];return c.b.useEffect((function(){!function(e){m.apply(this,arguments)}(e)}),[e]),c.b.useEffect((function(){var e;(e=s)&&Boolean(e.code)?A(s):O(s)}),[s]),{position:b,error:d};function m(){return(m=Object(o.a)(Object(a.a)().mark((function e(t){var n,r;return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,l(t);case 3:n=e.sent,u(n.value),e.next=10;break;case 7:e.prev=7,e.t0=e.catch(0),e.t0 instanceof i.b&&(r=e.t0.getErrorObject(),u(r));case 10:case"end":return e.stop()}}),e,null,[[0,7]])})))).apply(this,arguments)}}},821:function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var a=n(0),r=n(5),o=n(26),c=n(28);function s(){return i.apply(this,arguments)}function i(){return(i=Object(r.a)(Object(a.a)().mark((function e(){var t;return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(o.c)();case 2:if(e.sent&&cordova.plugins){e.next=5;break}throw o.a.CORDOVA_UNAVAILABLE;case 5:if(t=cordova.plugins.diagnostic){e.next=8;break}throw o.a.PLUGIN_UNAVAILABLE;case 8:return e.abrupt("return",t);case 9:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function u(){return l.apply(this,arguments)}function l(){return(l=Object(r.a)(Object(a.a)().mark((function e(){var t;return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,s();case 2:return t=e.sent,e.abrupt("return",new Promise((function(e,n){try{t.isLocationEnabled((function(t){e({code:c.a.SUCCESS,value:t})}),(function(e){n(new c.b(c.a.ERROR,t.isLocationEnabled.name,e||c.c))}))}catch(a){n(new c.b(c.a.ERROR_UNKNOWN,t.isLocationEnabled.name,c.c))}})));case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}},826:function(e,t,n){e.exports={NAME_SEARCHBOX:"SearchBox",TYPE_SEARCHBOX:"Element"}},827:function(e,t,n){e.exports={NAME_SEARCHBOX:"SearchBox",TYPE_SEARCHBOX:"Element"}},833:function(e,t,n){e.exports={NAME_MAP:"Map",TYPE_MAP:"Element",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",searchBox:"_rules_searchBox__1RcHF"}},834:function(e,t,n){e.exports={NAME_MAP:"Map",TYPE_MAP:"Element"}},846:function(e,t,n){"use strict";n.d(t,"a",(function(){return R}));var a=n(2),r=n(16),o=n(11),c=n(41),s=n(822),i=n(6),u=n(50),l=(n(826),n(827)),E=n.n(l),p=n(10);E.a.NAME_GOOGLE_MAP_SEARCH_BOX,E.a.TYPE_GOOGLE_MAP_SEARCH_BOX;function b(e){var t=o.b.useRef(null),n=o.b.useRef(),a=e,r=a.maps,c=a.onPlacesChanged,s=a.placeholder,i=o.b.useCallback((function(){if(c&&n.current){var e=n.current.getPlaces();e&&c(e)}}),[c,n]);return o.b.useEffect((function(){return!n.current&&r&&t.current&&(n.current=new r.places.SearchBox(t.current),n.current.addListener("places_changed",i)),function(){r&&(n.current=void 0,r.event.clearInstanceListeners(n))}}),[]),Object(p.jsx)(u.SearchField,{ref:t,className:"googleSearchBox",id:"googleMapSearchField",label:s})}b.defaultProps={};var O=n(828),f=n(38),_=n(833),d=n.n(_),A=n(834),m=n.n(A),h=m.a.NAME_MAP,T=m.a.TYPE_MAP,M={zoom:i.o},N=o.b.memo((function(e){var t=Object(f.c)().textGet,n=o.b.useState(),a=Object(r.a)(n,2),i=a[0],u=a[1],l=e,E=l.apiKey,_=l.currentLocation,A=l.hasToCenter,m=l.onCurrentLocationChanged,M=l.onCoordsChanged,N=l.zoom,R=l.children,P=o.b.useState({apiReady:!1,map:void 0,googleMaps:void 0}),g=Object(r.a)(P,2),j=g[0],L=g[1],x=o.b.useCallback((function(e){if(e&&e[0]&&e[0].geometry&&e[0].geometry.location){var t,n={lat:e[0].geometry.location.lat(),lng:e[0].geometry.location.lng()};null===(t=j.map)||void 0===t||t.setCenter(n),m(n)}}),[j.map,m]),C=o.b.useCallback((function(){var e;null===(e=j.map)||void 0===e||e.setCenter(_)}),[_,j.map]);return o.b.useEffect((function(){C()}),[A,C]),Object(p.jsxs)(c.a,{name:h,type:T,children:[j.apiReady&&Object(p.jsx)("div",{className:d.a.searchBox,children:Object(p.jsx)(b,{maps:j.googleMaps,placeholder:t({uuid:"spa.map.searchBox.placeholder.landmarks"}),onPlacesChanged:x})}),Object(p.jsxs)(s.a,{yesIWantToUseGoogleMapApiInternals:!0,bootstrapURLKeys:{key:E,libraries:["places","geometry"]},center:_,defaultZoom:N,options:{zoomControl:!1,fullscreenControl:!1},onChange:function(){i&&M(i.getCenter())},onGoogleApiLoaded:function(e){return function(e,t){e&&t&&(L({apiReady:!0,map:e,googleMaps:t}),u(e))}(e.map,e.maps)},children:[R,Object(p.jsx)(O.a,{lat:_.lat.toString(),lng:_.lng.toString()})]})]})}));function R(e){return Object(p.jsx)(N,Object(a.a)({},e))}R.defaultProps=M}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=71.0a6695f1.chunk.js.map