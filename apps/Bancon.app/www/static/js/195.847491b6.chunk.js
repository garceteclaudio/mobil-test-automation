(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[195,314],{312:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return L}));var a=n(0),s=n(5),i=n(16),r=n(8),c=n(3),o=n(6),l=n(118),u=n(147),d=n(79),b=n(187),j=n(50),_=n(489),O=n(82),p=n(488),m=n(494),E=n(515),h=n(517),C=n(490),x=n(568),T=n(38),y=n(11),M=n(99),N=n(80),f=n(39),g=n(51),S=n(530),A=n(607),P=n(429),v=n.n(P),I=n(10);function L(){var e=y.b.useState(!1),t=Object(i.a)(e,2),n=t[0],P=t[1],L=y.b.useState(!1),w=Object(i.a)(L,2),R=w[0],B=w[1],U=y.b.useState(void 0),k=Object(i.a)(U,2),Y=k[0],F=k[1],D=y.b.useState(!1),H=Object(i.a)(D,2),X=H[0],W=H[1],q=y.b.useState(o.fb),V=Object(i.a)(q,2),z=V[0],G=V[1],J=Object(r.b)(),Z=Object(N.g)(),K=Object(T.c)().textGet,Q=Object(M.a)().getValueConfig,$=Object(g.sb)(g.R),ee=Object(r.c)(l.c.fetching),te=Object(r.c)(u.c.exchangeToken),ne=Object(r.c)(u.c.documentNumber),ae=Object(r.c)(l.c.invitationCode),se=Object(r.c)(l.c.securitySeals),ie=Object(r.c)(l.c.firstName),re=Object(r.c)(l.c.warning),ce=Object(A.a)(K,Q),oe=ne?Object(S.a)(K,Q,ne):Object(S.a)(K,Q),le=K({uuid:"spa.generic.field.error.required"}),ue=K({uuid:"spa.onboarding.error.termsAndConditions"}),de=K({uuid:"spa.enrollment.step4.createUser.username.input.label"}),be=K({uuid:"spa.enrollment.step4.createUser.password.input.label"}),je=K({uuid:"spa.enrollment.step4.createUser.password.input.helper"}),_e=K({uuid:"spa.generic.accessData.error.userInPassword"}),Oe=K({uuid:"spa.form.continue"}),pe=K({uuid:"spa.enrollment.securitySeal.modal.title"}),me=f.e.object({username:ce,newPassword:oe,generalConditions:Object(b.d)(f.e.boolean.equals(!0),ue),securitySeal:Object(b.d)(f.e.number(),le)}),Ee=Object(I.jsx)(j.Lottie,{direction:z,name:"user",play:X,size:"medium"});return y.b.useEffect((function(){J(l.b.securitySealList({exchangeToken:te}))}),[J,te]),Object(I.jsxs)(_.a,{"header-onBack":xe,"header-title":"spa.enrollment.step4.createUser.title",children:[Object(I.jsx)("section",{children:Object(I.jsxs)(p.a,{schema:me,warnings:re,onSubmit:function(e){return he.apply(this,arguments)},children:[Object(I.jsxs)(T.b,{className:v.a.textSubtitle,tag:"h6",children:[Object(I.jsx)("strong",{children:"".concat(ie," ")}),Object(I.jsx)(T.b,{tag:"span",uuid:"spa.enrollment.step4.createUser.subtitle"})]}),Object(I.jsx)("div",{className:v.a.securitySealContainer,children:Object(I.jsx)(x.a,{"aria-label":pe,buttonLabel:Oe,modalTitle:Object(I.jsx)(T.b,{tag:"h5",children:pe}),name:"securitySeal",options:se,selectedAvatar:Y,uuidError:"spa.generic.securitySeal.error.required",uuidLabel:"spa.enrollment.step4.createUser.securitySeal.label",onContinue:function(e){F(e)}})}),Object(I.jsxs)("div",{className:v.a.alignInputs,children:[Object(I.jsx)(m.a,{withoutSpaces:!0,label:de,name:"username",start:Ee,onBlur:function(){G(o.ab),W(!0)},onChange:Ce,onFocus:function(){G(o.fb),W(!0)}}),Object(I.jsx)(h.a,{withoutSpaces:!0,helper:je,label:be,name:"newPassword",onChange:Ce})]}),Object(I.jsx)("div",{className:v.a.termsAndConditions,children:Object(I.jsx)(E.a,{label:Object(I.jsxs)("div",{children:[Object(I.jsx)(T.b,{uuid:"spa.enrollment.step4.createUser.generalConditions.input.label1"}),Object(I.jsx)(O.a,{kind:"plain",label:{uuid:"spa.enrollment.step4.createUser.generalConditions.label2"},type:"button",onClick:Te})]}),name:"generalConditions",onChange:Ce})}),Object(I.jsx)(O.a,{className:v.a.submitButton,label:{uuid:"spa.form.continue"},loading:ee,type:"submit"})]})}),Object(I.jsxs)(C.a,{open:n,title:"spa.enrollment.terms.and.conditions.title",onClose:Te,children:[Object(I.jsx)(C.a.Body,{children:Object(I.jsx)(T.b,{uuid:"spa.enrollment.terms.and.conditions"})}),Object(I.jsx)(C.a.Footer,{children:Object(I.jsx)(O.a,{label:{uuid:"spa.form.accept"},size:"small",type:"button",onClick:Te})})]}),Object(I.jsxs)(C.a,{open:R,onClose:xe,children:[Object(I.jsx)(C.a.Body,{children:Object(I.jsx)(T.b,{uuid:"spa.enrollment.cancelSignup"})}),Object(I.jsx)(C.a.Footer,{children:Object(I.jsx)(O.a,{label:{uuid:"spa.form.accept"},type:"button",onClick:function(){J(l.a.clean()),J(d.a.clean()),J(u.a.clean()),Z($)}})})]})]});function he(){return(he=Object(s.a)(Object(a.a)().mark((function e(t){var n,s,i,r;return Object(a.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=t.generalConditions,s=t.newPassword,i=t.username,r=t.securitySeal,!s.includes(i)){e.next=4;break}return J(l.a.updateWarnings({code:c.a,message:c.a,data:{_newPassword:_e},type:c.i.COR020W.type})),e.abrupt("return");case 4:return e.next=6,J(l.b.createUser({exchangeToken:te,invitationCode:ae,generalConditions:n,newPassword:s,username:i,securitySeal:r.toString()}));case 6:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Ce(){J(l.a.cleanWarnings())}function xe(){B(!R)}function Te(){P(!n)}}},429:function(e,t,n){e.exports={NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_SECURITY_SEAL:"SecuritySeal",TYPE_SECURITY_SEAL:"Element",NAME_INPUT_NUMBER:"InputNumber",TYPE_INPUT_NUMBER:"Element",NAME_INPUT_PASSWORD:"InputPassword",TYPE_INPUT_PASSWORD:"Element",NAME_XS:"xs",NAME_SM:"sm",NAME_MD:"md",NAME_LG:"lg",NAME_EXTERNAL_CONTAINER:"ContainerExternal",TYPE_EXTERNAL_CONTAINER:"Container",byCodeTitle:"_rules_byCodeTitle__yr3wN",byCodeInvitationCode:"_rules_byCodeInvitationCode__1vi5-",byPin:"_rules_byPin__15kE-",haveCodeSubtitle:"_rules_haveCodeSubtitle__1Zpe2",alignInputs:"_rules_alignInputs__5ZcTE",byCodeSubtitle:"_rules_byCodeSubtitle__33HL5",securitySealContainer:"_rules_securitySealContainer__2vwIC",alignInvitationCode:"_rules_alignInvitationCode__1NX5C",textSubtitle:"_rules_textSubtitle__159WN",haveCode:"_rules_haveCode__Kknyv",submitButton:"_rules_submitButton__1hASq",termsAndConditions:"_rules_termsAndConditions__2CP8-",textBody:"_rules_textBody__3hBIX"}},490:function(e,t,n){"use strict";n.d(t,"a",(function(){return p}));var a=n(2),s=n(19),i=n(11),r=n(41),c=n(50),o=n(495),l=n.n(o),u=(n(496),n(38)),d=n(82),b=n(10),j=["ariaLabelledBy","id","children","title","onClose","hasCloseIcon"],_=l.a.TYPE_MODAL,O=l.a.NAME_MODAL;function p(e){var t=e,n=t.ariaLabelledBy,o=t.id,l=t.children,p=t.title,m=t.onClose,E=t.hasCloseIcon,h=Object(s.a)(t,j),C="modal-header-".concat(o||""),x="string"===typeof p?C:n,T="string"===typeof p?Object(b.jsx)(u.b,{id:C,tag:"h4",uuid:p}):p;return Object(b.jsx)(r.a,{name:O,tag:"div",type:_,children:Object(b.jsxs)(c.Modal,Object(a.a)(Object(a.a)({ariaLabelledBy:x,onClose:m},h),{},{children:[Object(b.jsx)(c.Modal.Header,{children:p&&Object(b.jsxs)(i.b.Fragment,{children:[T,E&&Object(b.jsx)(d.a,{icon:"close",kind:"icon",label:{uuid:"spa.a11y.buttons.close.modal"},onClick:m})]})}),l]}))})}p.defaultProps={ariaLabelledBy:"",closeOnBgTap:!0,hasCloseIcon:!0,initialFocusElementId:"",title:""},p.Body=function(e){var t=e.children;return Object(b.jsx)(c.Modal.Body,{children:t})},p.Footer=function(e){var t=e.children,n=e.className;return Object(b.jsx)(c.Modal.Footer,{className:n,children:t})}},495:function(e,t,n){e.exports={NAME_MODAL:"Modal",TYPE_MODAL:"Element"}},496:function(e,t,n){e.exports={NAME_MODAL:"Modal",TYPE_MODAL:"Element"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=195.847491b6.chunk.js.map