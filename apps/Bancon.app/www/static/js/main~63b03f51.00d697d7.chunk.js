(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[232],{24:function(t,e,n){"use strict";n.d(e,"t",(function(){return b})),n.d(e,"f",(function(){return p})),n.d(e,"u",(function(){return d})),n.d(e,"o",(function(){return f})),n.d(e,"m",(function(){return y})),n.d(e,"r",(function(){return v})),n.d(e,"n",(function(){return x})),n.d(e,"p",(function(){return w})),n.d(e,"k",(function(){return m})),n.d(e,"s",(function(){return P})),n.d(e,"g",(function(){return S})),n.d(e,"e",(function(){return I})),n.d(e,"c",(function(){return R})),n.d(e,"q",(function(){return U})),n.d(e,"d",(function(){return H})),n.d(e,"j",(function(){return E})),n.d(e,"h",(function(){return L})),n.d(e,"l",(function(){return J})),n.d(e,"i",(function(){return V})),n.d(e,"a",(function(){return q})),n.d(e,"b",(function(){return z}));var r=n(19),a=n(2),c=n(0),u=n(5),o=n(4),i=n(3),s=n(21),b=function(t){return t.ONBOARDING_FORM_W9="OnboardingFormW9",t}({}),p=Object(a.a)(Object(a.a)({},i.i),{},{API524W:{type:i.g.ERROR}});function d(t){if(!t||!Object(s.a)(t))return!0;var e=t;return Object(i.u)(p,e.code)}var l=["affidavit","securitySeal","newPassword"],O={step2:"spa.onboarding.sendValidationCodeByMail",step3:"spa.onboarding.validateMailCode",step4:"spa.onboarding.sendValidationCodeByPhone",step5:"spa.onboarding.validatePhoneCode",frontDocument:"spa.onboarding.renaper.uploadFrontDocument",backDocument:"spa.onboarding.renaper.uploadBackDocument",selfieUpdate:"spa.onboarding.renaper.uploadSelfie",preStep7:"spa.onboarding.personalDataStep7.pre",step7:"spa.onboarding.personalDataStep7.send",preStep8:"spa.onboarding.addressDataStep8.pre",getLocalities:"spa.misc.loadLocalities",getNeighborhoods:"spa.misc.loadNeighborhoods",step8:"spa.onboarding.addressDataStep8.send",preStep9:"spa.onboarding.onboardingBranchStep9.pre",step9:"spa.onboarding.onboardingBranchStep9.send",step10:"spa.onboarding.accessDataStep10.send",securitySeal:"spa.signup.securitySeals.list",downloadTemplate:"spa.onboarding.downloadTemplate"};function f(t){return j.apply(this,arguments)}function j(){return(j=Object(u.a)(Object(c.a)().mark((function t(e){var n,r,a;return Object(c.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n="".concat(o.d.BANCOR_NO_AUTH_API,"/").concat(O.step2),t.next=3,Object(o.a)({method:o.c.POST,url:n,body:e});case 3:if(r=t.sent){t.next=6;break}return t.abrupt("return",null);case 6:if(a=r.json,!Object(i.w)(a,d)){t.next=9;break}return t.abrupt("return",Object(i.y)(null===a||void 0===a?void 0:a.code));case 9:return t.abrupt("return",a);case 10:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function y(t){return h.apply(this,arguments)}function h(){return(h=Object(u.a)(Object(c.a)().mark((function t(e){var n,r,a;return Object(c.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n="".concat(o.d.BANCOR_NO_AUTH_API,"/").concat(O.step3),t.next=3,Object(o.a)({method:o.c.POST,url:n,body:e});case 3:if(r=t.sent){t.next=6;break}return t.abrupt("return",null);case 6:if(a=r.json,!Object(i.w)(a,d)){t.next=9;break}return t.abrupt("return",Object(i.y)(null===a||void 0===a?void 0:a.code));case 9:return t.abrupt("return",a);case 10:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function v(t){return A.apply(this,arguments)}function A(){return(A=Object(u.a)(Object(c.a)().mark((function t(e){var n,r,a;return Object(c.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n="".concat(o.d.BANCOR_NO_AUTH_API,"/").concat(O.step4),t.next=3,Object(o.a)({method:o.c.POST,url:n,body:e});case 3:if(r=t.sent){t.next=6;break}return t.abrupt("return",null);case 6:if(a=r.json,!Object(i.w)(a,d)){t.next=9;break}return t.abrupt("return",Object(i.y)(null===a||void 0===a?void 0:a.code));case 9:return t.abrupt("return",a);case 10:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function x(t){return k.apply(this,arguments)}function k(){return(k=Object(u.a)(Object(c.a)().mark((function t(e){var n,r,a;return Object(c.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n="".concat(o.d.BANCOR_NO_AUTH_API,"/").concat(O.step5),t.next=3,Object(o.a)({method:o.c.POST,url:n,body:e});case 3:if(r=t.sent){t.next=6;break}return t.abrupt("return",null);case 6:if(a=r.json,!Object(i.w)(a,d)){t.next=9;break}return t.abrupt("return",Object(i.y)(null===a||void 0===a?void 0:a.code));case 9:return t.abrupt("return",a);case 10:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function w(t){return T.apply(this,arguments)}function T(){return(T=Object(u.a)(Object(c.a)().mark((function t(e){var n,r,a;return Object(c.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n="".concat(o.d.BANCOR_NO_AUTH_API,"/").concat(O.frontDocument),t.next=3,Object(o.a)({method:o.c.POST,url:n,body:e});case 3:if(r=t.sent){t.next=6;break}return t.abrupt("return",null);case 6:if(a=r.json,!Object(i.w)(a,d)){t.next=9;break}return t.abrupt("return",Object(i.y)(null===a||void 0===a?void 0:a.code));case 9:return t.abrupt("return",a);case 10:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function m(t){return _.apply(this,arguments)}function _(){return(_=Object(u.a)(Object(c.a)().mark((function t(e){var n,r,a;return Object(c.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n="".concat(o.d.BANCOR_NO_AUTH_API,"/").concat(O.backDocument),t.next=3,Object(o.a)({method:o.c.POST,url:n,body:e});case 3:if(r=t.sent){t.next=6;break}return t.abrupt("return",null);case 6:if(a=r.json,!Object(i.w)(a,d)){t.next=9;break}return t.abrupt("return",Object(i.y)(null===a||void 0===a?void 0:a.code));case 9:return t.abrupt("return",a);case 10:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function P(t){return N.apply(this,arguments)}function N(){return(N=Object(u.a)(Object(c.a)().mark((function t(e){var n,r,a;return Object(c.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n="".concat(o.d.BANCOR_NO_AUTH_API,"/").concat(O.selfieUpdate),t.next=3,Object(o.a)({method:o.c.POST,url:n,body:e});case 3:if(r=t.sent){t.next=6;break}return t.abrupt("return",null);case 6:if(a=r.json,!Object(i.w)(a,d)){t.next=9;break}return t.abrupt("return",Object(i.y)(null===a||void 0===a?void 0:a.code));case 9:return t.abrupt("return",a);case 10:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function S(t){return C.apply(this,arguments)}function C(){return(C=Object(u.a)(Object(c.a)().mark((function t(e){var n,r,a;return Object(c.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n="".concat(o.d.BANCOR_NO_AUTH_API,"/").concat(O.preStep8),t.next=3,Object(o.a)({method:o.c.POST,url:n,body:e});case 3:if(r=t.sent){t.next=6;break}return t.abrupt("return",null);case 6:if(a=r.json,!Object(i.w)(a,d)){t.next=9;break}return t.abrupt("return",Object(i.y)(null===a||void 0===a?void 0:a.code));case 9:return t.abrupt("return",a);case 10:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function I(t){return g.apply(this,arguments)}function g(){return(g=Object(u.a)(Object(c.a)().mark((function t(e){var n,r,a;return Object(c.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n="".concat(o.d.BANCOR_NO_AUTH_API,"/").concat(O.preStep7),t.next=3,Object(o.a)({method:o.c.POST,url:n,body:e});case 3:if(r=t.sent){t.next=6;break}return t.abrupt("return",null);case 6:if(a=r.json,!Object(i.w)(a,d)){t.next=9;break}return t.abrupt("return",Object(i.y)(null===a||void 0===a?void 0:a.code));case 9:return t.abrupt("return",a);case 10:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function R(t){return D.apply(this,arguments)}function D(){return(D=Object(u.a)(Object(c.a)().mark((function t(e){var n,r,a;return Object(c.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n="".concat(o.d.BANCOR_NO_AUTH_API,"/").concat(O.getLocalities),t.next=3,Object(o.a)({method:o.c.POST,url:n,body:e});case 3:if(r=t.sent){t.next=6;break}return t.abrupt("return",null);case 6:if(a=r.json,!Object(i.w)(a,d)){t.next=9;break}return t.abrupt("return",Object(i.y)(null===a||void 0===a?void 0:a.code));case 9:return t.abrupt("return",a);case 10:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function U(t){return B.apply(this,arguments)}function B(){return(B=Object(u.a)(Object(c.a)().mark((function t(e){var n,r,a;return Object(c.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n="".concat(o.d.BANCOR_NO_AUTH_API,"/").concat(O.step7),t.next=3,Object(o.a)({method:o.c.POST,url:n,body:e});case 3:if(r=t.sent){t.next=6;break}return t.abrupt("return",null);case 6:if(a=r.json,!Object(i.w)(a,d)){t.next=9;break}return t.abrupt("return",Object(i.y)(null===a||void 0===a?void 0:a.code));case 9:return t.abrupt("return",a);case 10:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function H(t){return F.apply(this,arguments)}function F(){return(F=Object(u.a)(Object(c.a)().mark((function t(e){var n,r,a;return Object(c.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n="".concat(o.d.BANCOR_NO_AUTH_API,"/").concat(O.getNeighborhoods),t.next=3,Object(o.a)({method:o.c.POST,url:n,body:e});case 3:if(r=t.sent){t.next=6;break}return t.abrupt("return",null);case 6:if(a=r.json,!Object(i.w)(a,d)){t.next=9;break}return t.abrupt("return",Object(i.y)(null===a||void 0===a?void 0:a.code));case 9:return t.abrupt("return",a);case 10:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function E(t){return M.apply(this,arguments)}function M(){return(M=Object(u.a)(Object(c.a)().mark((function t(e){var n,r,u,s;return Object(c.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n="".concat(o.d.BANCOR_NO_AUTH_API,"/").concat(O.step8),r=e.streetNumber,t.next=4,Object(o.a)({method:o.c.POST,url:n,body:Object(a.a)({numberStreet:r},e)});case 4:if(u=t.sent){t.next=7;break}return t.abrupt("return",null);case 7:if(s=u.json,!Object(i.w)(s,d)){t.next=10;break}return t.abrupt("return",Object(i.y)(null===s||void 0===s?void 0:s.code));case 10:return t.abrupt("return",s);case 11:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function L(t){return W.apply(this,arguments)}function W(){return(W=Object(u.a)(Object(c.a)().mark((function t(e){var n,r,a;return Object(c.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n="".concat(o.d.BANCOR_NO_AUTH_API,"/").concat(O.preStep9),t.next=3,Object(o.a)({method:o.c.POST,url:n,body:e});case 3:if(r=t.sent){t.next=6;break}return t.abrupt("return",null);case 6:if(a=r.json,!Object(i.w)(a,d)){t.next=9;break}return t.abrupt("return",Object(i.y)(null===a||void 0===a?void 0:a.code));case 9:return t.abrupt("return",a);case 10:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function J(t){return K.apply(this,arguments)}function K(){return(K=Object(u.a)(Object(c.a)().mark((function t(e){var n,r,a;return Object(c.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n="".concat(o.d.BANCOR_NO_AUTH_API,"/").concat(O.step9),t.next=3,Object(o.a)({method:o.c.POST,url:n,body:e});case 3:if(r=t.sent){t.next=6;break}return t.abrupt("return",null);case 6:if(a=r.json,!Object(i.w)(a,d)){t.next=9;break}return t.abrupt("return",Object(i.y)(null===a||void 0===a?void 0:a.code));case 9:return t.abrupt("return",a);case 10:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function V(t){return Y.apply(this,arguments)}function Y(){return(Y=Object(u.a)(Object(c.a)().mark((function t(e){var n,r,a,u;return Object(c.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=e.exchangeToken,r="".concat(o.d.BANCOR_NO_AUTH_API,"/").concat(O.securitySeal),t.next=4,Object(o.a)({method:o.c.POST,url:r,body:{_exchangeToken:n}});case 4:if(a=t.sent){t.next=7;break}return t.abrupt("return",null);case 7:if(u=a.json,!Object(i.w)(u,d)){t.next=10;break}return t.abrupt("return",Object(i.y)(null===u||void 0===u?void 0:u.code));case 10:return t.abrupt("return",u);case 11:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function q(t){return G.apply(this,arguments)}function G(){return(G=Object(u.a)(Object(c.a)().mark((function t(e){var n,u,s,b,p,f,j,y;return Object(c.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n="".concat(o.d.BANCOR_NO_AUTH_API,"/").concat(O.step10),u=e.affidavit,s=e.securitySeal,b=e.newPassword,p=Object(r.a)(e,l),"pep","family",f={affidavitTypes:u.affidavitTypes,clientObligatorySubjectTypeId:u.subjectType,clientAdditionalDataFunctionaryPublic:"pep"===u.publicPositionDeclaration,clientAdditionalDataFunctionaryPublicType:u.publicPositionType,clientAdditionalDataFunctionaryPublicPosition:u.publicPosition,clientAdditionalDataFunctionaryPublicRelative:"family"===u.publicPositionDeclaration,clientAdditionalDataFunctionaryPublicTypeRelative:u.publicPositionType,clientAdditionalDataFunctionaryPublicPositionRelative:u.publicPosition,residenceTaxCountryId:u.countryRFId,clientAdditionalDataTaxIdentificationExt:u.exteriorIdentification,clientAdditionalDataFunctionaryPublicBT:u.publicPositionDeclarationBT,clientAdditionalDataFunctionaryPublicDateStart:u.clientAdditionalDataFunctionaryPublicDateStart,clientAdditionalDataFunctionaryPublicChargeEntity:u.clientAdditionalDataFunctionaryPublicChargeEntity,clientAdditionalDataFunctionaryPublicChargeEntityOther:u.clientAdditionalDataFunctionaryPublicChargeEntityOther},t.next=7,Object(o.a)({method:o.c.POST,url:n,body:Object(a.a)({_newPassword:b,_securitySeal:parseInt(s,10),affidavit:f},p)});case 7:if(j=t.sent){t.next=10;break}return t.abrupt("return",null);case 10:if(y=j.json,!Object(i.w)(y,d)){t.next=13;break}return t.abrupt("return",Object(i.y)(null===y||void 0===y?void 0:y.code));case 13:return t.abrupt("return",y);case 14:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function z(t){return Q.apply(this,arguments)}function Q(){return(Q=Object(u.a)(Object(c.a)().mark((function t(e){var n,r,a;return Object(c.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n="".concat(o.d.BANCOR_NO_AUTH_API,"/").concat(O.downloadTemplate),t.next=3,Object(o.a)({method:o.c.POST,url:n,body:e});case 3:if(r=t.sent){t.next=6;break}return t.abrupt("return",null);case 6:if(a=r.json,!Object(i.w)(a,d)){t.next=9;break}return t.abrupt("return",Object(i.y)(null===a||void 0===a?void 0:a.code));case 9:return t.abrupt("return",a);case 10:case"end":return t.stop()}}),t)})))).apply(this,arguments)}},62:function(t,e,n){"use strict";n.d(e,"f",(function(){return s})),n.d(e,"e",(function(){return b})),n.d(e,"h",(function(){return p})),n.d(e,"c",(function(){return l})),n.d(e,"a",(function(){return f})),n.d(e,"b",(function(){return y})),n.d(e,"d",(function(){return v})),n.d(e,"g",(function(){return x}));var r=n(0),a=n(5),c=n(3),u=n(4),o=n(2),i=n(21),s=function(t){return t.all="ALL",t.unread="UNREAD",t.read="READ",t}({}),b=Object(o.a)({},c.i);function p(t){if(!t||!Object(i.a)(t))return!0;var e=t;return Object(c.u)(b,e.code)}var d={COUNT:"spa.widget.notifications.count",LIST:"spa.widget.notifications",LIST_TYPE:"spa.widget.notifications.list",MARK_AS_READ_COMMUNICATION:"communications.mark.read",READ_COMMUNICATION:"communications.read"};function l(t){return O.apply(this,arguments)}function O(){return(O=Object(a.a)(Object(r.a)().mark((function t(e){var n,a,o;return Object(r.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=e.accessToken,t.next=3,Object(u.a)({method:u.c.POST,url:"".concat(u.d.BANCOR_AUTH_API,"/").concat(d.COUNT),excludeFromServiceError:!0,token:n});case 3:if(a=t.sent){t.next=6;break}return t.abrupt("return",null);case 6:if(o=a.json,!Object(c.w)(o,p)){t.next=9;break}return t.abrupt("return",Object(c.y)(null===o||void 0===o?void 0:o.code));case 9:return t.abrupt("return",o);case 10:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function f(t){return j.apply(this,arguments)}function j(){return(j=Object(a.a)(Object(r.a)().mark((function t(e){var n,a,o;return Object(r.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=e.accessToken,t.next=3,Object(u.a)({method:u.c.POST,url:"".concat(u.d.BANCOR_AUTH_API,"/").concat(d.LIST),token:n});case 3:if(a=t.sent){t.next=6;break}return t.abrupt("return",null);case 6:if(o=a.json,!Object(c.w)(o,p)){t.next=9;break}return t.abrupt("return",Object(c.y)(null===o||void 0===o?void 0:o.code));case 9:return t.abrupt("return",o);case 10:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function y(t){return h.apply(this,arguments)}function h(){return(h=Object(a.a)(Object(r.a)().mark((function t(e){var n,a,o,i,s;return Object(r.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=e.accessToken,a=e.unread,o=e.pageNumber,t.next=3,Object(u.a)({method:u.c.POST,url:"".concat(u.d.BANCOR_AUTH_API,"/").concat(d.LIST_TYPE),body:{pageNumber:o,unread:a},token:n});case 3:if(i=t.sent){t.next=6;break}return t.abrupt("return",null);case 6:if(s=i.json,!Object(c.w)(s,p)){t.next=9;break}return t.abrupt("return",Object(c.y)(null===s||void 0===s?void 0:s.code));case 9:return t.abrupt("return",s);case 10:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function v(t){return A.apply(this,arguments)}function A(){return(A=Object(a.a)(Object(r.a)().mark((function t(e){var n,a,o,i;return Object(r.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=e.accessToken,a=e.idCommunication,t.next=3,Object(u.a)({method:u.c.POST,url:"".concat(u.d.BANCOR_AUTH_API,"/").concat(d.MARK_AS_READ_COMMUNICATION),body:{idCommunication:a},token:n});case 3:if(o=t.sent){t.next=6;break}return t.abrupt("return",null);case 6:if(i=o.json,!Object(c.w)(i,p)){t.next=9;break}return t.abrupt("return",Object(c.y)(null===i||void 0===i?void 0:i.code));case 9:return t.abrupt("return",i);case 10:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function x(t){return k.apply(this,arguments)}function k(){return(k=Object(a.a)(Object(r.a)().mark((function t(e){var n,a,o,i;return Object(r.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=e.accessToken,a=e.idCommunication,t.next=3,Object(u.a)({method:u.c.POST,url:"".concat(u.d.BANCOR_AUTH_API,"/").concat(d.READ_COMMUNICATION),body:{communicationId:a},token:n});case 3:if(o=t.sent){t.next=6;break}return t.abrupt("return",null);case 6:if(i=o.json,!Object(c.w)(i,p)){t.next=9;break}return t.abrupt("return",Object(c.y)(null===i||void 0===i?void 0:i.code));case 9:return t.abrupt("return",i);case 10:case"end":return t.stop()}}),t)})))).apply(this,arguments)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=main~63b03f51.00d697d7.chunk.js.map