(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[36],{381:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return ae}));var i=n(16),a=n(11),l=n(8),o=n(33),r=n(137),c=n(152),u=n(6),s=n(39),d=n(187),p=n(51),b=n(38),f=n(82),m=n(512),O=n(616),j=n(634),F=n.n(j),E=n(10);function T(){var e=Object(b.c)().textGet,t=Object(l.b)(),n=Object(l.c)(r.c.account);return a.b.useEffect((function(){return function(){t(r.a.cleanAccount())}}),[t]),Object(E.jsxs)("div",{className:F.a.transferDataContainer,children:[Object(E.jsx)(b.b,{className:F.a.title,uuid:"spa.supplier.accountData.title"}),Object(E.jsxs)("div",{className:F.a.transferDataContainerRow,children:[Object(E.jsx)(O.a,{name:"account"}),Object(E.jsx)(m.a,{fixedDecimalScale:!0,allowNegative:!1,decimalScale:u.Jb,decimalSeparator:u.t,label:e({uuid:"spa.suppliers.filePaymentOrder.totalAmount"}),name:"amount",prefixCode:function(){if(n)return n.accountCurrency===u.r.ARS?u.b:u.Pb;return u.D}()})]})]})}var P=n(501),x=n(499),v=n(50),_=n(2),h=n(19),y=n(790),R=n(41),g=n(792),A=n(794),M=n.n(A),S=n(795),I=n.n(S),w=(n(796),n(502)),N=n(488),L=n(0),C=n(5),U=n(4),B=n(797),D=n.n(B),k=n(798),z=n.n(k),H=["name","token","hasAllowMultiple","allowFileSizeValidation","maxFiles","acceptedFileTypes","onRemoveFile","onFileProcess","onFileIdSet","maxFileSize","onAddFile","label","methods"],V=z.a.NAME_INPUT_FILE,Y=z.a.TYPE_INPUT_FILE;Object(g.registerPlugin)(M.a,I.a);var W=a.b.memo((function(e){var t,n=e.name,l=e.token,o=e.hasAllowMultiple,r=e.allowFileSizeValidation,c=e.maxFiles,s=e.acceptedFileTypes,d=e.onRemoveFile,p=e.onFileProcess,f=e.onFileIdSet,m=e.maxFileSize,O=e.onAddFile,j=e.label,F=e.methods,T=Object(h.a)(e,H),P=a.b.useState(D.a.inputFile),x=Object(i.a)(P,2),A=x[0],M=x[1],S=a.b.useRef(null),I=Object(b.c)().textGet,N=F.register,B=F.formState,k=F.control,z=F.clearErrors,W=F.resetField,q=B.errors,G=function(e,t){return{labelIdle:t,labelFileWaitingForSize:e({uuid:"file.upload.input.labelFileWaitingForSize"}),labelFileSizeNotAvailable:e({uuid:"file.upload.input.labelFileSizeNotAvailable"}),labelFileLoading:e({uuid:"file.upload.input.labelFileLoading"}),labelFileLoadError:e({uuid:"file.upload.input.labelFileLoadError"}),labelFileProcessing:e({uuid:"file.upload.input.labelFileProcessing"}),labelFileProcessingComplete:e({uuid:"file.upload.input.labelFileProcessingComplete"}),labelFileProcessingAborted:e({uuid:"file.upload.input.labelFileProcessingAborted"}),labelFileProcessingError:e({uuid:"file.upload.input.labelFileProcessingError"}),labelTapToCancel:e({uuid:"file.upload.input.labelTapToCancel"}),labelTapToRetry:e({uuid:"file.upload.input.labelTapToRetry"}),labelTapToUndo:e({uuid:"file.upload.input.labelTapToUndo"}),labelButtonRemoveItem:e({uuid:"file.upload.input.labelButtonRemoveItem"}),labelButtonAbortItemLoad:e({uuid:"file.upload.input.labelButtonAbortItemLoad"}),labelButtonRetryItemLoad:e({uuid:"file.upload.input.labelButtonRetryItemLoad"}),labelButtonAbortItemProcessing:e({uuid:"file.upload.input.labelButtonAbortItemProcessing"}),labelButtonUndoItemProcessing:e({uuid:"file.upload.input.labelButtonUndoItemProcessing"}),labelButtonRetryItemProcessing:e({uuid:"file.upload.input.labelButtonRetryItemProcessing"}),labelButtonProcessItem:e({uuid:"file.upload.input.labelButtonProcessItem"}),labelMaxFileSizeExceeded:e({uuid:"file.upload.input.labelMaxFileSizeExceeded"}),labelMaxFileSize:e({uuid:"file.upload.input.labelMaxFileSize"}),labelTotalFileSizeExceeded:e({uuid:"file.upload.input.labelTotalFileSizeExceeded"}),labelMaxTotalFileSize:e({uuid:"file.upload.input.labelMaxTotalFileSize"}),labelFileTypeNotAllowed:e({uuid:"file.upload.input.labelFileTypeNotAllowed"}),fileValidateTypeLabelExpectedTypes:e({uuid:"file.upload.input.fileValidateTypeLabelExpectedTypes"})}}(I,Object(y.renderToString)(Object(E.jsxs)("div",{children:[Object(E.jsx)(v.Icon,{name:"upload",size:"small",stroke:"primary"}),j]}))),J=function(e){var t=e.onRemoveFile,n=e.onAddFile,l=a.b.useState(),o=Object(i.a)(l,2),r=o[0],c=o[1];return{fileId:r,setFileId:c,onRemoveFile:function(){return!!r&&(t&&t(r),!0)},onProcessFile:function(e,t){!e&&t&&n&&n(null,t)},fileValidateTypeDetectType:function(e,t){return new Promise((function(n){n("rar"==="".concat(e.name.split(".").slice(-1)).toLocaleLowerCase()?"application/x-rar":t)}))}}}({onRemoveFile:d,onAddFile:O}),K=J.fileId,X=J.setFileId,Q=J.onRemoveFile,Z=J.onProcessFile,$=J.fileValidateTypeDetectType,ee=function(e,t,n,i){return{process:function(e,i,a,l,o,r,c){var u=new FileReader;return u.onload=Object(C.a)(Object(L.a)().mark((function e(){var a,o,r,c,s,d,p;return Object(L.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a=String(u.result),o=a.replace(/^data:.+?,/,""),r={fileToSave:o,fileName:i.name},c="".concat(U.d.BANCOR_AUTH_API,"/").concat("massivefiles.save"),e.next=6,Object(U.a)({method:U.c.POST,url:c,excludeFromServiceError:!0,token:t,body:r});case 6:if(s=e.sent){e.next=9;break}return e.abrupt("return");case 9:d=s.json,p=d.data.file.idFile,n(p),l(String(p));case 13:case"end":return e.stop()}}),e)}))),u.onprogress=function(e){r(e.lengthComputable,e.loaded,e.total)},u.readAsDataURL(i),{abort:function(){c()}}},revert:function(t,n){i&&e(String(i)),n()},remove:null,restore:null,load:null,fetch:null}}(Q,l,X,Number(K)),te="".concat(n),ne=q[n],ie=null===ne||void 0===ne||null===(t=ne.message)||void 0===t?void 0:t.toString();return a.b.useEffect((function(){K&&f&&f(K)}),[K,f]),a.b.useEffect((function(){var e=Object(R.c)(D.a.inputFile,ie&&D.a.inputFileError);M(e)}),[ie]),Object(E.jsx)(R.a,{name:V,type:Y,children:Object(E.jsx)(w.a,{control:k,name:te,render:function(e){var t=e.field.onChange;return Object(E.jsxs)(v.Box,{children:[Object(E.jsx)(g.FilePond,Object(_.a)(Object(_.a)(Object(_.a)({},N(te)),{},{ref:S,acceptedFileTypes:s,allowFileSizeValidation:r,allowMultiple:o,className:A,credits:!1,fileValidateTypeDetectType:$,id:n,maxFiles:c,maxFileSize:"".concat(m,"mb"),maxTotalFileSize:"".concat(m,"mb"),name:n,onaddfile:O,onprocessfile:ae,onremovefile:le,onupdatefiles:function(e){return t(e[u.Sb].file)},server:ee},G),T)),ie&&Object(E.jsx)(v.Box,{flex:!0,id:ie&&ie.replace(u.Rb,u.j),ml:u.Jb,mt:u.fb,children:Object(E.jsx)(v.Legend,{variant:"error",children:ie})})]})}})});function ae(e,t){Z(e,t),z([te]),p&&p()}function le(){W(te),z([te]),d&&d(K)}}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function q(e){var t=N.a.useContext();return Object(E.jsx)(W,Object(_.a)({methods:t},e))}q.defaultProps={acceptedFileTypes:["text/plain"],allowFileSizeValidation:!0,hasAllowMultiple:!1,label:"",maxFiles:1,maxFileSize:"16",onAddFile:function(){},onFileIdSet:function(){},onFileProcess:function(){},onRemoveFile:function(){}};var G=n(515),J=n(799),K=n.n(J);function X(){var e=a.b.useState(!1),t=Object(i.a)(e,2),n=t[0],c=t[1],u=a.b.useState(!1),s=Object(i.a)(u,2),d=s[0],p=s[1],m=Object(x.a)(),O=Object(l.b)(),j=Object(b.c)().textGet,F=Object(l.c)(o.e.token),T=Object(l.c)(r.c.fetching),_=Object(l.c)(r.c.fetchedFile),h=Object(l.c)(r.c.massiveFileId),y=Object(l.c)(r.c.paymentsTemplateFileName),R=Object(l.c)(r.c.paymentsTemplateFileContent);return a.b.useEffect((function(){F&&n&&(_&&y&&R?y&&R&&(m(y,Object(P.a)(R)),c(!1)):O(r.b.downloadPaymentsFileTemplate({templateType:"PagoProveedores",token:F})))}),[O,n,_,y,R,F,m]),Object(E.jsxs)("div",{className:K.a.fileUpload,children:[Object(E.jsx)(f.a,{label:{uuid:"spa.suppliers.filePaymentOrder.download.button"},loading:T,onClick:function(){c(!0)}}),Object(E.jsxs)("div",{className:K.a.fileInputTooltip,children:[Object(E.jsx)(q,{acceptedFileTypes:["application/vnd.openxmlformats-officedocument.spreadsheetml.sheet","application/vnd.ms-excel"],label:j({uuid:"spa.suppliers.filePaymentOrder.upload.inputFile"}),name:"paymentFile",token:F,onFileIdSet:function(e){h!==String(e)&&O(r.a.massiveFileId(e))},onFileProcess:function(){p(!0)},onRemoveFile:function(){p(!1)}}),Object(E.jsx)(v.Tooltip,{className:K.a.tooltip,id:"fileInputSizeHelp",label:j({uuid:"spa.suppliers.filePaymentOrder.upload.inputFile.tooltip"}),children:Object(E.jsx)(v.Icon,{name:"question",size:"small"})})]}),d&&Object(E.jsx)(G.a,{label:j({uuid:"spa.supplier.consolidateDebit"}),name:"consolidateDebit"})]})}var Q=n(800),Z=n.n(Q);function $(){return Object(E.jsxs)("section",{className:Z.a.filePayment,children:[Object(E.jsxs)("div",{className:Z.a.text,children:[Object(E.jsx)(b.b,{className:Z.a.title,tag:"h2",uuid:"spa.suppliers.filePaymentOrder.title"}),Object(E.jsx)(b.b,{uuid:"spa.suppliers.filePaymentOrder.subtitle"})]}),Object(E.jsx)(T,{}),Object(E.jsx)(X,{})]})}var ee=n(490),te=n(438),ne=n.n(te),ie=n(319);function ae(){var e=Object(b.c)().textGet,t=Object(p.qb)(),n=Object(l.b)(),m=Object(p.sb)(p.Z),O=Object(p.sb)(p.Y),j=Object(l.c)(c.c.contractId),F=Object(l.c)(o.e.token),T=Object(l.c)(r.c.dataPaymentPre),P=Object(l.c)(r.c.massiveFileId),x=Object(l.c)(r.c.warning),_=Object(l.c)(r.c.transferWarning),h=Object(l.c)(r.c.fetching),y=e({uuid:"spa.suppliers.generatePayment.error.account"}),R=e({uuid:"spa.suppliers.generatePayment.error.amount"}),g=e({uuid:"spa.suppliers.generatePayment.error.paymentFile"}),A=s.e.object({paymentType:s.e.string.equals("upload"),account:Object(d.d)(s.e.string.required(),y),amount:s.e.intersection([Object(d.k)(s.e.number(),u.Sb,R),Object(d.d)(s.e.number(),R)]),consolidateDebit:s.e.boolean(),paymentFile:Object(d.d)(s.e.object({name:s.e.string.required(),_relativePath:s.e.string(),lastModified:s.e.number(),lastModifiedDate:s.e.date.orUndefined(),size:s.e.number(),type:s.e.string.required(),webkitRelativePath:s.e.string()}),g)}),M=a.b.useState(!1),S=Object(i.a)(M,2),I=S[0],w=S[1],L=a.b.useState(!1),C=Object(i.a)(L,2),U=C[0],B=C[1];return a.b.useEffect((function(){if(T)if(U){var e=T.error?m:O;t(e)}else _&&"API307W"===_.code&&!U?w(!0):B(!0)}),[T,t,m,O,U,_]),a.b.useEffect((function(){return function(){n(r.a.cleanTransferWarning())}}),[n]),Object(E.jsx)(N.a,{schema:A,warnings:x,onSubmit:function(e){var t=e.account,i=e.paymentType,a=e.consolidateDebit,l=e.amount,o={token:F,field_debitAccountSelect:String(t),field_total_amount:"".concat(l),consolidateDebitFile:a,contractId:j,action:i,idFileList:[P]};n(r.b.validatePaymentsFile(o))},children:Object(E.jsxs)(v.Card,{children:[Object(E.jsx)(ie.default,{}),Object(E.jsx)($,{}),Object(E.jsxs)(ee.a,{closeOnBgTap:!1,hasCloseIcon:!1,open:I,children:[Object(E.jsx)(ee.a.Body,{className:ne.a.validateModalBody,children:Object(E.jsx)(b.b,{uuid:"spa.suppliers.generatePayment.filePayment.warning.amount"})}),Object(E.jsxs)(ee.a.Footer,{className:ne.a.validateModalFooter,children:[Object(E.jsx)(f.a,{inline:!0,label:{uuid:"spa.form.cancel"},type:"button",variant:"outlined",onClick:function(){B(!1),w(!1)}}),Object(E.jsx)(f.a,{inline:!0,label:{uuid:"spa.form.accept"},type:"button",onClick:function(){w(!1),B(!0)}})]})]}),Object(E.jsxs)("footer",{children:[Object(E.jsx)(f.a,{label:{uuid:"spa.form.cancel"},type:"button",variant:"outlined",onClick:function(){t(p.a)}}),Object(E.jsx)(f.a,{hasSpinner:h,label:{uuid:"spa.form.accept"},type:"submit"})]})]})})}},499:function(e,t,n){"use strict";n.d(t,"a",(function(){return b}));var i=n(0),a=n(5);function l(e){var t=e.filename,n=e.path,i=e.flags;return new Promise((function(e,a){var l;function o(e){a(e)}(l=window.cordova.file[n],new Promise((function(e,t){window.resolveLocalFileSystemURL(l,(function(t){e(t)}),(function(e){t(e)}))}))).then((function(n){var a=n;a.getFile(t,i,(function(t){var n=new FileReader;t.createWriter((function(i){e({fileEntry:t,dirEntry:a,fileReader:n,fileWriter:i,fileWrite:function(e){return new Promise((function(t,n){i.onwriteend=function(){return t(i)},i.onerror=function(e){return n(e)},i.write(e)}))},fileRemove:function(){return new Promise((function(e,n){t.remove((function(){return e(!0)}),(function(e){return n(e)}))}))}})}),o)}),o)}))}))}var o=n(36),r=n(26),c=n(28);function u(){return s.apply(this,arguments)}function s(){return(s=Object(a.a)(Object(i.a)().mark((function e(){var t;return Object(i.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(r.c)();case 2:if(e.sent&&cordova.plugins){e.next=5;break}throw r.a.CORDOVA_UNAVAILABLE;case 5:if(t=cordova.plugins.fileOpener2){e.next=8;break}throw r.a.PLUGIN_UNAVAILABLE;case 8:return e.abrupt("return",t);case 9:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function d(e){return p.apply(this,arguments)}function p(){return p=Object(a.a)(Object(i.a)().mark((function e(t){var n,a,l,o,s;return Object(i.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.contentType,a=t.fileName,l=t.withDialog,e.next=3,Object(r.c)();case 3:if(e.sent){e.next=6;break}throw r.a.CORDOVA_UNAVAILABLE;case 6:return e.next=8,u();case 8:return o=e.sent,s=l?o.open:o.showOpenWithDialog,e.abrupt("return",new Promise((function(e,t){try{s(a,n,{success:function(){e({code:c.a.SUCCESS,value:!0})},error:function(e){function t(t){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}((function(e){t("boolean"===typeof e?new c.b(c.a.ERROR,o.open.name,c.c):new c.b(c.a.ERROR,o.open.name,e.message))}))})}catch(i){t(new c.b(c.a.ERROR_UNKNOWN,o.open.name,c.c))}})));case 11:case"end":return e.stop()}}),e)}))),p.apply(this,arguments)}function b(){var e=Object(o.i)(),t=e.isDesktop,n=e.isUnknown,r=e.platform;function c(e){var t=e.split(".").pop();return"png"===t||"jpg"===t||"gif"===t||"bmp"===t?"image/".concat(t):"pdf"===t?"application/".concat(t):"doc"===t||"docx"===t?"application/msword":"ppt"===t||"pptx"===t?"application/vnd.ms-powerpoint":"xls"===t||"xlsx"===t?"application/vnd.ms-excel":"xlsm"===t?"application/vnd.ms-excel.sheet.macroEnabled.12":"txt"===t?"text/plain":"zip"===t?"application/zip":void 0}return function(){var e=Object(a.a)(Object(i.a)().mark((function e(a,u){var s,p,b,f,m,O,j;return Object(i.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(s=r===o.b.CORDOVA_ANDROID,!(p=c(a))){e.next=19;break}if(!t&&!n){e.next=9;break}return(b=document.createElement("a")).href=window.URL.createObjectURL(u),b.download=a,b.click(),e.abrupt("return");case 9:return e.next=11,l({filename:a,path:s?"externalApplicationStorageDirectory":"dataDirectory",flags:{create:!0,exclusive:!1}});case 11:return f=e.sent,m=f.fileWrite,O=f.fileEntry,e.next=16,m(u);case 16:return j={contentType:p,fileName:O.nativeURL,withDialog:!0},e.next=19,d(j);case 19:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}()}},501:function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var i=512,a=0;function l(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:i,l=window.atob(e),o=[],r=a;r<l.length;r+=n){for(var c=l.slice(r,r+n),u=new Array(c.length),s=a;s<c.length;s++)u[s]=c.charCodeAt(s);o.push(new Uint8Array(u))}return new Blob(o,{type:t})}},797:function(e,t,n){e.exports={NAME_INPUT_FILE:"InputFile",TYPE_INPUT_FILE:"Element",NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",inputFile:"_rules_inputFile__22oiq",inputFileError:"_rules_inputFileError__2tSHc"}},798:function(e,t,n){e.exports={NAME_INPUT_FILE:"InputFile",TYPE_INPUT_FILE:"Element"}},799:function(e,t,n){e.exports={NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_INPUT_CHECKBOX:"InputCheckbox",TYPE_INPUT_CHECKBOX:"Element",fileUpload:"_rules_fileUpload__1K0n3",fileInputTooltip:"_rules_fileInputTooltip__1S1zv",tooltip:"_rules_tooltip__3yirm"}},800:function(e,t,n){e.exports={NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",filePayment:"_rules_filePayment__QehCL",text:"_rules_text__2Onpg",title:"_rules_title__393yG",fields:"_rules_fields__1qmEv"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=36.3c317bc1.chunk.js.map