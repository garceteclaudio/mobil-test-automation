(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[34,80,97,167,199],{379:function(e,t,a){"use strict";a.r(t),a.d(t,"default",(function(){return I}));var n=a(0),o=a(5),r=a(16),c=a(11),s=a(39),i=a(26),l=a(99),u=a(50),b=a(8),d=a(187),j=a(33),O=a(6),f=a(82),m=a(38),p=a(513),h=a(136),E=a(488),g=a(494),x=a(108),N=a(489),T=a(51),_=a(814),M=a(74),L=a(69),y=a(270),A=a(120),R=a(45),v=a(145),S=a(342),C=a(343),P=a(432),k=a.n(P),F=a(10);function I(){var e,t=c.b.useState(!1),a=Object(r.a)(t,2),P=a[0],w=a[1],B=c.b.useState(!1),Y=Object(r.a)(B,2),D=Y[0],U=Y[1],V=c.b.useState(O.fb),q=Object(r.a)(V,2),H=q[0],X=q[1],G=c.b.useState(!1),K=Object(r.a)(G,2),z=K[0],W=K[1],J=c.b.useState(!1),Q=Object(r.a)(J,2),Z=Q[0],$=Q[1],ee=Object(l.a)().getValueConfig,te=Object(x.h)().state.isBiometryAvailable,ae=Object(b.b)(),ne=Object(T.qb)(),oe=Object(m.c)().textGet,re=Object(T.sb)(T.Q),ce=Object(T.sb)(T.R),se=Object(T.sb)(T.S),ie=Object(b.c)(j.e.fetching),le=Object(b.c)(L.c.fetching),ue=Object(b.c)(L.c.minVersionSupported),be=Object(b.c)(L.c.isForcedUpdate),de=Object(b.c)(L.c.updateLaterSel),je=Object(b.c)(L.c.isMobile),Oe=Object(b.c)(L.c.isDesktop);Object(x.h)(!0);var fe=Object(x.i)(),me=Object(b.c)(x.f.availability),pe=Object(b.c)(x.f.userIsNotEnrolled),he=Object(b.c)(x.f.isBiometrySessionConfigured),Ee=Object(T.sb)(T.n),ge=Object(M.a)(ee("vu.fraud.check.fingerprint.enable")),xe=Object(M.a)(ee("backend.vu.fraud.api.fingerprint.url")),Ne=Object(M.a)(ee("backend.vu.fraud.api.fingerprint.timeout")),Te=Object(x.g)({onSkip:Ye,onRegister:Ye,onUnavailable:Ye,onLogin:Ye,textCancel:oe({uuid:"spa.biometryshow.cancel"}),textError:"Error",textHeader:oe({uuid:"spa.biometryshow.header"}),textTitle:oe({uuid:"spa.biometryshow.title"}),textGet:oe,isVUFingerprintEnabled:ge,url:xe,timeout:Ne}).isBiometryLoading,_e=Object(M.a)(ee("spa.welcomeLogin.modal.enabled")),Me=Object(M.a)(ee("username.pattern")),Le=new RegExp(Me,"g"),ye=oe({uuid:"spa.login.username.input.placeholder"}),Ae=oe({uuid:"spa.generic.field.error.required"}),Re=oe({uuid:"spa.generic.field.error.incorrectData"}),ve=Object(A.e)(O.G.PREFERENCES_BIOMETRY_FINGERPRINT),Se=c.b.useCallback(Object(o.a)(Object(n.a)().mark((function e(){var t,a;return Object(n.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(i.c)();case 2:if(e.sent){e.next=5;break}throw i.a.CORDOVA_UNAVAILABLE;case 5:return e.next=7,Object(R.b)(x.b);case 7:if(t=e.sent,!Boolean(t.value)){e.next=17;break}if(!(a=t.value)){e.next=17;break}return e.next=14,Object(R.c)({key:x.c,val:a});case 14:return e.next=16,Object(R.a)(x.b);case 16:b.a.dispatch(x.a.setBiometrySessionConfigured(!0));case 17:case"end":return e.stop()}}),e)}))),[]);c.b.useEffect((function(){je&&!he&&Se()}),[Se,he,je]);var Ce=Object(M.a)(ee("spa.update.check.enabled")),Pe=Object(b.c)(L.c.isIoS),ke=null===(e="2.3.6")?void 0:e.split("-")[O.Sb];c.b.useEffect((function(){if(je)if(Ce){if(de)W(_e);else if(!le||de){var e=Object(v.a)(String(ue),String(ke));$(Boolean(e)),W(_e&&!e)}}else W(_e)}),[ke,le,je,Ce,be,ue,_e,de]);var Fe=he&&!pe&&te&&ve,Ie=s.e.object({user:Object(s.c)((function(e){return e?Object(d.d)(Object(d.p)(Me),Re):Object(d.d)(s.e.string.required(),Ae)}))}),we=Object(F.jsx)(u.Lottie,{direction:H,name:"user",play:D,size:"medium"});return ie?Object(F.jsx)(y.a,{}):Object(F.jsxs)(N.a,{showLogo:!0,children:[Object(F.jsxs)("section",{children:[Object(F.jsx)(S.WelcomeLoginModal,{hasToShowCloseButton:Oe,setShowModal:W,showModal:z}),Object(F.jsx)("header",{className:k.a.logoLogin,children:Object(F.jsx)(h.a,{uuid:"eoWelcome"})}),Object(F.jsxs)(E.a,{isRequiredToast:!1,schema:Ie,onSubmit:function(e){return Be.apply(this,arguments)},children:[Object(F.jsx)(g.a,{withoutSpaces:!0,label:ye,name:"user",regexPattern:Le,start:we,withSuggestions:!1,onBlur:function(){X(O.ab),U(!0)},onFocus:function(){X(O.fb),U(!0)}}),Object(F.jsx)("div",{className:k.a.userRecovery,children:Object(F.jsx)(p.a,{to:re,children:Object(F.jsx)(m.b,{tag:"span",uuid:"spa.login.step1.forgotUser"})})}),Object(F.jsx)(f.a,{flowId:I.displayName,label:{uuid:"spa.form.continue"},loading:ie,type:"submit"}),Fe&&Object(F.jsxs)("div",{className:k.a.biometrySession,children:[Object(F.jsx)(u.Icon,{name:Pe&&me.isBiometryFace?"faceid":"fingerprint",stroke:fe?"gray-600":"primary"}),Object(F.jsx)(f.a,{disabled:fe,kind:"plain",label:{uuid:"spa.login.biometry.text"},onClick:function(){if(Te)return;ae(x.a.setIsFingerButtonClicked(!0))}})]}),je&&Object(F.jsxs)("div",{className:k.a.createToken,children:[Object(F.jsx)(u.Icon,{name:"tokenPadlock"}),Object(F.jsx)(p.a,{to:se,children:Object(F.jsx)(m.b,{uuid:"spa.login.step1.generateToken"})})]}),je&&Object(F.jsxs)("div",{className:k.a.utilTools,children:[Object(F.jsx)(f.a,{kind:"plain",label:{uuid:"spa.login.step1.utilTools"},onClick:function(){return w(!0)}}),Object(F.jsx)(_.a,{handleOnClose:function(){w(!1)},isVisible:P})]}),Object(F.jsx)("div",{className:k.a.separator,children:Object(F.jsx)(u.Separator,{orientation:"center",type:"horizontal",children:Object(F.jsx)(m.b,{tag:"span",uuid:"spa.login.step1.youAreNotABanconUser.text"})})}),Object(F.jsx)("div",{className:k.a.bottomlessButton,children:Object(F.jsx)(f.a,{label:{uuid:"spa.login.step1.registerNow.button"},loading:ie,type:"button",variant:"outlined",onClick:function(){ne(ce)}})})]})]}),Object(F.jsx)("footer",{children:Object(F.jsxs)("div",{className:k.a.alignFooter,children:[Object(F.jsx)(m.b,{tag:"span",uuid:"spa.login.step1.footer.text1"}),Object(F.jsx)(p.a,{to:ce,children:Object(F.jsx)(m.b,{tag:"span",uuid:"spa.login.step1.footer.text2"})})]})}),je&&Object(F.jsx)(C.UpdateModal,{handlerNotNow:function(e){ae(L.a.setUpdateLaterSel()),$(e)},isForcedUpdate:be,showModal:Z})]});function Be(){return(Be=Object(o.a)(Object(n.a)().mark((function e(t){return Object(n.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,ae(j.b.firstStep({username:t.user}));case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Ye(){return he||(ae(x.a.setBiometrySessionRequested(!1)),ae(x.a.setBiometryPreferencesRequested(!1))),ne(Ee)}}I.displayName="LoginStep1"},488:function(e,t,a){"use strict";a.d(t,"a",(function(){return E}));var n=a(2),o=a(16),r=a(19),c=a(11),s=a(502),i=a(505),l=a(41),u=a(6),b=a(79),d=a(8),j=a(493),O=a.n(j),f=a(10),m=["ariaLabel","ariaLabelledby","schema","onSubmit","children","warnings","isRequiredToast","isResetForm"],p=O.a.NAME_FORM,h=O.a.TYPE_FORM;function E(e){var t=e,a=t.ariaLabel,j=t.ariaLabelledby,O=t.schema,E=t.onSubmit,g=t.children,x=t.warnings,N=t.isRequiredToast,T=t.isResetForm,_=Object(r.a)(t,m),M=Object(d.b)(),L=Object(s.e)({resolver:Object(i.a)(O)}),y=L.handleSubmit,A=L.setError,R=L.formState.errors,v=L.reset,S=Object.keys(R),C=c.b.useState(!1),P=Object(o.a)(C,2),k=P[0],F=P[1],I=c.b.useCallback((function(){N&&k&&M(b.a.set({kind:"ERROR",text:{uuid:"spa.form.field.generic.error"},duration:u.w})),F(!1)}),[M,N,k]),w=c.b.useCallback((function(){v()}),[v]);return c.b.useEffect((function(){x&&Object.keys(x.data).map((function(e){var t=e.startsWith(u.Nb)?e.slice(u.fb):e;return A(t,{message:x.data[e]},{shouldFocus:!1}),null})),S.length>u.Sb&&I(),T&&w()}),[S.length,T,w,A,I,x]),Object(f.jsx)(s.b,Object(n.a)(Object(n.a)(Object(n.a)({},L),_),{},{children:Object(f.jsx)(l.a,{noValidate:!0,"aria-label":a,"aria-labelledby":j,name:p,tag:"form",type:h,onSubmit:y(E,(function(){return F(!k)})),children:g})}))}E.useContext=s.f,E.defaultProps={isRequiredToast:!0,isResetForm:!1,warnings:null}},489:function(e,t,a){"use strict";a.d(t,"a",(function(){return p}));var n=a(2),o=a(19),r=(a(11),a(41)),c=a(136),s=a(82),i=a(38),l=a(101),u=a(491),b=a.n(u),d={name:b.a.NAME_EXTERNAL_CONTAINER,type:b.a.TYPE_EXTERNAL_CONTAINER,showLogo:!1},j=a(492),O=a.n(j),f=a(10),m=["header-onBack","header-title","children","name","type","headerClassName","showLogo"];function p(e){var t=e,a=t["header-onBack"],u=t["header-title"],b=t.children,d=t.name,j=t.type,p=t.headerClassName,h=t.showLogo,E=Object(o.a)(t,m),g=Boolean(a||u),x=Object(r.c)(!u&&O.a.onlyRow,p),N=Object(r.c)(h&&O.a.step1Logo),T=Object(r.c)(h&&O.a.hasLogo);return Object(f.jsxs)(l.a,{children:[h&&Object(f.jsx)("div",{className:N,children:Object(f.jsx)(c.a,{alt:"logo",uuid:"logo150Login"})}),Object(f.jsx)(r.a,Object(n.a)(Object(n.a)({name:d,tag:"article",type:j},E),{},{children:Object(f.jsxs)("article",{className:T,children:[g&&Object(f.jsxs)("header",{className:x,children:[a&&Object(f.jsx)(s.a,{icon:"left",kind:"icon",label:{uuid:"spa.a11y.buttons.back"},size:"medium",variant:"text",onClick:a}),u&&Object(f.jsx)(i.b,{tag:"h5",uuid:u})]}),b]})}))]})}p.defaultProps=d},490:function(e,t,a){"use strict";a.d(t,"a",(function(){return m}));var n=a(2),o=a(19),r=a(11),c=a(41),s=a(50),i=a(495),l=a.n(i),u=(a(496),a(38)),b=a(82),d=a(10),j=["ariaLabelledBy","id","children","title","onClose","hasCloseIcon"],O=l.a.TYPE_MODAL,f=l.a.NAME_MODAL;function m(e){var t=e,a=t.ariaLabelledBy,i=t.id,l=t.children,m=t.title,p=t.onClose,h=t.hasCloseIcon,E=Object(o.a)(t,j),g="modal-header-".concat(i||""),x="string"===typeof m?g:a,N="string"===typeof m?Object(d.jsx)(u.b,{id:g,tag:"h4",uuid:m}):m;return Object(d.jsx)(c.a,{name:f,tag:"div",type:O,children:Object(d.jsxs)(s.Modal,Object(n.a)(Object(n.a)({ariaLabelledBy:x,onClose:p},E),{},{children:[Object(d.jsx)(s.Modal.Header,{children:m&&Object(d.jsxs)(r.b.Fragment,{children:[N,h&&Object(d.jsx)(b.a,{icon:"close",kind:"icon",label:{uuid:"spa.a11y.buttons.close.modal"},onClick:p})]})}),l]}))})}m.defaultProps={ariaLabelledBy:"",closeOnBgTap:!0,hasCloseIcon:!0,initialFocusElementId:"",title:""},m.Body=function(e){var t=e.children;return Object(d.jsx)(s.Modal.Body,{children:t})},m.Footer=function(e){var t=e.children,a=e.className;return Object(d.jsx)(s.Modal.Footer,{className:a,children:t})}},491:function(e,t,a){e.exports={NAME_EXTERNAL_CONTAINER:"ContainerExternal",TYPE_EXTERNAL_CONTAINER:"Container"}},492:function(e,t,a){e.exports={NAME_THEMEPLATFORM:"ThemePlatform",TYPE_THEMEPLATFORM:"Bundle",NAME_CONSUMER_THEMEPLATFORM:"ThemePlatformConsumer",TYPE_CONSUMER_THEMEPLATFORM:"Element",NAME_PROVIDER_THEMEPLATFORM:"ThemePlatformProvider",TYPE_PROVIDER_THEMEPLATFORM:"Provider",NAME_TEXT:"Text",TYPE_TEXT:"Element",NAME_BUTTON:"Button",TYPE_BUTTON:"Element",NAME_LINK:"Link",TYPE_LINK:"Element",NAME_IMAGE:"Image",TYPE_IMAGE:"Element",NAME_XS:"xs",NAME_SM:"sm",NAME_MD:"md",NAME_LG:"lg",NAME_EXTERNAL_CONTAINER:"ContainerExternal",TYPE_EXTERNAL_CONTAINER:"Container",hasLogo:"_rules_hasLogo__AxHGK",onlyRow:"_rules_onlyRow__1im8h",step1Logo:"_rules_step1Logo__3LNq5"}},493:function(e,t,a){e.exports={NAME_FORM:"Form",TYPE_FORM:"Element"}},494:function(e,t,a){"use strict";a.d(t,"a",(function(){return p}));var n=a(2),o=a(19),r=a(16),c=a(11),s=a(50),i=a(41),l=a(488),u=a(498),b=a.n(u),d=a(10),j=["id","name","methods","defaultValue","pattern","withSuggestions","onChange","onBlur"],O=b.a.NAME_INPUT_FIELD,f=b.a.TYPE_INPUT_FIELD,m=c.b.memo((function(e){var t,a=c.b.useState(!1),l=Object(r.a)(a,2),u=l[0],b=l[1],m=e.id,p=e.name,h=e.methods,E=e.defaultValue,g=e.pattern,x=e.withSuggestions,N=void 0===x||x,T=e.onChange,_=e.onBlur,M=Object(o.a)(e,j),L=h.register,y=h.formState,A=h.setValue,R=h.clearErrors,v=y.errors,S="".concat(p),C=v[p];return c.b.useEffect((function(){E&&A(S,E),E||A(S,void 0),N&&b(!0)}),[E,S,A,N,b]),Object(d.jsx)(i.a,{name:O,type:f,children:Object(d.jsx)(s.TextField,Object(n.a)(Object(n.a)(Object(n.a)(Object(n.a)(Object(n.a)({id:m||p},E&&{defaultValue:E}),C&&{error:null===(t=C.message)||void 0===t?void 0:t.toString()}),L(S,{onChange:function(e){T&&T(e);R([S])},onBlur:_})),M),{},{autoComplete:N?"on":"off",pattern:g,onKeyDown:function(e){e.target.value||u||b(!0)}}))})}),(function(e,t){return e.methods.formState.errors===t.methods.formState.errors&&e.methods.formState.dirtyFields[e.name]!==t.methods.formState.dirtyFields[t.name]}));function p(e){var t=l.a.useContext();return Object(d.jsx)(m,Object(n.a)({methods:t},e))}p.displayName=O},495:function(e,t,a){e.exports={NAME_MODAL:"Modal",TYPE_MODAL:"Element"}},496:function(e,t,a){e.exports={NAME_MODAL:"Modal",TYPE_MODAL:"Element"}},498:function(e,t,a){e.exports={NAME_INPUT_FIELD:"InputField",TYPE_INPUT_FIELD:"Element"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=34.083dc1da.chunk.js.map