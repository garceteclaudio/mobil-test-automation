(this["webpackJsonp@app/bancon"]=this["webpackJsonp@app/bancon"]||[]).push([[252],{114:function(e,t,r){e.exports={NAME_TEXTPLATFORM:"TextPlatform",TYPE_TEXTPLATFORM:"Bundle",NAME_CONSUMER_TEXTPLATFORM:"TextPlatformConsumer",TYPE_CONSUMER_TEXTPLATFORM:"Element",NAME_PROVIDER_TEXTPLATFORM:"TextPlatformProvider",TYPE_PROVIDER_TEXTPLATFORM:"Provider"}},115:function(e,t,r){e.exports={NAME_IMAGEPLATFORM:"ImagePlatform",TYPE_IMAGEPLATFORM:"Bundle",NAME_CONSUMER_IMAGEPLATFORM:"ConsumerImagePlatform",TYPE_CONSUMER_IMAGEPLATFORM:"Element",NAME_PROVIDER_IMAGEPLATFORM:"ProviderImagePlatform",TYPE_PROVIDER_IMAGEPLATFORM:"Provider"}},142:function(e,t,r){"use strict";r.d(t,"a",(function(){return b})),r.d(t,"c",(function(){return p})),r.d(t,"b",(function(){return v}));var n=r(0),a=r(2),c=r(5),u=r(16),o=r(11),i=r(1),s=r(41),f=r(143),l=r.n(f),d=r(10),E=Object(i.i)(i.h.SESSION),O=l.a.NAME_PERSISTOR,b="".concat(s.b.PROVIDER).concat(O),p=(s.b.PROVIDER,o.b.createContext(null));function v(e){var t=e.children,r=e.getData,i=e.loading,s=void 0===i?null:i,f=e.onError,l={configuration:null},b=o.b.useState(l),v=Object(u.a)(b,2),g=v[0],P=v[1];if(o.b.useEffect((function(){Object(c.a)(Object(n.a)().mark((function e(){var t,c;return Object(n.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!g.configuration){e.next=2;break}return e.abrupt("return");case 2:return e.next=4,E.get(O);case 4:if(!(t=e.sent)){e.next=8;break}return P(JSON.parse(t)),e.abrupt("return");case 8:return e.prev=8,e.next=11,r();case 11:if(c=e.sent){e.next=15;break}return f&&f(new Error("Empty configuration")),e.abrupt("return");case 15:return e.next=17,m(Object(a.a)(Object(a.a)({},g),{},{configuration:c}));case 17:e.next=22;break;case 19:e.prev=19,e.t0=e.catch(8),f&&f(e.t0);case 22:case"end":return e.stop()}}),e,null,[[8,19]])})))()}),[r,f,g]),null===g.configuration)return s;var R={configuration:g.configuration,getValueConfig:function(e){if(!g.configuration)return f&&f(new Error("CONFIGURATION_UNAVAILABLE")),"";var t=g.configuration[e];if(!t)return f&&f(new Error("VALUE_UNAVAILABLE")),"";return t||null},persistorClear:function(){return T.apply(this,arguments)}};return Object(d.jsx)(p.Provider,{value:R,children:t});function T(){return(T=Object(c.a)(Object(n.a)().mark((function e(){return Object(n.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,E.del(O);case 2:P(l);case 3:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function m(e){return A.apply(this,arguments)}function A(){return(A=Object(c.a)(Object(n.a)().mark((function e(t){return Object(n.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,E.set(O,JSON.stringify(t));case 2:return e.abrupt("return",P(t));case 3:case"end":return e.stop()}}),e)})))).apply(this,arguments)}}v.displayName=b,v.defaultProps={}},143:function(e,t,r){e.exports={NAME_PERSISTOR:"Persistor",TYPE_PERSISTOR:"Element"}},258:function(e,t,r){e.exports={NAME_ROUTER:"Router",TYPE_ROUTER:"Element"}},282:function(e,t,r){"use strict";var n=r(119);r.d(t,"a",(function(){return n.a}))},292:function(e,t,r){"use strict";r.d(t,"a",(function(){return o}));var n=r(58),a=r(57),c=r(67),u=r(68),o=function(e){Object(c.a)(r,e);var t=Object(u.a)(r);function r(){var e;Object(n.a)(this,r);for(var a=arguments.length,c=new Array(a),u=0;u<a;u++)c[u]=arguments[u];return(e=t.call.apply(t,[this].concat(c))).state={error:void 0},e}return Object(a.a)(r,[{key:"componentDidCatch",value:function(e,t){var r=this.props.onCatch;r&&r({error:e,info:t})}},{key:"render",value:function(){var e=this.props,t=e.render,r=e.children,n=this.state.error;return t&&n?t:r}}],[{key:"getDerivedStateFromError",value:function(e){return{error:e}}}]),r}(r(11).b.Component);o.displayName="ErrorCatch",o.defaultProps={}},303:function(e,t,r){"use strict";r.d(t,"a",(function(){return j}));var n=r(2),a=r(11),c=r(9),u=r(0),o=r(5),i=r(16),s=r(115),f=r.n(s),l=f.a.NAME_IMAGEPLATFORM,d=(f.a.TYPE_IMAGEPLATFORM,f.a.NAME_CONSUMER_IMAGEPLATFORM),E=f.a.TYPE_CONSUMER_IMAGEPLATFORM,O=f.a.NAME_PROVIDER_IMAGEPLATFORM,b=(f.a.TYPE_PROVIDER_IMAGEPLATFORM,{SVG:"svg",PNG:"png",JPG:"jpg"}),p={NO_PROVIDER:"".concat(l,": Expecting a <").concat(O," /> to be available."),DATA_INVALID:"".concat(l,": Invalid data received."),EXTENSION_INVALID:"".concat(l,": An extension must be provided")},v=r(10);var g=r(30),P=r(19),R=r(306),T=r(41),m=["alt","tag","uuid","caption","onInject","evalScripts","renumerateIRIElements"],A=-1;function I(){return Object(v.jsxs)("svg",{height:"20",viewBox:"0 0 512 512",width:"20",xmlns:"http://www.w3.org/2000/svg",children:[Object(v.jsx)("polygon",{fill:"var(--ci-primary-color, currentColor)",points:"40 472 472 472 472 312 440 312 440 440 72 440 72 312 40 312 40 472"}),Object(v.jsx)("path",{d:"M40,265.755l49.373,25.437,53.82-46.829,56.159,50.528L256,247.052l56.648,47.839,56.159-50.528,53.82,46.829L472,265.755V40H40ZM72,72H440V246.244l-12.738,6.564-58.809-51.171-56.471,50.806L256,205.167l-55.982,47.276-56.471-50.806L84.738,252.808,72,246.244Z",fill:"var(--ci-primary-color, currentColor)"})]})}function j(e){var t=a.b.createContext(void 0),r=Object(n.a)({Context:t},e),s=function(e){var t=e.Context,r=e.getter;function s(e){var s=e.children,f=e.onError,l=e.loading,d=e.loadingImage,E=a.b.useState(void 0),O=Object(i.a)(E,2),b=O[0],g=O[1];return a.b.useEffect((function(){b||Object(o.a)(Object(u.a)().mark((function e(){var t;return Object(u.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,r();case 2:if(t=e.sent){e.next=6;break}return f&&f(new Error(p.DATA_INVALID)),e.abrupt("return");case 6:g(t);case 7:case"end":return e.stop()}}),e)})))()}),[b,f]),b?Object(v.jsx)(t.Provider,{value:{imageData:b,imageLoader:d,imageGet:function(e){return b[e]},imageReset:function(){g(void 0)},imageSet:function(e){var t=e.uuid,r=e.value;g(Object(n.a)(Object(n.a)({},b),{},Object(c.a)({},t,r)))}},children:s}):l}return s.displayName=O,s.defaultProps={loading:null,loadingImage:null},s}(r),f=function(e){var t=e.Context,r=a.b.forwardRef((function(e,r){var c=e.alt,u=void 0===c?"":c,o=e.tag,s=void 0===o?"figure":o,f=e.uuid,l=e.caption,O=e.onInject,j=e.evalScripts,x=e.renumerateIRIElements,N=Object(P.a)(e,m),_=a.b.useRef(!0),h=a.b.useRef(null),M=Object(T.d)({refForwarded:r,refElement:h}),L=a.b.useContext(t),S=a.b.useState(!0),w=Object(i.a)(S,2),C=w[0],y=w[1];return a.b.useEffect((function(){if(h.current&&L){var e=h.current,t=L.imageData[f];if(!t)return y(null),o;var r=t.split(".").slice(A).shift();if(!r)throw new Error(p.EXTENSION_INVALID);if(r!==b.SVG){var n=new window.Image,a=n.style.display;return n.src=t,n.alt=u,n.onload=function(){n.style.display=a,_.current&&y(!1)},n.style.display="none",e.prepend(n),o}var c=document.createElement("svg");return e.prepend(c),c.dataset.src=t,Object(R.a)(c,{evalScripts:j,renumerateIRIElements:x,afterEach:function(t,r){if(t)return e.dataset.error=t.message,void(_.current&&y(null));O&&O(r),e.dataset.injected="true",_.current&&y(!1)}}),o}function o(){_.current=!1,[].concat(Object(g.a)([].slice.call(e.getElementsByTagName("svg"))),Object(g.a)([].slice.call(e.getElementsByTagName("img")))).forEach((function(t){return e.removeChild(t)}))}}),[L,j,O,x,f,u]),L?Object(v.jsx)(T.a,Object(n.a)(Object(n.a)({},N),{},{ref:M,name:d,tag:s,type:E,children:C&&L.imageLoader?L.imageLoader:null===C?Object(v.jsx)(I,{}):l?a.b.isValidElement(l)?l:Object(v.jsx)("figcaption",{"aria-hidden":!0,children:l}):null})):null}));return r.displayName=d,r.defaultProps={},r}(r);return{ContextImage:t,ProviderImagePlatform:s,ImagePlatform:f,useImagePlatform:function(){var e=a.b.useContext(t);if(!e)throw new Error(p.NO_PROVIDER);return e}}}},304:function(e,t,r){"use strict";r.d(t,"a",(function(){return p}));var n=r(2),a=r(19),c=r(11),u=r(0),o=r(5),i=r(16),s=r(1),f=r(66),l=r(10),d=["children","loading","onError"];var E=r(41),O=["uuid","replace","fallback","tag"];var b=["matcher","storageName"];function p(e){var t=e.matcher,r=e.storageName,p=Object(a.a)(e,b),v=c.b.createContext(void 0),g=Object(n.a)({Context:v,matcher:t||f.b,storageName:r||f.d},p),P=function(e){var t=e.Context,r=e.getter,n=e.languages,E=e.storageName,O=e.matcher,b=Object(s.i)(s.h.SESSION);function p(e){var s=e.children,p=e.loading,v=e.onError,g=Object(a.a)(e,d),P=c.b.useState(void 0),R=Object(i.a)(P,2),T=R[0],m=R[1],A=c.b.useState(g.language),I=Object(i.a)(A,2),j=I[0],x=I[1];if(c.b.useEffect((function(){Object(o.a)(Object(u.a)().mark((function e(){var t,n;return Object(u.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!T){e.next=2;break}return e.abrupt("return");case 2:return e.next=4,b.get(E);case 4:if(!(t=e.sent)){e.next=8;break}return m(JSON.parse(t)),e.abrupt("return");case 8:return e.prev=8,e.next=11,r();case 11:if(n=e.sent){e.next=15;break}return v&&v(new Error(f.a.INVALID_RESPONSE)),e.abrupt("return");case 15:return e.next=17,b.set(E,JSON.stringify(n));case 17:m(n),e.next=23;break;case 20:e.prev=20,e.t0=e.catch(8),v&&v(e.t0);case 23:case"end":return e.stop()}}),e,null,[[8,20]])})))()}),[T,v]),!T)return p;var N={textLanguages:n,textLanguage:j,textData:T,textGet:function(e){if(!T)return v&&v(new Error(f.a.INVALID_DATA)),"";var t=e.language||j,r=T[t];return r?(Array.isArray(e.replace)?e.replace:[e.replace]).reduce((function(e,t){return e&&t?e.replace(O,t):e}),r[e.uuid])||e.fallback||"*".concat(e.uuid,"*"):(v&&v(new Error(f.a.INVALID_LANG)),"")},textClear:function(){return Object(o.a)(Object(u.a)().mark((function e(){return Object(u.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,b.del(E);case 2:m(void 0);case 3:case"end":return e.stop()}}),e)})))()},textSetLanguage:function(e){x(e)}};return Object(l.jsx)(t.Provider,{value:N,children:s})}return p.defaultProps={loading:null},p}(g),R=function(e){var t=e.Context;function r(e){var r=e.uuid,u=e.replace,o=e.fallback,i=e.tag,s=Object(a.a)(e,O),d=c.b.useContext(t);if(!d)throw new Error(f.a.NO_PROVIDER);var b=(0,d.textGet)({uuid:r,replace:u,fallback:o});return Object(l.jsx)(E.a,Object(n.a)(Object(n.a)({},s),{},{dangerouslySetInnerHTML:{__html:b},name:f.c,tag:i,type:f.e}))}return r.displayName=f.c,r.defaultProps={tag:"span"},r}(g);return{ContextTextPlatform:v,ProviderTextPlatform:P,TextPlatform:R,useTextPlatform:function(){var e=c.b.useContext(v);if(!e)throw new Error(f.a.NO_PROVIDER);return e}}}},66:function(e,t,r){"use strict";r.d(t,"b",(function(){return c})),r.d(t,"d",(function(){return u})),r.d(t,"c",(function(){return o})),r.d(t,"e",(function(){return i})),r.d(t,"a",(function(){return f}));var n=r(114),a=r.n(n),c="%",u=a.a.NAME_TEXTPLATFORM,o=(a.a.TYPE_TEXTPLATFORM,a.a.NAME_CONSUMER_TEXTPLATFORM),i=a.a.TYPE_CONSUMER_TEXTPLATFORM,s=a.a.NAME_PROVIDER_TEXTPLATFORM,f=(a.a.TYPE_PROVIDER_TEXTPLATFORM,{NO_PROVIDER:"".concat(u,": Expecting a <").concat(s," /> to be available."),INVALID_RESPONSE:"".concat(u,": Invalid response from getter."),INVALID_DATA:"".concat(u,": current data could not be used."),INVALID_LANG:"".concat(u,": provided languages is not available.")})},80:function(e,t,r){"use strict";r.d(t,"a",(function(){return l})),r.d(t,"c",(function(){return d})),r.d(t,"e",(function(){return E}));var n=r(2),a=r(19),c=r(11),u=(r(22),r(258)),o=r.n(u),i=r(10),s=r(119);r.d(t,"b",(function(){return s.b})),r.d(t,"d",(function(){return s.c})),r.d(t,"f",(function(){return s.d})),r.d(t,"g",(function(){return s.e})),r.d(t,"h",(function(){return s.f})),r.d(t,"i",(function(){return s.g})),r.d(t,"j",(function(){return s.h}));var f=["page","children"],l=(o.a.NAME_ROUTER,o.a.TYPE_ROUTER,-1);function d(e){var t=e.defs,u=e.loading;return Array.isArray(t)?t.reduce((function(e,t){var o=t.page,s=t.children,l=Object(a.a)(t,f),E=c.b.lazy((function(){return r(421)("./".concat(o))}));return e.concat(Object(n.a)(Object(n.a)({},l),{},{children:d({defs:s,loading:u}),element:Object(i.jsx)(c.b.Suspense,{fallback:u||null,children:Object(i.jsx)(E,{})})}))}),[]):[]}var E=function(e){return function(t){var r=e.find((function(e){return e.page===t}));if(!r)throw new Error('Could not find a matching path for "'.concat(t,'".'));return r.path}}},99:function(e,t,r){"use strict";r.d(t,"a",(function(){return o}));var n=r(11),a=r(142),c=r(143),u=r.n(c);u.a.NAME_PERSISTOR,u.a.TYPE_PERSISTOR;function o(){var e=n.b.useContext(a.c);if(!e)throw new Error("Could not find a <".concat(a.a," />"));return e}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=main~e0dca4cf.8c0b1c0a.chunk.js.map